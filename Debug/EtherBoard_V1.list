
EtherBoard_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038d0  08016120  08016120  00026120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080199f0  080199f0  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  080199f0  080199f0  000299f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080199f8  080199f8  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080199f8  080199f8  000299f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080199fc  080199fc  000299fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08019a00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5b0  20000204  08019c04  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a7b4  08019c04  0003a7b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003419f  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000668e  00000000  00000000  000643d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019e8  00000000  00000000  0006aa68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  0006c450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d3ee  00000000  00000000  0006dc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024747  00000000  00000000  0009b056  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3b60  00000000  00000000  000bf79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a32fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007404  00000000  00000000  001a3378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016108 	.word	0x08016108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	08016108 	.word	0x08016108

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b972 	b.w	8000dd8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	4688      	mov	r8, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14b      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4615      	mov	r5, r2
 8000b1e:	d967      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0720 	rsb	r7, r2, #32
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b32:	4095      	lsls	r5, r2
 8000b34:	ea47 0803 	orr.w	r8, r7, r3
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b44:	fa1f fc85 	uxth.w	ip, r5
 8000b48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b50:	fb07 f10c 	mul.w	r1, r7, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b5e:	f080 811b 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8118 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b68:	3f02      	subs	r7, #2
 8000b6a:	442b      	add	r3, r5
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8107 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	f240 8104 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b94:	3802      	subs	r0, #2
 8000b96:	442c      	add	r4, r5
 8000b98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	b11e      	cbz	r6, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xbe>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80eb 	beq.w	8000d92 <__udivmoddi4+0x286>
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f783 	clz	r7, r3
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d147      	bne.n	8000c62 <__udivmoddi4+0x156>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd0>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80fa 	bhi.w	8000dd0 <__udivmoddi4+0x2c4>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4698      	mov	r8, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000bea:	e9c6 4800 	strd	r4, r8, [r6]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa0>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xe8>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 808f 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfe:	1b49      	subs	r1, r1, r5
 8000c00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c04:	fa1f f885 	uxth.w	r8, r5
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb08 f10c 	mul.w	r1, r8, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1a59      	subs	r1, r3, r1
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x14c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x14a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80b6 	bhi.w	8000dc2 <__udivmoddi4+0x2b6>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e79f      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c62:	f1c7 0c20 	rsb	ip, r7, #32
 8000c66:	40bb      	lsls	r3, r7
 8000c68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c70:	fa01 f407 	lsl.w	r4, r1, r7
 8000c74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c80:	4325      	orrs	r5, r4
 8000c82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c86:	0c2c      	lsrs	r4, r5, #16
 8000c88:	fb08 3319 	mls	r3, r8, r9, r3
 8000c8c:	fa1f fa8e 	uxth.w	sl, lr
 8000c90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c94:	fb09 f40a 	mul.w	r4, r9, sl
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cac:	f080 8087 	bcs.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f240 8084 	bls.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4473      	add	r3, lr
 8000cbc:	1b1b      	subs	r3, r3, r4
 8000cbe:	b2ad      	uxth	r5, r5
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ccc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d26b      	bcs.n	8000db6 <__udivmoddi4+0x2aa>
 8000cde:	45a2      	cmp	sl, r4
 8000ce0:	d969      	bls.n	8000db6 <__udivmoddi4+0x2aa>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4474      	add	r4, lr
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	eba4 040a 	sub.w	r4, r4, sl
 8000cf2:	454c      	cmp	r4, r9
 8000cf4:	46c2      	mov	sl, r8
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	d354      	bcc.n	8000da4 <__udivmoddi4+0x298>
 8000cfa:	d051      	beq.n	8000da0 <__udivmoddi4+0x294>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d069      	beq.n	8000dd4 <__udivmoddi4+0x2c8>
 8000d00:	ebb1 050a 	subs.w	r5, r1, sl
 8000d04:	eb64 0403 	sbc.w	r4, r4, r3
 8000d08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	40fc      	lsrs	r4, r7
 8000d10:	ea4c 0505 	orr.w	r5, ip, r5
 8000d14:	e9c6 5400 	strd	r5, r4, [r6]
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e747      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f703 	lsr.w	r7, r0, r3
 8000d24:	4095      	lsls	r5, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d32:	4338      	orrs	r0, r7
 8000d34:	0c01      	lsrs	r1, r0, #16
 8000d36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3a:	fa1f f885 	uxth.w	r8, r5
 8000d3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb07 f308 	mul.w	r3, r7, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x256>
 8000d52:	1869      	adds	r1, r5, r1
 8000d54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d58:	d22f      	bcs.n	8000dba <__udivmoddi4+0x2ae>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d92d      	bls.n	8000dba <__udivmoddi4+0x2ae>
 8000d5e:	3f02      	subs	r7, #2
 8000d60:	4429      	add	r1, r5
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	b281      	uxth	r1, r0
 8000d66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d72:	fb00 f308 	mul.w	r3, r0, r8
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x27e>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d80:	d217      	bcs.n	8000db2 <__udivmoddi4+0x2a6>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d915      	bls.n	8000db2 <__udivmoddi4+0x2a6>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d90:	e73b      	b.n	8000c0a <__udivmoddi4+0xfe>
 8000d92:	4637      	mov	r7, r6
 8000d94:	4630      	mov	r0, r6
 8000d96:	e709      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	e6e7      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fb      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000da0:	4541      	cmp	r1, r8
 8000da2:	d2ab      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dac:	3801      	subs	r0, #1
 8000dae:	4613      	mov	r3, r2
 8000db0:	e7a4      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db2:	4660      	mov	r0, ip
 8000db4:	e7e9      	b.n	8000d8a <__udivmoddi4+0x27e>
 8000db6:	4618      	mov	r0, r3
 8000db8:	e795      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dba:	4667      	mov	r7, ip
 8000dbc:	e7d1      	b.n	8000d62 <__udivmoddi4+0x256>
 8000dbe:	4681      	mov	r9, r0
 8000dc0:	e77c      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	442c      	add	r4, r5
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0x14c>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	442b      	add	r3, r5
 8000dce:	e72f      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	e708      	b.n	8000be6 <__udivmoddi4+0xda>
 8000dd4:	4637      	mov	r7, r6
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0xa0>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f001 f981 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f013 fbd0 	bl	80145b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f999 	bl	8002176 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f001 f961 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000030 	.word	0x20000030
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20000000 	.word	0x20000000

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	200008e0 	.word	0x200008e0

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200008e0 	.word	0x200008e0

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_Delay+0x40>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e033      	b.n	8000f82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f013 fb6e 	bl	8014604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d118      	bne.n	8000f74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4a:	f023 0302 	bic.w	r3, r3, #2
 8000f4e:	f043 0202 	orr.w	r2, r3, #2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fa4a 	bl	80013f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f023 0303 	bic.w	r3, r3, #3
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
 8000f72:	e001      	b.n	8000f78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Start_DMA+0x1e>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e0cc      	b.n	8001144 <HAL_ADC_Start_DMA+0x1b8>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d018      	beq.n	8000ff2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd0:	4b5e      	ldr	r3, [pc, #376]	; (800114c <HAL_ADC_Start_DMA+0x1c0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a5e      	ldr	r2, [pc, #376]	; (8001150 <HAL_ADC_Start_DMA+0x1c4>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9a      	lsrs	r2, r3, #18
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fe4:	e002      	b.n	8000fec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f9      	bne.n	8000fe6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 80a0 	bne.w	8001142 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001040:	d106      	bne.n	8001050 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f023 0206 	bic.w	r2, r3, #6
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
 800104e:	e002      	b.n	8001056 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_ADC_Start_DMA+0x1c8>)
 8001060:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001066:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <HAL_ADC_Start_DMA+0x1cc>)
 8001068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106e:	4a3b      	ldr	r2, [pc, #236]	; (800115c <HAL_ADC_Start_DMA+0x1d0>)
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	4a3a      	ldr	r2, [pc, #232]	; (8001160 <HAL_ADC_Start_DMA+0x1d4>)
 8001078:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001082:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001092:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	334c      	adds	r3, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f001 f91a 	bl	80022ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12a      	bne.n	800111a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <HAL_ADC_Start_DMA+0x1d8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d015      	beq.n	80010fa <HAL_ADC_Start_DMA+0x16e>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a25      	ldr	r2, [pc, #148]	; (8001168 <HAL_ADC_Start_DMA+0x1dc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_Start_DMA+0x158>
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_ADC_Start_DMA+0x1c8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00a      	beq.n	80010fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_ADC_Start_DMA+0x1e0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d129      	bne.n	8001142 <HAL_ADC_Start_DMA+0x1b6>
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_ADC_Start_DMA+0x1c8>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d823      	bhi.n	8001142 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d11c      	bne.n	8001142 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	e013      	b.n	8001142 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <HAL_ADC_Start_DMA+0x1d8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10e      	bne.n	8001142 <HAL_ADC_Start_DMA+0x1b6>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d107      	bne.n	8001142 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001140:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000030 	.word	0x20000030
 8001150:	431bde83 	.word	0x431bde83
 8001154:	40012300 	.word	0x40012300
 8001158:	080015e9 	.word	0x080015e9
 800115c:	080016a3 	.word	0x080016a3
 8001160:	080016bf 	.word	0x080016bf
 8001164:	40012000 	.word	0x40012000
 8001168:	40012100 	.word	0x40012100
 800116c:	40012200 	.word	0x40012200

08001170 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e105      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x228>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d925      	bls.n	8001224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	3b1e      	subs	r3, #30
 80011ee:	2207      	movs	r2, #7
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68d9      	ldr	r1, [r3, #12]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	4603      	mov	r3, r0
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4403      	add	r3, r0
 8001216:	3b1e      	subs	r3, #30
 8001218:	409a      	lsls	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	e022      	b.n	800126a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	2207      	movs	r2, #7
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	4603      	mov	r3, r0
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4403      	add	r3, r0
 8001260:	409a      	lsls	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b06      	cmp	r3, #6
 8001270:	d824      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b05      	subs	r3, #5
 8001284:	221f      	movs	r2, #31
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	400a      	ands	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b05      	subs	r3, #5
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	e04c      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d824      	bhi.n	800130e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b23      	subs	r3, #35	; 0x23
 80012d6:	221f      	movs	r2, #31
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43da      	mvns	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	400a      	ands	r2, r1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b23      	subs	r3, #35	; 0x23
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
 800130c:	e023      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b41      	subs	r3, #65	; 0x41
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b41      	subs	r3, #65	; 0x41
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_ADC_ConfigChannel+0x234>)
 8001358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_ADC_ConfigChannel+0x238>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d109      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1cc>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d105      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_ADC_ConfigChannel+0x238>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d123      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b10      	cmp	r3, #16
 8001388:	d003      	beq.n	8001392 <HAL_ADC_ConfigChannel+0x1e6>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b11      	cmp	r3, #17
 8001390:	d11b      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d111      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_ADC_ConfigChannel+0x23c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_ADC_ConfigChannel+0x240>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9a      	lsrs	r2, r3, #18
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013bc:	e002      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f9      	bne.n	80013be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40012300 	.word	0x40012300
 80013e4:	40012000 	.word	0x40012000
 80013e8:	20000030 	.word	0x20000030
 80013ec:	431bde83 	.word	0x431bde83

080013f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f8:	4b79      	ldr	r3, [pc, #484]	; (80015e0 <ADC_Init+0x1f0>)
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	431a      	orrs	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	021a      	lsls	r2, r3, #8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6899      	ldr	r1, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <ADC_Init+0x1f4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d022      	beq.n	80014ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6899      	ldr	r1, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e00f      	b.n	80014ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0202 	bic.w	r2, r2, #2
 80014fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6899      	ldr	r1, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7e1b      	ldrb	r3, [r3, #24]
 8001508:	005a      	lsls	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01b      	beq.n	8001554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800152a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800153a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6859      	ldr	r1, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	3b01      	subs	r3, #1
 8001548:	035a      	lsls	r2, r3, #13
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	e007      	b.n	8001564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	3b01      	subs	r3, #1
 8001580:	051a      	lsls	r2, r3, #20
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015a6:	025a      	lsls	r2, r3, #9
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6899      	ldr	r1, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	029a      	lsls	r2, r3, #10
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	609a      	str	r2, [r3, #8]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40012300 	.word	0x40012300
 80015e4:	0f000001 	.word	0x0f000001

080015e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d13c      	bne.n	800167c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12b      	bne.n	8001674 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001620:	2b00      	cmp	r3, #0
 8001622:	d127      	bne.n	8001674 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800163c:	2b00      	cmp	r3, #0
 800163e:	d119      	bne.n	8001674 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0220 	bic.w	r2, r2, #32
 800164e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fd7b 	bl	8001170 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800167a:	e00e      	b.n	800169a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fd85 	bl	8001198 <HAL_ADC_ErrorCallback>
}
 800168e:	e004      	b.n	800169a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fd67 	bl	8001184 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2240      	movs	r2, #64	; 0x40
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f043 0204 	orr.w	r2, r3, #4
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fd5a 	bl	8001198 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0ed      	b.n	80018da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f012 ffce 	bl	80146ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0202 	bic.w	r2, r2, #2
 800171e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001720:	f7ff fbc2 	bl	8000ea8 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001726:	e012      	b.n	800174e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001728:	f7ff fbbe 	bl	8000ea8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b0a      	cmp	r3, #10
 8001734:	d90b      	bls.n	800174e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2205      	movs	r2, #5
 8001746:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0c5      	b.n	80018da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e5      	bne.n	8001728 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800176c:	f7ff fb9c 	bl	8000ea8 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001772:	e012      	b.n	800179a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001774:	f7ff fb98 	bl	8000ea8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b0a      	cmp	r3, #10
 8001780:	d90b      	bls.n	800179a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2205      	movs	r2, #5
 8001792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e09f      	b.n	80018da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0e5      	beq.n	8001774 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7e1b      	ldrb	r3, [r3, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d108      	bne.n	80017c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7e5b      	ldrb	r3, [r3, #25]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e007      	b.n	80017fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e9b      	ldrb	r3, [r3, #26]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d108      	bne.n	8001816 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0220 	orr.w	r2, r2, #32
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e007      	b.n	8001826 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0220 	bic.w	r2, r2, #32
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7edb      	ldrb	r3, [r3, #27]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0210 	bic.w	r2, r2, #16
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e007      	b.n	8001850 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0210 	orr.w	r2, r2, #16
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7f1b      	ldrb	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0208 	orr.w	r2, r2, #8
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e007      	b.n	800187a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0208 	bic.w	r2, r2, #8
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7f5b      	ldrb	r3, [r3, #29]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d108      	bne.n	8001894 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0204 	orr.w	r2, r2, #4
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e007      	b.n	80018a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0204 	bic.w	r2, r2, #4
 80018a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	ea42 0103 	orr.w	r1, r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018e2:	b480      	push	{r7}
 80018e4:	b087      	sub	sp, #28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d003      	beq.n	8001906 <HAL_CAN_GetRxMessage+0x24>
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 80f3 	bne.w	8001aec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0e7      	b.n	8001afa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d8      	b.n	8001afa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	331b      	adds	r3, #27
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0204 	and.w	r2, r3, #4
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	331b      	adds	r3, #27
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0d5b      	lsrs	r3, r3, #21
 8001976:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e00b      	b.n	8001998 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	331b      	adds	r3, #27
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0202 	and.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	331b      	adds	r3, #27
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 020f 	and.w	r2, r3, #15
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	331b      	adds	r3, #27
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	3304      	adds	r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	331b      	adds	r3, #27
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	3304      	adds	r3, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0a1a      	lsrs	r2, r3, #8
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0c1a      	lsrs	r2, r3, #16
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e1a      	lsrs	r2, r3, #24
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	3303      	adds	r3, #3
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0a1a      	lsrs	r2, r3, #8
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	3305      	adds	r3, #5
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0c1a      	lsrs	r2, r3, #16
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e1a      	lsrs	r2, r3, #24
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	3307      	adds	r3, #7
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	e007      	b.n	8001ae8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e006      	b.n	8001afa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b08a      	sub	sp, #40	; 0x28
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d07c      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d023      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f97d 	bl	8001e68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b6e:	e016      	b.n	8001b9e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	e00c      	b.n	8001b9e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	e002      	b.n	8001b9e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f983 	bl	8001ea4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d024      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f95d 	bl	8001e7c <HAL_CAN_TxMailbox1CompleteCallback>
 8001bc2:	e016      	b.n	8001bf2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd6:	e00c      	b.n	8001bf2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	e002      	b.n	8001bf2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f963 	bl	8001eb8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d024      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f93d 	bl	8001e90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c16:	e016      	b.n	8001c46 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2a:	e00c      	b.n	8001c46 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	e002      	b.n	8001c46 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f943 	bl	8001ecc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2210      	movs	r2, #16
 8001c68:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00b      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2208      	movs	r2, #8
 8001c84:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f934 	bl	8001ef4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f91b 	bl	8001ee0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f916 	bl	8001f1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8fd 	bl	8001f08 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2210      	movs	r2, #16
 8001d28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f900 	bl	8001f30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8f9 	bl	8001f44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d075      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d06c      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03d      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d038      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dd4:	2b30      	cmp	r3, #48	; 0x30
 8001dd6:	d017      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x302>
 8001dd8:	2b30      	cmp	r3, #48	; 0x30
 8001dda:	d804      	bhi.n	8001de6 <HAL_CAN_IRQHandler+0x2e0>
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d009      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x2ee>
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d00c      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001de4:	e024      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001de6:	2b50      	cmp	r3, #80	; 0x50
 8001de8:	d018      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x316>
 8001dea:	2b60      	cmp	r3, #96	; 0x60
 8001dec:	d01b      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x320>
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d00f      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001df2:	e01d      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dfc:	e018      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e06:	e013      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e10:	e00e      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e1a:	e009      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e24:	e004      	b.n	8001e30 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2204      	movs	r2, #4
 8001e46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f87c 	bl	8001f58 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff29 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff3e 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff8e 	bl	8002060 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff31 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa2 	bl	80020c8 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7fe fe84 	bl	8000ea8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e099      	b.n	80022e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021cc:	e00f      	b.n	80021ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ce:	f7fe fe6b 	bl	8000ea8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d908      	bls.n	80021ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e078      	b.n	80022e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e8      	bne.n	80021ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_DMA_Init+0x158>)
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2b04      	cmp	r3, #4
 8002246:	d107      	bne.n	8002258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	4313      	orrs	r3, r2
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f023 0307 	bic.w	r3, r3, #7
 800226e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2b04      	cmp	r3, #4
 8002280:	d117      	bne.n	80022b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fa6f 	bl	8002778 <DMA_CheckFifoParam>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2240      	movs	r2, #64	; 0x40
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ae:	2301      	movs	r3, #1
 80022b0:	e016      	b.n	80022e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa26 	bl	800270c <DMA_CalcBaseAndBitshift>
 80022c0:	4603      	mov	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	223f      	movs	r2, #63	; 0x3f
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	f010803f 	.word	0xf010803f

080022ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_DMA_Start_IT+0x26>
 800230e:	2302      	movs	r3, #2
 8002310:	e040      	b.n	8002394 <HAL_DMA_Start_IT+0xa8>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d12f      	bne.n	8002386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f9b8 	bl	80026b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	223f      	movs	r2, #63	; 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0216 	orr.w	r2, r2, #22
 800235a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0208 	orr.w	r2, r2, #8
 8002372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e005      	b.n	8002392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002392:	7dfb      	ldrb	r3, [r7, #23]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023a8:	4b92      	ldr	r3, [pc, #584]	; (80025f4 <HAL_DMA_IRQHandler+0x258>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a92      	ldr	r2, [pc, #584]	; (80025f8 <HAL_DMA_IRQHandler+0x25c>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2208      	movs	r2, #8
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0204 	bic.w	r2, r2, #4
 80023ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2208      	movs	r2, #8
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2201      	movs	r2, #1
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f043 0202 	orr.w	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2204      	movs	r2, #4
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2204      	movs	r2, #4
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2210      	movs	r2, #16
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d043      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03c      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2210      	movs	r2, #16
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d018      	beq.n	80024de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d024      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
 80024ca:	e01f      	b.n	800250c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
 80024dc:	e016      	b.n	800250c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0208 	bic.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2220      	movs	r2, #32
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 808e 	beq.w	800263a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8086 	beq.w	800263a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2220      	movs	r2, #32
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b05      	cmp	r3, #5
 8002544:	d136      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0216 	bic.w	r2, r2, #22
 8002554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <HAL_DMA_IRQHandler+0x1da>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0208 	bic.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	223f      	movs	r2, #63	; 0x3f
 800258c:	409a      	lsls	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d07d      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
        }
        return;
 80025b2:	e078      	b.n	80026a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01c      	beq.n	80025fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d030      	beq.n	800263a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
 80025e0:	e02b      	b.n	800263a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d027      	beq.n	800263a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
 80025f2:	e022      	b.n	800263a <HAL_DMA_IRQHandler+0x29e>
 80025f4:	20000030 	.word	0x20000030
 80025f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0210 	bic.w	r2, r2, #16
 8002618:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	2b00      	cmp	r3, #0
 8002640:	d032      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d022      	beq.n	8002694 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2205      	movs	r2, #5
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	429a      	cmp	r2, r3
 8002670:	d307      	bcc.n	8002682 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f2      	bne.n	8002666 <HAL_DMA_IRQHandler+0x2ca>
 8002680:	e000      	b.n	8002684 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002682:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
 80026a4:	e000      	b.n	80026a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026a6:	bf00      	nop
    }
  }
}
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop

080026b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d108      	bne.n	80026f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ee:	e007      	b.n	8002700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3b10      	subs	r3, #16
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <DMA_CalcBaseAndBitshift+0x64>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002726:	4a13      	ldr	r2, [pc, #76]	; (8002774 <DMA_CalcBaseAndBitshift+0x68>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d909      	bls.n	800274e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	1d1a      	adds	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	; 0x58
 800274c:	e007      	b.n	800275e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	aaaaaaab 	.word	0xaaaaaaab
 8002774:	08018d74 	.word	0x08018d74

08002778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11f      	bne.n	80027d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d855      	bhi.n	8002844 <DMA_CheckFifoParam+0xcc>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <DMA_CheckFifoParam+0x28>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027c3 	.word	0x080027c3
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	08002845 	.word	0x08002845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d045      	beq.n	8002848 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e042      	b.n	8002848 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ca:	d13f      	bne.n	800284c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e03c      	b.n	800284c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027da:	d121      	bne.n	8002820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d836      	bhi.n	8002850 <DMA_CheckFifoParam+0xd8>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <DMA_CheckFifoParam+0x70>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	080027ff 	.word	0x080027ff
 80027f0:	080027f9 	.word	0x080027f9
 80027f4:	08002811 	.word	0x08002811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e02f      	b.n	800285e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d024      	beq.n	8002854 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280e:	e021      	b.n	8002854 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002818:	d11e      	bne.n	8002858 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281e:	e01b      	b.n	8002858 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d902      	bls.n	800282c <DMA_CheckFifoParam+0xb4>
 8002826:	2b03      	cmp	r3, #3
 8002828:	d003      	beq.n	8002832 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800282a:	e018      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e015      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      break;
 8002842:	e00b      	b.n	800285c <DMA_CheckFifoParam+0xe4>
      break;
 8002844:	bf00      	nop
 8002846:	e00a      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 8002848:	bf00      	nop
 800284a:	e008      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 800284c:	bf00      	nop
 800284e:	e006      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 8002850:	bf00      	nop
 8002852:	e004      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 8002854:	bf00      	nop
 8002856:	e002      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;   
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 800285c:	bf00      	nop
    }
  } 
  
  return status; 
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800287c:	4baa      	ldr	r3, [pc, #680]	; (8002b28 <HAL_ETH_Init+0x2bc>)
 800287e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e185      	b.n	8002b9e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f010 f9a6 	bl	8012bf8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <HAL_ETH_Init+0x2c0>)
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	4a9d      	ldr	r2, [pc, #628]	; (8002b2c <HAL_ETH_Init+0x2c0>)
 80028b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ba:	6453      	str	r3, [r2, #68]	; 0x44
 80028bc:	4b9b      	ldr	r3, [pc, #620]	; (8002b2c <HAL_ETH_Init+0x2c0>)
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028c8:	4b99      	ldr	r3, [pc, #612]	; (8002b30 <HAL_ETH_Init+0x2c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a98      	ldr	r2, [pc, #608]	; (8002b30 <HAL_ETH_Init+0x2c4>)
 80028ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028d2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80028d4:	4b96      	ldr	r3, [pc, #600]	; (8002b30 <HAL_ETH_Init+0x2c4>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4994      	ldr	r1, [pc, #592]	; (8002b30 <HAL_ETH_Init+0x2c4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80028fa:	f7fe fad5 	bl	8000ea8 <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002900:	e011      	b.n	8002926 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002902:	f7fe fad1 	bl	8000ea8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002910:	d909      	bls.n	8002926 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e13b      	b.n	8002b9e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e4      	bne.n	8002902 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f023 031c 	bic.w	r3, r3, #28
 8002946:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002948:	f002 f800 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800294c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4a78      	ldr	r2, [pc, #480]	; (8002b34 <HAL_ETH_Init+0x2c8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d908      	bls.n	8002968 <HAL_ETH_Init+0xfc>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4a77      	ldr	r2, [pc, #476]	; (8002b38 <HAL_ETH_Init+0x2cc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d804      	bhi.n	8002968 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e027      	b.n	80029b8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4a73      	ldr	r2, [pc, #460]	; (8002b38 <HAL_ETH_Init+0x2cc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d908      	bls.n	8002982 <HAL_ETH_Init+0x116>
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4a72      	ldr	r2, [pc, #456]	; (8002b3c <HAL_ETH_Init+0x2d0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d804      	bhi.n	8002982 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f043 030c 	orr.w	r3, r3, #12
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e01a      	b.n	80029b8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4a6d      	ldr	r2, [pc, #436]	; (8002b3c <HAL_ETH_Init+0x2d0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d903      	bls.n	8002992 <HAL_ETH_Init+0x126>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4a6c      	ldr	r2, [pc, #432]	; (8002b40 <HAL_ETH_Init+0x2d4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d911      	bls.n	80029b6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4a6a      	ldr	r2, [pc, #424]	; (8002b40 <HAL_ETH_Init+0x2d4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d908      	bls.n	80029ac <HAL_ETH_Init+0x140>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_ETH_Init+0x2d8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d804      	bhi.n	80029ac <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e005      	b.n	80029b8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	e000      	b.n	80029b8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80029b6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80029c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029c4:	2100      	movs	r1, #0
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fb9a 	bl	8003100 <HAL_ETH_WritePHYRegister>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80029d6:	6939      	ldr	r1, [r7, #16]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fc27 	bl	800322c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0d9      	b.n	8002b9e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80029ea:	20ff      	movs	r0, #255	; 0xff
 80029ec:	f7fe fa68 	bl	8000ec0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a7 	beq.w	8002b48 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80029fa:	f7fe fa55 	bl	8000ea8 <HAL_GetTick>
 80029fe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	461a      	mov	r2, r3
 8002a06:	2101      	movs	r1, #1
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fb11 	bl	8003030 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002a0e:	f7fe fa4b 	bl	8000ea8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d90f      	bls.n	8002a40 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002a24:	6939      	ldr	r1, [r7, #16]
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fc00 	bl	800322c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0ae      	b.n	8002b9e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0da      	beq.n	8002a00 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a4e:	2100      	movs	r1, #0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fb55 	bl	8003100 <HAL_ETH_WritePHYRegister>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a60:	6939      	ldr	r1, [r7, #16]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fbe2 	bl	800322c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002a70:	2301      	movs	r3, #1
 8002a72:	e094      	b.n	8002b9e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fa18 	bl	8000ea8 <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2101      	movs	r1, #1
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fad4 	bl	8003030 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002a88:	f7fe fa0e 	bl	8000ea8 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d90f      	bls.n	8002aba <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002a9e:	6939      	ldr	r1, [r7, #16]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fbc3 	bl	800322c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e071      	b.n	8002b9e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0da      	beq.n	8002a7a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2110      	movs	r1, #16
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 faaf 	bl	8003030 <HAL_ETH_ReadPHYRegister>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002adc:	6939      	ldr	r1, [r7, #16]
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fba4 	bl	800322c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002aec:	2301      	movs	r3, #1
 8002aee:	e056      	b.n	8002b9e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e002      	b.n	8002b0a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	e037      	b.n	8002b8c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	e032      	b.n	8002b8c <HAL_ETH_Init+0x320>
 8002b26:	bf00      	nop
 8002b28:	03938700 	.word	0x03938700
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	01312cff 	.word	0x01312cff
 8002b38:	02160ebf 	.word	0x02160ebf
 8002b3c:	039386ff 	.word	0x039386ff
 8002b40:	05f5e0ff 	.word	0x05f5e0ff
 8002b44:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 facd 	bl	8003100 <HAL_ETH_WritePHYRegister>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002b70:	6939      	ldr	r1, [r7, #16]
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fb5a 	bl	800322c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e00c      	b.n	8002b9e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002b84:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002b88:	f7fe f99a 	bl	8000ec0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002b8c:	6939      	ldr	r1, [r7, #16]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fb4c 	bl	800322c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop

08002ba8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ETH_DMATxDescListInit+0x20>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e052      	b.n	8002c6e <HAL_ETH_DMATxDescListInit+0xc6>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e030      	b.n	8002c46 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	015b      	lsls	r3, r3, #5
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4413      	add	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bf4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d208      	bcs.n	8002c3a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	015b      	lsls	r3, r3, #5
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	461a      	mov	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	e002      	b.n	8002c40 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3ca      	bcc.n	8002be4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c58:	3310      	adds	r3, #16
 8002c5a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_ETH_DMARxDescListInit+0x20>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e056      	b.n	8002d48 <HAL_ETH_DMARxDescListInit+0xce>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e034      	b.n	8002d20 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cc6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002cce:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	461a      	mov	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d208      	bcs.n	8002d14 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	e002      	b.n	8002d1a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3c6      	bcc.n	8002cb6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d32:	330c      	adds	r3, #12
 8002d34:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ETH_TransmitFrame+0x24>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0cd      	b.n	8002f14 <HAL_ETH_TransmitFrame+0x1c0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0b8      	b.n	8002f14 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da09      	bge.n	8002dc0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2212      	movs	r2, #18
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0a9      	b.n	8002f14 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d915      	bls.n	8002df6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	4a54      	ldr	r2, [pc, #336]	; (8002f20 <HAL_ETH_TransmitFrame+0x1cc>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0a9b      	lsrs	r3, r3, #10
 8002dd4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_ETH_TransmitFrame+0x1cc>)
 8002dda:	fba3 1302 	umull	r1, r3, r3, r2
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e001      	b.n	8002dfa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002df6:	2301      	movs	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d11c      	bne.n	8002e3a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002e0e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002e1a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e2a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e38:	e04b      	b.n	8002ed2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e044      	b.n	8002eca <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e4e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e64:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002e6e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d116      	bne.n	8002ea8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e88:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <HAL_ETH_TransmitFrame+0x1d0>)
 8002e8e:	fb02 f203 	mul.w	r2, r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002e9a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ea6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eb6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d3b6      	bcc.n	8002e40 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	3314      	adds	r3, #20
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eee:	3314      	adds	r3, #20
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efc:	3304      	adds	r3, #4
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	ac02b00b 	.word	0xac02b00b
 8002f24:	fffffa0c 	.word	0xfffffa0c

08002f28 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_ETH_GetReceivedFrame+0x1a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e070      	b.n	8003024 <HAL_ETH_GetReceivedFrame+0xfc>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db5a      	blt.n	8003012 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d030      	beq.n	8002fcc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d103      	bne.n	8002f84 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002f98:	3b04      	subs	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e02b      	b.n	8003024 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffa:	e00a      	b.n	8003012 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	460b      	mov	r3, r1
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b82      	cmp	r3, #130	; 0x82
 8003050:	d101      	bne.n	8003056 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e050      	b.n	80030f8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2282      	movs	r2, #130	; 0x82
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 031c 	and.w	r3, r3, #28
 800306c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8a1b      	ldrh	r3, [r3, #16]
 8003072:	02db      	lsls	r3, r3, #11
 8003074:	b29b      	uxth	r3, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800307c:	897b      	ldrh	r3, [r7, #10]
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 0302 	bic.w	r3, r3, #2
 8003090:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80030a2:	f7fd ff01 	bl	8000ea8 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030a8:	e015      	b.n	80030d6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80030aa:	f7fd fefd 	bl	8000ea8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d309      	bcc.n	80030ce <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e014      	b.n	80030f8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e4      	bne.n	80030aa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	460b      	mov	r3, r1
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b42      	cmp	r3, #66	; 0x42
 8003120:	d101      	bne.n	8003126 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	e04e      	b.n	80031c4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2242      	movs	r2, #66	; 0x42
 800312a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 031c 	and.w	r3, r3, #28
 800313c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8a1b      	ldrh	r3, [r3, #16]
 8003142:	02db      	lsls	r3, r3, #11
 8003144:	b29b      	uxth	r3, r3
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	019b      	lsls	r3, r3, #6
 8003150:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f7fd fe94 	bl	8000ea8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003182:	e015      	b.n	80031b0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003184:	f7fd fe90 	bl	8000ea8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003192:	d309      	bcc.n	80031a8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e00d      	b.n	80031c4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e4      	bne.n	8003184 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ETH_Start+0x16>
 80031de:	2302      	movs	r3, #2
 80031e0:	e01f      	b.n	8003222 <HAL_ETH_Start+0x56>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa1c 	bl	8003630 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fa36 	bl	800366a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa80 	bl	8003704 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fa4d 	bl	80036a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa62 	bl	80036d4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0b0      	sub	sp, #192	; 0xc0
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003248:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003250:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800325a:	2300      	movs	r3, #0
 800325c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003276:	663b      	str	r3, [r7, #96]	; 0x60
 8003278:	e001      	b.n	800327e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800327a:	2300      	movs	r3, #0
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800327e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003282:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003288:	2300      	movs	r3, #0
 800328a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003298:	2340      	movs	r3, #64	; 0x40
 800329a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003300:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003304:	4bac      	ldr	r3, [pc, #688]	; (80035b8 <ETH_MACDMAConfig+0x38c>)
 8003306:	4013      	ands	r3, r2
 8003308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800330c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003310:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003314:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003318:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800331e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003322:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003326:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800332c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800332e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003330:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003334:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003338:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800333a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800333c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800333e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003340:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003342:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003354:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003360:	2001      	movs	r0, #1
 8003362:	f7fd fdad 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800336e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003370:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003374:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003378:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800337a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800337e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003384:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800338a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800338c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003390:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003394:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800339c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800339e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f7fd fd88 	bl	8000ec0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80033cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80033d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80033e0:	4013      	ands	r3, r2
 80033e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80033e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80033ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80033f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80033f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80033f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80033f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80033fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80033fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003402:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003408:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800340a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800341c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003428:	2001      	movs	r0, #1
 800342a:	f7fd fd49 	bl	8000ec0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003436:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003438:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800343c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd fd34 	bl	8000ec0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003460:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003474:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003486:	2304      	movs	r3, #4
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800348a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800349c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034aa:	2300      	movs	r3, #0
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b6:	3318      	adds	r3, #24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034c2:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <ETH_MACDMAConfig+0x390>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80034cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80034d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80034d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80034d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80034d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80034d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80034da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80034dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80034de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80034e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80034e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80034e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80034ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fe:	3318      	adds	r3, #24
 8003500:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003504:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350e:	3318      	adds	r3, #24
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003516:	2001      	movs	r0, #1
 8003518:	f7fd fcd2 	bl	8000ec0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003524:	3318      	adds	r3, #24
 8003526:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800352a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800352c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003530:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003534:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003538:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800353c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003542:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003546:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003554:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003564:	2001      	movs	r0, #1
 8003566:	f7fd fcab 	bl	8000ec0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003576:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10f      	bne.n	80035a0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003588:	331c      	adds	r3, #28
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359c:	331c      	adds	r3, #28
 800359e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	461a      	mov	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f809 	bl	80035c0 <ETH_MACAddressConfig>
}
 80035ae:	bf00      	nop
 80035b0:	37c0      	adds	r7, #192	; 0xc0
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	ff20810f 	.word	0xff20810f
 80035bc:	f8de3f23 	.word	0xf8de3f23

080035c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3305      	adds	r3, #5
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	3204      	adds	r2, #4
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <ETH_MACAddressConfig+0x68>)
 80035e2:	4413      	add	r3, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3303      	adds	r3, #3
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	061a      	lsls	r2, r3, #24
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3302      	adds	r3, #2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3301      	adds	r3, #1
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4313      	orrs	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <ETH_MACAddressConfig+0x6c>)
 8003612:	4413      	add	r3, r2
 8003614:	461a      	mov	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6013      	str	r3, [r2, #0]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40028040 	.word	0x40028040
 800362c:	40028044 	.word	0x40028044

08003630 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003654:	2001      	movs	r0, #1
 8003656:	f000 f87f 	bl	8003758 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0204 	orr.w	r2, r2, #4
 8003684:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800368e:	2001      	movs	r0, #1
 8003690:	f000 f862 	bl	8003758 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b4:	3318      	adds	r3, #24
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	3318      	adds	r3, #24
 80036c6:	601a      	str	r2, [r3, #0]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e4:	3318      	adds	r3, #24
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0202 	orr.w	r2, r2, #2
 80036f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f4:	3318      	adds	r3, #24
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003718:	3318      	adds	r3, #24
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	3318      	adds	r3, #24
 800372a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003734:	3318      	adds	r3, #24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800373a:	2001      	movs	r0, #1
 800373c:	f000 f80c 	bl	8003758 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374a:	3318      	adds	r3, #24
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <ETH_Delay+0x34>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <ETH_Delay+0x38>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0a5b      	lsrs	r3, r3, #9
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003774:	bf00      	nop
  } 
  while (Delay --);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	60fa      	str	r2, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f9      	bne.n	8003774 <ETH_Delay+0x1c>
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000030 	.word	0x20000030
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037a6:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_FLASH_Program+0xa0>)
 80037a8:	7e1b      	ldrb	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_FLASH_Program+0x1e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e03b      	b.n	800382a <HAL_FLASH_Program+0x96>
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_FLASH_Program+0xa0>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037bc:	f000 f87c 	bl	80038b8 <FLASH_WaitForLastOperation>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d12b      	bne.n	8003822 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80037d0:	783b      	ldrb	r3, [r7, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	68b8      	ldr	r0, [r7, #8]
 80037d6:	f000 f925 	bl	8003a24 <FLASH_Program_Byte>
 80037da:	e016      	b.n	800380a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d105      	bne.n	80037ee <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80037e2:	883b      	ldrh	r3, [r7, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f000 f8f8 	bl	80039dc <FLASH_Program_HalfWord>
 80037ec:	e00d      	b.n	800380a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d105      	bne.n	8003800 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	68b8      	ldr	r0, [r7, #8]
 80037fa:	f000 f8cd 	bl	8003998 <FLASH_Program_Word>
 80037fe:	e004      	b.n	800380a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003804:	68b8      	ldr	r0, [r7, #8]
 8003806:	f000 f897 	bl	8003938 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800380a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800380e:	f000 f853 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_FLASH_Program+0xa4>)
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4a07      	ldr	r2, [pc, #28]	; (8003838 <HAL_FLASH_Program+0xa4>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_FLASH_Program+0xa0>)
 8003824:	2200      	movs	r2, #0
 8003826:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200008e4 	.word	0x200008e4
 8003838:	40023c00 	.word	0x40023c00

0800383c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_FLASH_Unlock+0x38>)
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	da0b      	bge.n	8003866 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_FLASH_Unlock+0x38>)
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_FLASH_Unlock+0x3c>)
 8003852:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_FLASH_Unlock+0x38>)
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_FLASH_Unlock+0x40>)
 8003858:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_FLASH_Unlock+0x38>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	da01      	bge.n	8003866 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003866:	79fb      	ldrb	r3, [r7, #7]
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40023c00 	.word	0x40023c00
 8003878:	45670123 	.word	0x45670123
 800387c:	cdef89ab 	.word	0xcdef89ab

08003880 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_FLASH_Lock+0x1c>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_FLASH_Lock+0x1c>)
 800388a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800388e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_FLASH_GetError+0x14>)
 80038a6:	69db      	ldr	r3, [r3, #28]
}  
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	200008e4 	.word	0x200008e4

080038b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <FLASH_WaitForLastOperation+0x78>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80038ca:	f7fd faed 	bl	8000ea8 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80038d0:	e010      	b.n	80038f4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d00c      	beq.n	80038f4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <FLASH_WaitForLastOperation+0x38>
 80038e0:	f7fd fae2 	bl	8000ea8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d201      	bcs.n	80038f4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e019      	b.n	8003928 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <FLASH_WaitForLastOperation+0x7c>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e8      	bne.n	80038d2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <FLASH_WaitForLastOperation+0x7c>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <FLASH_WaitForLastOperation+0x7c>)
 800390e:	2201      	movs	r2, #1
 8003910:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <FLASH_WaitForLastOperation+0x7c>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800391e:	f000 f8a3 	bl	8003a68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
  
}  
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200008e4 	.word	0x200008e4
 8003934:	40023c00 	.word	0x40023c00

08003938 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003938:	b490      	push	{r4, r7}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <FLASH_Program_DoubleWord+0x5c>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <FLASH_Program_DoubleWord+0x5c>)
 800394a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <FLASH_Program_DoubleWord+0x5c>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <FLASH_Program_DoubleWord+0x5c>)
 8003956:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800395a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <FLASH_Program_DoubleWord+0x5c>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <FLASH_Program_DoubleWord+0x5c>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800396e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003972:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f04f 0400 	mov.w	r4, #0
 800397e:	0013      	movs	r3, r2
 8003980:	2400      	movs	r4, #0
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	3204      	adds	r2, #4
 8003986:	6013      	str	r3, [r2, #0]
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bc90      	pop	{r4, r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023c00 	.word	0x40023c00

08003998 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <FLASH_Program_Word+0x40>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <FLASH_Program_Word+0x40>)
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <FLASH_Program_Word+0x40>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <FLASH_Program_Word+0x40>)
 80039b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <FLASH_Program_Word+0x40>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <FLASH_Program_Word+0x40>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40023c00 	.word	0x40023c00

080039dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <FLASH_Program_HalfWord+0x44>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <FLASH_Program_HalfWord+0x44>)
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <FLASH_Program_HalfWord+0x44>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <FLASH_Program_HalfWord+0x44>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <FLASH_Program_HalfWord+0x44>)
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <FLASH_Program_HalfWord+0x44>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	801a      	strh	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00

08003a24 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <FLASH_Program_Byte+0x40>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	4a0b      	ldr	r2, [pc, #44]	; (8003a64 <FLASH_Program_Byte+0x40>)
 8003a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <FLASH_Program_Byte+0x40>)
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <FLASH_Program_Byte+0x40>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <FLASH_Program_Byte+0x40>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <FLASH_Program_Byte+0x40>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	701a      	strb	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023c00 	.word	0x40023c00

08003a68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f043 0310 	orr.w	r3, r3, #16
 8003a80:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003a82:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003a86:	2210      	movs	r2, #16
 8003a88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f043 0308 	orr.w	r3, r3, #8
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003aa0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003aa8:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003abe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f043 0302 	orr.w	r3, r3, #2
 8003ada:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003adc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f043 0320 	orr.w	r3, r3, #32
 8003af8:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <FLASH_SetErrorCode+0xa8>)
 8003afa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <FLASH_SetErrorCode+0xa4>)
 8003afe:	2202      	movs	r2, #2
 8003b00:	60da      	str	r2, [r3, #12]
  }
}
 8003b02:	bf00      	nop
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40023c00 	.word	0x40023c00
 8003b10:	200008e4 	.word	0x200008e4

08003b14 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_FLASHEx_Erase+0xd8>)
 8003b28:	7e1b      	ldrb	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_FLASHEx_Erase+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e058      	b.n	8003be4 <HAL_FLASHEx_Erase+0xd0>
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_FLASHEx_Erase+0xd8>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b3c:	f7ff febc 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003b40:	4603      	mov	r3, r0
 8003b42:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d148      	bne.n	8003bdc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d115      	bne.n	8003b86 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 f844 	bl	8003bf4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b70:	f7ff fea2 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003b74:	4603      	mov	r3, r0
 8003b76:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_FLASHEx_Erase+0xdc>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <HAL_FLASHEx_Erase+0xdc>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	6113      	str	r3, [r2, #16]
 8003b84:	e028      	b.n	8003bd8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	e01c      	b.n	8003bc8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	68b8      	ldr	r0, [r7, #8]
 8003b98:	f000 f850 	bl	8003c3c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ba0:	f7ff fe8a 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_FLASHEx_Erase+0xdc>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <HAL_FLASHEx_Erase+0xdc>)
 8003bae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003bb2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	601a      	str	r2, [r3, #0]
          break;
 8003bc0:	e00a      	b.n	8003bd8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d3da      	bcc.n	8003b8e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003bd8:	f000 f878 	bl	8003ccc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_FLASHEx_Erase+0xd8>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	761a      	strb	r2, [r3, #24]

  return status;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200008e4 	.word	0x200008e4
 8003bf0:	40023c00 	.word	0x40023c00

08003bf4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <FLASH_MassErase+0x44>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <FLASH_MassErase+0x44>)
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <FLASH_MassErase+0x44>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <FLASH_MassErase+0x44>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <FLASH_MassErase+0x44>)
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	4313      	orrs	r3, r2
 8003c22:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <FLASH_MassErase+0x44>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6113      	str	r3, [r2, #16]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00

08003c3c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e010      	b.n	8003c7a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d103      	bne.n	8003c66 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e009      	b.n	8003c7a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d103      	bne.n	8003c74 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	490f      	ldr	r1, [pc, #60]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003c98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <FLASH_Erase_Sector+0x8c>)
 8003cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cba:	6113      	str	r3, [r2, #16]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40023c00 	.word	0x40023c00

08003ccc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003cd0:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003ce2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003cee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cfe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d017      	beq.n	8003d48 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d22:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d3a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <FLASH_FlushCaches+0x88>)
 8003d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d46:	6013      	str	r3, [r2, #0]
  }
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00

08003d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	e16b      	b.n	800404c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d74:	2201      	movs	r2, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	f040 815a 	bne.w	8004046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d00b      	beq.n	8003db2 <HAL_GPIO_Init+0x5a>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003da6:	2b11      	cmp	r3, #17
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b12      	cmp	r3, #18
 8003db0:	d130      	bne.n	8003e14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de8:	2201      	movs	r2, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 0201 	and.w	r2, r3, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0xfc>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b12      	cmp	r3, #18
 8003e52:	d123      	bne.n	8003e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	08da      	lsrs	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3208      	adds	r2, #8
 8003e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3208      	adds	r2, #8
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0203 	and.w	r2, r3, #3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80b4 	beq.w	8004046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	4b5f      	ldr	r3, [pc, #380]	; (8004060 <HAL_GPIO_Init+0x308>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	4a5e      	ldr	r2, [pc, #376]	; (8004060 <HAL_GPIO_Init+0x308>)
 8003ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eec:	6453      	str	r3, [r2, #68]	; 0x44
 8003eee:	4b5c      	ldr	r3, [pc, #368]	; (8004060 <HAL_GPIO_Init+0x308>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003efa:	4a5a      	ldr	r2, [pc, #360]	; (8004064 <HAL_GPIO_Init+0x30c>)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	3302      	adds	r3, #2
 8003f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a51      	ldr	r2, [pc, #324]	; (8004068 <HAL_GPIO_Init+0x310>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d02b      	beq.n	8003f7e <HAL_GPIO_Init+0x226>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a50      	ldr	r2, [pc, #320]	; (800406c <HAL_GPIO_Init+0x314>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d025      	beq.n	8003f7a <HAL_GPIO_Init+0x222>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4f      	ldr	r2, [pc, #316]	; (8004070 <HAL_GPIO_Init+0x318>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01f      	beq.n	8003f76 <HAL_GPIO_Init+0x21e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_GPIO_Init+0x31c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d019      	beq.n	8003f72 <HAL_GPIO_Init+0x21a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_GPIO_Init+0x320>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_GPIO_Init+0x216>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_GPIO_Init+0x324>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00d      	beq.n	8003f6a <HAL_GPIO_Init+0x212>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a4b      	ldr	r2, [pc, #300]	; (8004080 <HAL_GPIO_Init+0x328>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <HAL_GPIO_Init+0x20e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <HAL_GPIO_Init+0x32c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_GPIO_Init+0x20a>
 8003f5e:	2307      	movs	r3, #7
 8003f60:	e00e      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f62:	2308      	movs	r3, #8
 8003f64:	e00c      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f66:	2306      	movs	r3, #6
 8003f68:	e00a      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f6a:	2305      	movs	r3, #5
 8003f6c:	e008      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	e006      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f72:	2303      	movs	r3, #3
 8003f74:	e004      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e002      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_GPIO_Init+0x228>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	f002 0203 	and.w	r2, r2, #3
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	4093      	lsls	r3, r2
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f90:	4934      	ldr	r1, [pc, #208]	; (8004064 <HAL_GPIO_Init+0x30c>)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_GPIO_Init+0x330>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc2:	4a31      	ldr	r2, [pc, #196]	; (8004088 <HAL_GPIO_Init+0x330>)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_GPIO_Init+0x330>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fec:	4a26      	ldr	r2, [pc, #152]	; (8004088 <HAL_GPIO_Init+0x330>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff2:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_GPIO_Init+0x330>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_GPIO_Init+0x330>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_GPIO_Init+0x330>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004040:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_GPIO_Init+0x330>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	f67f ae90 	bls.w	8003d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004054:	bf00      	nop
 8004056:	3724      	adds	r7, #36	; 0x24
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40023800 	.word	0x40023800
 8004064:	40013800 	.word	0x40013800
 8004068:	40020000 	.word	0x40020000
 800406c:	40020400 	.word	0x40020400
 8004070:	40020800 	.word	0x40020800
 8004074:	40020c00 	.word	0x40020c00
 8004078:	40021000 	.word	0x40021000
 800407c:	40021400 	.word	0x40021400
 8004080:	40021800 	.word	0x40021800
 8004084:	40021c00 	.word	0x40021c00
 8004088:	40013c00 	.word	0x40013c00

0800408c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
 8004098:	4613      	mov	r3, r2
 800409a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040a8:	e003      	b.n	80040b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	401a      	ands	r2, r3
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d104      	bne.n	80040e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	041a      	lsls	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80040e0:	e002      	b.n	80040e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e25b      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d075      	beq.n	80041fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004112:	4ba3      	ldr	r3, [pc, #652]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00c      	beq.n	8004138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411e:	4ba0      	ldr	r3, [pc, #640]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004126:	2b08      	cmp	r3, #8
 8004128:	d112      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b9d      	ldr	r3, [pc, #628]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004136:	d10b      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	4b99      	ldr	r3, [pc, #612]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05b      	beq.n	80041fc <HAL_RCC_OscConfig+0x108>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d157      	bne.n	80041fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e236      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d106      	bne.n	8004168 <HAL_RCC_OscConfig+0x74>
 800415a:	4b91      	ldr	r3, [pc, #580]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a90      	ldr	r2, [pc, #576]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e01d      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x98>
 8004172:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a8a      	ldr	r2, [pc, #552]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a87      	ldr	r2, [pc, #540]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 800418c:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a83      	ldr	r2, [pc, #524]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800419e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fc fe7c 	bl	8000ea8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fc fe78 	bl	8000ea8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1fb      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0xc0>
 80041d2:	e014      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fc fe68 	bl	8000ea8 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fc fe64 	bl	8000ea8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1e7      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0xe8>
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800420a:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b62      	ldr	r3, [pc, #392]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421e:	2b08      	cmp	r3, #8
 8004220:	d11c      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e1bb      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4952      	ldr	r1, [pc, #328]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	e03a      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fc fe1d 	bl	8000ea8 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004272:	f7fc fe19 	bl	8000ea8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e19c      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4940      	ldr	r1, [pc, #256]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
 80042a4:	e015      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a6:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fc fdfc 	bl	8000ea8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fc fdf8 	bl	8000ea8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e17b      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	4b36      	ldr	r3, [pc, #216]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d030      	beq.n	8004340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_RCC_OscConfig+0x2b4>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fc fddc 	bl	8000ea8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f4:	f7fc fdd8 	bl	8000ea8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e15b      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x200>
 8004312:	e015      	b.n	8004340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_OscConfig+0x2b4>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fc fdc5 	bl	8000ea8 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004322:	f7fc fdc1 	bl	8000ea8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e144      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a0 	beq.w	800448e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x2b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d121      	bne.n	80043ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_RCC_OscConfig+0x2b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a07      	ldr	r2, [pc, #28]	; (80043ac <HAL_RCC_OscConfig+0x2b8>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004396:	f7fc fd87 	bl	8000ea8 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	e011      	b.n	80043c2 <HAL_RCC_OscConfig+0x2ce>
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	42470000 	.word	0x42470000
 80043a8:	42470e80 	.word	0x42470e80
 80043ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b0:	f7fc fd7a 	bl	8000ea8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0fd      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_OscConfig+0x4d4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x2f0>
 80043d6:	4b7d      	ldr	r3, [pc, #500]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6713      	str	r3, [r2, #112]	; 0x70
 80043e2:	e01c      	b.n	800441e <HAL_RCC_OscConfig+0x32a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d10c      	bne.n	8004406 <HAL_RCC_OscConfig+0x312>
 80043ec:	4b77      	ldr	r3, [pc, #476]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	4a76      	ldr	r2, [pc, #472]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80043f2:	f043 0304 	orr.w	r3, r3, #4
 80043f6:	6713      	str	r3, [r2, #112]	; 0x70
 80043f8:	4b74      	ldr	r3, [pc, #464]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	4a73      	ldr	r2, [pc, #460]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	; 0x70
 8004404:	e00b      	b.n	800441e <HAL_RCC_OscConfig+0x32a>
 8004406:	4b71      	ldr	r3, [pc, #452]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a70      	ldr	r2, [pc, #448]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
 8004412:	4b6e      	ldr	r3, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a6d      	ldr	r2, [pc, #436]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d015      	beq.n	8004452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fc fd3f 	bl	8000ea8 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	e00a      	b.n	8004444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fc fd3b 	bl	8000ea8 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0bc      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ee      	beq.n	800442e <HAL_RCC_OscConfig+0x33a>
 8004450:	e014      	b.n	800447c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004452:	f7fc fd29 	bl	8000ea8 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004458:	e00a      	b.n	8004470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fc fd25 	bl	8000ea8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0a6      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004470:	4b56      	ldr	r3, [pc, #344]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ee      	bne.n	800445a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d105      	bne.n	800448e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004482:	4b52      	ldr	r3, [pc, #328]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	4a51      	ldr	r2, [pc, #324]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8092 	beq.w	80045bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004498:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d05c      	beq.n	800455e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d141      	bne.n	8004530 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ac:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <HAL_RCC_OscConfig+0x4dc>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fc fcf9 	bl	8000ea8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fc fcf5 	bl	8000ea8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e078      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	019b      	lsls	r3, r3, #6
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	3b01      	subs	r3, #1
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	4933      	ldr	r1, [pc, #204]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <HAL_RCC_OscConfig+0x4dc>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fc fcce 	bl	8000ea8 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004510:	f7fc fcca 	bl	8000ea8 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e04d      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x41c>
 800452e:	e045      	b.n	80045bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <HAL_RCC_OscConfig+0x4dc>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fc fcb7 	bl	8000ea8 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453e:	f7fc fcb3 	bl	8000ea8 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e036      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x44a>
 800455c:	e02e      	b.n	80045bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e029      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_RCC_OscConfig+0x4d8>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	429a      	cmp	r2, r3
 800457c:	d11c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d115      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004592:	4013      	ands	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004598:	4293      	cmp	r3, r2
 800459a:	d10d      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000
 80045cc:	40023800 	.word	0x40023800
 80045d0:	42470060 	.word	0x42470060

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0cc      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b68      	ldr	r3, [pc, #416]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d90c      	bls.n	8004610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b8      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a58      	ldr	r2, [pc, #352]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a52      	ldr	r2, [pc, #328]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800464a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	494d      	ldr	r1, [pc, #308]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d044      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e067      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4934      	ldr	r1, [pc, #208]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c4:	f7fc fbf0 	bl	8000ea8 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fc fbec 	bl	8000ea8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e04f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20c      	bcs.n	800471c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e032      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4916      	ldr	r1, [pc, #88]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800475a:	f000 f821 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 800475e:	4601      	mov	r1, r0
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	5cd3      	ldrb	r3, [r2, r3]
 800476e:	fa21 f303 	lsr.w	r3, r1, r3
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fc fb50 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023c00 	.word	0x40023c00
 8004790:	40023800 	.word	0x40023800
 8004794:	08019834 	.word	0x08019834
 8004798:	20000030 	.word	0x20000030
 800479c:	20000000 	.word	0x20000000

080047a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	2300      	movs	r3, #0
 80047b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b6:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d007      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x32>
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d008      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x38>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80b4 	bne.w	8004934 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b5e      	ldr	r3, [pc, #376]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047ce:	60bb      	str	r3, [r7, #8]
       break;
 80047d0:	e0b3      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d2:	4b5d      	ldr	r3, [pc, #372]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047d4:	60bb      	str	r3, [r7, #8]
      break;
 80047d6:	e0b0      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d8:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e2:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04a      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	f04f 0400 	mov.w	r4, #0
 80047f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	ea03 0501 	and.w	r5, r3, r1
 8004804:	ea04 0602 	and.w	r6, r4, r2
 8004808:	4629      	mov	r1, r5
 800480a:	4632      	mov	r2, r6
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	0154      	lsls	r4, r2, #5
 8004816:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800481a:	014b      	lsls	r3, r1, #5
 800481c:	4619      	mov	r1, r3
 800481e:	4622      	mov	r2, r4
 8004820:	1b49      	subs	r1, r1, r5
 8004822:	eb62 0206 	sbc.w	r2, r2, r6
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	f04f 0400 	mov.w	r4, #0
 800482e:	0194      	lsls	r4, r2, #6
 8004830:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004834:	018b      	lsls	r3, r1, #6
 8004836:	1a5b      	subs	r3, r3, r1
 8004838:	eb64 0402 	sbc.w	r4, r4, r2
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	00e2      	lsls	r2, r4, #3
 8004846:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800484a:	00d9      	lsls	r1, r3, #3
 800484c:	460b      	mov	r3, r1
 800484e:	4614      	mov	r4, r2
 8004850:	195b      	adds	r3, r3, r5
 8004852:	eb44 0406 	adc.w	r4, r4, r6
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	02a2      	lsls	r2, r4, #10
 8004860:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004864:	0299      	lsls	r1, r3, #10
 8004866:	460b      	mov	r3, r1
 8004868:	4614      	mov	r4, r2
 800486a:	4618      	mov	r0, r3
 800486c:	4621      	mov	r1, r4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f04f 0400 	mov.w	r4, #0
 8004874:	461a      	mov	r2, r3
 8004876:	4623      	mov	r3, r4
 8004878:	f7fc f930 	bl	8000adc <__aeabi_uldivmod>
 800487c:	4603      	mov	r3, r0
 800487e:	460c      	mov	r4, r1
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e049      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	f04f 0400 	mov.w	r4, #0
 800488e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	ea03 0501 	and.w	r5, r3, r1
 800489a:	ea04 0602 	and.w	r6, r4, r2
 800489e:	4629      	mov	r1, r5
 80048a0:	4632      	mov	r2, r6
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	0154      	lsls	r4, r2, #5
 80048ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048b0:	014b      	lsls	r3, r1, #5
 80048b2:	4619      	mov	r1, r3
 80048b4:	4622      	mov	r2, r4
 80048b6:	1b49      	subs	r1, r1, r5
 80048b8:	eb62 0206 	sbc.w	r2, r2, r6
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	0194      	lsls	r4, r2, #6
 80048c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048ca:	018b      	lsls	r3, r1, #6
 80048cc:	1a5b      	subs	r3, r3, r1
 80048ce:	eb64 0402 	sbc.w	r4, r4, r2
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	00e2      	lsls	r2, r4, #3
 80048dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048e0:	00d9      	lsls	r1, r3, #3
 80048e2:	460b      	mov	r3, r1
 80048e4:	4614      	mov	r4, r2
 80048e6:	195b      	adds	r3, r3, r5
 80048e8:	eb44 0406 	adc.w	r4, r4, r6
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	02a2      	lsls	r2, r4, #10
 80048f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048fa:	0299      	lsls	r1, r3, #10
 80048fc:	460b      	mov	r3, r1
 80048fe:	4614      	mov	r4, r2
 8004900:	4618      	mov	r0, r3
 8004902:	4621      	mov	r1, r4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f04f 0400 	mov.w	r4, #0
 800490a:	461a      	mov	r2, r3
 800490c:	4623      	mov	r3, r4
 800490e:	f7fc f8e5 	bl	8000adc <__aeabi_uldivmod>
 8004912:	4603      	mov	r3, r0
 8004914:	460c      	mov	r4, r1
 8004916:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	60bb      	str	r3, [r7, #8]
      break;
 8004932:	e002      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004936:	60bb      	str	r3, [r7, #8]
      break;
 8004938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493a:	68bb      	ldr	r3, [r7, #8]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	00f42400 	.word	0x00f42400

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_RCC_GetHCLKFreq+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000030 	.word	0x20000030

08004964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004968:	f7ff fff0 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800496c:	4601      	mov	r1, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4a03      	ldr	r2, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	08019844 	.word	0x08019844

0800498c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004990:	f7ff ffdc 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8004994:	4601      	mov	r1, r0
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0b5b      	lsrs	r3, r3, #13
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4a03      	ldr	r2, [pc, #12]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a2:	5cd3      	ldrb	r3, [r2, r3]
 80049a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40023800 	.word	0x40023800
 80049b0:	08019844 	.word	0x08019844

080049b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e056      	b.n	8004a74 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f00f ff13 	bl	801480c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	f003 0104 	and.w	r1, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	; 0x30
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x26>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e18a      	b.n	8004db8 <HAL_SPI_TransmitReceive+0x33c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aaa:	f7fc f9fd 	bl	8000ea8 <HAL_GetTick>
 8004aae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ac0:	887b      	ldrh	r3, [r7, #2]
 8004ac2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d00f      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x70>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad2:	d107      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x68>
 8004adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d003      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aea:	e15b      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x82>
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b04:	e14e      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d003      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2205      	movs	r2, #5
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	887a      	ldrh	r2, [r7, #2]
 8004b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	887a      	ldrh	r2, [r7, #2]
 8004b3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	887a      	ldrh	r2, [r7, #2]
 8004b42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d007      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d178      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_TransmitReceive+0x10a>
 8004b80:	8b7b      	ldrh	r3, [r7, #26]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d166      	bne.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004baa:	e053      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d11b      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x176>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x176>
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d113      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d119      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1b8>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d014      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	b292      	uxth	r2, r2
 8004c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c30:	2301      	movs	r3, #1
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c34:	f7fc f938 	bl	8000ea8 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d807      	bhi.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d003      	beq.n	8004c54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c52:	e0a7      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1a6      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x130>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1a1      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x130>
 8004c68:	e07c      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x1fc>
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d16b      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9e:	e057      	b.n	8004d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d11c      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x26c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d017      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x26c>
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d114      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d119      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x2ae>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d014      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d26:	2301      	movs	r3, #1
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d2a:	f7fc f8bd 	bl	8000ea8 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d803      	bhi.n	8004d42 <HAL_SPI_TransmitReceive+0x2c6>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2cc>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d4e:	e029      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1a2      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x224>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d19d      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f893 	bl	8004e94 <SPI_EndRxTxTransaction>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d006      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d80:	e010      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	e000      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004da2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004db4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3730      	adds	r7, #48	; 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd0:	e04c      	b.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d048      	beq.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dda:	f7fc f865 	bl	8000ea8 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d902      	bls.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d13d      	bne.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e08:	d111      	bne.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e12:	d004      	beq.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d107      	bne.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	d10f      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e00f      	b.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4013      	ands	r3, r2
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d1a3      	bne.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <SPI_EndRxTxTransaction+0x7c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <SPI_EndRxTxTransaction+0x80>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0d5b      	lsrs	r3, r3, #21
 8004eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ebe:	d112      	bne.n	8004ee6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff ff78 	bl	8004dc0 <SPI_WaitFlagStateUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e00f      	b.n	8004f06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d0f2      	beq.n	8004ee6 <SPI_EndRxTxTransaction+0x52>
 8004f00:	e000      	b.n	8004f04 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f02:	bf00      	nop
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000030 	.word	0x20000030
 8004f14:	165e9f81 	.word	0x165e9f81

08004f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e03f      	b.n	8004faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f00f fcac 	bl	801489c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	; 0x24
 8004f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f90b 	bl	8005178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af02      	add	r7, sp, #8
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	f040 8083 	bne.w	80050da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Transmit+0x2e>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e07b      	b.n	80050dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Transmit+0x40>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e074      	b.n	80050dc <HAL_UART_Transmit+0x12a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2221      	movs	r2, #33	; 0x21
 8005004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005008:	f7fb ff4e 	bl	8000ea8 <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005022:	e042      	b.n	80050aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d122      	bne.n	8005082 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f84c 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e042      	b.n	80050dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3302      	adds	r3, #2
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e017      	b.n	80050aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	3301      	adds	r3, #1
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	e013      	b.n	80050aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f829 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e01f      	b.n	80050dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	60ba      	str	r2, [r7, #8]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1b7      	bne.n	8005024 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f810 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e006      	b.n	80050dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e02c      	b.n	8005150 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d028      	beq.n	8005150 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 8005104:	f7fb fed0 	bl	8000ea8 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	d21d      	bcs.n	8005150 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005122:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e00f      	b.n	8005170 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	429a      	cmp	r2, r3
 800516c:	d0c3      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051ba:	f023 030c 	bic.w	r3, r3, #12
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	430b      	orrs	r3, r1
 80051c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e6:	f040 818b 	bne.w	8005500 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4ac1      	ldr	r2, [pc, #772]	; (80054f4 <UART_SetConfig+0x37c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d005      	beq.n	8005200 <UART_SetConfig+0x88>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4abf      	ldr	r2, [pc, #764]	; (80054f8 <UART_SetConfig+0x380>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	f040 80bd 	bne.w	800537a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005200:	f7ff fbc4 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 8005204:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	461d      	mov	r5, r3
 800520a:	f04f 0600 	mov.w	r6, #0
 800520e:	46a8      	mov	r8, r5
 8005210:	46b1      	mov	r9, r6
 8005212:	eb18 0308 	adds.w	r3, r8, r8
 8005216:	eb49 0409 	adc.w	r4, r9, r9
 800521a:	4698      	mov	r8, r3
 800521c:	46a1      	mov	r9, r4
 800521e:	eb18 0805 	adds.w	r8, r8, r5
 8005222:	eb49 0906 	adc.w	r9, r9, r6
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005232:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005236:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800523a:	4688      	mov	r8, r1
 800523c:	4691      	mov	r9, r2
 800523e:	eb18 0005 	adds.w	r0, r8, r5
 8005242:	eb49 0106 	adc.w	r1, r9, r6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	461d      	mov	r5, r3
 800524c:	f04f 0600 	mov.w	r6, #0
 8005250:	196b      	adds	r3, r5, r5
 8005252:	eb46 0406 	adc.w	r4, r6, r6
 8005256:	461a      	mov	r2, r3
 8005258:	4623      	mov	r3, r4
 800525a:	f7fb fc3f 	bl	8000adc <__aeabi_uldivmod>
 800525e:	4603      	mov	r3, r0
 8005260:	460c      	mov	r4, r1
 8005262:	461a      	mov	r2, r3
 8005264:	4ba5      	ldr	r3, [pc, #660]	; (80054fc <UART_SetConfig+0x384>)
 8005266:	fba3 2302 	umull	r2, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	461d      	mov	r5, r3
 8005274:	f04f 0600 	mov.w	r6, #0
 8005278:	46a9      	mov	r9, r5
 800527a:	46b2      	mov	sl, r6
 800527c:	eb19 0309 	adds.w	r3, r9, r9
 8005280:	eb4a 040a 	adc.w	r4, sl, sl
 8005284:	4699      	mov	r9, r3
 8005286:	46a2      	mov	sl, r4
 8005288:	eb19 0905 	adds.w	r9, r9, r5
 800528c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800529c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052a4:	4689      	mov	r9, r1
 80052a6:	4692      	mov	sl, r2
 80052a8:	eb19 0005 	adds.w	r0, r9, r5
 80052ac:	eb4a 0106 	adc.w	r1, sl, r6
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	461d      	mov	r5, r3
 80052b6:	f04f 0600 	mov.w	r6, #0
 80052ba:	196b      	adds	r3, r5, r5
 80052bc:	eb46 0406 	adc.w	r4, r6, r6
 80052c0:	461a      	mov	r2, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	f7fb fc0a 	bl	8000adc <__aeabi_uldivmod>
 80052c8:	4603      	mov	r3, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	461a      	mov	r2, r3
 80052ce:	4b8b      	ldr	r3, [pc, #556]	; (80054fc <UART_SetConfig+0x384>)
 80052d0:	fba3 1302 	umull	r1, r3, r3, r2
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	2164      	movs	r1, #100	; 0x64
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	3332      	adds	r3, #50	; 0x32
 80052e2:	4a86      	ldr	r2, [pc, #536]	; (80054fc <UART_SetConfig+0x384>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f0:	4498      	add	r8, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	461d      	mov	r5, r3
 80052f6:	f04f 0600 	mov.w	r6, #0
 80052fa:	46a9      	mov	r9, r5
 80052fc:	46b2      	mov	sl, r6
 80052fe:	eb19 0309 	adds.w	r3, r9, r9
 8005302:	eb4a 040a 	adc.w	r4, sl, sl
 8005306:	4699      	mov	r9, r3
 8005308:	46a2      	mov	sl, r4
 800530a:	eb19 0905 	adds.w	r9, r9, r5
 800530e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800531e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005326:	4689      	mov	r9, r1
 8005328:	4692      	mov	sl, r2
 800532a:	eb19 0005 	adds.w	r0, r9, r5
 800532e:	eb4a 0106 	adc.w	r1, sl, r6
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	461d      	mov	r5, r3
 8005338:	f04f 0600 	mov.w	r6, #0
 800533c:	196b      	adds	r3, r5, r5
 800533e:	eb46 0406 	adc.w	r4, r6, r6
 8005342:	461a      	mov	r2, r3
 8005344:	4623      	mov	r3, r4
 8005346:	f7fb fbc9 	bl	8000adc <__aeabi_uldivmod>
 800534a:	4603      	mov	r3, r0
 800534c:	460c      	mov	r4, r1
 800534e:	461a      	mov	r2, r3
 8005350:	4b6a      	ldr	r3, [pc, #424]	; (80054fc <UART_SetConfig+0x384>)
 8005352:	fba3 1302 	umull	r1, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2164      	movs	r1, #100	; 0x64
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	3332      	adds	r3, #50	; 0x32
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <UART_SetConfig+0x384>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	f003 0207 	and.w	r2, r3, #7
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4442      	add	r2, r8
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	e26f      	b.n	800585a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800537a:	f7ff faf3 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 800537e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	461d      	mov	r5, r3
 8005384:	f04f 0600 	mov.w	r6, #0
 8005388:	46a8      	mov	r8, r5
 800538a:	46b1      	mov	r9, r6
 800538c:	eb18 0308 	adds.w	r3, r8, r8
 8005390:	eb49 0409 	adc.w	r4, r9, r9
 8005394:	4698      	mov	r8, r3
 8005396:	46a1      	mov	r9, r4
 8005398:	eb18 0805 	adds.w	r8, r8, r5
 800539c:	eb49 0906 	adc.w	r9, r9, r6
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053b4:	4688      	mov	r8, r1
 80053b6:	4691      	mov	r9, r2
 80053b8:	eb18 0005 	adds.w	r0, r8, r5
 80053bc:	eb49 0106 	adc.w	r1, r9, r6
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	461d      	mov	r5, r3
 80053c6:	f04f 0600 	mov.w	r6, #0
 80053ca:	196b      	adds	r3, r5, r5
 80053cc:	eb46 0406 	adc.w	r4, r6, r6
 80053d0:	461a      	mov	r2, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	f7fb fb82 	bl	8000adc <__aeabi_uldivmod>
 80053d8:	4603      	mov	r3, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	461a      	mov	r2, r3
 80053de:	4b47      	ldr	r3, [pc, #284]	; (80054fc <UART_SetConfig+0x384>)
 80053e0:	fba3 2302 	umull	r2, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	461d      	mov	r5, r3
 80053ee:	f04f 0600 	mov.w	r6, #0
 80053f2:	46a9      	mov	r9, r5
 80053f4:	46b2      	mov	sl, r6
 80053f6:	eb19 0309 	adds.w	r3, r9, r9
 80053fa:	eb4a 040a 	adc.w	r4, sl, sl
 80053fe:	4699      	mov	r9, r3
 8005400:	46a2      	mov	sl, r4
 8005402:	eb19 0905 	adds.w	r9, r9, r5
 8005406:	eb4a 0a06 	adc.w	sl, sl, r6
 800540a:	f04f 0100 	mov.w	r1, #0
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005416:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800541a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800541e:	4689      	mov	r9, r1
 8005420:	4692      	mov	sl, r2
 8005422:	eb19 0005 	adds.w	r0, r9, r5
 8005426:	eb4a 0106 	adc.w	r1, sl, r6
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	461d      	mov	r5, r3
 8005430:	f04f 0600 	mov.w	r6, #0
 8005434:	196b      	adds	r3, r5, r5
 8005436:	eb46 0406 	adc.w	r4, r6, r6
 800543a:	461a      	mov	r2, r3
 800543c:	4623      	mov	r3, r4
 800543e:	f7fb fb4d 	bl	8000adc <__aeabi_uldivmod>
 8005442:	4603      	mov	r3, r0
 8005444:	460c      	mov	r4, r1
 8005446:	461a      	mov	r2, r3
 8005448:	4b2c      	ldr	r3, [pc, #176]	; (80054fc <UART_SetConfig+0x384>)
 800544a:	fba3 1302 	umull	r1, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2164      	movs	r1, #100	; 0x64
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	3332      	adds	r3, #50	; 0x32
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <UART_SetConfig+0x384>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800546a:	4498      	add	r8, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	461d      	mov	r5, r3
 8005470:	f04f 0600 	mov.w	r6, #0
 8005474:	46a9      	mov	r9, r5
 8005476:	46b2      	mov	sl, r6
 8005478:	eb19 0309 	adds.w	r3, r9, r9
 800547c:	eb4a 040a 	adc.w	r4, sl, sl
 8005480:	4699      	mov	r9, r3
 8005482:	46a2      	mov	sl, r4
 8005484:	eb19 0905 	adds.w	r9, r9, r5
 8005488:	eb4a 0a06 	adc.w	sl, sl, r6
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800549c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054a0:	4689      	mov	r9, r1
 80054a2:	4692      	mov	sl, r2
 80054a4:	eb19 0005 	adds.w	r0, r9, r5
 80054a8:	eb4a 0106 	adc.w	r1, sl, r6
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	461d      	mov	r5, r3
 80054b2:	f04f 0600 	mov.w	r6, #0
 80054b6:	196b      	adds	r3, r5, r5
 80054b8:	eb46 0406 	adc.w	r4, r6, r6
 80054bc:	461a      	mov	r2, r3
 80054be:	4623      	mov	r3, r4
 80054c0:	f7fb fb0c 	bl	8000adc <__aeabi_uldivmod>
 80054c4:	4603      	mov	r3, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <UART_SetConfig+0x384>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a07      	ldr	r2, [pc, #28]	; (80054fc <UART_SetConfig+0x384>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4442      	add	r2, r8
 80054f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054f2:	e1b2      	b.n	800585a <UART_SetConfig+0x6e2>
 80054f4:	40011000 	.word	0x40011000
 80054f8:	40011400 	.word	0x40011400
 80054fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4ad7      	ldr	r2, [pc, #860]	; (8005864 <UART_SetConfig+0x6ec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d005      	beq.n	8005516 <UART_SetConfig+0x39e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4ad6      	ldr	r2, [pc, #856]	; (8005868 <UART_SetConfig+0x6f0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	f040 80d1 	bne.w	80056b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005516:	f7ff fa39 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 800551a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	469a      	mov	sl, r3
 8005520:	f04f 0b00 	mov.w	fp, #0
 8005524:	46d0      	mov	r8, sl
 8005526:	46d9      	mov	r9, fp
 8005528:	eb18 0308 	adds.w	r3, r8, r8
 800552c:	eb49 0409 	adc.w	r4, r9, r9
 8005530:	4698      	mov	r8, r3
 8005532:	46a1      	mov	r9, r4
 8005534:	eb18 080a 	adds.w	r8, r8, sl
 8005538:	eb49 090b 	adc.w	r9, r9, fp
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800554c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005550:	4688      	mov	r8, r1
 8005552:	4691      	mov	r9, r2
 8005554:	eb1a 0508 	adds.w	r5, sl, r8
 8005558:	eb4b 0609 	adc.w	r6, fp, r9
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	f04f 0400 	mov.w	r4, #0
 800556e:	0094      	lsls	r4, r2, #2
 8005570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005574:	008b      	lsls	r3, r1, #2
 8005576:	461a      	mov	r2, r3
 8005578:	4623      	mov	r3, r4
 800557a:	4628      	mov	r0, r5
 800557c:	4631      	mov	r1, r6
 800557e:	f7fb faad 	bl	8000adc <__aeabi_uldivmod>
 8005582:	4603      	mov	r3, r0
 8005584:	460c      	mov	r4, r1
 8005586:	461a      	mov	r2, r3
 8005588:	4bb8      	ldr	r3, [pc, #736]	; (800586c <UART_SetConfig+0x6f4>)
 800558a:	fba3 2302 	umull	r2, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	469b      	mov	fp, r3
 8005598:	f04f 0c00 	mov.w	ip, #0
 800559c:	46d9      	mov	r9, fp
 800559e:	46e2      	mov	sl, ip
 80055a0:	eb19 0309 	adds.w	r3, r9, r9
 80055a4:	eb4a 040a 	adc.w	r4, sl, sl
 80055a8:	4699      	mov	r9, r3
 80055aa:	46a2      	mov	sl, r4
 80055ac:	eb19 090b 	adds.w	r9, r9, fp
 80055b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055c8:	4689      	mov	r9, r1
 80055ca:	4692      	mov	sl, r2
 80055cc:	eb1b 0509 	adds.w	r5, fp, r9
 80055d0:	eb4c 060a 	adc.w	r6, ip, sl
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4619      	mov	r1, r3
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	f04f 0400 	mov.w	r4, #0
 80055e6:	0094      	lsls	r4, r2, #2
 80055e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ec:	008b      	lsls	r3, r1, #2
 80055ee:	461a      	mov	r2, r3
 80055f0:	4623      	mov	r3, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	4631      	mov	r1, r6
 80055f6:	f7fb fa71 	bl	8000adc <__aeabi_uldivmod>
 80055fa:	4603      	mov	r3, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	461a      	mov	r2, r3
 8005600:	4b9a      	ldr	r3, [pc, #616]	; (800586c <UART_SetConfig+0x6f4>)
 8005602:	fba3 1302 	umull	r1, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	2164      	movs	r1, #100	; 0x64
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	3332      	adds	r3, #50	; 0x32
 8005614:	4a95      	ldr	r2, [pc, #596]	; (800586c <UART_SetConfig+0x6f4>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005620:	4498      	add	r8, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	469b      	mov	fp, r3
 8005626:	f04f 0c00 	mov.w	ip, #0
 800562a:	46d9      	mov	r9, fp
 800562c:	46e2      	mov	sl, ip
 800562e:	eb19 0309 	adds.w	r3, r9, r9
 8005632:	eb4a 040a 	adc.w	r4, sl, sl
 8005636:	4699      	mov	r9, r3
 8005638:	46a2      	mov	sl, r4
 800563a:	eb19 090b 	adds.w	r9, r9, fp
 800563e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005642:	f04f 0100 	mov.w	r1, #0
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005656:	4689      	mov	r9, r1
 8005658:	4692      	mov	sl, r2
 800565a:	eb1b 0509 	adds.w	r5, fp, r9
 800565e:	eb4c 060a 	adc.w	r6, ip, sl
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4619      	mov	r1, r3
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	f04f 0400 	mov.w	r4, #0
 8005674:	0094      	lsls	r4, r2, #2
 8005676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800567a:	008b      	lsls	r3, r1, #2
 800567c:	461a      	mov	r2, r3
 800567e:	4623      	mov	r3, r4
 8005680:	4628      	mov	r0, r5
 8005682:	4631      	mov	r1, r6
 8005684:	f7fb fa2a 	bl	8000adc <__aeabi_uldivmod>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	461a      	mov	r2, r3
 800568e:	4b77      	ldr	r3, [pc, #476]	; (800586c <UART_SetConfig+0x6f4>)
 8005690:	fba3 1302 	umull	r1, r3, r3, r2
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	2164      	movs	r1, #100	; 0x64
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	3332      	adds	r3, #50	; 0x32
 80056a2:	4a72      	ldr	r2, [pc, #456]	; (800586c <UART_SetConfig+0x6f4>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4442      	add	r2, r8
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	e0d0      	b.n	800585a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7ff f954 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 80056bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	469a      	mov	sl, r3
 80056c2:	f04f 0b00 	mov.w	fp, #0
 80056c6:	46d0      	mov	r8, sl
 80056c8:	46d9      	mov	r9, fp
 80056ca:	eb18 0308 	adds.w	r3, r8, r8
 80056ce:	eb49 0409 	adc.w	r4, r9, r9
 80056d2:	4698      	mov	r8, r3
 80056d4:	46a1      	mov	r9, r4
 80056d6:	eb18 080a 	adds.w	r8, r8, sl
 80056da:	eb49 090b 	adc.w	r9, r9, fp
 80056de:	f04f 0100 	mov.w	r1, #0
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056f2:	4688      	mov	r8, r1
 80056f4:	4691      	mov	r9, r2
 80056f6:	eb1a 0508 	adds.w	r5, sl, r8
 80056fa:	eb4b 0609 	adc.w	r6, fp, r9
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4619      	mov	r1, r3
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	0094      	lsls	r4, r2, #2
 8005712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005716:	008b      	lsls	r3, r1, #2
 8005718:	461a      	mov	r2, r3
 800571a:	4623      	mov	r3, r4
 800571c:	4628      	mov	r0, r5
 800571e:	4631      	mov	r1, r6
 8005720:	f7fb f9dc 	bl	8000adc <__aeabi_uldivmod>
 8005724:	4603      	mov	r3, r0
 8005726:	460c      	mov	r4, r1
 8005728:	461a      	mov	r2, r3
 800572a:	4b50      	ldr	r3, [pc, #320]	; (800586c <UART_SetConfig+0x6f4>)
 800572c:	fba3 2302 	umull	r2, r3, r3, r2
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	469b      	mov	fp, r3
 800573a:	f04f 0c00 	mov.w	ip, #0
 800573e:	46d9      	mov	r9, fp
 8005740:	46e2      	mov	sl, ip
 8005742:	eb19 0309 	adds.w	r3, r9, r9
 8005746:	eb4a 040a 	adc.w	r4, sl, sl
 800574a:	4699      	mov	r9, r3
 800574c:	46a2      	mov	sl, r4
 800574e:	eb19 090b 	adds.w	r9, r9, fp
 8005752:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800576a:	4689      	mov	r9, r1
 800576c:	4692      	mov	sl, r2
 800576e:	eb1b 0509 	adds.w	r5, fp, r9
 8005772:	eb4c 060a 	adc.w	r6, ip, sl
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4619      	mov	r1, r3
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	f04f 0400 	mov.w	r4, #0
 8005788:	0094      	lsls	r4, r2, #2
 800578a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800578e:	008b      	lsls	r3, r1, #2
 8005790:	461a      	mov	r2, r3
 8005792:	4623      	mov	r3, r4
 8005794:	4628      	mov	r0, r5
 8005796:	4631      	mov	r1, r6
 8005798:	f7fb f9a0 	bl	8000adc <__aeabi_uldivmod>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b32      	ldr	r3, [pc, #200]	; (800586c <UART_SetConfig+0x6f4>)
 80057a4:	fba3 1302 	umull	r1, r3, r3, r2
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	2164      	movs	r1, #100	; 0x64
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	3332      	adds	r3, #50	; 0x32
 80057b6:	4a2d      	ldr	r2, [pc, #180]	; (800586c <UART_SetConfig+0x6f4>)
 80057b8:	fba2 2303 	umull	r2, r3, r2, r3
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c2:	4498      	add	r8, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	469b      	mov	fp, r3
 80057c8:	f04f 0c00 	mov.w	ip, #0
 80057cc:	46d9      	mov	r9, fp
 80057ce:	46e2      	mov	sl, ip
 80057d0:	eb19 0309 	adds.w	r3, r9, r9
 80057d4:	eb4a 040a 	adc.w	r4, sl, sl
 80057d8:	4699      	mov	r9, r3
 80057da:	46a2      	mov	sl, r4
 80057dc:	eb19 090b 	adds.w	r9, r9, fp
 80057e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057e4:	f04f 0100 	mov.w	r1, #0
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057f8:	4689      	mov	r9, r1
 80057fa:	4692      	mov	sl, r2
 80057fc:	eb1b 0509 	adds.w	r5, fp, r9
 8005800:	eb4c 060a 	adc.w	r6, ip, sl
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4619      	mov	r1, r3
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	f04f 0400 	mov.w	r4, #0
 8005816:	0094      	lsls	r4, r2, #2
 8005818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800581c:	008b      	lsls	r3, r1, #2
 800581e:	461a      	mov	r2, r3
 8005820:	4623      	mov	r3, r4
 8005822:	4628      	mov	r0, r5
 8005824:	4631      	mov	r1, r6
 8005826:	f7fb f959 	bl	8000adc <__aeabi_uldivmod>
 800582a:	4603      	mov	r3, r0
 800582c:	460c      	mov	r4, r1
 800582e:	461a      	mov	r2, r3
 8005830:	4b0e      	ldr	r3, [pc, #56]	; (800586c <UART_SetConfig+0x6f4>)
 8005832:	fba3 1302 	umull	r1, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2164      	movs	r1, #100	; 0x64
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a09      	ldr	r2, [pc, #36]	; (800586c <UART_SetConfig+0x6f4>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4442      	add	r2, r8
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	e7ff      	b.n	800585a <UART_SetConfig+0x6e2>
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	40011000 	.word	0x40011000
 8005868:	40011400 	.word	0x40011400
 800586c:	51eb851f 	.word	0x51eb851f

08005870 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <fs_open+0x16>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <fs_open+0x1c>
     return ERR_ARG;
 8005886:	f06f 030f 	mvn.w	r3, #15
 800588a:	e028      	b.n	80058de <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800588c:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <fs_open+0x78>)
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e020      	b.n	80058d4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4619      	mov	r1, r3
 8005898:	6838      	ldr	r0, [r7, #0]
 800589a:	f7fa fc99 	bl	80001d0 <strcmp>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d114      	bne.n	80058ce <fs_open+0x5e>
      file->data = (const char *)f->data;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	7c1a      	ldrb	r2, [r3, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e007      	b.n	80058de <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1db      	bne.n	8005892 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80058da:	f06f 0305 	mvn.w	r3, #5
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	080196e8 	.word	0x080196e8

080058ec <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	1ad3      	subs	r3, r2, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8005924:	f44f 709c 	mov.w	r0, #312	; 0x138
 8005928:	f001 fd9c 	bl	8007464 <mem_malloc>
 800592c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8005934:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005938:	2100      	movs	r1, #0
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f00f fa06 	bl	8014d4c <memset>
  }
  return ret;
 8005940:	687b      	ldr	r3, [r7, #4]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fc45 	bl	80071e8 <mem_free>
  }
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800596e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005972:	2100      	movs	r1, #0
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f00f f9e9 	bl	8014d4c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005988:	f44f 7054 	mov.w	r0, #848	; 0x350
 800598c:	f001 fd6a 	bl	8007464 <mem_malloc>
 8005990:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <http_state_alloc+0x1c>
    http_state_init(ret);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ffe4 	bl	8005966 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800599e:	687b      	ldr	r3, [r7, #4]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff95 	bl	80058ec <fs_close>
    hs->handle = NULL;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff ffb8 	bl	800594a <http_ssi_state_free>
    hs->ssi = NULL;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <http_state_eof+0x50>
    pbuf_free(hs->req);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fc15 	bl	800821c <pbuf_free>
    hs->req = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <http_state_free+0x1a>
    http_state_eof(hs);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ffca 	bl	80059a8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fbe7 	bl	80071e8 <mem_free>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <http_write+0x22>
 8005a38:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <http_write+0xc8>)
 8005a3a:	f44f 7204 	mov.w	r2, #528	; 0x210
 8005a3e:	492c      	ldr	r1, [pc, #176]	; (8005af0 <http_write+0xcc>)
 8005a40:	482c      	ldr	r0, [pc, #176]	; (8005af4 <http_write+0xd0>)
 8005a42:	f00f f98b 	bl	8014d5c <iprintf>
  len = *length;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <http_write+0x32>
    return ERR_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e045      	b.n	8005ae2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a5c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8005a5e:	8aba      	ldrh	r2, [r7, #20]
 8005a60:	8afb      	ldrh	r3, [r7, #22]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d201      	bcs.n	8005a6a <http_write+0x46>
    len = max_len;
 8005a66:	8abb      	ldrh	r3, [r7, #20]
 8005a68:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 8005a72:	8afa      	ldrh	r2, [r7, #22]
 8005a74:	8abb      	ldrh	r3, [r7, #20]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d901      	bls.n	8005a7e <http_write+0x5a>
    len = max_len;
 8005a7a:	8abb      	ldrh	r3, [r7, #20]
 8005a7c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	8afa      	ldrh	r2, [r7, #22]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f006 feab 	bl	800c7e0 <tcp_write>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8005a8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d10f      	bne.n	8005ab8 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 8005aa8:	2b13      	cmp	r3, #19
 8005aaa:	d902      	bls.n	8005ab2 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 8005aac:	2301      	movs	r3, #1
 8005aae:	82fb      	strh	r3, [r7, #22]
 8005ab0:	e002      	b.n	8005ab8 <http_write+0x94>
      } else {
        len /= 2;
 8005ab2:	8afb      	ldrh	r3, [r7, #22]
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005ab8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <http_write+0xa4>
 8005ac2:	8afb      	ldrh	r3, [r7, #22]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d8da      	bhi.n	8005a7e <http_write+0x5a>

  if (err == ERR_OK) {
 8005ac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8afa      	ldrh	r2, [r7, #22]
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	e002      	b.n	8005ade <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 8005ade:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	0801618c 	.word	0x0801618c
 8005af0:	080161c4 	.word	0x080161c4
 8005af4:	080161d4 	.word	0x080161d4

08005af8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 8005b06:	2100      	movs	r1, #0
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f004 f827 	bl	8009b5c <tcp_arg>
  tcp_recv(pcb, NULL);
 8005b0e:	2100      	movs	r1, #0
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f004 f835 	bl	8009b80 <tcp_recv>
  tcp_err(pcb, NULL);
 8005b16:	2100      	movs	r1, #0
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f004 f873 	bl	8009c04 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f004 f8a8 	bl	8009c78 <tcp_poll>
  tcp_sent(pcb, NULL);
 8005b28:	2100      	movs	r1, #0
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f004 f84a 	bl	8009bc4 <tcp_sent>
  if (hs != NULL) {
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005b36:	68b8      	ldr	r0, [r7, #8]
 8005b38:	f7ff ff62 	bl	8005a00 <http_state_free>
  }

  if (abort_conn) {
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f003 f86c 	bl	8008c20 <tcp_abort>
    return ERR_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e00f      	b.n	8005b6c <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f002 ff9d 	bl	8008a8c <tcp_close>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005b5e:	2204      	movs	r2, #4
 8005b60:	4904      	ldr	r1, [pc, #16]	; (8005b74 <http_close_or_abort_conn+0x7c>)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f004 f888 	bl	8009c78 <tcp_poll>
  }
  return err;
 8005b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08006b6b 	.word	0x08006b6b

08005b78 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff ffb6 	bl	8005af8 <http_close_or_abort_conn>
 8005b8c:	4603      	mov	r3, r0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff ffe8 	bl	8005b78 <http_close_conn>
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <extract_uri_parameters+0x18>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <extract_uri_parameters+0x1c>
      return(0);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e04b      	b.n	8005c64 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e03f      	b.n	8005c56 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	320c      	adds	r2, #12
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005be6:	2126      	movs	r1, #38	; 0x26
 8005be8:	6978      	ldr	r0, [r7, #20]
 8005bea:	f00f f923 	bl	8014e34 <strchr>
 8005bee:	6178      	str	r0, [r7, #20]
    if(pair) {
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <extract_uri_parameters+0x54>
      *pair = '\0';
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
      pair++;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e00c      	b.n	8005c1e <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 8005c04:	2120      	movs	r1, #32
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f00f f914 	bl	8014e34 <strchr>
 8005c0c:	6178      	str	r0, [r7, #20]
        if(pair) {
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <extract_uri_parameters+0x6a>
            *pair = '\0';
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005c1e:	213d      	movs	r1, #61	; 0x3d
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f00f f907 	bl	8014e34 <strchr>
 8005c26:	60f8      	str	r0, [r7, #12]
    if(equals) {
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <extract_uri_parameters+0x94>
      *equals = '\0';
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	3270      	adds	r2, #112	; 0x70
 8005c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005c42:	e005      	b.n	8005c50 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	3270      	adds	r2, #112	; 0x70
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	3301      	adds	r3, #1
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b63      	cmp	r3, #99	; 0x63
 8005c5a:	dc02      	bgt.n	8005c62 <extract_uri_parameters+0xb2>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1b9      	bne.n	8005bd6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005c62:	693b      	ldr	r3, [r7, #16]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <get_tag_insert+0x1c>
 8005c7a:	4b52      	ldr	r3, [pc, #328]	; (8005dc4 <get_tag_insert+0x158>)
 8005c7c:	f240 22fb 	movw	r2, #763	; 0x2fb
 8005c80:	4951      	ldr	r1, [pc, #324]	; (8005dc8 <get_tag_insert+0x15c>)
 8005c82:	4852      	ldr	r0, [pc, #328]	; (8005dcc <get_tag_insert+0x160>)
 8005c84:	f00f f86a 	bl	8014d5c <iprintf>
  ssi = hs->ssi;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <get_tag_insert+0x36>
 8005c94:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <get_tag_insert+0x158>)
 8005c96:	f240 22fd 	movw	r2, #765	; 0x2fd
 8005c9a:	494d      	ldr	r1, [pc, #308]	; (8005dd0 <get_tag_insert+0x164>)
 8005c9c:	484b      	ldr	r0, [pc, #300]	; (8005dcc <get_tag_insert+0x160>)
 8005c9e:	f00f f85d 	bl	8014d5c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 8005ca2:	4b4c      	ldr	r3, [pc, #304]	; (8005dd4 <get_tag_insert+0x168>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02e      	beq.n	8005d08 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 8005caa:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <get_tag_insert+0x16c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d02a      	beq.n	8005d08 <get_tag_insert+0x9c>
 8005cb2:	4b4a      	ldr	r3, [pc, #296]	; (8005ddc <get_tag_insert+0x170>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d026      	beq.n	8005d08 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e01e      	b.n	8005cfe <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f103 0011 	add.w	r0, r3, #17
 8005cc6:	4b44      	ldr	r3, [pc, #272]	; (8005dd8 <get_tag_insert+0x16c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f7fa fa7c 	bl	80001d0 <strcmp>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10c      	bne.n	8005cf8 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 8005cde:	4b3d      	ldr	r3, [pc, #244]	; (8005dd4 <get_tag_insert+0x168>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	f102 013a 	add.w	r1, r2, #58	; 0x3a
 8005ce8:	22fa      	movs	r2, #250	; 0xfa
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	4798      	blx	r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8005cf6:	e061      	b.n	8005dbc <get_tag_insert+0x150>
    for(tag = 0; tag < g_iNumTags; tag++) {
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	4b37      	ldr	r3, [pc, #220]	; (8005ddc <get_tag_insert+0x170>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	dbdb      	blt.n	8005cc0 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	3311      	adds	r3, #17
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fa fa69 	bl	80001e4 <strlen>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2be0      	cmp	r3, #224	; 0xe0
 8005d16:	d818      	bhi.n	8005d4a <get_tag_insert+0xde>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3311      	adds	r3, #17
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fa61 	bl	80001e4 <strlen>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b29      	cmp	r3, #41	; 0x29
 8005d26:	d810      	bhi.n	8005d4a <get_tag_insert+0xde>
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	3311      	adds	r3, #17
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fa fa59 	bl	80001e4 <strlen>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2be0      	cmp	r3, #224	; 0xe0
 8005d36:	d806      	bhi.n	8005d46 <get_tag_insert+0xda>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3311      	adds	r3, #17
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fa fa51 	bl	80001e4 <strlen>
 8005d42:	4603      	mov	r3, r0
 8005d44:	e002      	b.n	8005d4c <get_tag_insert+0xe0>
 8005d46:	23e1      	movs	r3, #225	; 0xe1
 8005d48:	e000      	b.n	8005d4c <get_tag_insert+0xe0>
 8005d4a:	2329      	movs	r3, #41	; 0x29
 8005d4c:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	333a      	adds	r3, #58	; 0x3a
 8005d52:	2212      	movs	r2, #18
 8005d54:	4922      	ldr	r1, [pc, #136]	; (8005de0 <get_tag_insert+0x174>)
 8005d56:	4618      	mov	r0, r3
 8005d58:	f00e ffed 	bl	8014d36 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3311      	adds	r3, #17
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f00e ffe4 	bl	8014d36 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3312      	adds	r3, #18
 8005d72:	3338      	adds	r3, #56	; 0x38
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	3302      	adds	r3, #2
 8005d7a:	2207      	movs	r2, #7
 8005d7c:	4919      	ldr	r1, [pc, #100]	; (8005de4 <get_tag_insert+0x178>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f00e ffd9 	bl	8014d36 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3319      	adds	r3, #25
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  len = strlen(ssi->tag_insert);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	333a      	adds	r3, #58	; 0x3a
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fa fa24 	bl	80001e4 <strlen>
 8005d9c:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da4:	d306      	bcc.n	8005db4 <get_tag_insert+0x148>
 8005da6:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <get_tag_insert+0x158>)
 8005da8:	f240 3236 	movw	r2, #822	; 0x336
 8005dac:	490e      	ldr	r1, [pc, #56]	; (8005de8 <get_tag_insert+0x17c>)
 8005dae:	4807      	ldr	r0, [pc, #28]	; (8005dcc <get_tag_insert+0x160>)
 8005db0:	f00e ffd4 	bl	8014d5c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	81da      	strh	r2, [r3, #14]
}
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	0801618c 	.word	0x0801618c
 8005dc8:	080161fc 	.word	0x080161fc
 8005dcc:	080161d4 	.word	0x080161d4
 8005dd0:	08016208 	.word	0x08016208
 8005dd4:	20000908 	.word	0x20000908
 8005dd8:	20000918 	.word	0x20000918
 8005ddc:	20000910 	.word	0x20000910
 8005de0:	08016214 	.word	0x08016214
 8005de4:	08016228 	.word	0x08016228
 8005de8:	08016230 	.word	0x08016230

08005dec <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fec8 	bl	8005b96 <http_eof>
    return 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e016      	b.n	8005e38 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fd76 	bl	8005900 <fs_bytes_left>
 8005e14:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	dc05      	bgt.n	8005e28 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff feb9 	bl	8005b96 <http_eof>
    return 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e007      	b.n	8005e38 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <http_check_eof+0x54>)
 8005e2a:	f240 4283 	movw	r2, #1155	; 0x483
 8005e2e:	4905      	ldr	r1, [pc, #20]	; (8005e44 <http_check_eof+0x58>)
 8005e30:	4805      	ldr	r0, [pc, #20]	; (8005e48 <http_check_eof+0x5c>)
 8005e32:	f00e ff93 	bl	8014d5c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005e36:	2301      	movs	r3, #1
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	0801618c 	.word	0x0801618c
 8005e44:	08016240 	.word	0x08016240
 8005e48:	080161d4 	.word	0x080161d4

08005e4c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d803      	bhi.n	8005e6e <http_send_data_nonssi+0x22>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	e001      	b.n	8005e72 <http_send_data_nonssi+0x26>
 8005e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e72:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6999      	ldr	r1, [r3, #24]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f107 020c 	add.w	r2, r7, #12
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fdca 	bl	8005a24 <http_write>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	89ba      	ldrh	r2, [r7, #12]
 8005ea6:	441a      	add	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	89ba      	ldrh	r2, [r7, #12]
 8005eb2:	1a9a      	subs	r2, r3, r2
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <http_send_data_ssi+0x2c>
 8005ee2:	4b98      	ldr	r3, [pc, #608]	; (8006144 <http_send_data_ssi+0x280>)
 8005ee4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005ee8:	4997      	ldr	r1, [pc, #604]	; (8006148 <http_send_data_ssi+0x284>)
 8005eea:	4898      	ldr	r0, [pc, #608]	; (800614c <http_send_data_ssi+0x288>)
 8005eec:	f00e ff36 	bl	8014d5c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ef6:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	f240 824f 	bls.w	80063a4 <http_send_data_ssi+0x4e0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f16:	4293      	cmp	r3, r2
 8005f18:	dc07      	bgt.n	8005f2a <http_send_data_ssi+0x66>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	e001      	b.n	8005f2e <http_send_data_ssi+0x6a>
 8005f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f2e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6999      	ldr	r1, [r3, #24]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f107 020e 	add.w	r2, r7, #14
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fd6c 	bl	8005a24 <http_write>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <http_send_data_ssi+0xb0>
      data_to_send = 1;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	89fa      	ldrh	r2, [r7, #14]
 8005f62:	441a      	add	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	89fa      	ldrh	r2, [r7, #14]
 8005f6e:	1a9a      	subs	r2, r3, r2
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 8212 	bne.w	80063a4 <http_send_data_ssi+0x4e0>
      return data_to_send;
 8005f80:	7dbb      	ldrb	r3, [r7, #22]
 8005f82:	e25b      	b.n	800643c <http_send_data_ssi+0x578>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <http_send_data_ssi+0xca>
      return data_to_send;
 8005f8a:	7dbb      	ldrb	r3, [r7, #22]
 8005f8c:	e256      	b.n	800643c <http_send_data_ssi+0x578>
    }
    switch(ssi->tag_state) {
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	f200 8204 	bhi.w	80063a2 <http_send_data_ssi+0x4de>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <http_send_data_ssi+0xdc>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb5 	.word	0x08005fb5
 8005fa4:	08005fe7 	.word	0x08005fe7
 8005fa8:	0800603f 	.word	0x0800603f
 8005fac:	0800617b 	.word	0x0800617b
 8005fb0:	080062b9 	.word	0x080062b9
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	4b65      	ldr	r3, [pc, #404]	; (8006150 <http_send_data_ssi+0x28c>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d106      	bne.n	8005fd0 <http_send_data_ssi+0x10c>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          ssi->tag_index = 1;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	601a      	str	r2, [r3, #0]
        break;
 8005fe4:	e1de      	b.n	80063a4 <http_send_data_ssi+0x4e0>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	899b      	ldrh	r3, [r3, #12]
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d107      	bne.n	8005ffe <http_send_data_ssi+0x13a>
          ssi->tag_index = 0;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
 8005ffc:	e1d2      	b.n	80063a4 <http_send_data_ssi+0x4e0>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	4952      	ldr	r1, [pc, #328]	; (8006150 <http_send_data_ssi+0x28c>)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	899b      	ldrh	r3, [r3, #12]
 800600a:	440b      	add	r3, r1
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d106      	bne.n	8006020 <http_send_data_ssi+0x15c>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	899b      	ldrh	r3, [r3, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	819a      	strh	r2, [r3, #12]
 800601e:	e003      	b.n	8006028 <http_send_data_ssi+0x164>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	1e5a      	subs	r2, r3, #1
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	601a      	str	r2, [r3, #0]
        }
        break;
 800603c:	e1b2      	b.n	80063a4 <http_send_data_ssi+0x4e0>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	899b      	ldrh	r3, [r3, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d11e      	bne.n	8006084 <http_send_data_ssi+0x1c0>
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b20      	cmp	r3, #32
 800604e:	d00e      	beq.n	800606e <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006056:	2b09      	cmp	r3, #9
 8006058:	d009      	beq.n	800606e <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b0a      	cmp	r3, #10
 8006062:	d004      	beq.n	800606e <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\r'))) {
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800606a:	2b0d      	cmp	r3, #13
 800606c:	d10a      	bne.n	8006084 <http_send_data_ssi+0x1c0>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	601a      	str	r2, [r3, #0]
          break;
 8006082:	e18f      	b.n	80063a4 <http_send_data_ssi+0x4e0>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	4b32      	ldr	r3, [pc, #200]	; (8006154 <http_send_data_ssi+0x290>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d013      	beq.n	80060ba <http_send_data_ssi+0x1f6>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8006098:	2b20      	cmp	r3, #32
 800609a:	d00e      	beq.n	80060ba <http_send_data_ssi+0x1f6>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d009      	beq.n	80060ba <http_send_data_ssi+0x1f6>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80060ac:	2b0a      	cmp	r3, #10
 80060ae:	d004      	beq.n	80060ba <http_send_data_ssi+0x1f6>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b0d      	cmp	r3, #13
 80060b8:	d132      	bne.n	8006120 <http_send_data_ssi+0x25c>

          if(ssi->tag_index == 0) {
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	899b      	ldrh	r3, [r3, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <http_send_data_ssi+0x208>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          if(ssi->tag_index == 0) {
 80060ca:	e04b      	b.n	8006164 <http_send_data_ssi+0x2a0>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2203      	movs	r2, #3
 80060d0:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	899b      	ldrh	r3, [r3, #12]
 80060d8:	2bff      	cmp	r3, #255	; 0xff
 80060da:	d906      	bls.n	80060ea <http_send_data_ssi+0x226>
 80060dc:	4b19      	ldr	r3, [pc, #100]	; (8006144 <http_send_data_ssi+0x280>)
 80060de:	f240 521b 	movw	r2, #1307	; 0x51b
 80060e2:	491d      	ldr	r1, [pc, #116]	; (8006158 <http_send_data_ssi+0x294>)
 80060e4:	4819      	ldr	r0, [pc, #100]	; (800614c <http_send_data_ssi+0x288>)
 80060e6:	f00e fe39 	bl	8014d5c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	899b      	ldrh	r3, [r3, #12]
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	899b      	ldrh	r3, [r3, #12]
 80060f8:	461a      	mov	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4413      	add	r3, r2
 80060fe:	2200      	movs	r2, #0
 8006100:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	4b12      	ldr	r3, [pc, #72]	; (8006154 <http_send_data_ssi+0x290>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d103      	bne.n	8006118 <http_send_data_ssi+0x254>
              ssi->tag_index = 1;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2201      	movs	r2, #1
 8006114:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8006116:	e025      	b.n	8006164 <http_send_data_ssi+0x2a0>
            } else {
              ssi->tag_index = 0;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2200      	movs	r2, #0
 800611c:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800611e:	e021      	b.n	8006164 <http_send_data_ssi+0x2a0>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	899b      	ldrh	r3, [r3, #12]
 8006124:	2b27      	cmp	r3, #39	; 0x27
 8006126:	d819      	bhi.n	800615c <http_send_data_ssi+0x298>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	899b      	ldrh	r3, [r3, #12]
 8006130:	1c59      	adds	r1, r3, #1
 8006132:	b288      	uxth	r0, r1
 8006134:	6939      	ldr	r1, [r7, #16]
 8006136:	8188      	strh	r0, [r1, #12]
 8006138:	4619      	mov	r1, r3
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	440b      	add	r3, r1
 8006140:	745a      	strb	r2, [r3, #17]
 8006142:	e00f      	b.n	8006164 <http_send_data_ssi+0x2a0>
 8006144:	0801618c 	.word	0x0801618c
 8006148:	08016208 	.word	0x08016208
 800614c:	080161d4 	.word	0x080161d4
 8006150:	08016180 	.word	0x08016180
 8006154:	08016188 	.word	0x08016188
 8006158:	08016278 	.word	0x08016278
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	601a      	str	r2, [r3, #0]

        break;
 8006178:	e114      	b.n	80063a4 <http_send_data_ssi+0x4e0>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	899b      	ldrh	r3, [r3, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d11e      	bne.n	80061c0 <http_send_data_ssi+0x2fc>
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b20      	cmp	r3, #32
 800618a:	d00e      	beq.n	80061aa <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006192:	2b09      	cmp	r3, #9
 8006194:	d009      	beq.n	80061aa <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b0a      	cmp	r3, #10
 800619e:	d004      	beq.n	80061aa <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\r'))) {
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80061a6:	2b0d      	cmp	r3, #13
 80061a8:	d10a      	bne.n	80061c0 <http_send_data_ssi+0x2fc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	1e5a      	subs	r2, r3, #1
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	601a      	str	r2, [r3, #0]
          break;
 80061be:	e0f1      	b.n	80063a4 <http_send_data_ssi+0x4e0>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	499f      	ldr	r1, [pc, #636]	; (8006444 <http_send_data_ssi+0x580>)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	899b      	ldrh	r3, [r3, #12]
 80061cc:	440b      	add	r3, r1
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d162      	bne.n	800629a <http_send_data_ssi+0x3d6>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	1e5a      	subs	r2, r3, #1
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	899b      	ldrh	r3, [r3, #12]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d14d      	bne.n	800628c <http_send_data_ssi+0x3c8>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80061f0:	6838      	ldr	r0, [r7, #0]
 80061f2:	f7ff fd3b 	bl	8005c6c <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2200      	movs	r2, #0
 80061fa:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2204      	movs	r2, #4
 8006200:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
            ssi->tag_end = ssi->parsed;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	429a      	cmp	r2, r3
 8006216:	f240 80c5 	bls.w	80063a4 <http_send_data_ssi+0x4e0>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	461a      	mov	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800622a:	4293      	cmp	r3, r2
 800622c:	dc07      	bgt.n	800623e <http_send_data_ssi+0x37a>
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	461a      	mov	r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	e001      	b.n	8006242 <http_send_data_ssi+0x37e>
 800623e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006242:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6999      	ldr	r1, [r3, #24]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	bf14      	ite	ne
 8006250:	2301      	movne	r3, #1
 8006252:	2300      	moveq	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f107 020e 	add.w	r2, r7, #14
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fbe2 	bl	8005a24 <http_write>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8006264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f040 809b 	bne.w	80063a4 <http_send_data_ssi+0x4e0>
                data_to_send = 1;
 800626e:	2301      	movs	r3, #1
 8006270:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	89fa      	ldrh	r2, [r7, #14]
 8006278:	441a      	add	r2, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	89fa      	ldrh	r2, [r7, #14]
 8006284:	1a9a      	subs	r2, r3, r2
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	625a      	str	r2, [r3, #36]	; 0x24
 800628a:	e08b      	b.n	80063a4 <http_send_data_ssi+0x4e0>
              }
            }
          } else {
            ssi->tag_index++;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	899b      	ldrh	r3, [r3, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	819a      	strh	r2, [r3, #12]
 8006298:	e084      	b.n	80063a4 <http_send_data_ssi+0x4e0>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
        }
        break;
 80062b6:	e075      	b.n	80063a4 <http_send_data_ssi+0x4e0>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d93d      	bls.n	8006340 <http_send_data_ssi+0x47c>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	461a      	mov	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062d4:	4293      	cmp	r3, r2
 80062d6:	dc07      	bgt.n	80062e8 <http_send_data_ssi+0x424>
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	461a      	mov	r2, r3
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	e001      	b.n	80062ec <http_send_data_ssi+0x428>
 80062e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062ec:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80062ee:	89fb      	ldrh	r3, [r7, #14]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <http_send_data_ssi+0x452>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6999      	ldr	r1, [r3, #24]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f107 020e 	add.w	r2, r7, #14
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fb8a 	bl	8005a24 <http_write>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]
 8006314:	e001      	b.n	800631a <http_send_data_ssi+0x456>
          } else {
            err = ERR_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800631a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d140      	bne.n	80063a4 <http_send_data_ssi+0x4e0>
            data_to_send = 1;
 8006322:	2301      	movs	r3, #1
 8006324:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	89fa      	ldrh	r2, [r7, #14]
 800632c:	441a      	add	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	89fa      	ldrh	r2, [r7, #14]
 8006338:	1a9a      	subs	r2, r3, r2
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
 800633e:	e031      	b.n	80063a4 <http_send_data_ssi+0x4e0>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	899a      	ldrh	r2, [r3, #12]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	89db      	ldrh	r3, [r3, #14]
 8006348:	429a      	cmp	r2, r3
 800634a:	d222      	bcs.n	8006392 <http_send_data_ssi+0x4ce>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	89da      	ldrh	r2, [r3, #14]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	899b      	ldrh	r3, [r3, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	899b      	ldrh	r3, [r3, #12]
 800635e:	3338      	adds	r3, #56	; 0x38
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	1c99      	adds	r1, r3, #2
 8006366:	f107 020e 	add.w	r2, r7, #14
 800636a:	2301      	movs	r3, #1
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff fb59 	bl	8005a24 <http_write>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8006376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d112      	bne.n	80063a4 <http_send_data_ssi+0x4e0>
              data_to_send = 1;
 800637e:	2301      	movs	r3, #1
 8006380:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	899a      	ldrh	r2, [r3, #12]
 8006386:	89fb      	ldrh	r3, [r7, #14]
 8006388:	4413      	add	r3, r2
 800638a:	b29a      	uxth	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	819a      	strh	r2, [r3, #12]
 8006390:	e008      	b.n	80063a4 <http_send_data_ssi+0x4e0>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2200      	movs	r2, #0
 8006396:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80063a0:	e000      	b.n	80063a4 <http_send_data_ssi+0x4e0>
        default:
          break;
 80063a2:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <http_send_data_ssi+0x4f2>
 80063ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f43f ade7 	beq.w	8005f84 <http_send_data_ssi+0xc0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d03c      	beq.n	800643a <http_send_data_ssi+0x576>
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d936      	bls.n	800643a <http_send_data_ssi+0x576>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063dc:	4293      	cmp	r3, r2
 80063de:	dc07      	bgt.n	80063f0 <http_send_data_ssi+0x52c>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	e001      	b.n	80063f4 <http_send_data_ssi+0x530>
 80063f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063f4:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6999      	ldr	r1, [r3, #24]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f107 020e 	add.w	r2, r7, #14
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fb09 	bl	8005a24 <http_write>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8006416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10d      	bne.n	800643a <http_send_data_ssi+0x576>
      data_to_send = 1;
 800641e:	2301      	movs	r3, #1
 8006420:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	89fa      	ldrh	r2, [r7, #14]
 8006428:	441a      	add	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	89fa      	ldrh	r2, [r7, #14]
 8006434:	1a9a      	subs	r2, r3, r2
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800643a:	7dbb      	ldrb	r3, [r7, #22]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	08016188 	.word	0x08016188

08006448 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <http_send+0x18>
    return 0;
 800645c:	2300      	movs	r3, #0
 800645e:	e030      	b.n	80064c2 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d108      	bne.n	800647a <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fcbe 	bl	8005dec <http_check_eof>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <http_send+0x32>
      return 0;
 8006476:	2300      	movs	r3, #0
 8006478:	e023      	b.n	80064c2 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d006      	beq.n	8006490 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fd1d 	bl	8005ec4 <http_send_data_ssi>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
 800648e:	e005      	b.n	800649c <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fcda 	bl	8005e4c <http_send_data_nonssi>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10d      	bne.n	80064c0 <http_send+0x78>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fa29 	bl	8005900 <fs_bytes_left>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dc05      	bgt.n	80064c0 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fb6d 	bl	8005b96 <http_eof>
    return 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	; (800654c <http_get_404_file+0x80>)
 80064da:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7ff f9c3 	bl	8005870 <fs_open>
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80064ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d024      	beq.n	8006540 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <http_get_404_file+0x84>)
 80064fa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7ff f9b3 	bl	8005870 <fs_open>
 800650a:	4603      	mov	r3, r0
 800650c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800650e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d014      	beq.n	8006540 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	4a0e      	ldr	r2, [pc, #56]	; (8006554 <http_get_404_file+0x88>)
 800651a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7ff f9a3 	bl	8005870 <fs_open>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800652e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
        return NULL;
 800653c:	2300      	movs	r3, #0
 800653e:	e000      	b.n	8006542 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8006540:	687b      	ldr	r3, [r7, #4]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	08016290 	.word	0x08016290
 8006550:	0801629c 	.word	0x0801629c
 8006554:	080162a8 	.word	0x080162a8

08006558 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <http_parse_request+0x24>
 800656e:	4b65      	ldr	r3, [pc, #404]	; (8006704 <http_parse_request+0x1ac>)
 8006570:	f240 727e 	movw	r2, #1918	; 0x77e
 8006574:	4964      	ldr	r1, [pc, #400]	; (8006708 <http_parse_request+0x1b0>)
 8006576:	4865      	ldr	r0, [pc, #404]	; (800670c <http_parse_request+0x1b4>)
 8006578:	f00e fbf0 	bl	8014d5c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <http_parse_request+0x38>
 8006582:	4b60      	ldr	r3, [pc, #384]	; (8006704 <http_parse_request+0x1ac>)
 8006584:	f240 727f 	movw	r2, #1919	; 0x77f
 8006588:	4961      	ldr	r1, [pc, #388]	; (8006710 <http_parse_request+0x1b8>)
 800658a:	4860      	ldr	r0, [pc, #384]	; (800670c <http_parse_request+0x1b4>)
 800658c:	f00e fbe6 	bl	8014d5c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <http_parse_request+0x48>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80065a0:	f06f 0307 	mvn.w	r3, #7
 80065a4:	e0aa      	b.n	80066fc <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	621a      	str	r2, [r3, #32]
 80065b4:	e005      	b.n	80065c2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fefb 	bl	80083b8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80065c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c4:	f001 fed6 	bl	8008374 <pbuf_ref>

  if (hs->req->next != NULL) {
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d012      	beq.n	80065f8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	891b      	ldrh	r3, [r3, #8]
 80065d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80065dc:	4293      	cmp	r3, r2
 80065de:	bf28      	it	cs
 80065e0:	4613      	movcs	r3, r2
 80065e2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6a18      	ldr	r0, [r3, #32]
 80065e8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80065ea:	2300      	movs	r3, #0
 80065ec:	4949      	ldr	r1, [pc, #292]	; (8006714 <http_parse_request+0x1bc>)
 80065ee:	f002 f815 	bl	800861c <pbuf_copy_partial>
    data = httpd_req_buf;
 80065f2:	4b48      	ldr	r3, [pc, #288]	; (8006714 <http_parse_request+0x1bc>)
 80065f4:	637b      	str	r3, [r7, #52]	; 0x34
 80065f6:	e005      	b.n	8006604 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	895b      	ldrh	r3, [r3, #10]
 8006602:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006604:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006606:	2b06      	cmp	r3, #6
 8006608:	d963      	bls.n	80066d2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800660a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800660c:	461a      	mov	r2, r3
 800660e:	4942      	ldr	r1, [pc, #264]	; (8006718 <http_parse_request+0x1c0>)
 8006610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006612:	f000 fc94 	bl	8006f3e <lwip_strnstr>
 8006616:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d059      	beq.n	80066d2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006622:	2204      	movs	r2, #4
 8006624:	493d      	ldr	r1, [pc, #244]	; (800671c <http_parse_request+0x1c4>)
 8006626:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006628:	f00e fc19 	bl	8014e5e <strncmp>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d117      	bne.n	8006662 <http_parse_request+0x10a>
        sp1 = data + 3;
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	3303      	adds	r3, #3
 8006636:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	3301      	adds	r3, #1
 800663c:	461a      	mov	r2, r3
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	b29b      	uxth	r3, r3
 8006644:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	8b7a      	ldrh	r2, [r7, #26]
 8006650:	4933      	ldr	r1, [pc, #204]	; (8006720 <http_parse_request+0x1c8>)
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fc73 	bl	8006f3e <lwip_strnstr>
 8006658:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	d111      	bne.n	8006684 <http_parse_request+0x12c>
 8006660:	e006      	b.n	8006670 <http_parse_request+0x118>
        data[4] = 0;
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	3304      	adds	r3, #4
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800666a:	f06f 030f 	mvn.w	r3, #15
 800666e:	e045      	b.n	80066fc <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	3301      	adds	r3, #1
 8006674:	8b7a      	ldrh	r2, [r7, #26]
 8006676:	4928      	ldr	r1, [pc, #160]	; (8006718 <http_parse_request+0x1c0>)
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fc60 	bl	8006f3e <lwip_strnstr>
 800667e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8006680:	2301      	movs	r3, #1
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	3201      	adds	r2, #1
 800668a:	1a9b      	subs	r3, r3, r2
 800668c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01e      	beq.n	80066d2 <http_parse_request+0x17a>
 8006694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	429a      	cmp	r2, r3
 800669a:	d91a      	bls.n	80066d2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800669c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800669e:	461a      	mov	r2, r3
 80066a0:	4920      	ldr	r1, [pc, #128]	; (8006724 <http_parse_request+0x1cc>)
 80066a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066a4:	f000 fc4b 	bl	8006f3e <lwip_strnstr>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d011      	beq.n	80066d2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80066ba:	8b3b      	ldrh	r3, [r7, #24]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4413      	add	r3, r2
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80066c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c6:	6979      	ldr	r1, [r7, #20]
 80066c8:	68b8      	ldr	r0, [r7, #8]
 80066ca:	f000 f82d 	bl	8006728 <http_find_file>
 80066ce:	4603      	mov	r3, r0
 80066d0:	e014      	b.n	80066fc <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fe34 	bl	8008344 <pbuf_clen>
 80066dc:	4603      	mov	r3, r0
 80066de:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	891b      	ldrh	r3, [r3, #8]
 80066e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ea:	d205      	bcs.n	80066f8 <http_parse_request+0x1a0>
 80066ec:	8a7b      	ldrh	r3, [r7, #18]
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d802      	bhi.n	80066f8 <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80066f2:	f06f 0304 	mvn.w	r3, #4
 80066f6:	e001      	b.n	80066fc <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80066f8:	f06f 030f 	mvn.w	r3, #15
  }
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3738      	adds	r7, #56	; 0x38
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	0801618c 	.word	0x0801618c
 8006708:	080162b4 	.word	0x080162b4
 800670c:	080161d4 	.word	0x080161d4
 8006710:	080161fc 	.word	0x080161fc
 8006714:	20000220 	.word	0x20000220
 8006718:	080162c0 	.word	0x080162c0
 800671c:	080162c4 	.word	0x080162c4
 8006720:	080162cc 	.word	0x080162cc
 8006724:	080162d0 	.word	0x080162d0

08006728 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b097      	sub	sp, #92	; 0x5c
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	64bb      	str	r3, [r7, #72]	; 0x48
  char *params = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f7f9 fd4d 	bl	80001e4 <strlen>
 800674a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d06c      	beq.n	800682c <http_find_file+0x104>
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	3b01      	subs	r3, #1
 8006758:	4413      	add	r3, r2
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b2f      	cmp	r3, #47	; 0x2f
 800675e:	d165      	bne.n	800682c <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006760:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8006762:	4a98      	ldr	r2, [pc, #608]	; (80069c4 <http_find_file+0x29c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d102      	bne.n	800676e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d15e      	bne.n	800682c <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	3b01      	subs	r3, #1
 8006772:	2bc8      	cmp	r3, #200	; 0xc8
 8006774:	bf28      	it	cs
 8006776:	23c8      	movcs	r3, #200	; 0xc8
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
    if (copy_len > 0) {
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006784:	4619      	mov	r1, r3
 8006786:	488f      	ldr	r0, [pc, #572]	; (80069c4 <http_find_file+0x29c>)
 8006788:	f00e fad5 	bl	8014d36 <memcpy>
      http_uri_buf[copy_len] = 0;
 800678c:	4a8d      	ldr	r2, [pc, #564]	; (80069c4 <http_find_file+0x29c>)
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	4413      	add	r3, r2
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006796:	2300      	movs	r3, #0
 8006798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679a:	e044      	b.n	8006826 <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d022      	beq.n	80067e8 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
        if (len_left > 0) {
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d018      	beq.n	80067e2 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 80067b0:	4a85      	ldr	r2, [pc, #532]	; (80069c8 <http_find_file+0x2a0>)
 80067b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7f9 fd13 	bl	80001e4 <strlen>
 80067be:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80067c0:	6a3a      	ldr	r2, [r7, #32]
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bf28      	it	cs
 80067c8:	4613      	movcs	r3, r2
 80067ca:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	4a7d      	ldr	r2, [pc, #500]	; (80069c4 <http_find_file+0x29c>)
 80067d0:	1898      	adds	r0, r3, r2
 80067d2:	4a7d      	ldr	r2, [pc, #500]	; (80069c8 <http_find_file+0x2a0>)
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	4619      	mov	r1, r3
 80067de:	f00e faaa 	bl	8014d36 <memcpy>
        }
        file_name = http_uri_buf;
 80067e2:	4b78      	ldr	r3, [pc, #480]	; (80069c4 <http_find_file+0x29c>)
 80067e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067e6:	e004      	b.n	80067f2 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 80067e8:	4a77      	ldr	r2, [pc, #476]	; (80069c8 <http_find_file+0x2a0>)
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067f0:	63bb      	str	r3, [r7, #56]	; 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff f83a 	bl	8005870 <fs_open>
 80067fc:	4603      	mov	r3, r0
 80067fe:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 8006800:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <http_find_file+0xf8>
        uri = file_name;
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	64bb      	str	r3, [r7, #72]	; 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 8006810:	4a6d      	ldr	r2, [pc, #436]	; (80069c8 <http_find_file+0x2a0>)
 8006812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4413      	add	r3, r2
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800681e:	e005      	b.n	800682c <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	3301      	adds	r3, #1
 8006824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006828:	2b04      	cmp	r3, #4
 800682a:	d9b7      	bls.n	800679c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800682c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 80ac 	bne.w	800698c <http_find_file+0x264>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	213f      	movs	r1, #63	; 0x3f
 8006838:	4618      	mov	r0, r3
 800683a:	f00e fafb 	bl	8014e34 <strchr>
 800683e:	6478      	str	r0, [r7, #68]	; 0x44
    if (params != NULL) {
 8006840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
      params++;
 800684c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684e:	3301      	adds	r3, #1
 8006850:	647b      	str	r3, [r7, #68]	; 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8006852:	4b5e      	ldr	r3, [pc, #376]	; (80069cc <http_find_file+0x2a4>)
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800685a:	4b5d      	ldr	r3, [pc, #372]	; (80069d0 <http_find_file+0x2a8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d035      	beq.n	80068ce <http_find_file+0x1a6>
 8006862:	4b5c      	ldr	r3, [pc, #368]	; (80069d4 <http_find_file+0x2ac>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d031      	beq.n	80068ce <http_find_file+0x1a6>
      for (i = 0; i < g_iNumCGIs; i++) {
 800686a:	2300      	movs	r3, #0
 800686c:	643b      	str	r3, [r7, #64]	; 0x40
 800686e:	e029      	b.n	80068c4 <http_find_file+0x19c>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 8006870:	68b8      	ldr	r0, [r7, #8]
 8006872:	4b58      	ldr	r3, [pc, #352]	; (80069d4 <http_find_file+0x2ac>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4413      	add	r3, r2
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4619      	mov	r1, r3
 8006880:	f7f9 fca6 	bl	80001d0 <strcmp>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d119      	bne.n	80068be <http_find_file+0x196>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800688a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff f98f 	bl	8005bb0 <extract_uri_parameters>
 8006892:	4602      	mov	r2, r0
 8006894:	4b4d      	ldr	r3, [pc, #308]	; (80069cc <http_find_file+0x2a4>)
 8006896:	601a      	str	r2, [r3, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006898:	4b4e      	ldr	r3, [pc, #312]	; (80069d4 <http_find_file+0x2ac>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	4413      	add	r3, r2
 80068a2:	685c      	ldr	r4, [r3, #4]
 80068a4:	4b49      	ldr	r3, [pc, #292]	; (80069cc <http_find_file+0x2a4>)
 80068a6:	6819      	ldr	r1, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                          hs->param_vals);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80068b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80068b6:	47a0      	blx	r4
 80068b8:	4603      	mov	r3, r0
 80068ba:	60bb      	str	r3, [r7, #8]
           break;
 80068bc:	e007      	b.n	80068ce <http_find_file+0x1a6>
      for (i = 0; i < g_iNumCGIs; i++) {
 80068be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c0:	3301      	adds	r3, #1
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40
 80068c4:	4b42      	ldr	r3, [pc, #264]	; (80069d0 <http_find_file+0x2a8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ca:	429a      	cmp	r2, r3
 80068cc:	dbd0      	blt.n	8006870 <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe ffcb 	bl	8005870 <fs_open>
 80068da:	4603      	mov	r3, r0
 80068dc:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 80068de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <http_find_file+0x1c4>
       file = &hs->file_handle;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ea:	e006      	b.n	80068fa <http_find_file+0x1d2>
    } else {
      file = http_get_404_file(hs, &uri);
 80068ec:	f107 0308 	add.w	r3, r7, #8
 80068f0:	4619      	mov	r1, r3
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fdea 	bl	80064cc <http_get_404_file>
 80068f8:	64b8      	str	r0, [r7, #72]	; 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 80068fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d045      	beq.n	800698c <http_find_file+0x264>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 8006900:	2300      	movs	r3, #0
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
      char* param = (char*)strstr(uri, "?");
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	213f      	movs	r1, #63	; 0x3f
 8006908:	4618      	mov	r0, r3
 800690a:	f00e fa93 	bl	8014e34 <strchr>
 800690e:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <http_find_file+0x1f4>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	633b      	str	r3, [r7, #48]	; 0x30
      ext = uri;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8006924:	212e      	movs	r1, #46	; 0x2e
 8006926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006928:	f00e fa84 	bl	8014e34 <strchr>
 800692c:	6338      	str	r0, [r7, #48]	; 0x30
 800692e:	e009      	b.n	8006944 <http_find_file+0x21c>
      {
         ext = sub;
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
         sub++;
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	3301      	adds	r3, #1
 8006938:	633b      	str	r3, [r7, #48]	; 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800693a:	212e      	movs	r1, #46	; 0x2e
 800693c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800693e:	f00e fa79 	bl	8014e34 <strchr>
 8006942:	6338      	str	r0, [r7, #48]	; 0x30
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f2      	bne.n	8006930 <http_find_file+0x208>
      }
      tag_check = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006950:	2300      	movs	r3, #0
 8006952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006954:	e011      	b.n	800697a <http_find_file+0x252>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8006956:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <http_find_file+0x2b0>)
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695e:	4619      	mov	r1, r3
 8006960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006962:	f000 fb22 	bl	8006faa <lwip_stricmp>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d103      	bne.n	8006974 <http_find_file+0x24c>
          tag_check = 1;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 8006972:	e005      	b.n	8006980 <http_find_file+0x258>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006976:	3301      	adds	r3, #1
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	2b03      	cmp	r3, #3
 800697e:	d9ea      	bls.n	8006956 <http_find_file+0x22e>
        }
      }
      if (param != NULL) {
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <http_find_file+0x264>
         *param = '?';
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	223f      	movs	r2, #63	; 0x3f
 800698a:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800698c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <http_find_file+0x278>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006992:	f107 0308 	add.w	r3, r7, #8
 8006996:	4619      	mov	r1, r3
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fd97 	bl	80064cc <http_get_404_file>
 800699e:	64b8      	str	r0, [r7, #72]	; 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f812 	bl	80069dc <http_init_file>
 80069b8:	4603      	mov	r3, r0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3754      	adds	r7, #84	; 0x54
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000620 	.word	0x20000620
 80069c8:	0801970c 	.word	0x0801970c
 80069cc:	2000090c 	.word	0x2000090c
 80069d0:	20000904 	.word	0x20000904
 80069d4:	20000914 	.word	0x20000914
 80069d8:	080196fc 	.word	0x080196fc

080069dc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d073      	beq.n	8006ad8 <http_init_file+0xfc>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 80069f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01c      	beq.n	8006a32 <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80069f8:	f7fe ff91 	bl	800591e <http_ssi_state_alloc>
 80069fc:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d016      	beq.n	8006a32 <http_init_file+0x56>
        ssi->tag_index = 0;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2200      	movs	r2, #0
 8006a08:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
        ssi->parsed = file->data;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da06      	bge.n	8006a56 <http_init_file+0x7a>
 8006a48:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <http_init_file+0x120>)
 8006a4a:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8006a4e:	492c      	ldr	r1, [pc, #176]	; (8006b00 <http_init_file+0x124>)
 8006a50:	482c      	ldr	r0, [pc, #176]	; (8006b04 <http_init_file+0x128>)
 8006a52:	f00e f983 	bl	8014d5c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	7c1b      	ldrb	r3, [r3, #16]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <http_init_file+0xa8>
 8006a76:	4b21      	ldr	r3, [pc, #132]	; (8006afc <http_init_file+0x120>)
 8006a78:	f640 02df 	movw	r2, #2271	; 0x8df
 8006a7c:	4922      	ldr	r1, [pc, #136]	; (8006b08 <http_init_file+0x12c>)
 8006a7e:	4821      	ldr	r0, [pc, #132]	; (8006b04 <http_init_file+0x128>)
 8006a80:	f00e f96c 	bl	8014d5c <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d033      	beq.n	8006af2 <http_init_file+0x116>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	7c1b      	ldrb	r3, [r3, #16]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02c      	beq.n	8006af2 <http_init_file+0x116>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6998      	ldr	r0, [r3, #24]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	491a      	ldr	r1, [pc, #104]	; (8006b0c <http_init_file+0x130>)
 8006aa4:	f000 fa4b 	bl	8006f3e <lwip_strnstr>
 8006aa8:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d020      	beq.n	8006af2 <http_init_file+0x116>
        size_t diff = file_start + 4 - hs->file;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	441a      	add	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ad6:	e00c      	b.n	8006af2 <http_init_file+0x116>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0801618c 	.word	0x0801618c
 8006b00:	080162d8 	.word	0x080162d8
 8006b04:	080161d4 	.word	0x080161d4
 8006b08:	080162f8 	.word	0x080162f8
 8006b0c:	080162d0 	.word	0x080162d0

08006b10 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <http_err+0x1c>
    http_state_free(hs);
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fe ff6a 	bl	8005a00 <http_state_free>
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <http_sent+0x1c>
    return ERR_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e008      	b.n	8006b62 <http_sent+0x2e>
  }

  hs->retries = 0;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8006b58:	6979      	ldr	r1, [r7, #20]
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f7ff fc74 	bl	8006448 <http_send>

  return ERR_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d107      	bne.n	8006b8e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8006b7e:	2100      	movs	r1, #0
 8006b80:	6838      	ldr	r0, [r7, #0]
 8006b82:	f7fe fff9 	bl	8005b78 <http_close_conn>
 8006b86:	4603      	mov	r3, r0
 8006b88:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e024      	b.n	8006bd8 <http_poll+0x6e>
  } else {
    hs->retries++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b94:	3301      	adds	r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d105      	bne.n	8006bb4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006ba8:	68f9      	ldr	r1, [r7, #12]
 8006baa:	6838      	ldr	r0, [r7, #0]
 8006bac:	f7fe ffe4 	bl	8005b78 <http_close_conn>
      return ERR_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e011      	b.n	8006bd8 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <http_poll+0x6c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f7ff fc3f 	bl	8006448 <http_send>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 8006bd0:	6838      	ldr	r0, [r7, #0]
 8006bd2:	f006 fab7 	bl	800d144 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <http_recv+0x26>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <http_recv+0x26>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d111      	bne.n	8006c2a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	891b      	ldrh	r3, [r3, #8]
 8006c10:	4619      	mov	r1, r3
 8006c12:	68b8      	ldr	r0, [r7, #8]
 8006c14:	f002 f9aa 	bl	8008f6c <tcp_recved>
      pbuf_free(p);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 faff 	bl	800821c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006c1e:	6979      	ldr	r1, [r7, #20]
 8006c20:	68b8      	ldr	r0, [r7, #8]
 8006c22:	f7fe ffa9 	bl	8005b78 <http_close_conn>
    return ERR_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e055      	b.n	8006cd6 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	891b      	ldrh	r3, [r3, #8]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f002 f99b 	bl	8008f6c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d147      	bne.n	8006cce <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fc88 	bl	8006558 <http_parse_request>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006c4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d015      	beq.n	8006c80 <http_recv+0xa0>
 8006c54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c58:	f113 0f05 	cmn.w	r3, #5
 8006c5c:	d010      	beq.n	8006c80 <http_recv+0xa0>
 8006c5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c62:	f113 0f10 	cmn.w	r3, #16
 8006c66:	d00b      	beq.n	8006c80 <http_recv+0xa0>
 8006c68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c6c:	f113 0f08 	cmn.w	r3, #8
 8006c70:	d006      	beq.n	8006c80 <http_recv+0xa0>
 8006c72:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <http_recv+0x100>)
 8006c74:	f640 12b5 	movw	r2, #2485	; 0x9b5
 8006c78:	491a      	ldr	r1, [pc, #104]	; (8006ce4 <http_recv+0x104>)
 8006c7a:	481b      	ldr	r0, [pc, #108]	; (8006ce8 <http_recv+0x108>)
 8006c7c:	f00e f86e 	bl	8014d5c <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006c80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c84:	f113 0f05 	cmn.w	r3, #5
 8006c88:	d00b      	beq.n	8006ca2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <http_recv+0xc2>
          pbuf_free(hs->req);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fac0 	bl	800821c <pbuf_free>
          hs->req = NULL;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 faba 	bl	800821c <pbuf_free>
      if (parsed == ERR_OK) {
 8006ca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 8006cb0:	6979      	ldr	r1, [r7, #20]
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f7ff fbc8 	bl	8006448 <http_send>
 8006cb8:	e00c      	b.n	8006cd4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8006cba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cbe:	f113 0f10 	cmn.w	r3, #16
 8006cc2:	d107      	bne.n	8006cd4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8006cc4:	6979      	ldr	r1, [r7, #20]
 8006cc6:	68b8      	ldr	r0, [r7, #8]
 8006cc8:	f7fe ff56 	bl	8005b78 <http_close_conn>
 8006ccc:	e002      	b.n	8006cd4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 faa4 	bl	800821c <pbuf_free>
    }
  }
  return ERR_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	0801618c 	.word	0x0801618c
 8006ce4:	08016324 	.word	0x08016324
 8006ce8:	080161d4 	.word	0x080161d4

08006cec <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <http_accept+0x1c>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <http_accept+0x22>
    return ERR_VAL;
 8006d08:	f06f 0305 	mvn.w	r3, #5
 8006d0c:	e025      	b.n	8006d5a <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006d0e:	2101      	movs	r1, #1
 8006d10:	68b8      	ldr	r0, [r7, #8]
 8006d12:	f002 fd82 	bl	800981a <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006d16:	f7fe fe34 	bl	8005982 <http_state_alloc>
 8006d1a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	e018      	b.n	8006d5a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	68b8      	ldr	r0, [r7, #8]
 8006d32:	f002 ff13 	bl	8009b5c <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8006d36:	490b      	ldr	r1, [pc, #44]	; (8006d64 <http_accept+0x78>)
 8006d38:	68b8      	ldr	r0, [r7, #8]
 8006d3a:	f002 ff21 	bl	8009b80 <tcp_recv>
  tcp_err(pcb, http_err);
 8006d3e:	490a      	ldr	r1, [pc, #40]	; (8006d68 <http_accept+0x7c>)
 8006d40:	68b8      	ldr	r0, [r7, #8]
 8006d42:	f002 ff5f 	bl	8009c04 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006d46:	2204      	movs	r2, #4
 8006d48:	4908      	ldr	r1, [pc, #32]	; (8006d6c <http_accept+0x80>)
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f002 ff94 	bl	8009c78 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8006d50:	4907      	ldr	r1, [pc, #28]	; (8006d70 <http_accept+0x84>)
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	f002 ff36 	bl	8009bc4 <tcp_sent>

  return ERR_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	08006be1 	.word	0x08006be1
 8006d68:	08006b11 	.word	0x08006b11
 8006d6c:	08006b6b 	.word	0x08006b6b
 8006d70:	08006b35 	.word	0x08006b35

08006d74 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006d7a:	202e      	movs	r0, #46	; 0x2e
 8006d7c:	f002 fee0 	bl	8009b40 <tcp_new_ip_type>
 8006d80:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <httpd_init+0x22>
 8006d88:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <httpd_init+0x7c>)
 8006d8a:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8006d8e:	4919      	ldr	r1, [pc, #100]	; (8006df4 <httpd_init+0x80>)
 8006d90:	4819      	ldr	r0, [pc, #100]	; (8006df8 <httpd_init+0x84>)
 8006d92:	f00d ffe3 	bl	8014d5c <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006d96:	2101      	movs	r1, #1
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f002 fd3e 	bl	800981a <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8006d9e:	2250      	movs	r2, #80	; 0x50
 8006da0:	4916      	ldr	r1, [pc, #88]	; (8006dfc <httpd_init+0x88>)
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 ff48 	bl	8008c38 <tcp_bind>
 8006da8:	4603      	mov	r3, r0
 8006daa:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <httpd_init+0x4e>
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <httpd_init+0x7c>)
 8006db6:	f640 2215 	movw	r2, #2581	; 0xa15
 8006dba:	4911      	ldr	r1, [pc, #68]	; (8006e00 <httpd_init+0x8c>)
 8006dbc:	480e      	ldr	r0, [pc, #56]	; (8006df8 <httpd_init+0x84>)
 8006dbe:	f00d ffcd 	bl	8014d5c <iprintf>
  pcb = tcp_listen(pcb);
 8006dc2:	21ff      	movs	r1, #255	; 0xff
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 ffd9 	bl	8008d7c <tcp_listen_with_backlog>
 8006dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <httpd_init+0x6c>
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <httpd_init+0x7c>)
 8006dd4:	f640 2217 	movw	r2, #2583	; 0xa17
 8006dd8:	490a      	ldr	r1, [pc, #40]	; (8006e04 <httpd_init+0x90>)
 8006dda:	4807      	ldr	r0, [pc, #28]	; (8006df8 <httpd_init+0x84>)
 8006ddc:	f00d ffbe 	bl	8014d5c <iprintf>
  tcp_accept(pcb, http_accept);
 8006de0:	4909      	ldr	r1, [pc, #36]	; (8006e08 <httpd_init+0x94>)
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 ff30 	bl	8009c48 <tcp_accept>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	0801618c 	.word	0x0801618c
 8006df4:	08016350 	.word	0x08016350
 8006df8:	080161d4 	.word	0x080161d4
 8006dfc:	08019814 	.word	0x08019814
 8006e00:	0801636c 	.word	0x0801636c
 8006e04:	08016388 	.word	0x08016388
 8006e08:	08006ced 	.word	0x08006ced

08006e0c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <http_set_ssi_handler+0x20>
 8006e1e:	4b14      	ldr	r3, [pc, #80]	; (8006e70 <http_set_ssi_handler+0x64>)
 8006e20:	f640 2228 	movw	r2, #2600	; 0xa28
 8006e24:	4913      	ldr	r1, [pc, #76]	; (8006e74 <http_set_ssi_handler+0x68>)
 8006e26:	4814      	ldr	r0, [pc, #80]	; (8006e78 <http_set_ssi_handler+0x6c>)
 8006e28:	f00d ff98 	bl	8014d5c <iprintf>
  g_pfnSSIHandler = ssi_handler;
 8006e2c:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <http_set_ssi_handler+0x70>)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d106      	bne.n	8006e46 <http_set_ssi_handler+0x3a>
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <http_set_ssi_handler+0x64>)
 8006e3a:	f640 222f 	movw	r2, #2607	; 0xa2f
 8006e3e:	4910      	ldr	r1, [pc, #64]	; (8006e80 <http_set_ssi_handler+0x74>)
 8006e40:	480d      	ldr	r0, [pc, #52]	; (8006e78 <http_set_ssi_handler+0x6c>)
 8006e42:	f00d ff8b 	bl	8014d5c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dc06      	bgt.n	8006e5a <http_set_ssi_handler+0x4e>
 8006e4c:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <http_set_ssi_handler+0x64>)
 8006e4e:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8006e52:	490c      	ldr	r1, [pc, #48]	; (8006e84 <http_set_ssi_handler+0x78>)
 8006e54:	4808      	ldr	r0, [pc, #32]	; (8006e78 <http_set_ssi_handler+0x6c>)
 8006e56:	f00d ff81 	bl	8014d5c <iprintf>

  g_ppcTags = tags;
 8006e5a:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <http_set_ssi_handler+0x7c>)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 8006e60:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <http_set_ssi_handler+0x80>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	0801618c 	.word	0x0801618c
 8006e74:	080163a8 	.word	0x080163a8
 8006e78:	080161d4 	.word	0x080161d4
 8006e7c:	20000908 	.word	0x20000908
 8006e80:	080163c0 	.word	0x080163c0
 8006e84:	080163d0 	.word	0x080163d0
 8006e88:	20000918 	.word	0x20000918
 8006e8c:	20000910 	.word	0x20000910

08006e90 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <http_set_cgi_handlers+0x1e>
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <http_set_cgi_handlers+0x48>)
 8006ea2:	f640 2242 	movw	r2, #2626	; 0xa42
 8006ea6:	490d      	ldr	r1, [pc, #52]	; (8006edc <http_set_cgi_handlers+0x4c>)
 8006ea8:	480d      	ldr	r0, [pc, #52]	; (8006ee0 <http_set_cgi_handlers+0x50>)
 8006eaa:	f00d ff57 	bl	8014d5c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dc06      	bgt.n	8006ec2 <http_set_cgi_handlers+0x32>
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <http_set_cgi_handlers+0x48>)
 8006eb6:	f640 2243 	movw	r2, #2627	; 0xa43
 8006eba:	490a      	ldr	r1, [pc, #40]	; (8006ee4 <http_set_cgi_handlers+0x54>)
 8006ebc:	4808      	ldr	r0, [pc, #32]	; (8006ee0 <http_set_cgi_handlers+0x50>)
 8006ebe:	f00d ff4d 	bl	8014d5c <iprintf>

  g_pCGIs = cgis;
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <http_set_cgi_handlers+0x58>)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 8006ec8:	4a08      	ldr	r2, [pc, #32]	; (8006eec <http_set_cgi_handlers+0x5c>)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6013      	str	r3, [r2, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	0801618c 	.word	0x0801618c
 8006edc:	080163e8 	.word	0x080163e8
 8006ee0:	080161d4 	.word	0x080161d4
 8006ee4:	080163f8 	.word	0x080163f8
 8006ee8:	20000914 	.word	0x20000914
 8006eec:	20000904 	.word	0x20000904

08006ef0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	ba5b      	rev16	r3, r3
 8006efe:	b29b      	uxth	r3, r3
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	061a      	lsls	r2, r3, #24
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	0a1b      	lsrs	r3, r3, #8
 8006f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	0e1b      	lsrs	r3, r3, #24
 8006f30:	4313      	orrs	r3, r2
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 8006f4a:	68b8      	ldr	r0, [r7, #8]
 8006f4c:	f7f9 f94a 	bl	80001e4 <strlen>
 8006f50:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	e022      	b.n	8006fa2 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e012      	b.n	8006f88 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d109      	bne.n	8006f82 <lwip_strnstr+0x44>
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f00d ff73 	bl	8014e5e <strncmp>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	e00f      	b.n	8006fa2 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	3301      	adds	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <lwip_strnstr+0x62>
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	441a      	add	r2, r3
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d9e0      	bls.n	8006f62 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	603a      	str	r2, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8006fc8:	7bfa      	ldrb	r2, [r7, #15]
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d016      	beq.n	8006ffe <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	f043 0320 	orr.w	r3, r3, #32
 8006fd6:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006fd8:	7b7b      	ldrb	r3, [r7, #13]
 8006fda:	2b60      	cmp	r3, #96	; 0x60
 8006fdc:	d90c      	bls.n	8006ff8 <lwip_stricmp+0x4e>
 8006fde:	7b7b      	ldrb	r3, [r7, #13]
 8006fe0:	2b7a      	cmp	r3, #122	; 0x7a
 8006fe2:	d809      	bhi.n	8006ff8 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	f043 0320 	orr.w	r3, r3, #32
 8006fea:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8006fec:	7b7a      	ldrb	r2, [r7, #13]
 8006fee:	7b3b      	ldrb	r3, [r7, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d003      	beq.n	8006ffc <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e006      	b.n	8007006 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e004      	b.n	8007006 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006ffc:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1d7      	bne.n	8006fb4 <lwip_stricmp+0xa>
  return 0;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800701c:	f000 f8a6 	bl	800716c <mem_init>
  memp_init();
 8007020:	f000 fb3a 	bl	8007698 <memp_init>
  pbuf_init();
  netif_init();
 8007024:	f000 fbf2 	bl	800780c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007028:	f006 feb8 	bl	800dd9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800702c:	f001 fb70 	bl	8008710 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8007030:	f006 fd96 	bl	800db60 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007044:	4b40      	ldr	r3, [pc, #256]	; (8007148 <plug_holes+0x10c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	429a      	cmp	r2, r3
 800704c:	d206      	bcs.n	800705c <plug_holes+0x20>
 800704e:	4b3f      	ldr	r3, [pc, #252]	; (800714c <plug_holes+0x110>)
 8007050:	f240 125d 	movw	r2, #349	; 0x15d
 8007054:	493e      	ldr	r1, [pc, #248]	; (8007150 <plug_holes+0x114>)
 8007056:	483f      	ldr	r0, [pc, #252]	; (8007154 <plug_holes+0x118>)
 8007058:	f00d fe80 	bl	8014d5c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800705c:	4b3e      	ldr	r3, [pc, #248]	; (8007158 <plug_holes+0x11c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d306      	bcc.n	8007074 <plug_holes+0x38>
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <plug_holes+0x110>)
 8007068:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800706c:	493b      	ldr	r1, [pc, #236]	; (800715c <plug_holes+0x120>)
 800706e:	4839      	ldr	r0, [pc, #228]	; (8007154 <plug_holes+0x118>)
 8007070:	f00d fe74 	bl	8014d5c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	791b      	ldrb	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <plug_holes+0x4e>
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <plug_holes+0x110>)
 800707e:	f240 125f 	movw	r2, #351	; 0x15f
 8007082:	4937      	ldr	r1, [pc, #220]	; (8007160 <plug_holes+0x124>)
 8007084:	4833      	ldr	r0, [pc, #204]	; (8007154 <plug_holes+0x118>)
 8007086:	f00d fe69 	bl	8014d5c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007092:	d906      	bls.n	80070a2 <plug_holes+0x66>
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <plug_holes+0x110>)
 8007096:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800709a:	4932      	ldr	r1, [pc, #200]	; (8007164 <plug_holes+0x128>)
 800709c:	482d      	ldr	r0, [pc, #180]	; (8007154 <plug_holes+0x118>)
 800709e:	f00d fe5d 	bl	8014d5c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80070a2:	4b29      	ldr	r3, [pc, #164]	; (8007148 <plug_holes+0x10c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	8812      	ldrh	r2, [r2, #0]
 80070aa:	4413      	add	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d01f      	beq.n	80070f6 <plug_holes+0xba>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d11b      	bne.n	80070f6 <plug_holes+0xba>
 80070be:	4b26      	ldr	r3, [pc, #152]	; (8007158 <plug_holes+0x11c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d016      	beq.n	80070f6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80070c8:	4b27      	ldr	r3, [pc, #156]	; (8007168 <plug_holes+0x12c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <plug_holes+0x9c>
      lfree = mem;
 80070d2:	4a25      	ldr	r2, [pc, #148]	; (8007168 <plug_holes+0x12c>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	881a      	ldrh	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a19      	ldr	r2, [pc, #100]	; (8007148 <plug_holes+0x10c>)
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	1a99      	subs	r1, r3, r2
 80070e8:	4b17      	ldr	r3, [pc, #92]	; (8007148 <plug_holes+0x10c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	8812      	ldrh	r2, [r2, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	b28a      	uxth	r2, r1
 80070f4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <plug_holes+0x10c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	8852      	ldrh	r2, [r2, #2]
 80070fe:	4413      	add	r3, r2
 8007100:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d01a      	beq.n	8007140 <plug_holes+0x104>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	791b      	ldrb	r3, [r3, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <plug_holes+0x12c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	429a      	cmp	r2, r3
 800711a:	d102      	bne.n	8007122 <plug_holes+0xe6>
      lfree = pmem;
 800711c:	4a12      	ldr	r2, [pc, #72]	; (8007168 <plug_holes+0x12c>)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	881a      	ldrh	r2, [r3, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a06      	ldr	r2, [pc, #24]	; (8007148 <plug_holes+0x10c>)
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	1a99      	subs	r1, r3, r2
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <plug_holes+0x10c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	8812      	ldrh	r2, [r2, #0]
 800713a:	4413      	add	r3, r2
 800713c:	b28a      	uxth	r2, r1
 800713e:	805a      	strh	r2, [r3, #2]
  }
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	200006ec 	.word	0x200006ec
 800714c:	08016414 	.word	0x08016414
 8007150:	08016444 	.word	0x08016444
 8007154:	0801645c 	.word	0x0801645c
 8007158:	200006f0 	.word	0x200006f0
 800715c:	08016484 	.word	0x08016484
 8007160:	080164a0 	.word	0x080164a0
 8007164:	080164bc 	.word	0x080164bc
 8007168:	200006f4 	.word	0x200006f4

0800716c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007172:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <mem_init+0x6c>)
 8007174:	3303      	adds	r3, #3
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	461a      	mov	r2, r3
 800717c:	4b17      	ldr	r3, [pc, #92]	; (80071dc <mem_init+0x70>)
 800717e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007180:	4b16      	ldr	r3, [pc, #88]	; (80071dc <mem_init+0x70>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800718c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <mem_init+0x70>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80071a2:	4a0f      	ldr	r2, [pc, #60]	; (80071e0 <mem_init+0x74>)
 80071a4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <mem_init+0x74>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2201      	movs	r2, #1
 80071ac:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <mem_init+0x74>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80071b6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80071b8:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <mem_init+0x74>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80071c0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80071c2:	4b06      	ldr	r3, [pc, #24]	; (80071dc <mem_init+0x70>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a07      	ldr	r2, [pc, #28]	; (80071e4 <mem_init+0x78>)
 80071c8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000934 	.word	0x20000934
 80071dc:	200006ec 	.word	0x200006ec
 80071e0:	200006f0 	.word	0x200006f0
 80071e4:	200006f4 	.word	0x200006f4

080071e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d043      	beq.n	800727e <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d006      	beq.n	800720e <mem_free+0x26>
 8007200:	4b22      	ldr	r3, [pc, #136]	; (800728c <mem_free+0xa4>)
 8007202:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8007206:	4922      	ldr	r1, [pc, #136]	; (8007290 <mem_free+0xa8>)
 8007208:	4822      	ldr	r0, [pc, #136]	; (8007294 <mem_free+0xac>)
 800720a:	f00d fda7 	bl	8014d5c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800720e:	4b22      	ldr	r3, [pc, #136]	; (8007298 <mem_free+0xb0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d304      	bcc.n	8007222 <mem_free+0x3a>
 8007218:	4b20      	ldr	r3, [pc, #128]	; (800729c <mem_free+0xb4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	429a      	cmp	r2, r3
 8007220:	d306      	bcc.n	8007230 <mem_free+0x48>
 8007222:	4b1a      	ldr	r3, [pc, #104]	; (800728c <mem_free+0xa4>)
 8007224:	f240 12af 	movw	r2, #431	; 0x1af
 8007228:	491d      	ldr	r1, [pc, #116]	; (80072a0 <mem_free+0xb8>)
 800722a:	481a      	ldr	r0, [pc, #104]	; (8007294 <mem_free+0xac>)
 800722c:	f00d fd96 	bl	8014d5c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007230:	4b19      	ldr	r3, [pc, #100]	; (8007298 <mem_free+0xb0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d323      	bcc.n	8007282 <mem_free+0x9a>
 800723a:	4b18      	ldr	r3, [pc, #96]	; (800729c <mem_free+0xb4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d21e      	bcs.n	8007282 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3b08      	subs	r3, #8
 8007248:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	791b      	ldrb	r3, [r3, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <mem_free+0x78>
 8007252:	4b0e      	ldr	r3, [pc, #56]	; (800728c <mem_free+0xa4>)
 8007254:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007258:	4912      	ldr	r1, [pc, #72]	; (80072a4 <mem_free+0xbc>)
 800725a:	480e      	ldr	r0, [pc, #56]	; (8007294 <mem_free+0xac>)
 800725c:	f00d fd7e 	bl	8014d5c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007266:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <mem_free+0xc0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d202      	bcs.n	8007276 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007270:	4a0d      	ldr	r2, [pc, #52]	; (80072a8 <mem_free+0xc0>)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7ff fee0 	bl	800703c <plug_holes>
 800727c:	e002      	b.n	8007284 <mem_free+0x9c>
    return;
 800727e:	bf00      	nop
 8007280:	e000      	b.n	8007284 <mem_free+0x9c>
    return;
 8007282:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	08016414 	.word	0x08016414
 8007290:	080164e8 	.word	0x080164e8
 8007294:	0801645c 	.word	0x0801645c
 8007298:	200006ec 	.word	0x200006ec
 800729c:	200006f0 	.word	0x200006f0
 80072a0:	0801650c 	.word	0x0801650c
 80072a4:	08016524 	.word	0x08016524
 80072a8:	200006f4 	.word	0x200006f4

080072ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80072b8:	887b      	ldrh	r3, [r7, #2]
 80072ba:	3303      	adds	r3, #3
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80072c4:	887b      	ldrh	r3, [r7, #2]
 80072c6:	2b0b      	cmp	r3, #11
 80072c8:	d801      	bhi.n	80072ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80072ca:	230c      	movs	r3, #12
 80072cc:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80072ce:	887b      	ldrh	r3, [r7, #2]
 80072d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80072d4:	d901      	bls.n	80072da <mem_trim+0x2e>
    return NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	e0b1      	b.n	800743e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80072da:	4b5b      	ldr	r3, [pc, #364]	; (8007448 <mem_trim+0x19c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d304      	bcc.n	80072ee <mem_trim+0x42>
 80072e4:	4b59      	ldr	r3, [pc, #356]	; (800744c <mem_trim+0x1a0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d306      	bcc.n	80072fc <mem_trim+0x50>
 80072ee:	4b58      	ldr	r3, [pc, #352]	; (8007450 <mem_trim+0x1a4>)
 80072f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80072f4:	4957      	ldr	r1, [pc, #348]	; (8007454 <mem_trim+0x1a8>)
 80072f6:	4858      	ldr	r0, [pc, #352]	; (8007458 <mem_trim+0x1ac>)
 80072f8:	f00d fd30 	bl	8014d5c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80072fc:	4b52      	ldr	r3, [pc, #328]	; (8007448 <mem_trim+0x19c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	429a      	cmp	r2, r3
 8007304:	d304      	bcc.n	8007310 <mem_trim+0x64>
 8007306:	4b51      	ldr	r3, [pc, #324]	; (800744c <mem_trim+0x1a0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d301      	bcc.n	8007314 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	e094      	b.n	800743e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3b08      	subs	r3, #8
 8007318:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4a4a      	ldr	r2, [pc, #296]	; (8007448 <mem_trim+0x19c>)
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	881a      	ldrh	r2, [r3, #0]
 8007328:	8a7b      	ldrh	r3, [r7, #18]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b08      	subs	r3, #8
 8007330:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007332:	887a      	ldrh	r2, [r7, #2]
 8007334:	8a3b      	ldrh	r3, [r7, #16]
 8007336:	429a      	cmp	r2, r3
 8007338:	d906      	bls.n	8007348 <mem_trim+0x9c>
 800733a:	4b45      	ldr	r3, [pc, #276]	; (8007450 <mem_trim+0x1a4>)
 800733c:	f240 2206 	movw	r2, #518	; 0x206
 8007340:	4946      	ldr	r1, [pc, #280]	; (800745c <mem_trim+0x1b0>)
 8007342:	4845      	ldr	r0, [pc, #276]	; (8007458 <mem_trim+0x1ac>)
 8007344:	f00d fd0a 	bl	8014d5c <iprintf>
  if (newsize > size) {
 8007348:	887a      	ldrh	r2, [r7, #2]
 800734a:	8a3b      	ldrh	r3, [r7, #16]
 800734c:	429a      	cmp	r2, r3
 800734e:	d901      	bls.n	8007354 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	e074      	b.n	800743e <mem_trim+0x192>
  }
  if (newsize == size) {
 8007354:	887a      	ldrh	r2, [r7, #2]
 8007356:	8a3b      	ldrh	r3, [r7, #16]
 8007358:	429a      	cmp	r2, r3
 800735a:	d101      	bne.n	8007360 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	e06e      	b.n	800743e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <mem_trim+0x19c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	8812      	ldrh	r2, [r2, #0]
 8007368:	4413      	add	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	791b      	ldrb	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d131      	bne.n	80073d8 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800737a:	8a7a      	ldrh	r2, [r7, #18]
 800737c:	887b      	ldrh	r3, [r7, #2]
 800737e:	4413      	add	r3, r2
 8007380:	b29b      	uxth	r3, r3
 8007382:	3308      	adds	r3, #8
 8007384:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8007386:	4b36      	ldr	r3, [pc, #216]	; (8007460 <mem_trim+0x1b4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d105      	bne.n	800739c <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007390:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <mem_trim+0x19c>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	897b      	ldrh	r3, [r7, #10]
 8007396:	4413      	add	r3, r2
 8007398:	4a31      	ldr	r2, [pc, #196]	; (8007460 <mem_trim+0x1b4>)
 800739a:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800739c:	4b2a      	ldr	r3, [pc, #168]	; (8007448 <mem_trim+0x19c>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	897b      	ldrh	r3, [r7, #10]
 80073a2:	4413      	add	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	893a      	ldrh	r2, [r7, #8]
 80073b0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8a7a      	ldrh	r2, [r7, #18]
 80073b6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	897a      	ldrh	r2, [r7, #10]
 80073bc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073c6:	d039      	beq.n	800743c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80073c8:	4b1f      	ldr	r3, [pc, #124]	; (8007448 <mem_trim+0x19c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	4413      	add	r3, r2
 80073d2:	897a      	ldrh	r2, [r7, #10]
 80073d4:	805a      	strh	r2, [r3, #2]
 80073d6:	e031      	b.n	800743c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80073d8:	887b      	ldrh	r3, [r7, #2]
 80073da:	f103 0214 	add.w	r2, r3, #20
 80073de:	8a3b      	ldrh	r3, [r7, #16]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d82b      	bhi.n	800743c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80073e4:	8a7a      	ldrh	r2, [r7, #18]
 80073e6:	887b      	ldrh	r3, [r7, #2]
 80073e8:	4413      	add	r3, r2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3308      	adds	r3, #8
 80073ee:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80073f0:	4b15      	ldr	r3, [pc, #84]	; (8007448 <mem_trim+0x19c>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	897b      	ldrh	r3, [r7, #10]
 80073f6:	4413      	add	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80073fa:	4b19      	ldr	r3, [pc, #100]	; (8007460 <mem_trim+0x1b4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	429a      	cmp	r2, r3
 8007402:	d202      	bcs.n	800740a <mem_trim+0x15e>
      lfree = mem2;
 8007404:	4a16      	ldr	r2, [pc, #88]	; (8007460 <mem_trim+0x1b4>)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	881a      	ldrh	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8a7a      	ldrh	r2, [r7, #18]
 800741c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	897a      	ldrh	r2, [r7, #10]
 8007422:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800742c:	d006      	beq.n	800743c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800742e:	4b06      	ldr	r3, [pc, #24]	; (8007448 <mem_trim+0x19c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	8812      	ldrh	r2, [r2, #0]
 8007436:	4413      	add	r3, r2
 8007438:	897a      	ldrh	r2, [r7, #10]
 800743a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800743c:	687b      	ldr	r3, [r7, #4]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200006ec 	.word	0x200006ec
 800744c:	200006f0 	.word	0x200006f0
 8007450:	08016414 	.word	0x08016414
 8007454:	08016538 	.word	0x08016538
 8007458:	0801645c 	.word	0x0801645c
 800745c:	08016550 	.word	0x08016550
 8007460:	200006f4 	.word	0x200006f4

08007464 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <mem_malloc+0x14>
    return NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	e0c8      	b.n	800760a <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	3303      	adds	r3, #3
 800747c:	b29b      	uxth	r3, r3
 800747e:	f023 0303 	bic.w	r3, r3, #3
 8007482:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	2b0b      	cmp	r3, #11
 8007488:	d801      	bhi.n	800748e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800748a:	230c      	movs	r3, #12
 800748c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007494:	d901      	bls.n	800749a <mem_malloc+0x36>
    return NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	e0b7      	b.n	800760a <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800749a:	4b5e      	ldr	r3, [pc, #376]	; (8007614 <mem_malloc+0x1b0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	4b5d      	ldr	r3, [pc, #372]	; (8007618 <mem_malloc+0x1b4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	83fb      	strh	r3, [r7, #30]
 80074a8:	e0a7      	b.n	80075fa <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80074aa:	4b5b      	ldr	r3, [pc, #364]	; (8007618 <mem_malloc+0x1b4>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	8bfb      	ldrh	r3, [r7, #30]
 80074b0:	4413      	add	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	791b      	ldrb	r3, [r3, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 8098 	bne.w	80075ee <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	8bfb      	ldrh	r3, [r7, #30]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f1a3 0208 	sub.w	r2, r3, #8
 80074cc:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80074ce:	429a      	cmp	r2, r3
 80074d0:	f0c0 808d 	bcc.w	80075ee <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	8bfb      	ldrh	r3, [r7, #30]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f1a3 0208 	sub.w	r2, r3, #8
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	3314      	adds	r3, #20
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d327      	bcc.n	800753a <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80074ea:	8bfa      	ldrh	r2, [r7, #30]
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	4413      	add	r3, r2
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3308      	adds	r3, #8
 80074f4:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80074f6:	4b48      	ldr	r3, [pc, #288]	; (8007618 <mem_malloc+0x1b4>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	8a7b      	ldrh	r3, [r7, #18]
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	881a      	ldrh	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8bfa      	ldrh	r2, [r7, #30]
 8007512:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	8a7a      	ldrh	r2, [r7, #18]
 8007518:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2201      	movs	r2, #1
 800751e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007528:	d00a      	beq.n	8007540 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800752a:	4b3b      	ldr	r3, [pc, #236]	; (8007618 <mem_malloc+0x1b4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	8812      	ldrh	r2, [r2, #0]
 8007532:	4413      	add	r3, r2
 8007534:	8a7a      	ldrh	r2, [r7, #18]
 8007536:	805a      	strh	r2, [r3, #2]
 8007538:	e002      	b.n	8007540 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2201      	movs	r2, #1
 800753e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007540:	4b34      	ldr	r3, [pc, #208]	; (8007614 <mem_malloc+0x1b0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	429a      	cmp	r2, r3
 8007548:	d127      	bne.n	800759a <mem_malloc+0x136>
          struct mem *cur = lfree;
 800754a:	4b32      	ldr	r3, [pc, #200]	; (8007614 <mem_malloc+0x1b0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007550:	e005      	b.n	800755e <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8007552:	4b31      	ldr	r3, [pc, #196]	; (8007618 <mem_malloc+0x1b4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	8812      	ldrh	r2, [r2, #0]
 800755a:	4413      	add	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	791b      	ldrb	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <mem_malloc+0x10c>
 8007566:	4b2d      	ldr	r3, [pc, #180]	; (800761c <mem_malloc+0x1b8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	429a      	cmp	r2, r3
 800756e:	d1f0      	bne.n	8007552 <mem_malloc+0xee>
          }
          lfree = cur;
 8007570:	4a28      	ldr	r2, [pc, #160]	; (8007614 <mem_malloc+0x1b0>)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007576:	4b27      	ldr	r3, [pc, #156]	; (8007614 <mem_malloc+0x1b0>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b28      	ldr	r3, [pc, #160]	; (800761c <mem_malloc+0x1b8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d00b      	beq.n	800759a <mem_malloc+0x136>
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <mem_malloc+0x1b0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	791b      	ldrb	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d006      	beq.n	800759a <mem_malloc+0x136>
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <mem_malloc+0x1bc>)
 800758e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007592:	4924      	ldr	r1, [pc, #144]	; (8007624 <mem_malloc+0x1c0>)
 8007594:	4824      	ldr	r0, [pc, #144]	; (8007628 <mem_malloc+0x1c4>)
 8007596:	f00d fbe1 	bl	8014d5c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800759a:	88fa      	ldrh	r2, [r7, #6]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	4413      	add	r3, r2
 80075a0:	3308      	adds	r3, #8
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <mem_malloc+0x1b8>)
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d906      	bls.n	80075b8 <mem_malloc+0x154>
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <mem_malloc+0x1bc>)
 80075ac:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80075b0:	491e      	ldr	r1, [pc, #120]	; (800762c <mem_malloc+0x1c8>)
 80075b2:	481d      	ldr	r0, [pc, #116]	; (8007628 <mem_malloc+0x1c4>)
 80075b4:	f00d fbd2 	bl	8014d5c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d006      	beq.n	80075d0 <mem_malloc+0x16c>
 80075c2:	4b17      	ldr	r3, [pc, #92]	; (8007620 <mem_malloc+0x1bc>)
 80075c4:	f240 22d6 	movw	r2, #726	; 0x2d6
 80075c8:	4919      	ldr	r1, [pc, #100]	; (8007630 <mem_malloc+0x1cc>)
 80075ca:	4817      	ldr	r0, [pc, #92]	; (8007628 <mem_malloc+0x1c4>)
 80075cc:	f00d fbc6 	bl	8014d5c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <mem_malloc+0x184>
 80075da:	4b11      	ldr	r3, [pc, #68]	; (8007620 <mem_malloc+0x1bc>)
 80075dc:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80075e0:	4914      	ldr	r1, [pc, #80]	; (8007634 <mem_malloc+0x1d0>)
 80075e2:	4811      	ldr	r0, [pc, #68]	; (8007628 <mem_malloc+0x1c4>)
 80075e4:	f00d fbba 	bl	8014d5c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3308      	adds	r3, #8
 80075ec:	e00d      	b.n	800760a <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <mem_malloc+0x1b4>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	8bfb      	ldrh	r3, [r7, #30]
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80075fa:	8bfa      	ldrh	r2, [r7, #30]
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007602:	429a      	cmp	r2, r3
 8007604:	f4ff af51 	bcc.w	80074aa <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200006f4 	.word	0x200006f4
 8007618:	200006ec 	.word	0x200006ec
 800761c:	200006f0 	.word	0x200006f0
 8007620:	08016414 	.word	0x08016414
 8007624:	08016570 	.word	0x08016570
 8007628:	0801645c 	.word	0x0801645c
 800762c:	0801658c 	.word	0x0801658c
 8007630:	080165bc 	.word	0x080165bc
 8007634:	080165ec 	.word	0x080165ec

08007638 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	3303      	adds	r3, #3
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e011      	b.n	800767e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	885b      	ldrh	r3, [r3, #2]
 8007682:	461a      	mov	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4293      	cmp	r3, r2
 8007688:	dbe7      	blt.n	800765a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800769e:	2300      	movs	r3, #0
 80076a0:	80fb      	strh	r3, [r7, #6]
 80076a2:	e009      	b.n	80076b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	4a08      	ldr	r2, [pc, #32]	; (80076c8 <memp_init+0x30>)
 80076a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ffc3 	bl	8007638 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	3301      	adds	r3, #1
 80076b6:	80fb      	strh	r3, [r7, #6]
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d9f2      	bls.n	80076a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	080197a0 	.word	0x080197a0

080076cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d012      	beq.n	8007708 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <do_memp_malloc_pool+0x38>
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <do_memp_malloc_pool+0x48>)
 80076f8:	f240 1249 	movw	r2, #329	; 0x149
 80076fc:	4906      	ldr	r1, [pc, #24]	; (8007718 <do_memp_malloc_pool+0x4c>)
 80076fe:	4807      	ldr	r0, [pc, #28]	; (800771c <do_memp_malloc_pool+0x50>)
 8007700:	f00d fb2c 	bl	8014d5c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	e000      	b.n	800770a <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	08016610 	.word	0x08016610
 8007718:	08016640 	.word	0x08016640
 800771c:	08016664 	.word	0x08016664

08007720 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d908      	bls.n	8007742 <memp_malloc+0x22>
 8007730:	4b0a      	ldr	r3, [pc, #40]	; (800775c <memp_malloc+0x3c>)
 8007732:	f240 1287 	movw	r2, #391	; 0x187
 8007736:	490a      	ldr	r1, [pc, #40]	; (8007760 <memp_malloc+0x40>)
 8007738:	480a      	ldr	r0, [pc, #40]	; (8007764 <memp_malloc+0x44>)
 800773a:	f00d fb0f 	bl	8014d5c <iprintf>
 800773e:	2300      	movs	r3, #0
 8007740:	e008      	b.n	8007754 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	4a08      	ldr	r2, [pc, #32]	; (8007768 <memp_malloc+0x48>)
 8007746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff ffbe 	bl	80076cc <do_memp_malloc_pool>
 8007750:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007752:	68fb      	ldr	r3, [r7, #12]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	08016610 	.word	0x08016610
 8007760:	080166a0 	.word	0x080166a0
 8007764:	08016664 	.word	0x08016664
 8007768:	080197a0 	.word	0x080197a0

0800776c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <do_memp_free_pool+0x22>
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <do_memp_free_pool+0x40>)
 8007782:	f240 129d 	movw	r2, #413	; 0x19d
 8007786:	490a      	ldr	r1, [pc, #40]	; (80077b0 <do_memp_free_pool+0x44>)
 8007788:	480a      	ldr	r0, [pc, #40]	; (80077b4 <do_memp_free_pool+0x48>)
 800778a:	f00d fae7 	bl	8014d5c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	08016610 	.word	0x08016610
 80077b0:	080166c0 	.word	0x080166c0
 80077b4:	08016664 	.word	0x08016664

080077b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d907      	bls.n	80077da <memp_free+0x22>
 80077ca:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <memp_free+0x44>)
 80077cc:	f240 12db 	movw	r2, #475	; 0x1db
 80077d0:	490b      	ldr	r1, [pc, #44]	; (8007800 <memp_free+0x48>)
 80077d2:	480c      	ldr	r0, [pc, #48]	; (8007804 <memp_free+0x4c>)
 80077d4:	f00d fac2 	bl	8014d5c <iprintf>
 80077d8:	e00c      	b.n	80077f4 <memp_free+0x3c>

  if (mem == NULL) {
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	4a09      	ldr	r2, [pc, #36]	; (8007808 <memp_free+0x50>)
 80077e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff ffbe 	bl	800776c <do_memp_free_pool>
 80077f0:	e000      	b.n	80077f4 <memp_free+0x3c>
    return;
 80077f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	08016610 	.word	0x08016610
 8007800:	080166e0 	.word	0x080166e0
 8007804:	08016664 	.word	0x08016664
 8007808:	080197a0 	.word	0x080197a0

0800780c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d105      	bne.n	800783c <netif_add+0x20>
 8007830:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <netif_add+0xa4>)
 8007832:	22fb      	movs	r2, #251	; 0xfb
 8007834:	4923      	ldr	r1, [pc, #140]	; (80078c4 <netif_add+0xa8>)
 8007836:	4824      	ldr	r0, [pc, #144]	; (80078c8 <netif_add+0xac>)
 8007838:	f00d fa90 	bl	8014d5c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3320      	adds	r3, #32
 800785a:	2204      	movs	r2, #4
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f00d fa74 	bl	8014d4c <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2203      	movs	r2, #3
 8007868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8007872:	4b16      	ldr	r3, [pc, #88]	; (80078cc <netif_add+0xb0>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	b2d1      	uxtb	r1, r2
 800787a:	4a14      	ldr	r2, [pc, #80]	; (80078cc <netif_add+0xb0>)
 800787c:	7011      	strb	r1, [r2, #0]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a3a      	ldr	r2, [r7, #32]
 8007888:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f81f 	bl	80078d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <netif_add+0x8a>
    return NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e007      	b.n	80078b6 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <netif_add+0xb4>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80078ae:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <netif_add+0xb4>)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	080166fc 	.word	0x080166fc
 80078c4:	08016730 	.word	0x08016730
 80078c8:	08016748 	.word	0x08016748
 80078cc:	2000071c 	.word	0x2000071c
 80078d0:	200071f4 	.word	0x200071f4

080078d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <netif_set_addr+0x1c>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f81a 	bl	800792c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f862 	bl	80079c4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f84a 	bl	800799c <netif_set_gw>
 8007908:	e00b      	b.n	8007922 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f859 	bl	80079c4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f841 	bl	800799c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f805 	bl	800792c <netif_set_ipaddr>
  }
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <netif_set_ipaddr+0x18>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e002      	b.n	800794a <netif_set_ipaddr+0x1e>
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <netif_set_ipaddr+0x6c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3304      	adds	r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d01c      	beq.n	8007990 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3304      	adds	r3, #4
 800795a:	f107 020c 	add.w	r2, r7, #12
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f002 fac9 	bl	8009ef8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3304      	adds	r3, #4
 800796a:	f107 020c 	add.w	r2, r7, #12
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f006 fd6f 	bl	800e454 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <netif_set_ipaddr+0x56>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	e000      	b.n	8007984 <netif_set_ipaddr+0x58>
 8007982:	2300      	movs	r3, #0
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007988:	2101      	movs	r1, #1
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f861 	bl	8007a52 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	08019814 	.word	0x08019814

0800799c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <netif_set_gw+0x16>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	e000      	b.n	80079b4 <netif_set_gw+0x18>
 80079b2:	2300      	movs	r3, #0
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <netif_set_netmask+0x16>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	e000      	b.n	80079dc <netif_set_netmask+0x18>
 80079da:	2300      	movs	r3, #0
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80079f4:	4a04      	ldr	r2, [pc, #16]	; (8007a08 <netif_set_default+0x1c>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	200071f8 	.word	0x200071f8

08007a0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d113      	bne.n	8007a4a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007a42:	2103      	movs	r1, #3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f804 	bl	8007a52 <netif_issue_reports>
    }
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00c      	beq.n	8007a8c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f009 fad2 	bl	8011030 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d012      	beq.n	8007ad0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ab0:	f023 0301 	bic.w	r3, r3, #1
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f008 fe72 	bl	80107b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007ade:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <pbuf_free_ooseq+0x40>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <pbuf_free_ooseq+0x44>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	e00f      	b.n	8007b0c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 fe62 	bl	80097c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8007b04:	e005      	b.n	8007b12 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	607b      	str	r3, [r7, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1ec      	bne.n	8007aec <pbuf_free_ooseq+0x14>
    }
  }
}
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	200071fc 	.word	0x200071fc
 8007b1c:	20007204 	.word	0x20007204

08007b20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <pbuf_pool_is_empty+0x14>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007b2a:	bf00      	nop
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	200071fc 	.word	0x200071fc

08007b38 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
 8007b42:	460b      	mov	r3, r1
 8007b44:	80bb      	strh	r3, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d81c      	bhi.n	8007b8a <pbuf_alloc+0x52>
 8007b50:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <pbuf_alloc+0x20>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b6d 	.word	0x08007b6d
 8007b5c:	08007b73 	.word	0x08007b73
 8007b60:	08007b79 	.word	0x08007b79
 8007b64:	08007b7f 	.word	0x08007b7f
 8007b68:	08007b85 	.word	0x08007b85
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007b6c:	2336      	movs	r3, #54	; 0x36
 8007b6e:	82fb      	strh	r3, [r7, #22]
    break;
 8007b70:	e014      	b.n	8007b9c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007b72:	2322      	movs	r3, #34	; 0x22
 8007b74:	82fb      	strh	r3, [r7, #22]
    break;
 8007b76:	e011      	b.n	8007b9c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007b78:	230e      	movs	r3, #14
 8007b7a:	82fb      	strh	r3, [r7, #22]
    break;
 8007b7c:	e00e      	b.n	8007b9c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	82fb      	strh	r3, [r7, #22]
    break;
 8007b82:	e00b      	b.n	8007b9c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	82fb      	strh	r3, [r7, #22]
    break;
 8007b88:	e008      	b.n	8007b9c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8007b8a:	4ba5      	ldr	r3, [pc, #660]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007b8c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8007b90:	49a4      	ldr	r1, [pc, #656]	; (8007e24 <pbuf_alloc+0x2ec>)
 8007b92:	48a5      	ldr	r0, [pc, #660]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007b94:	f00d f8e2 	bl	8014d5c <iprintf>
    return NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e15d      	b.n	8007e58 <pbuf_alloc+0x320>
  }

  switch (type) {
 8007b9c:	79bb      	ldrb	r3, [r7, #6]
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	f200 8134 	bhi.w	8007e0c <pbuf_alloc+0x2d4>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <pbuf_alloc+0x74>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007d4d 	.word	0x08007d4d
 8007bb0:	08007dd9 	.word	0x08007dd9
 8007bb4:	08007dd9 	.word	0x08007dd9
 8007bb8:	08007bbd 	.word	0x08007bbd
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007bbc:	2008      	movs	r0, #8
 8007bbe:	f7ff fdaf 	bl	8007720 <memp_malloc>
 8007bc2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d103      	bne.n	8007bd2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8007bca:	f7ff ffa9 	bl	8007b20 <pbuf_pool_is_empty>
      return NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e142      	b.n	8007e58 <pbuf_alloc+0x320>
    }
    p->type = type;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	79ba      	ldrb	r2, [r7, #6]
 8007bd6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8007bde:	8afb      	ldrh	r3, [r7, #22]
 8007be0:	3310      	adds	r3, #16
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	3303      	adds	r3, #3
 8007be8:	f023 0303 	bic.w	r3, r3, #3
 8007bec:	461a      	mov	r2, r3
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d006      	beq.n	8007c0c <pbuf_alloc+0xd4>
 8007bfe:	4b88      	ldr	r3, [pc, #544]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007c00:	f240 1229 	movw	r2, #297	; 0x129
 8007c04:	4989      	ldr	r1, [pc, #548]	; (8007e2c <pbuf_alloc+0x2f4>)
 8007c06:	4888      	ldr	r0, [pc, #544]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007c08:	f00d f8a8 	bl	8014d5c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	88ba      	ldrh	r2, [r7, #4]
 8007c10:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007c12:	8afb      	ldrh	r3, [r7, #22]
 8007c14:	3303      	adds	r3, #3
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	f5c3 6287 	rsb	r2, r3, #1080	; 0x438
 8007c1e:	88bb      	ldrh	r3, [r7, #4]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bf28      	it	cs
 8007c24:	4613      	movcs	r3, r2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	8952      	ldrh	r2, [r2, #10]
 8007c34:	441a      	add	r2, r3
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d906      	bls.n	8007c4e <pbuf_alloc+0x116>
 8007c40:	4b77      	ldr	r3, [pc, #476]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007c42:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007c46:	497a      	ldr	r1, [pc, #488]	; (8007e30 <pbuf_alloc+0x2f8>)
 8007c48:	4877      	ldr	r0, [pc, #476]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007c4a:	f00d f887 	bl	8014d5c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007c4e:	8afb      	ldrh	r3, [r7, #22]
 8007c50:	3303      	adds	r3, #3
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8007c5a:	d106      	bne.n	8007c6a <pbuf_alloc+0x132>
 8007c5c:	4b70      	ldr	r3, [pc, #448]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007c5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8007c62:	4974      	ldr	r1, [pc, #464]	; (8007e34 <pbuf_alloc+0x2fc>)
 8007c64:	4870      	ldr	r0, [pc, #448]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007c66:	f00d f879 	bl	8014d5c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8007c74:	88bb      	ldrh	r3, [r7, #4]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	8952      	ldrh	r2, [r2, #10]
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8007c7e:	e061      	b.n	8007d44 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007c80:	2008      	movs	r0, #8
 8007c82:	f7ff fd4d 	bl	8007720 <memp_malloc>
 8007c86:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8007c8e:	f7ff ff47 	bl	8007b20 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8007c92:	69f8      	ldr	r0, [r7, #28]
 8007c94:	f000 fac2 	bl	800821c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e0dd      	b.n	8007e58 <pbuf_alloc+0x320>
      }
      q->type = type;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	79ba      	ldrb	r2, [r7, #6]
 8007ca0:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	dd06      	ble.n	8007ccc <pbuf_alloc+0x194>
 8007cbe:	4b58      	ldr	r3, [pc, #352]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007cc0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007cc4:	495c      	ldr	r1, [pc, #368]	; (8007e38 <pbuf_alloc+0x300>)
 8007cc6:	4858      	ldr	r0, [pc, #352]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007cc8:	f00d f848 	bl	8014d5c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8007cdc:	bf28      	it	cs
 8007cde:	f44f 6387 	movcs.w	r3, #1080	; 0x438
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f103 0210 	add.w	r2, r3, #16
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d006      	beq.n	8007d0c <pbuf_alloc+0x1d4>
 8007cfe:	4b48      	ldr	r3, [pc, #288]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007d00:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8007d04:	494d      	ldr	r1, [pc, #308]	; (8007e3c <pbuf_alloc+0x304>)
 8007d06:	4848      	ldr	r0, [pc, #288]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007d08:	f00d f828 	bl	8014d5c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	8952      	ldrh	r2, [r2, #10]
 8007d14:	441a      	add	r2, r3
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d906      	bls.n	8007d2e <pbuf_alloc+0x1f6>
 8007d20:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007d22:	f240 1255 	movw	r2, #341	; 0x155
 8007d26:	4942      	ldr	r1, [pc, #264]	; (8007e30 <pbuf_alloc+0x2f8>)
 8007d28:	483f      	ldr	r0, [pc, #252]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007d2a:	f00d f817 	bl	8014d5c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	895b      	ldrh	r3, [r3, #10]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dc9a      	bgt.n	8007c80 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8007d4a:	e07e      	b.n	8007e4a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007d4c:	8afb      	ldrh	r3, [r7, #22]
 8007d4e:	3313      	adds	r3, #19
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	88bb      	ldrh	r3, [r7, #4]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8007d68:	897a      	ldrh	r2, [r7, #10]
 8007d6a:	88bb      	ldrh	r3, [r7, #4]
 8007d6c:	3303      	adds	r3, #3
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d201      	bcs.n	8007d7a <pbuf_alloc+0x242>
        return NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e06e      	b.n	8007e58 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007d7a:	897b      	ldrh	r3, [r7, #10]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff fb71 	bl	8007464 <mem_malloc>
 8007d82:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <pbuf_alloc+0x256>
      return NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e064      	b.n	8007e58 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007d8e:	8afb      	ldrh	r3, [r7, #22]
 8007d90:	3310      	adds	r3, #16
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	4413      	add	r3, r2
 8007d96:	3303      	adds	r3, #3
 8007d98:	f023 0303 	bic.w	r3, r3, #3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	88ba      	ldrh	r2, [r7, #4]
 8007da6:	811a      	strh	r2, [r3, #8]
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	891a      	ldrh	r2, [r3, #8]
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
    p->type = type;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	79ba      	ldrb	r2, [r7, #6]
 8007dba:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d03f      	beq.n	8007e48 <pbuf_alloc+0x310>
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007dca:	f240 1277 	movw	r2, #375	; 0x177
 8007dce:	491c      	ldr	r1, [pc, #112]	; (8007e40 <pbuf_alloc+0x308>)
 8007dd0:	4815      	ldr	r0, [pc, #84]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007dd2:	f00c ffc3 	bl	8014d5c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8007dd6:	e037      	b.n	8007e48 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007dd8:	2007      	movs	r0, #7
 8007dda:	f7ff fca1 	bl	8007720 <memp_malloc>
 8007dde:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e036      	b.n	8007e58 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2200      	movs	r2, #0
 8007dee:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	88ba      	ldrh	r2, [r7, #4]
 8007df4:	811a      	strh	r2, [r3, #8]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	891a      	ldrh	r2, [r3, #8]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
    p->type = type;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	79ba      	ldrb	r2, [r7, #6]
 8007e08:	731a      	strb	r2, [r3, #12]
    break;
 8007e0a:	e01e      	b.n	8007e4a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <pbuf_alloc+0x2e8>)
 8007e0e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007e12:	490c      	ldr	r1, [pc, #48]	; (8007e44 <pbuf_alloc+0x30c>)
 8007e14:	4804      	ldr	r0, [pc, #16]	; (8007e28 <pbuf_alloc+0x2f0>)
 8007e16:	f00c ffa1 	bl	8014d5c <iprintf>
    return NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e01c      	b.n	8007e58 <pbuf_alloc+0x320>
 8007e1e:	bf00      	nop
 8007e20:	08016770 	.word	0x08016770
 8007e24:	080167a0 	.word	0x080167a0
 8007e28:	080167bc 	.word	0x080167bc
 8007e2c:	080167e4 	.word	0x080167e4
 8007e30:	08016814 	.word	0x08016814
 8007e34:	08016848 	.word	0x08016848
 8007e38:	0801687c 	.word	0x0801687c
 8007e3c:	08016890 	.word	0x08016890
 8007e40:	080168c0 	.word	0x080168c0
 8007e44:	080168ec 	.word	0x080168ec
    break;
 8007e48:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2200      	movs	r2, #0
 8007e54:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007e56:	69fb      	ldr	r3, [r7, #28]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	4603      	mov	r3, r0
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	80bb      	strh	r3, [r7, #4]
 8007e70:	4613      	mov	r3, r2
 8007e72:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d81b      	bhi.n	8007eb2 <pbuf_alloced_custom+0x52>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <pbuf_alloced_custom+0x20>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007e95 	.word	0x08007e95
 8007e84:	08007e9b 	.word	0x08007e9b
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007ea7 	.word	0x08007ea7
 8007e90:	08007ead 	.word	0x08007ead
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007e94:	2336      	movs	r3, #54	; 0x36
 8007e96:	81fb      	strh	r3, [r7, #14]
    break;
 8007e98:	e014      	b.n	8007ec4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007e9a:	2322      	movs	r3, #34	; 0x22
 8007e9c:	81fb      	strh	r3, [r7, #14]
    break;
 8007e9e:	e011      	b.n	8007ec4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007ea0:	230e      	movs	r3, #14
 8007ea2:	81fb      	strh	r3, [r7, #14]
    break;
 8007ea4:	e00e      	b.n	8007ec4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	81fb      	strh	r3, [r7, #14]
    break;
 8007eaa:	e00b      	b.n	8007ec4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	81fb      	strh	r3, [r7, #14]
    break;
 8007eb0:	e008      	b.n	8007ec4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <pbuf_alloced_custom+0xc8>)
 8007eb4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8007eb8:	491c      	ldr	r1, [pc, #112]	; (8007f2c <pbuf_alloced_custom+0xcc>)
 8007eba:	481d      	ldr	r0, [pc, #116]	; (8007f30 <pbuf_alloced_custom+0xd0>)
 8007ebc:	f00c ff4e 	bl	8014d5c <iprintf>
    return NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e02d      	b.n	8007f20 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	f023 0203 	bic.w	r2, r3, #3
 8007ecc:	88bb      	ldrh	r3, [r7, #4]
 8007ece:	441a      	add	r2, r3
 8007ed0:	8bbb      	ldrh	r3, [r7, #28]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d901      	bls.n	8007eda <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e022      	b.n	8007f20 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007ee6:	89fb      	ldrh	r3, [r7, #14]
 8007ee8:	3303      	adds	r3, #3
 8007eea:	f023 0303 	bic.w	r3, r3, #3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	e002      	b.n	8007efe <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2202      	movs	r2, #2
 8007f02:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	88ba      	ldrh	r2, [r7, #4]
 8007f08:	811a      	strh	r2, [r3, #8]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	891a      	ldrh	r2, [r3, #8]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	79ba      	ldrb	r2, [r7, #6]
 8007f16:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007f1e:	683b      	ldr	r3, [r7, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	08016770 	.word	0x08016770
 8007f2c:	08016908 	.word	0x08016908
 8007f30:	080167bc 	.word	0x080167bc

08007f34 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <pbuf_realloc+0x20>
 8007f46:	4b4b      	ldr	r3, [pc, #300]	; (8008074 <pbuf_realloc+0x140>)
 8007f48:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007f4c:	494a      	ldr	r1, [pc, #296]	; (8008078 <pbuf_realloc+0x144>)
 8007f4e:	484b      	ldr	r0, [pc, #300]	; (800807c <pbuf_realloc+0x148>)
 8007f50:	f00c ff04 	bl	8014d5c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	7b1b      	ldrb	r3, [r3, #12]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d012      	beq.n	8007f82 <pbuf_realloc+0x4e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	7b1b      	ldrb	r3, [r3, #12]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d00e      	beq.n	8007f82 <pbuf_realloc+0x4e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	7b1b      	ldrb	r3, [r3, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <pbuf_realloc+0x4e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7b1b      	ldrb	r3, [r3, #12]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d006      	beq.n	8007f82 <pbuf_realloc+0x4e>
 8007f74:	4b3f      	ldr	r3, [pc, #252]	; (8008074 <pbuf_realloc+0x140>)
 8007f76:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007f7a:	4941      	ldr	r1, [pc, #260]	; (8008080 <pbuf_realloc+0x14c>)
 8007f7c:	483f      	ldr	r0, [pc, #252]	; (800807c <pbuf_realloc+0x148>)
 8007f7e:	f00c feed 	bl	8014d5c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	891b      	ldrh	r3, [r3, #8]
 8007f86:	887a      	ldrh	r2, [r7, #2]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d26f      	bcs.n	800806c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8007f8c:	887b      	ldrh	r3, [r7, #2]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	8912      	ldrh	r2, [r2, #8]
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007f96:	887b      	ldrh	r3, [r7, #2]
 8007f98:	827b      	strh	r3, [r7, #18]
  q = p;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007f9e:	e025      	b.n	8007fec <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	895b      	ldrh	r3, [r3, #10]
 8007fa4:	8a7a      	ldrh	r2, [r7, #18]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	dd06      	ble.n	8007fc2 <pbuf_realloc+0x8e>
 8007fb4:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <pbuf_realloc+0x140>)
 8007fb6:	f240 220b 	movw	r2, #523	; 0x20b
 8007fba:	4932      	ldr	r1, [pc, #200]	; (8008084 <pbuf_realloc+0x150>)
 8007fbc:	482f      	ldr	r0, [pc, #188]	; (800807c <pbuf_realloc+0x148>)
 8007fbe:	f00c fecd 	bl	8014d5c <iprintf>
    q->tot_len += (u16_t)grow;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	891a      	ldrh	r2, [r3, #8]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <pbuf_realloc+0xb8>
 8007fde:	4b25      	ldr	r3, [pc, #148]	; (8008074 <pbuf_realloc+0x140>)
 8007fe0:	f240 220f 	movw	r2, #527	; 0x20f
 8007fe4:	4928      	ldr	r1, [pc, #160]	; (8008088 <pbuf_realloc+0x154>)
 8007fe6:	4825      	ldr	r0, [pc, #148]	; (800807c <pbuf_realloc+0x148>)
 8007fe8:	f00c feb8 	bl	8014d5c <iprintf>
  while (rem_len > q->len) {
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	895b      	ldrh	r3, [r3, #10]
 8007ff0:	8a7a      	ldrh	r2, [r7, #18]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8d4      	bhi.n	8007fa0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	7b1b      	ldrb	r3, [r3, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d122      	bne.n	8008044 <pbuf_realloc+0x110>
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	895b      	ldrh	r3, [r3, #10]
 8008002:	8a7a      	ldrh	r2, [r7, #18]
 8008004:	429a      	cmp	r2, r3
 8008006:	d01d      	beq.n	8008044 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	7b5b      	ldrb	r3, [r3, #13]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d117      	bne.n	8008044 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	461a      	mov	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	b29a      	uxth	r2, r3
 8008020:	8a7b      	ldrh	r3, [r7, #18]
 8008022:	4413      	add	r3, r2
 8008024:	b29b      	uxth	r3, r3
 8008026:	4619      	mov	r1, r3
 8008028:	6978      	ldr	r0, [r7, #20]
 800802a:	f7ff f93f 	bl	80072ac <mem_trim>
 800802e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <pbuf_realloc+0x110>
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <pbuf_realloc+0x140>)
 8008038:	f240 221d 	movw	r2, #541	; 0x21d
 800803c:	4913      	ldr	r1, [pc, #76]	; (800808c <pbuf_realloc+0x158>)
 800803e:	480f      	ldr	r0, [pc, #60]	; (800807c <pbuf_realloc+0x148>)
 8008040:	f00c fe8c 	bl	8014d5c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	8a7a      	ldrh	r2, [r7, #18]
 8008048:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	895a      	ldrh	r2, [r3, #10]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 f8dc 	bl	800821c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	e000      	b.n	800806e <pbuf_realloc+0x13a>
    return;
 800806c:	bf00      	nop

}
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	08016770 	.word	0x08016770
 8008078:	0801692c 	.word	0x0801692c
 800807c:	080167bc 	.word	0x080167bc
 8008080:	08016944 	.word	0x08016944
 8008084:	08016960 	.word	0x08016960
 8008088:	08016974 	.word	0x08016974
 800808c:	0801698c 	.word	0x0801698c

08008090 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	807b      	strh	r3, [r7, #2]
 800809c:	4613      	mov	r3, r2
 800809e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <pbuf_header_impl+0x24>
 80080a6:	4b46      	ldr	r3, [pc, #280]	; (80081c0 <pbuf_header_impl+0x130>)
 80080a8:	f240 223f 	movw	r2, #575	; 0x23f
 80080ac:	4945      	ldr	r1, [pc, #276]	; (80081c4 <pbuf_header_impl+0x134>)
 80080ae:	4846      	ldr	r0, [pc, #280]	; (80081c8 <pbuf_header_impl+0x138>)
 80080b0:	f00c fe54 	bl	8014d5c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80080b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <pbuf_header_impl+0x32>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <pbuf_header_impl+0x36>
    return 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	e078      	b.n	80081b8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80080c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da10      	bge.n	80080f0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80080ce:	887b      	ldrh	r3, [r7, #2]
 80080d0:	425b      	negs	r3, r3
 80080d2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	895b      	ldrh	r3, [r3, #10]
 80080d8:	89fa      	ldrh	r2, [r7, #14]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90a      	bls.n	80080f4 <pbuf_header_impl+0x64>
 80080de:	4b38      	ldr	r3, [pc, #224]	; (80081c0 <pbuf_header_impl+0x130>)
 80080e0:	f240 2247 	movw	r2, #583	; 0x247
 80080e4:	4939      	ldr	r1, [pc, #228]	; (80081cc <pbuf_header_impl+0x13c>)
 80080e6:	4838      	ldr	r0, [pc, #224]	; (80081c8 <pbuf_header_impl+0x138>)
 80080e8:	f00c fe38 	bl	8014d5c <iprintf>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e063      	b.n	80081b8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80080f0:	887b      	ldrh	r3, [r7, #2]
 80080f2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7b1b      	ldrb	r3, [r3, #12]
 80080f8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008100:	89bb      	ldrh	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <pbuf_header_impl+0x7c>
 8008106:	89bb      	ldrh	r3, [r7, #12]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d112      	bne.n	8008132 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008114:	425b      	negs	r3, r3
 8008116:	441a      	add	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3310      	adds	r3, #16
 8008124:	429a      	cmp	r2, r3
 8008126:	d238      	bcs.n	800819a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800812e:	2301      	movs	r3, #1
 8008130:	e042      	b.n	80081b8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8008132:	89bb      	ldrh	r3, [r7, #12]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d002      	beq.n	800813e <pbuf_header_impl+0xae>
 8008138:	89bb      	ldrh	r3, [r7, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d124      	bne.n	8008188 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800813e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008142:	2b00      	cmp	r3, #0
 8008144:	da0d      	bge.n	8008162 <pbuf_header_impl+0xd2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	895b      	ldrh	r3, [r3, #10]
 800814a:	89fa      	ldrh	r2, [r7, #14]
 800814c:	429a      	cmp	r2, r3
 800814e:	d808      	bhi.n	8008162 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008158:	425b      	negs	r3, r3
 800815a:	441a      	add	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	605a      	str	r2, [r3, #4]
 8008160:	e011      	b.n	8008186 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8008162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd0b      	ble.n	8008182 <pbuf_header_impl+0xf2>
 800816a:	787b      	ldrb	r3, [r7, #1]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d008      	beq.n	8008182 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008178:	425b      	negs	r3, r3
 800817a:	441a      	add	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	605a      	str	r2, [r3, #4]
 8008180:	e001      	b.n	8008186 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008182:	2301      	movs	r3, #1
 8008184:	e018      	b.n	80081b8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008186:	e008      	b.n	800819a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8008188:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <pbuf_header_impl+0x130>)
 800818a:	f240 2277 	movw	r2, #631	; 0x277
 800818e:	4910      	ldr	r1, [pc, #64]	; (80081d0 <pbuf_header_impl+0x140>)
 8008190:	480d      	ldr	r0, [pc, #52]	; (80081c8 <pbuf_header_impl+0x138>)
 8008192:	f00c fde3 	bl	8014d5c <iprintf>
    return 1;
 8008196:	2301      	movs	r3, #1
 8008198:	e00e      	b.n	80081b8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	895a      	ldrh	r2, [r3, #10]
 800819e:	887b      	ldrh	r3, [r7, #2]
 80081a0:	4413      	add	r3, r2
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	891a      	ldrh	r2, [r3, #8]
 80081ac:	887b      	ldrh	r3, [r7, #2]
 80081ae:	4413      	add	r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	08016770 	.word	0x08016770
 80081c4:	080169a8 	.word	0x080169a8
 80081c8:	080167bc 	.word	0x080167bc
 80081cc:	080169b4 	.word	0x080169b4
 80081d0:	080169d4 	.word	0x080169d4

080081d4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80081e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081e4:	2200      	movs	r2, #0
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ff51 	bl	8008090 <pbuf_header_impl>
 80081ee:	4603      	mov	r3, r0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8008204:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008208:	2201      	movs	r2, #1
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff ff3f 	bl	8008090 <pbuf_header_impl>
 8008212:	4603      	mov	r3, r0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <pbuf_free+0x22>
 8008230:	4b3e      	ldr	r3, [pc, #248]	; (800832c <pbuf_free+0x110>)
 8008232:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008236:	493e      	ldr	r1, [pc, #248]	; (8008330 <pbuf_free+0x114>)
 8008238:	483e      	ldr	r0, [pc, #248]	; (8008334 <pbuf_free+0x118>)
 800823a:	f00c fd8f 	bl	8014d5c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800823e:	2300      	movs	r3, #0
 8008240:	e070      	b.n	8008324 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7b1b      	ldrb	r3, [r3, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d012      	beq.n	8008270 <pbuf_free+0x54>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7b1b      	ldrb	r3, [r3, #12]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d00e      	beq.n	8008270 <pbuf_free+0x54>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7b1b      	ldrb	r3, [r3, #12]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d00a      	beq.n	8008270 <pbuf_free+0x54>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7b1b      	ldrb	r3, [r3, #12]
 800825e:	2b03      	cmp	r3, #3
 8008260:	d006      	beq.n	8008270 <pbuf_free+0x54>
 8008262:	4b32      	ldr	r3, [pc, #200]	; (800832c <pbuf_free+0x110>)
 8008264:	f240 22de 	movw	r2, #734	; 0x2de
 8008268:	4933      	ldr	r1, [pc, #204]	; (8008338 <pbuf_free+0x11c>)
 800826a:	4832      	ldr	r0, [pc, #200]	; (8008334 <pbuf_free+0x118>)
 800826c:	f00c fd76 	bl	8014d5c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008274:	e052      	b.n	800831c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	89db      	ldrh	r3, [r3, #14]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <pbuf_free+0x70>
 800827e:	4b2b      	ldr	r3, [pc, #172]	; (800832c <pbuf_free+0x110>)
 8008280:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008284:	492d      	ldr	r1, [pc, #180]	; (800833c <pbuf_free+0x120>)
 8008286:	482b      	ldr	r0, [pc, #172]	; (8008334 <pbuf_free+0x118>)
 8008288:	f00c fd68 	bl	8014d5c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	89db      	ldrh	r3, [r3, #14]
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	81da      	strh	r2, [r3, #14]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	89db      	ldrh	r3, [r3, #14]
 800829c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800829e:	8abb      	ldrh	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d139      	bne.n	8008318 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	7b1b      	ldrb	r3, [r3, #12]
 80082ae:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7b5b      	ldrb	r3, [r3, #13]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d011      	beq.n	80082e0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <pbuf_free+0xba>
 80082c8:	4b18      	ldr	r3, [pc, #96]	; (800832c <pbuf_free+0x110>)
 80082ca:	f240 22f9 	movw	r2, #761	; 0x2f9
 80082ce:	491c      	ldr	r1, [pc, #112]	; (8008340 <pbuf_free+0x124>)
 80082d0:	4818      	ldr	r0, [pc, #96]	; (8008334 <pbuf_free+0x118>)
 80082d2:	f00c fd43 	bl	8014d5c <iprintf>
        pc->custom_free_function(p);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
 80082de:	e015      	b.n	800830c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80082e0:	89fb      	ldrh	r3, [r7, #14]
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d104      	bne.n	80082f0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	2008      	movs	r0, #8
 80082ea:	f7ff fa65 	bl	80077b8 <memp_free>
 80082ee:	e00d      	b.n	800830c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80082f0:	89fb      	ldrh	r3, [r7, #14]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d002      	beq.n	80082fc <pbuf_free+0xe0>
 80082f6:	89fb      	ldrh	r3, [r7, #14]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d104      	bne.n	8008306 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	2007      	movs	r0, #7
 8008300:	f7ff fa5a 	bl	80077b8 <memp_free>
 8008304:	e002      	b.n	800830c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fe ff6e 	bl	80071e8 <mem_free>
        }
      }
      count++;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	3301      	adds	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	e001      	b.n	800831c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1a9      	bne.n	8008276 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	08016770 	.word	0x08016770
 8008330:	080169a8 	.word	0x080169a8
 8008334:	080167bc 	.word	0x080167bc
 8008338:	080169e4 	.word	0x080169e4
 800833c:	080169fc 	.word	0x080169fc
 8008340:	08016a14 	.word	0x08016a14

08008344 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008350:	e005      	b.n	800835e <pbuf_clen+0x1a>
    ++len;
 8008352:	89fb      	ldrh	r3, [r7, #14]
 8008354:	3301      	adds	r3, #1
 8008356:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1f6      	bne.n	8008352 <pbuf_clen+0xe>
  }
  return len;
 8008364:	89fb      	ldrh	r3, [r7, #14]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
	...

08008374 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	89db      	ldrh	r3, [r3, #14]
 8008386:	3301      	adds	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	89db      	ldrh	r3, [r3, #14]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <pbuf_ref+0x30>
 8008396:	4b05      	ldr	r3, [pc, #20]	; (80083ac <pbuf_ref+0x38>)
 8008398:	f240 3239 	movw	r2, #825	; 0x339
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <pbuf_ref+0x3c>)
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <pbuf_ref+0x40>)
 80083a0:	f00c fcdc 	bl	8014d5c <iprintf>
  }
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	08016770 	.word	0x08016770
 80083b0:	08016a38 	.word	0x08016a38
 80083b4:	080167bc 	.word	0x080167bc

080083b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <pbuf_cat+0x16>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <pbuf_cat+0x26>
 80083ce:	4b20      	ldr	r3, [pc, #128]	; (8008450 <pbuf_cat+0x98>)
 80083d0:	f240 324d 	movw	r2, #845	; 0x34d
 80083d4:	491f      	ldr	r1, [pc, #124]	; (8008454 <pbuf_cat+0x9c>)
 80083d6:	4820      	ldr	r0, [pc, #128]	; (8008458 <pbuf_cat+0xa0>)
 80083d8:	f00c fcc0 	bl	8014d5c <iprintf>
 80083dc:	e034      	b.n	8008448 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e00a      	b.n	80083fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	891a      	ldrh	r2, [r3, #8]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	891b      	ldrh	r3, [r3, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f0      	bne.n	80083e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	891a      	ldrh	r2, [r3, #8]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	895b      	ldrh	r3, [r3, #10]
 800840a:	429a      	cmp	r2, r3
 800840c:	d006      	beq.n	800841c <pbuf_cat+0x64>
 800840e:	4b10      	ldr	r3, [pc, #64]	; (8008450 <pbuf_cat+0x98>)
 8008410:	f240 3255 	movw	r2, #853	; 0x355
 8008414:	4911      	ldr	r1, [pc, #68]	; (800845c <pbuf_cat+0xa4>)
 8008416:	4810      	ldr	r0, [pc, #64]	; (8008458 <pbuf_cat+0xa0>)
 8008418:	f00c fca0 	bl	8014d5c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <pbuf_cat+0x7a>
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <pbuf_cat+0x98>)
 8008426:	f240 3256 	movw	r2, #854	; 0x356
 800842a:	490d      	ldr	r1, [pc, #52]	; (8008460 <pbuf_cat+0xa8>)
 800842c:	480a      	ldr	r0, [pc, #40]	; (8008458 <pbuf_cat+0xa0>)
 800842e:	f00c fc95 	bl	8014d5c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	891a      	ldrh	r2, [r3, #8]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	891b      	ldrh	r3, [r3, #8]
 800843a:	4413      	add	r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	08016770 	.word	0x08016770
 8008454:	08016a4c 	.word	0x08016a4c
 8008458:	080167bc 	.word	0x080167bc
 800845c:	08016a84 	.word	0x08016a84
 8008460:	08016ab4 	.word	0x08016ab4

08008464 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ffa1 	bl	80083b8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008476:	6838      	ldr	r0, [r7, #0]
 8008478:	f7ff ff7c 	bl	8008374 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800848e:	2300      	movs	r3, #0
 8008490:	81fb      	strh	r3, [r7, #14]
 8008492:	2300      	movs	r3, #0
 8008494:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <pbuf_copy+0x2a>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <pbuf_copy+0x2a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	891a      	ldrh	r2, [r3, #8]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	891b      	ldrh	r3, [r3, #8]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d209      	bcs.n	80084c2 <pbuf_copy+0x3e>
 80084ae:	4b54      	ldr	r3, [pc, #336]	; (8008600 <pbuf_copy+0x17c>)
 80084b0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80084b4:	4953      	ldr	r1, [pc, #332]	; (8008604 <pbuf_copy+0x180>)
 80084b6:	4854      	ldr	r0, [pc, #336]	; (8008608 <pbuf_copy+0x184>)
 80084b8:	f00c fc50 	bl	8014d5c <iprintf>
 80084bc:	f06f 030f 	mvn.w	r3, #15
 80084c0:	e099      	b.n	80085f6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	895b      	ldrh	r3, [r3, #10]
 80084c6:	461a      	mov	r2, r3
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	895b      	ldrh	r3, [r3, #10]
 80084d0:	4619      	mov	r1, r3
 80084d2:	89bb      	ldrh	r3, [r7, #12]
 80084d4:	1acb      	subs	r3, r1, r3
 80084d6:	429a      	cmp	r2, r3
 80084d8:	db05      	blt.n	80084e6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	895a      	ldrh	r2, [r3, #10]
 80084de:	89bb      	ldrh	r3, [r7, #12]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	817b      	strh	r3, [r7, #10]
 80084e4:	e004      	b.n	80084f0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	895a      	ldrh	r2, [r3, #10]
 80084ea:	89fb      	ldrh	r3, [r7, #14]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	18d0      	adds	r0, r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	89bb      	ldrh	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	897a      	ldrh	r2, [r7, #10]
 8008502:	4619      	mov	r1, r3
 8008504:	f00c fc17 	bl	8014d36 <memcpy>
    offset_to += len;
 8008508:	89fa      	ldrh	r2, [r7, #14]
 800850a:	897b      	ldrh	r3, [r7, #10]
 800850c:	4413      	add	r3, r2
 800850e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8008510:	89ba      	ldrh	r2, [r7, #12]
 8008512:	897b      	ldrh	r3, [r7, #10]
 8008514:	4413      	add	r3, r2
 8008516:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	895b      	ldrh	r3, [r3, #10]
 800851c:	89fa      	ldrh	r2, [r7, #14]
 800851e:	429a      	cmp	r2, r3
 8008520:	d906      	bls.n	8008530 <pbuf_copy+0xac>
 8008522:	4b37      	ldr	r3, [pc, #220]	; (8008600 <pbuf_copy+0x17c>)
 8008524:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008528:	4938      	ldr	r1, [pc, #224]	; (800860c <pbuf_copy+0x188>)
 800852a:	4837      	ldr	r0, [pc, #220]	; (8008608 <pbuf_copy+0x184>)
 800852c:	f00c fc16 	bl	8014d5c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	895b      	ldrh	r3, [r3, #10]
 8008534:	89ba      	ldrh	r2, [r7, #12]
 8008536:	429a      	cmp	r2, r3
 8008538:	d906      	bls.n	8008548 <pbuf_copy+0xc4>
 800853a:	4b31      	ldr	r3, [pc, #196]	; (8008600 <pbuf_copy+0x17c>)
 800853c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008540:	4933      	ldr	r1, [pc, #204]	; (8008610 <pbuf_copy+0x18c>)
 8008542:	4831      	ldr	r0, [pc, #196]	; (8008608 <pbuf_copy+0x184>)
 8008544:	f00c fc0a 	bl	8014d5c <iprintf>
    if (offset_from >= p_from->len) {
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	895b      	ldrh	r3, [r3, #10]
 800854c:	89ba      	ldrh	r2, [r7, #12]
 800854e:	429a      	cmp	r2, r3
 8008550:	d304      	bcc.n	800855c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	895b      	ldrh	r3, [r3, #10]
 8008560:	89fa      	ldrh	r2, [r7, #14]
 8008562:	429a      	cmp	r2, r3
 8008564:	d114      	bne.n	8008590 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10c      	bne.n	8008590 <pbuf_copy+0x10c>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d009      	beq.n	8008590 <pbuf_copy+0x10c>
 800857c:	4b20      	ldr	r3, [pc, #128]	; (8008600 <pbuf_copy+0x17c>)
 800857e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008582:	4924      	ldr	r1, [pc, #144]	; (8008614 <pbuf_copy+0x190>)
 8008584:	4820      	ldr	r0, [pc, #128]	; (8008608 <pbuf_copy+0x184>)
 8008586:	f00c fbe9 	bl	8014d5c <iprintf>
 800858a:	f06f 030f 	mvn.w	r3, #15
 800858e:	e032      	b.n	80085f6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d013      	beq.n	80085be <pbuf_copy+0x13a>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	895a      	ldrh	r2, [r3, #10]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	891b      	ldrh	r3, [r3, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d10d      	bne.n	80085be <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <pbuf_copy+0x13a>
 80085aa:	4b15      	ldr	r3, [pc, #84]	; (8008600 <pbuf_copy+0x17c>)
 80085ac:	f240 32de 	movw	r2, #990	; 0x3de
 80085b0:	4919      	ldr	r1, [pc, #100]	; (8008618 <pbuf_copy+0x194>)
 80085b2:	4815      	ldr	r0, [pc, #84]	; (8008608 <pbuf_copy+0x184>)
 80085b4:	f00c fbd2 	bl	8014d5c <iprintf>
 80085b8:	f06f 0305 	mvn.w	r3, #5
 80085bc:	e01b      	b.n	80085f6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d013      	beq.n	80085ec <pbuf_copy+0x168>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	895a      	ldrh	r2, [r3, #10]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	891b      	ldrh	r3, [r3, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d10d      	bne.n	80085ec <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <pbuf_copy+0x168>
 80085d8:	4b09      	ldr	r3, [pc, #36]	; (8008600 <pbuf_copy+0x17c>)
 80085da:	f240 32e3 	movw	r2, #995	; 0x3e3
 80085de:	490e      	ldr	r1, [pc, #56]	; (8008618 <pbuf_copy+0x194>)
 80085e0:	4809      	ldr	r0, [pc, #36]	; (8008608 <pbuf_copy+0x184>)
 80085e2:	f00c fbbb 	bl	8014d5c <iprintf>
 80085e6:	f06f 0305 	mvn.w	r3, #5
 80085ea:	e004      	b.n	80085f6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f47f af67 	bne.w	80084c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	08016770 	.word	0x08016770
 8008604:	08016b00 	.word	0x08016b00
 8008608:	080167bc 	.word	0x080167bc
 800860c:	08016b30 	.word	0x08016b30
 8008610:	08016b48 	.word	0x08016b48
 8008614:	08016b64 	.word	0x08016b64
 8008618:	08016b74 	.word	0x08016b74

0800861c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4611      	mov	r1, r2
 8008628:	461a      	mov	r2, r3
 800862a:	460b      	mov	r3, r1
 800862c:	80fb      	strh	r3, [r7, #6]
 800862e:	4613      	mov	r3, r2
 8008630:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d108      	bne.n	800864e <pbuf_copy_partial+0x32>
 800863c:	4b30      	ldr	r3, [pc, #192]	; (8008700 <pbuf_copy_partial+0xe4>)
 800863e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008642:	4930      	ldr	r1, [pc, #192]	; (8008704 <pbuf_copy_partial+0xe8>)
 8008644:	4830      	ldr	r0, [pc, #192]	; (8008708 <pbuf_copy_partial+0xec>)
 8008646:	f00c fb89 	bl	8014d5c <iprintf>
 800864a:	2300      	movs	r3, #0
 800864c:	e054      	b.n	80086f8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d108      	bne.n	8008666 <pbuf_copy_partial+0x4a>
 8008654:	4b2a      	ldr	r3, [pc, #168]	; (8008700 <pbuf_copy_partial+0xe4>)
 8008656:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800865a:	492c      	ldr	r1, [pc, #176]	; (800870c <pbuf_copy_partial+0xf0>)
 800865c:	482a      	ldr	r0, [pc, #168]	; (8008708 <pbuf_copy_partial+0xec>)
 800865e:	f00c fb7d 	bl	8014d5c <iprintf>
 8008662:	2300      	movs	r3, #0
 8008664:	e048      	b.n	80086f8 <pbuf_copy_partial+0xdc>

  left = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <pbuf_copy_partial+0x5a>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <pbuf_copy_partial+0x5e>
    return 0;
 8008676:	2300      	movs	r3, #0
 8008678:	e03e      	b.n	80086f8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	e034      	b.n	80086ea <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8008680:	88bb      	ldrh	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <pbuf_copy_partial+0x80>
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	895b      	ldrh	r3, [r3, #10]
 800868a:	88ba      	ldrh	r2, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d305      	bcc.n	800869c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	895b      	ldrh	r3, [r3, #10]
 8008694:	88ba      	ldrh	r2, [r7, #4]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	80bb      	strh	r3, [r7, #4]
 800869a:	e023      	b.n	80086e4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	895a      	ldrh	r2, [r3, #10]
 80086a0:	88bb      	ldrh	r3, [r7, #4]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80086a6:	8b3a      	ldrh	r2, [r7, #24]
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d901      	bls.n	80086b2 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80086b2:	8b7b      	ldrh	r3, [r7, #26]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	18d0      	adds	r0, r2, r3
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	88bb      	ldrh	r3, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	8b3a      	ldrh	r2, [r7, #24]
 80086c2:	4619      	mov	r1, r3
 80086c4:	f00c fb37 	bl	8014d36 <memcpy>
      copied_total += buf_copy_len;
 80086c8:	8afa      	ldrh	r2, [r7, #22]
 80086ca:	8b3b      	ldrh	r3, [r7, #24]
 80086cc:	4413      	add	r3, r2
 80086ce:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80086d0:	8b7a      	ldrh	r2, [r7, #26]
 80086d2:	8b3b      	ldrh	r3, [r7, #24]
 80086d4:	4413      	add	r3, r2
 80086d6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	8b3b      	ldrh	r3, [r7, #24]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <pbuf_copy_partial+0xda>
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1c4      	bne.n	8008680 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80086f6:	8afb      	ldrh	r3, [r7, #22]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	08016770 	.word	0x08016770
 8008704:	08016ba0 	.word	0x08016ba0
 8008708:	080167bc 	.word	0x080167bc
 800870c:	08016bc0 	.word	0x08016bc0

08008710 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008724:	f000 ff80 	bl	8009628 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <tcp_tmr+0x28>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	b2da      	uxtb	r2, r3
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <tcp_tmr+0x28>)
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <tcp_tmr+0x28>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008740:	f000 fcb2 	bl	80090a8 <tcp_slowtmr>
  }
}
 8008744:	bf00      	nop
 8008746:	bd80      	pop	{r7, pc}
 8008748:	2000071d 	.word	0x2000071d

0800874c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e00a      	b.n	8008772 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d102      	bne.n	800876c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1f1      	bne.n	800875c <tcp_remove_listener+0x10>
      }
   }
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <tcp_listen_closed+0x1a>
 8008792:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <tcp_listen_closed+0x5c>)
 8008794:	22c0      	movs	r2, #192	; 0xc0
 8008796:	4913      	ldr	r1, [pc, #76]	; (80087e4 <tcp_listen_closed+0x60>)
 8008798:	4813      	ldr	r0, [pc, #76]	; (80087e8 <tcp_listen_closed+0x64>)
 800879a:	f00c fadf 	bl	8014d5c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7d1b      	ldrb	r3, [r3, #20]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d005      	beq.n	80087b2 <tcp_listen_closed+0x2e>
 80087a6:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <tcp_listen_closed+0x5c>)
 80087a8:	22c1      	movs	r2, #193	; 0xc1
 80087aa:	4910      	ldr	r1, [pc, #64]	; (80087ec <tcp_listen_closed+0x68>)
 80087ac:	480e      	ldr	r0, [pc, #56]	; (80087e8 <tcp_listen_closed+0x64>)
 80087ae:	f00c fad5 	bl	8014d5c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80087b2:	2301      	movs	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	e00b      	b.n	80087d0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80087b8:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <tcp_listen_closed+0x6c>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff ffc1 	bl	800874c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d9f0      	bls.n	80087b8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	08016cf4 	.word	0x08016cf4
 80087e4:	08016d24 	.word	0x08016d24
 80087e8:	08016d30 	.word	0x08016d30
 80087ec:	08016d58 	.word	0x08016d58
 80087f0:	080197dc 	.word	0x080197dc

080087f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80087f4:	b5b0      	push	{r4, r5, r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d075      	beq.n	80088f2 <tcp_close_shutdown+0xfe>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
 800880a:	2b04      	cmp	r3, #4
 800880c:	d003      	beq.n	8008816 <tcp_close_shutdown+0x22>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	7d1b      	ldrb	r3, [r3, #20]
 8008812:	2b07      	cmp	r3, #7
 8008814:	d16d      	bne.n	80088f2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <tcp_close_shutdown+0x34>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008826:	d064      	beq.n	80088f2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7e9b      	ldrb	r3, [r3, #26]
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <tcp_close_shutdown+0x4e>
 8008834:	4b59      	ldr	r3, [pc, #356]	; (800899c <tcp_close_shutdown+0x1a8>)
 8008836:	f240 120f 	movw	r2, #271	; 0x10f
 800883a:	4959      	ldr	r1, [pc, #356]	; (80089a0 <tcp_close_shutdown+0x1ac>)
 800883c:	4859      	ldr	r0, [pc, #356]	; (80089a4 <tcp_close_shutdown+0x1b0>)
 800883e:	f00c fa8d 	bl	8014d5c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800884a:	687c      	ldr	r4, [r7, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	1d1d      	adds	r5, r3, #4
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8adb      	ldrh	r3, [r3, #22]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	8b12      	ldrh	r2, [r2, #24]
 8008858:	9201      	str	r2, [sp, #4]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	462b      	mov	r3, r5
 800885e:	4622      	mov	r2, r4
 8008860:	f004 fefa 	bl	800d658 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f001 fa2b 	bl	8009cc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800886a:	4b4f      	ldr	r3, [pc, #316]	; (80089a8 <tcp_close_shutdown+0x1b4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d105      	bne.n	8008880 <tcp_close_shutdown+0x8c>
 8008874:	4b4c      	ldr	r3, [pc, #304]	; (80089a8 <tcp_close_shutdown+0x1b4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	4a4b      	ldr	r2, [pc, #300]	; (80089a8 <tcp_close_shutdown+0x1b4>)
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	e013      	b.n	80088a8 <tcp_close_shutdown+0xb4>
 8008880:	4b49      	ldr	r3, [pc, #292]	; (80089a8 <tcp_close_shutdown+0x1b4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e00c      	b.n	80088a2 <tcp_close_shutdown+0xae>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d104      	bne.n	800889c <tcp_close_shutdown+0xa8>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	e005      	b.n	80088a8 <tcp_close_shutdown+0xb4>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1ef      	bne.n	8008888 <tcp_close_shutdown+0x94>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <tcp_close_shutdown+0x1b8>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d10c      	bne.n	80088d6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	220a      	movs	r2, #10
 80088c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80088c2:	4b3b      	ldr	r3, [pc, #236]	; (80089b0 <tcp_close_shutdown+0x1bc>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	4a39      	ldr	r2, [pc, #228]	; (80089b0 <tcp_close_shutdown+0x1bc>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	f005 f910 	bl	800daf4 <tcp_timer_needed>
 80088d4:	e00b      	b.n	80088ee <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80088d6:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <tcp_close_shutdown+0x1c0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d102      	bne.n	80088e6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80088e0:	f003 fd52 	bl	800c388 <tcp_trigger_input_pcb_close>
 80088e4:	e003      	b.n	80088ee <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	2001      	movs	r0, #1
 80088ea:	f7fe ff65 	bl	80077b8 <memp_free>
        }
      }
      return ERR_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e050      	b.n	8008994 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d02e      	beq.n	8008958 <tcp_close_shutdown+0x164>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d038      	beq.n	8008970 <tcp_close_shutdown+0x17c>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d142      	bne.n	8008988 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	8adb      	ldrh	r3, [r3, #22]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d021      	beq.n	800894e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800890a:	4b2b      	ldr	r3, [pc, #172]	; (80089b8 <tcp_close_shutdown+0x1c4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d105      	bne.n	8008920 <tcp_close_shutdown+0x12c>
 8008914:	4b28      	ldr	r3, [pc, #160]	; (80089b8 <tcp_close_shutdown+0x1c4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	4a27      	ldr	r2, [pc, #156]	; (80089b8 <tcp_close_shutdown+0x1c4>)
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	e013      	b.n	8008948 <tcp_close_shutdown+0x154>
 8008920:	4b25      	ldr	r3, [pc, #148]	; (80089b8 <tcp_close_shutdown+0x1c4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60bb      	str	r3, [r7, #8]
 8008926:	e00c      	b.n	8008942 <tcp_close_shutdown+0x14e>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d104      	bne.n	800893c <tcp_close_shutdown+0x148>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	e005      	b.n	8008948 <tcp_close_shutdown+0x154>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	60bb      	str	r3, [r7, #8]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1ef      	bne.n	8008928 <tcp_close_shutdown+0x134>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	2001      	movs	r0, #1
 8008952:	f7fe ff31 	bl	80077b8 <memp_free>
    break;
 8008956:	e01c      	b.n	8008992 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff ff13 	bl	8008784 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4816      	ldr	r0, [pc, #88]	; (80089bc <tcp_close_shutdown+0x1c8>)
 8008962:	f001 f9ef 	bl	8009d44 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	2002      	movs	r0, #2
 800896a:	f7fe ff25 	bl	80077b8 <memp_free>
    break;
 800896e:	e010      	b.n	8008992 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	480d      	ldr	r0, [pc, #52]	; (80089a8 <tcp_close_shutdown+0x1b4>)
 8008974:	f001 f9e6 	bl	8009d44 <tcp_pcb_remove>
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <tcp_close_shutdown+0x1b8>)
 800897a:	2201      	movs	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	2001      	movs	r0, #1
 8008982:	f7fe ff19 	bl	80077b8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8008986:	e004      	b.n	8008992 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f819 	bl	80089c0 <tcp_close_shutdown_fin>
 800898e:	4603      	mov	r3, r0
 8008990:	e000      	b.n	8008994 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bdb0      	pop	{r4, r5, r7, pc}
 800899c:	08016cf4 	.word	0x08016cf4
 80089a0:	08016d70 	.word	0x08016d70
 80089a4:	08016d30 	.word	0x08016d30
 80089a8:	20007204 	.word	0x20007204
 80089ac:	20007200 	.word	0x20007200
 80089b0:	20007214 	.word	0x20007214
 80089b4:	20007218 	.word	0x20007218
 80089b8:	20007210 	.word	0x20007210
 80089bc:	2000720c 	.word	0x2000720c

080089c0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <tcp_close_shutdown_fin+0x1c>
 80089ce:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <tcp_close_shutdown_fin+0xc0>)
 80089d0:	f240 124d 	movw	r2, #333	; 0x14d
 80089d4:	492b      	ldr	r1, [pc, #172]	; (8008a84 <tcp_close_shutdown_fin+0xc4>)
 80089d6:	482c      	ldr	r0, [pc, #176]	; (8008a88 <tcp_close_shutdown_fin+0xc8>)
 80089d8:	f00c f9c0 	bl	8014d5c <iprintf>

  switch (pcb->state) {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7d1b      	ldrb	r3, [r3, #20]
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d010      	beq.n	8008a06 <tcp_close_shutdown_fin+0x46>
 80089e4:	2b07      	cmp	r3, #7
 80089e6:	d01b      	beq.n	8008a20 <tcp_close_shutdown_fin+0x60>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d126      	bne.n	8008a3a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f003 fd57 	bl	800c4a0 <tcp_send_fin>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80089f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d11f      	bne.n	8008a3e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2205      	movs	r2, #5
 8008a02:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008a04:	e01b      	b.n	8008a3e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f003 fd4a 	bl	800c4a0 <tcp_send_fin>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d114      	bne.n	8008a42 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2205      	movs	r2, #5
 8008a1c:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008a1e:	e010      	b.n	8008a42 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f003 fd3d 	bl	800c4a0 <tcp_send_fin>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2209      	movs	r2, #9
 8008a36:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008a38:	e005      	b.n	8008a46 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e01c      	b.n	8008a78 <tcp_close_shutdown_fin+0xb8>
    break;
 8008a3e:	bf00      	nop
 8008a40:	e002      	b.n	8008a48 <tcp_close_shutdown_fin+0x88>
    break;
 8008a42:	bf00      	nop
 8008a44:	e000      	b.n	8008a48 <tcp_close_shutdown_fin+0x88>
    break;
 8008a46:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f004 fb77 	bl	800d144 <tcp_output>
 8008a56:	e00d      	b.n	8008a74 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8008a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d108      	bne.n	8008a74 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7e9b      	ldrb	r3, [r3, #26]
 8008a66:	f043 0308 	orr.w	r3, r3, #8
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e001      	b.n	8008a78 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8008a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	08016cf4 	.word	0x08016cf4
 8008a84:	08016d24 	.word	0x08016d24
 8008a88:	08016d30 	.word	0x08016d30

08008a8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	7d1b      	ldrb	r3, [r3, #20]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d006      	beq.n	8008aaa <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7e9b      	ldrb	r3, [r3, #26]
 8008aa0:	f043 0310 	orr.w	r3, r3, #16
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008aaa:	2101      	movs	r1, #1
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff fea1 	bl	80087f4 <tcp_close_shutdown>
 8008ab2:	4603      	mov	r3, r0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	; 0x30
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7d1b      	ldrb	r3, [r3, #20]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d106      	bne.n	8008adc <tcp_abandon+0x20>
 8008ace:	4b4d      	ldr	r3, [pc, #308]	; (8008c04 <tcp_abandon+0x148>)
 8008ad0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008ad4:	494c      	ldr	r1, [pc, #304]	; (8008c08 <tcp_abandon+0x14c>)
 8008ad6:	484d      	ldr	r0, [pc, #308]	; (8008c0c <tcp_abandon+0x150>)
 8008ad8:	f00c f940 	bl	8014d5c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7d1b      	ldrb	r3, [r3, #20]
 8008ae0:	2b0a      	cmp	r3, #10
 8008ae2:	d108      	bne.n	8008af6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	484a      	ldr	r0, [pc, #296]	; (8008c10 <tcp_abandon+0x154>)
 8008ae8:	f001 f92c 	bl	8009d44 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	2001      	movs	r0, #1
 8008af0:	f7fe fe62 	bl	80077b8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8008af4:	e081      	b.n	8008bfa <tcp_abandon+0x13e>
    int send_rst = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b10:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	7d1b      	ldrb	r3, [r3, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d126      	bne.n	8008b6e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	8adb      	ldrh	r3, [r3, #22]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d02e      	beq.n	8008b86 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b28:	4b3a      	ldr	r3, [pc, #232]	; (8008c14 <tcp_abandon+0x158>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d105      	bne.n	8008b3e <tcp_abandon+0x82>
 8008b32:	4b38      	ldr	r3, [pc, #224]	; (8008c14 <tcp_abandon+0x158>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4a36      	ldr	r2, [pc, #216]	; (8008c14 <tcp_abandon+0x158>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	e013      	b.n	8008b66 <tcp_abandon+0xaa>
 8008b3e:	4b35      	ldr	r3, [pc, #212]	; (8008c14 <tcp_abandon+0x158>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e00c      	b.n	8008b60 <tcp_abandon+0xa4>
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d104      	bne.n	8008b5a <tcp_abandon+0x9e>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	60da      	str	r2, [r3, #12]
 8008b58:	e005      	b.n	8008b66 <tcp_abandon+0xaa>
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1ef      	bne.n	8008b46 <tcp_abandon+0x8a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	60da      	str	r2, [r3, #12]
 8008b6c:	e00b      	b.n	8008b86 <tcp_abandon+0xca>
      send_rst = reset;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8adb      	ldrh	r3, [r3, #22]
 8008b76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4827      	ldr	r0, [pc, #156]	; (8008c18 <tcp_abandon+0x15c>)
 8008b7c:	f001 f8e2 	bl	8009d44 <tcp_pcb_remove>
 8008b80:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <tcp_abandon+0x160>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fe15 	bl	80097c2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fe0c 	bl	80097c2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fe03 	bl	80097c2 <tcp_segs_free>
    if (send_rst) {
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00c      	beq.n	8008bdc <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	1d19      	adds	r1, r3, #4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8b1b      	ldrh	r3, [r3, #24]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	6979      	ldr	r1, [r7, #20]
 8008bd6:	69b8      	ldr	r0, [r7, #24]
 8008bd8:	f004 fd3e 	bl	800d658 <tcp_rst>
    last_state = pcb->state;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7d1b      	ldrb	r3, [r3, #20]
 8008be0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	2001      	movs	r0, #1
 8008be6:	f7fe fde7 	bl	80077b8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <tcp_abandon+0x13e>
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f06f 010c 	mvn.w	r1, #12
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	4798      	blx	r3
}
 8008bfa:	bf00      	nop
 8008bfc:	3728      	adds	r7, #40	; 0x28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	08016cf4 	.word	0x08016cf4
 8008c08:	08016d8c 	.word	0x08016d8c
 8008c0c:	08016d30 	.word	0x08016d30
 8008c10:	20007214 	.word	0x20007214
 8008c14:	20007210 	.word	0x20007210
 8008c18:	20007204 	.word	0x20007204
 8008c1c:	20007200 	.word	0x20007200

08008c20 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008c28:	2101      	movs	r1, #1
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff ff46 	bl	8008abc <tcp_abandon>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008c46:	2304      	movs	r3, #4
 8008c48:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008c50:	4b3c      	ldr	r3, [pc, #240]	; (8008d44 <tcp_bind+0x10c>)
 8008c52:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <tcp_bind+0x28>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <tcp_bind+0x2e>
    return ERR_VAL;
 8008c60:	f06f 0305 	mvn.w	r3, #5
 8008c64:	e06a      	b.n	8008d3c <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	7d1b      	ldrb	r3, [r3, #20]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <tcp_bind+0x4a>
 8008c6e:	4b36      	ldr	r3, [pc, #216]	; (8008d48 <tcp_bind+0x110>)
 8008c70:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008c74:	4935      	ldr	r1, [pc, #212]	; (8008d4c <tcp_bind+0x114>)
 8008c76:	4836      	ldr	r0, [pc, #216]	; (8008d50 <tcp_bind+0x118>)
 8008c78:	f00c f870 	bl	8014d5c <iprintf>
 8008c7c:	f06f 0305 	mvn.w	r3, #5
 8008c80:	e05c      	b.n	8008d3c <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <tcp_bind+0x64>
    port = tcp_new_port();
 8008c88:	f000 f9ca 	bl	8009020 <tcp_new_port>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008c90:	88fb      	ldrh	r3, [r7, #6]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d135      	bne.n	8008d02 <tcp_bind+0xca>
      return ERR_BUF;
 8008c96:	f06f 0301 	mvn.w	r3, #1
 8008c9a:	e04f      	b.n	8008d3c <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	e02b      	b.n	8008cfa <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008ca2:	4a2c      	ldr	r2, [pc, #176]	; (8008d54 <tcp_bind+0x11c>)
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	e01e      	b.n	8008cee <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	8adb      	ldrh	r3, [r3, #22]
 8008cb4:	88fa      	ldrh	r2, [r7, #6]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d116      	bne.n	8008ce8 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008cba:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d010      	beq.n	8008ce2 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <tcp_bind+0xaa>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d102      	bne.n	8008ce8 <tcp_bind+0xb0>
              return ERR_USE;
 8008ce2:	f06f 0307 	mvn.w	r3, #7
 8008ce6:	e029      	b.n	8008d3c <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1dd      	bne.n	8008cb0 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	dbcf      	blt.n	8008ca2 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00c      	beq.n	8008d22 <tcp_bind+0xea>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <tcp_bind+0xe4>
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	e000      	b.n	8008d1e <tcp_bind+0xe6>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	88fa      	ldrh	r2, [r7, #6]
 8008d26:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008d28:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <tcp_bind+0x120>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	60da      	str	r2, [r3, #12]
 8008d30:	4a09      	ldr	r2, [pc, #36]	; (8008d58 <tcp_bind+0x120>)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	f004 fedd 	bl	800daf4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	08019814 	.word	0x08019814
 8008d48:	08016cf4 	.word	0x08016cf4
 8008d4c:	08016dc0 	.word	0x08016dc0
 8008d50:	08016d30 	.word	0x08016d30
 8008d54:	080197dc 	.word	0x080197dc
 8008d58:	20007210 	.word	0x20007210

08008d5c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8008d6a:	68b8      	ldr	r0, [r7, #8]
 8008d6c:	f7ff ff58 	bl	8008c20 <tcp_abort>

  return ERR_ABRT;
 8008d70:	f06f 030c 	mvn.w	r3, #12
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f806 	bl	8008da0 <tcp_listen_with_backlog_and_err>
 8008d94:	4603      	mov	r3, r0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	7d1b      	ldrb	r3, [r3, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <tcp_listen_with_backlog_and_err+0x2e>
 8008dba:	4b3f      	ldr	r3, [pc, #252]	; (8008eb8 <tcp_listen_with_backlog_and_err+0x118>)
 8008dbc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8008dc0:	493e      	ldr	r1, [pc, #248]	; (8008ebc <tcp_listen_with_backlog_and_err+0x11c>)
 8008dc2:	483f      	ldr	r0, [pc, #252]	; (8008ec0 <tcp_listen_with_backlog_and_err+0x120>)
 8008dc4:	f00b ffca 	bl	8014d5c <iprintf>
 8008dc8:	23f1      	movs	r3, #241	; 0xf1
 8008dca:	76fb      	strb	r3, [r7, #27]
 8008dcc:	e069      	b.n	8008ea2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	7d1b      	ldrb	r3, [r3, #20]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d104      	bne.n	8008de0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008dda:	23f7      	movs	r3, #247	; 0xf7
 8008ddc:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008dde:	e060      	b.n	8008ea2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008de0:	2002      	movs	r0, #2
 8008de2:	f7fe fc9d 	bl	8007720 <memp_malloc>
 8008de6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8008dee:	23ff      	movs	r3, #255	; 0xff
 8008df0:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008df2:	e056      	b.n	8008ea2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8ada      	ldrh	r2, [r3, #22]
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2201      	movs	r2, #1
 8008e08:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	7d5a      	ldrb	r2, [r3, #21]
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	7a1a      	ldrb	r2, [r3, #8]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	7a9a      	ldrb	r2, [r3, #10]
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	7a5a      	ldrb	r2, [r3, #9]
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8adb      	ldrh	r3, [r3, #22]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d021      	beq.n	8008e7e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e3a:	4b22      	ldr	r3, [pc, #136]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x124>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d105      	bne.n	8008e50 <tcp_listen_with_backlog_and_err+0xb0>
 8008e44:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x124>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x124>)
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e013      	b.n	8008e78 <tcp_listen_with_backlog_and_err+0xd8>
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <tcp_listen_with_backlog_and_err+0x124>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e00c      	b.n	8008e72 <tcp_listen_with_backlog_and_err+0xd2>
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d104      	bne.n	8008e6c <tcp_listen_with_backlog_and_err+0xcc>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	60da      	str	r2, [r3, #12]
 8008e6a:	e005      	b.n	8008e78 <tcp_listen_with_backlog_and_err+0xd8>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1ef      	bne.n	8008e58 <tcp_listen_with_backlog_and_err+0xb8>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	2001      	movs	r0, #1
 8008e82:	f7fe fc99 	bl	80077b8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4a0f      	ldr	r2, [pc, #60]	; (8008ec8 <tcp_listen_with_backlog_and_err+0x128>)
 8008e8a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008e8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <tcp_listen_with_backlog_and_err+0x12c>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	60da      	str	r2, [r3, #12]
 8008e94:	4a0d      	ldr	r2, [pc, #52]	; (8008ecc <tcp_listen_with_backlog_and_err+0x12c>)
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	f004 fe2b 	bl	800daf4 <tcp_timer_needed>
  res = ERR_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7efa      	ldrb	r2, [r7, #27]
 8008eac:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008eae:	69fb      	ldr	r3, [r7, #28]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	08016cf4 	.word	0x08016cf4
 8008ebc:	08016de8 	.word	0x08016de8
 8008ec0:	08016d30 	.word	0x08016d30
 8008ec4:	20007210 	.word	0x20007210
 8008ec8:	08008d5d 	.word	0x08008d5d
 8008ecc:	2000720c 	.word	0x2000720c

08008ed0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ee0:	4413      	add	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008eec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008ef0:	bf28      	it	cs
 8008ef2:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	4413      	add	r3, r2
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	db08      	blt.n	8008f14 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	e020      	b.n	8008f56 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dd03      	ble.n	8008f2a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f28:	e014      	b.n	8008f54 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f3c:	d306      	bcc.n	8008f4c <tcp_update_rcv_ann_wnd+0x7c>
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <tcp_update_rcv_ann_wnd+0x90>)
 8008f40:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008f44:	4907      	ldr	r1, [pc, #28]	; (8008f64 <tcp_update_rcv_ann_wnd+0x94>)
 8008f46:	4808      	ldr	r0, [pc, #32]	; (8008f68 <tcp_update_rcv_ann_wnd+0x98>)
 8008f48:	f00b ff08 	bl	8014d5c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008f54:	2300      	movs	r3, #0
  }
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	08016cf4 	.word	0x08016cf4
 8008f64:	08016e0c 	.word	0x08016e0c
 8008f68:	08016d30 	.word	0x08016d30

08008f6c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7d1b      	ldrb	r3, [r3, #20]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d106      	bne.n	8008f8e <tcp_recved+0x22>
 8008f80:	4b23      	ldr	r3, [pc, #140]	; (8009010 <tcp_recved+0xa4>)
 8008f82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008f86:	4923      	ldr	r1, [pc, #140]	; (8009014 <tcp_recved+0xa8>)
 8008f88:	4823      	ldr	r0, [pc, #140]	; (8009018 <tcp_recved+0xac>)
 8008f8a:	f00b fee7 	bl	8014d5c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f92:	887b      	ldrh	r3, [r7, #2]
 8008f94:	4413      	add	r3, r2
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa4:	d904      	bls.n	8008fb0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fac:	851a      	strh	r2, [r3, #40]	; 0x28
 8008fae:	e017      	b.n	8008fe0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d113      	bne.n	8008fe0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7d1b      	ldrb	r3, [r3, #20]
 8008fbc:	2b07      	cmp	r3, #7
 8008fbe:	d003      	beq.n	8008fc8 <tcp_recved+0x5c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	7d1b      	ldrb	r3, [r3, #20]
 8008fc4:	2b09      	cmp	r3, #9
 8008fc6:	d104      	bne.n	8008fd2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fce:	851a      	strh	r2, [r3, #40]	; 0x28
 8008fd0:	e006      	b.n	8008fe0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <tcp_recved+0xa4>)
 8008fd4:	f240 322d 	movw	r2, #813	; 0x32d
 8008fd8:	4910      	ldr	r1, [pc, #64]	; (800901c <tcp_recved+0xb0>)
 8008fda:	480f      	ldr	r0, [pc, #60]	; (8009018 <tcp_recved+0xac>)
 8008fdc:	f00b febe 	bl	8014d5c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff ff75 	bl	8008ed0 <tcp_update_rcv_ann_wnd>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff0:	db09      	blt.n	8009006 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7e9b      	ldrb	r3, [r3, #26]
 8008ff6:	f043 0302 	orr.w	r3, r3, #2
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f004 f89f 	bl	800d144 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	08016cf4 	.word	0x08016cf4
 8009014:	08016e28 	.word	0x08016e28
 8009018:	08016d30 	.word	0x08016d30
 800901c:	08016e50 	.word	0x08016e50

08009020 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <tcp_new_port+0x80>)
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	b291      	uxth	r1, r2
 8009032:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <tcp_new_port+0x80>)
 8009034:	8011      	strh	r1, [r2, #0]
 8009036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800903a:	4293      	cmp	r3, r2
 800903c:	d103      	bne.n	8009046 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800903e:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <tcp_new_port+0x80>)
 8009040:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009044:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009046:	2300      	movs	r3, #0
 8009048:	71fb      	strb	r3, [r7, #7]
 800904a:	e01e      	b.n	800908a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <tcp_new_port+0x84>)
 8009050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	e011      	b.n	800907e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	8ada      	ldrh	r2, [r3, #22]
 800905e:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <tcp_new_port+0x80>)
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d108      	bne.n	8009078 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009066:	88bb      	ldrh	r3, [r7, #4]
 8009068:	3301      	adds	r3, #1
 800906a:	80bb      	strh	r3, [r7, #4]
 800906c:	88bb      	ldrh	r3, [r7, #4]
 800906e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009072:	d3da      	bcc.n	800902a <tcp_new_port+0xa>
          return 0;
 8009074:	2300      	movs	r3, #0
 8009076:	e00d      	b.n	8009094 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ea      	bne.n	800905a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	3301      	adds	r3, #1
 8009088:	71fb      	strb	r3, [r7, #7]
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	2b03      	cmp	r3, #3
 800908e:	d9dd      	bls.n	800904c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009090:	4b03      	ldr	r3, [pc, #12]	; (80090a0 <tcp_new_port+0x80>)
 8009092:	881b      	ldrh	r3, [r3, #0]
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000006 	.word	0x20000006
 80090a4:	080197dc 	.word	0x080197dc

080090a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80090a8:	b5b0      	push	{r4, r5, r7, lr}
 80090aa:	b08c      	sub	sp, #48	; 0x30
 80090ac:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80090b2:	4b97      	ldr	r3, [pc, #604]	; (8009310 <tcp_slowtmr+0x268>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	4a95      	ldr	r2, [pc, #596]	; (8009310 <tcp_slowtmr+0x268>)
 80090ba:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80090bc:	4b95      	ldr	r3, [pc, #596]	; (8009314 <tcp_slowtmr+0x26c>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	4b93      	ldr	r3, [pc, #588]	; (8009314 <tcp_slowtmr+0x26c>)
 80090c6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80090cc:	4b92      	ldr	r3, [pc, #584]	; (8009318 <tcp_slowtmr+0x270>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80090d2:	e227      	b.n	8009524 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	7d1b      	ldrb	r3, [r3, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <tcp_slowtmr+0x42>
 80090dc:	4b8f      	ldr	r3, [pc, #572]	; (800931c <tcp_slowtmr+0x274>)
 80090de:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80090e2:	498f      	ldr	r1, [pc, #572]	; (8009320 <tcp_slowtmr+0x278>)
 80090e4:	488f      	ldr	r0, [pc, #572]	; (8009324 <tcp_slowtmr+0x27c>)
 80090e6:	f00b fe39 	bl	8014d5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	7d1b      	ldrb	r3, [r3, #20]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d106      	bne.n	8009100 <tcp_slowtmr+0x58>
 80090f2:	4b8a      	ldr	r3, [pc, #552]	; (800931c <tcp_slowtmr+0x274>)
 80090f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80090f8:	498b      	ldr	r1, [pc, #556]	; (8009328 <tcp_slowtmr+0x280>)
 80090fa:	488a      	ldr	r0, [pc, #552]	; (8009324 <tcp_slowtmr+0x27c>)
 80090fc:	f00b fe2e 	bl	8014d5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	7d1b      	ldrb	r3, [r3, #20]
 8009104:	2b0a      	cmp	r3, #10
 8009106:	d106      	bne.n	8009116 <tcp_slowtmr+0x6e>
 8009108:	4b84      	ldr	r3, [pc, #528]	; (800931c <tcp_slowtmr+0x274>)
 800910a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800910e:	4987      	ldr	r1, [pc, #540]	; (800932c <tcp_slowtmr+0x284>)
 8009110:	4884      	ldr	r0, [pc, #528]	; (8009324 <tcp_slowtmr+0x27c>)
 8009112:	f00b fe23 	bl	8014d5c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	7f5a      	ldrb	r2, [r3, #29]
 800911a:	4b7e      	ldr	r3, [pc, #504]	; (8009314 <tcp_slowtmr+0x26c>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d103      	bne.n	800912a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009128:	e1fc      	b.n	8009524 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800912a:	4b7a      	ldr	r3, [pc, #488]	; (8009314 <tcp_slowtmr+0x26c>)
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	7d1b      	ldrb	r3, [r3, #20]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d108      	bne.n	8009154 <tcp_slowtmr+0xac>
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009148:	2b05      	cmp	r3, #5
 800914a:	d903      	bls.n	8009154 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800914c:	7ffb      	ldrb	r3, [r7, #31]
 800914e:	3301      	adds	r3, #1
 8009150:	77fb      	strb	r3, [r7, #31]
 8009152:	e0a2      	b.n	800929a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800915a:	2b0b      	cmp	r3, #11
 800915c:	d903      	bls.n	8009166 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800915e:	7ffb      	ldrb	r3, [r7, #31]
 8009160:	3301      	adds	r3, #1
 8009162:	77fb      	strb	r3, [r7, #31]
 8009164:	e099      	b.n	800929a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800916c:	2b00      	cmp	r3, #0
 800916e:	d032      	beq.n	80091d6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009176:	3b01      	subs	r3, #1
 8009178:	4a6d      	ldr	r2, [pc, #436]	; (8009330 <tcp_slowtmr+0x288>)
 800917a:	5cd3      	ldrb	r3, [r2, r3]
 800917c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009184:	7cfa      	ldrb	r2, [r7, #19]
 8009186:	429a      	cmp	r2, r3
 8009188:	d907      	bls.n	800919a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009190:	3301      	adds	r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80091a0:	7cfa      	ldrb	r2, [r7, #19]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d879      	bhi.n	800929a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80091a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091a8:	f004 fbe4 	bl	800d974 <tcp_zero_window_probe>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d173      	bne.n	800929a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80091c0:	2b06      	cmp	r3, #6
 80091c2:	d86a      	bhi.n	800929a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80091ca:	3301      	adds	r3, #1
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80091d4:	e061      	b.n	800929a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80091dc:	2b00      	cmp	r3, #0
 80091de:	db08      	blt.n	80091f2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3301      	adds	r3, #1
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	b21a      	sxth	r2, r3
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04f      	beq.n	800929a <tcp_slowtmr+0x1f2>
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009206:	429a      	cmp	r2, r3
 8009208:	db47      	blt.n	800929a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	7d1b      	ldrb	r3, [r3, #20]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d018      	beq.n	8009244 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009218:	2b0c      	cmp	r3, #12
 800921a:	bf28      	it	cs
 800921c:	230c      	movcs	r3, #12
 800921e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009226:	10db      	asrs	r3, r3, #3
 8009228:	b21b      	sxth	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009232:	4413      	add	r3, r2
 8009234:	7dfa      	ldrb	r2, [r7, #23]
 8009236:	493f      	ldr	r1, [pc, #252]	; (8009334 <tcp_slowtmr+0x28c>)
 8009238:	5c8a      	ldrb	r2, [r1, r2]
 800923a:	4093      	lsls	r3, r2
 800923c:	b21a      	sxth	r2, r3
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	2200      	movs	r2, #0
 8009248:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009256:	4293      	cmp	r3, r2
 8009258:	bf28      	it	cs
 800925a:	4613      	movcs	r3, r2
 800925c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800925e:	8abb      	ldrh	r3, [r7, #20]
 8009260:	085b      	lsrs	r3, r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	b29b      	uxth	r3, r3
 8009278:	429a      	cmp	r2, r3
 800927a:	d206      	bcs.n	800928a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8009294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009296:	f004 fa53 	bl	800d740 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	7d1b      	ldrb	r3, [r3, #20]
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d10f      	bne.n	80092c2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	7e9b      	ldrb	r3, [r3, #26]
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80092ae:	4b18      	ldr	r3, [pc, #96]	; (8009310 <tcp_slowtmr+0x268>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	2b28      	cmp	r3, #40	; 0x28
 80092ba:	d902      	bls.n	80092c2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80092bc:	7ffb      	ldrb	r3, [r7, #31]
 80092be:	3301      	adds	r3, #1
 80092c0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	7a1b      	ldrb	r3, [r3, #8]
 80092c6:	f003 0308 	and.w	r3, r3, #8
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d05d      	beq.n	800938a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d003      	beq.n	80092de <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80092da:	2b07      	cmp	r3, #7
 80092dc:	d155      	bne.n	800938a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <tcp_slowtmr+0x268>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ee:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80092f2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80092f6:	4910      	ldr	r1, [pc, #64]	; (8009338 <tcp_slowtmr+0x290>)
 80092f8:	fba1 1303 	umull	r1, r3, r1, r3
 80092fc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80092fe:	429a      	cmp	r2, r3
 8009300:	d91c      	bls.n	800933c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009302:	7ffb      	ldrb	r3, [r7, #31]
 8009304:	3301      	adds	r3, #1
 8009306:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8009308:	7fbb      	ldrb	r3, [r7, #30]
 800930a:	3301      	adds	r3, #1
 800930c:	77bb      	strb	r3, [r7, #30]
 800930e:	e03c      	b.n	800938a <tcp_slowtmr+0x2e2>
 8009310:	20007208 	.word	0x20007208
 8009314:	2000071e 	.word	0x2000071e
 8009318:	20007204 	.word	0x20007204
 800931c:	08016cf4 	.word	0x08016cf4
 8009320:	08016ea4 	.word	0x08016ea4
 8009324:	08016d30 	.word	0x08016d30
 8009328:	08016ed0 	.word	0x08016ed0
 800932c:	08016efc 	.word	0x08016efc
 8009330:	080197d4 	.word	0x080197d4
 8009334:	080197c4 	.word	0x080197c4
 8009338:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800933c:	4b97      	ldr	r3, [pc, #604]	; (800959c <tcp_slowtmr+0x4f4>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009352:	4618      	mov	r0, r3
 8009354:	4b92      	ldr	r3, [pc, #584]	; (80095a0 <tcp_slowtmr+0x4f8>)
 8009356:	fb03 f300 	mul.w	r3, r3, r0
 800935a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800935c:	4991      	ldr	r1, [pc, #580]	; (80095a4 <tcp_slowtmr+0x4fc>)
 800935e:	fba1 1303 	umull	r1, r3, r1, r3
 8009362:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009364:	429a      	cmp	r2, r3
 8009366:	d910      	bls.n	800938a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8009368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800936a:	f004 fac6 	bl	800d8fa <tcp_keepalive>
 800936e:	4603      	mov	r3, r0
 8009370:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8009372:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d107      	bne.n	800938a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009380:	3301      	adds	r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	2b00      	cmp	r3, #0
 8009390:	d016      	beq.n	80093c0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8009392:	4b82      	ldr	r3, [pc, #520]	; (800959c <tcp_slowtmr+0x4f4>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80093a2:	4619      	mov	r1, r3
 80093a4:	460b      	mov	r3, r1
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	440b      	add	r3, r1
 80093aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d307      	bcc.n	80093c0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fa04 	bl	80097c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	2200      	movs	r2, #0
 80093be:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	7d1b      	ldrb	r3, [r3, #20]
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d109      	bne.n	80093dc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093c8:	4b74      	ldr	r3, [pc, #464]	; (800959c <tcp_slowtmr+0x4f4>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	6a1b      	ldr	r3, [r3, #32]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b28      	cmp	r3, #40	; 0x28
 80093d4:	d902      	bls.n	80093dc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80093d6:	7ffb      	ldrb	r3, [r7, #31]
 80093d8:	3301      	adds	r3, #1
 80093da:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	7d1b      	ldrb	r3, [r3, #20]
 80093e0:	2b09      	cmp	r3, #9
 80093e2:	d109      	bne.n	80093f8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80093e4:	4b6d      	ldr	r3, [pc, #436]	; (800959c <tcp_slowtmr+0x4f4>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2bf0      	cmp	r3, #240	; 0xf0
 80093f0:	d902      	bls.n	80093f8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 80093f2:	7ffb      	ldrb	r3, [r7, #31]
 80093f4:	3301      	adds	r3, #1
 80093f6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80093f8:	7ffb      	ldrb	r3, [r7, #31]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d05d      	beq.n	80094ba <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009404:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009408:	f000 fc5a 	bl	8009cc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d010      	beq.n	8009434 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009412:	4b65      	ldr	r3, [pc, #404]	; (80095a8 <tcp_slowtmr+0x500>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009418:	429a      	cmp	r2, r3
 800941a:	d106      	bne.n	800942a <tcp_slowtmr+0x382>
 800941c:	4b63      	ldr	r3, [pc, #396]	; (80095ac <tcp_slowtmr+0x504>)
 800941e:	f240 4289 	movw	r2, #1161	; 0x489
 8009422:	4963      	ldr	r1, [pc, #396]	; (80095b0 <tcp_slowtmr+0x508>)
 8009424:	4863      	ldr	r0, [pc, #396]	; (80095b4 <tcp_slowtmr+0x50c>)
 8009426:	f00b fc99 	bl	8014d5c <iprintf>
        prev->next = pcb->next;
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	60da      	str	r2, [r3, #12]
 8009432:	e00f      	b.n	8009454 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009434:	4b5c      	ldr	r3, [pc, #368]	; (80095a8 <tcp_slowtmr+0x500>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800943a:	429a      	cmp	r2, r3
 800943c:	d006      	beq.n	800944c <tcp_slowtmr+0x3a4>
 800943e:	4b5b      	ldr	r3, [pc, #364]	; (80095ac <tcp_slowtmr+0x504>)
 8009440:	f240 428d 	movw	r2, #1165	; 0x48d
 8009444:	495c      	ldr	r1, [pc, #368]	; (80095b8 <tcp_slowtmr+0x510>)
 8009446:	485b      	ldr	r0, [pc, #364]	; (80095b4 <tcp_slowtmr+0x50c>)
 8009448:	f00b fc88 	bl	8014d5c <iprintf>
        tcp_active_pcbs = pcb->next;
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	4a55      	ldr	r2, [pc, #340]	; (80095a8 <tcp_slowtmr+0x500>)
 8009452:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009454:	7fbb      	ldrb	r3, [r7, #30]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d010      	beq.n	800947c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009462:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	1d1d      	adds	r5, r3, #4
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	8adb      	ldrh	r3, [r3, #22]
 800946c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946e:	8b12      	ldrh	r2, [r2, #24]
 8009470:	9201      	str	r2, [sp, #4]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	462b      	mov	r3, r5
 8009476:	4622      	mov	r2, r4
 8009478:	f004 f8ee 	bl	800d658 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	7d1b      	ldrb	r3, [r3, #20]
 8009486:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	2001      	movs	r0, #1
 8009496:	f7fe f98f 	bl	80077b8 <memp_free>

      tcp_active_pcbs_changed = 0;
 800949a:	4b48      	ldr	r3, [pc, #288]	; (80095bc <tcp_slowtmr+0x514>)
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <tcp_slowtmr+0x408>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f06f 010c 	mvn.w	r1, #12
 80094ac:	68b8      	ldr	r0, [r7, #8]
 80094ae:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80094b0:	4b42      	ldr	r3, [pc, #264]	; (80095bc <tcp_slowtmr+0x514>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d035      	beq.n	8009524 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80094b8:	e606      	b.n	80090c8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	7edb      	ldrb	r3, [r3, #27]
 80094c8:	3301      	adds	r3, #1
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	7eda      	ldrb	r2, [r3, #27]
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	7f1b      	ldrb	r3, [r3, #28]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d323      	bcc.n	8009524 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	2200      	movs	r2, #0
 80094e0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80094e2:	4b36      	ldr	r3, [pc, #216]	; (80095bc <tcp_slowtmr+0x514>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <tcp_slowtmr+0x460>
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f8:	6a3a      	ldr	r2, [r7, #32]
 80094fa:	6912      	ldr	r2, [r2, #16]
 80094fc:	6a39      	ldr	r1, [r7, #32]
 80094fe:	4610      	mov	r0, r2
 8009500:	4798      	blx	r3
 8009502:	4603      	mov	r3, r0
 8009504:	777b      	strb	r3, [r7, #29]
 8009506:	e001      	b.n	800950c <tcp_slowtmr+0x464>
 8009508:	2300      	movs	r3, #0
 800950a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800950c:	4b2b      	ldr	r3, [pc, #172]	; (80095bc <tcp_slowtmr+0x514>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d000      	beq.n	8009516 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8009514:	e5d8      	b.n	80090c8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009516:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800951e:	6a38      	ldr	r0, [r7, #32]
 8009520:	f003 fe10 	bl	800d144 <tcp_output>
  while (pcb != NULL) {
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	2b00      	cmp	r3, #0
 8009528:	f47f add4 	bne.w	80090d4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800952c:	2300      	movs	r3, #0
 800952e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8009530:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <tcp_slowtmr+0x518>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009536:	e068      	b.n	800960a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	7d1b      	ldrb	r3, [r3, #20]
 800953c:	2b0a      	cmp	r3, #10
 800953e:	d006      	beq.n	800954e <tcp_slowtmr+0x4a6>
 8009540:	4b1a      	ldr	r3, [pc, #104]	; (80095ac <tcp_slowtmr+0x504>)
 8009542:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8009546:	491f      	ldr	r1, [pc, #124]	; (80095c4 <tcp_slowtmr+0x51c>)
 8009548:	481a      	ldr	r0, [pc, #104]	; (80095b4 <tcp_slowtmr+0x50c>)
 800954a:	f00b fc07 	bl	8014d5c <iprintf>
    pcb_remove = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009552:	4b12      	ldr	r3, [pc, #72]	; (800959c <tcp_slowtmr+0x4f4>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2bf0      	cmp	r3, #240	; 0xf0
 800955e:	d902      	bls.n	8009566 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8009560:	7ffb      	ldrb	r3, [r7, #31]
 8009562:	3301      	adds	r3, #1
 8009564:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009566:	7ffb      	ldrb	r3, [r7, #31]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d049      	beq.n	8009600 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800956c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800956e:	f000 fba7 	bl	8009cc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d029      	beq.n	80095cc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009578:	4b11      	ldr	r3, [pc, #68]	; (80095c0 <tcp_slowtmr+0x518>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957e:	429a      	cmp	r2, r3
 8009580:	d106      	bne.n	8009590 <tcp_slowtmr+0x4e8>
 8009582:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <tcp_slowtmr+0x504>)
 8009584:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8009588:	490f      	ldr	r1, [pc, #60]	; (80095c8 <tcp_slowtmr+0x520>)
 800958a:	480a      	ldr	r0, [pc, #40]	; (80095b4 <tcp_slowtmr+0x50c>)
 800958c:	f00b fbe6 	bl	8014d5c <iprintf>
        prev->next = pcb->next;
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	68da      	ldr	r2, [r3, #12]
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	60da      	str	r2, [r3, #12]
 8009598:	e028      	b.n	80095ec <tcp_slowtmr+0x544>
 800959a:	bf00      	nop
 800959c:	20007208 	.word	0x20007208
 80095a0:	000124f8 	.word	0x000124f8
 80095a4:	10624dd3 	.word	0x10624dd3
 80095a8:	20007204 	.word	0x20007204
 80095ac:	08016cf4 	.word	0x08016cf4
 80095b0:	08016f2c 	.word	0x08016f2c
 80095b4:	08016d30 	.word	0x08016d30
 80095b8:	08016f58 	.word	0x08016f58
 80095bc:	20007200 	.word	0x20007200
 80095c0:	20007214 	.word	0x20007214
 80095c4:	08016f84 	.word	0x08016f84
 80095c8:	08016fb4 	.word	0x08016fb4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80095cc:	4b12      	ldr	r3, [pc, #72]	; (8009618 <tcp_slowtmr+0x570>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d006      	beq.n	80095e4 <tcp_slowtmr+0x53c>
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <tcp_slowtmr+0x574>)
 80095d8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80095dc:	4910      	ldr	r1, [pc, #64]	; (8009620 <tcp_slowtmr+0x578>)
 80095de:	4811      	ldr	r0, [pc, #68]	; (8009624 <tcp_slowtmr+0x57c>)
 80095e0:	f00b fbbc 	bl	8014d5c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	4a0b      	ldr	r2, [pc, #44]	; (8009618 <tcp_slowtmr+0x570>)
 80095ea:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80095f6:	69b9      	ldr	r1, [r7, #24]
 80095f8:	2001      	movs	r0, #1
 80095fa:	f7fe f8dd 	bl	80077b8 <memp_free>
 80095fe:	e004      	b.n	800960a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	2b00      	cmp	r3, #0
 800960e:	d193      	bne.n	8009538 <tcp_slowtmr+0x490>
    }
  }
}
 8009610:	bf00      	nop
 8009612:	3728      	adds	r7, #40	; 0x28
 8009614:	46bd      	mov	sp, r7
 8009616:	bdb0      	pop	{r4, r5, r7, pc}
 8009618:	20007214 	.word	0x20007214
 800961c:	08016cf4 	.word	0x08016cf4
 8009620:	08016fdc 	.word	0x08016fdc
 8009624:	08016d30 	.word	0x08016d30

08009628 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800962e:	4b2d      	ldr	r3, [pc, #180]	; (80096e4 <tcp_fasttmr+0xbc>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	4b2b      	ldr	r3, [pc, #172]	; (80096e4 <tcp_fasttmr+0xbc>)
 8009638:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800963a:	4b2b      	ldr	r3, [pc, #172]	; (80096e8 <tcp_fasttmr+0xc0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009640:	e048      	b.n	80096d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7f5a      	ldrb	r2, [r3, #29]
 8009646:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <tcp_fasttmr+0xbc>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d03f      	beq.n	80096ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800964e:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <tcp_fasttmr+0xbc>)
 8009650:	781a      	ldrb	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7e9b      	ldrb	r3, [r3, #26]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d010      	beq.n	8009684 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	7e9b      	ldrb	r3, [r3, #26]
 8009666:	f043 0302 	orr.w	r3, r3, #2
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f003 fd67 	bl	800d144 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7e9b      	ldrb	r3, [r3, #26]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	b2da      	uxtb	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7e9b      	ldrb	r3, [r3, #26]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7e9b      	ldrb	r3, [r3, #26]
 8009694:	f023 0308 	bic.w	r3, r3, #8
 8009698:	b2da      	uxtb	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff f98e 	bl	80089c0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80096b2:	4b0e      	ldr	r3, [pc, #56]	; (80096ec <tcp_fasttmr+0xc4>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f819 	bl	80096f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80096be:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <tcp_fasttmr+0xc4>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d000      	beq.n	80096c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80096c6:	e7b8      	b.n	800963a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	e002      	b.n	80096d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1b3      	bne.n	8009642 <tcp_fasttmr+0x1a>
    }
  }
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	2000071e 	.word	0x2000071e
 80096e8:	20007204 	.word	0x20007204
 80096ec:	20007200 	.word	0x20007200

080096f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096fc:	7b5b      	ldrb	r3, [r3, #13]
 80096fe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009704:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <tcp_process_refused_data+0x3e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6918      	ldr	r0, [r3, #16]
 8009720:	2300      	movs	r3, #0
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	47a0      	blx	r4
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
 800972c:	e007      	b.n	800973e <tcp_process_refused_data+0x4e>
 800972e:	2300      	movs	r3, #0
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	2000      	movs	r0, #0
 8009736:	f000 f89b 	bl	8009870 <tcp_recv_null>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800973e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d12a      	bne.n	800979c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8009746:	7bbb      	ldrb	r3, [r7, #14]
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	d033      	beq.n	80097b8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009758:	d005      	beq.n	8009766 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975e:	3301      	adds	r3, #1
 8009760:	b29a      	uxth	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <tcp_process_refused_data+0x98>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6918      	ldr	r0, [r3, #16]
 800977a:	2300      	movs	r3, #0
 800977c:	2200      	movs	r2, #0
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	47a0      	blx	r4
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
 8009786:	e001      	b.n	800978c <tcp_process_refused_data+0x9c>
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800978c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009790:	f113 0f0d 	cmn.w	r3, #13
 8009794:	d110      	bne.n	80097b8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8009796:	f06f 030c 	mvn.w	r3, #12
 800979a:	e00e      	b.n	80097ba <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800979c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097a0:	f113 0f0d 	cmn.w	r3, #13
 80097a4:	d102      	bne.n	80097ac <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80097a6:	f06f 030c 	mvn.w	r3, #12
 80097aa:	e006      	b.n	80097ba <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80097b2:	f06f 0304 	mvn.w	r3, #4
 80097b6:	e000      	b.n	80097ba <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd90      	pop	{r4, r7, pc}

080097c2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80097ca:	e007      	b.n	80097dc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f809 	bl	80097ea <tcp_seg_free>
    seg = next;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f4      	bne.n	80097cc <tcp_segs_free+0xa>
  }
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fd09 	bl	800821c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	2003      	movs	r0, #3
 800980e:	f7fd ffd3 	bl	80077b8 <memp_free>
  }
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	755a      	strb	r2, [r3, #21]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009840:	2003      	movs	r0, #3
 8009842:	f7fd ff6d 	bl	8007720 <memp_malloc>
 8009846:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <tcp_seg_copy+0x1a>
    return NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	e00a      	b.n	8009868 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009852:	2210      	movs	r2, #16
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f00b fa6d 	bl	8014d36 <memcpy>
  pbuf_ref(cseg->p);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe fd87 	bl	8008374 <pbuf_ref>
  return cseg;
 8009866:	68fb      	ldr	r3, [r7, #12]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	891b      	ldrh	r3, [r3, #8]
 8009888:	4619      	mov	r1, r3
 800988a:	68b8      	ldr	r0, [r7, #8]
 800988c:	f7ff fb6e 	bl	8008f6c <tcp_recved>
    pbuf_free(p);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7fe fcc3 	bl	800821c <pbuf_free>
 8009896:	e008      	b.n	80098aa <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8009898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80098a0:	68b8      	ldr	r0, [r7, #8]
 80098a2:	f7ff f8f3 	bl	8008a8c <tcp_close>
 80098a6:	4603      	mov	r3, r0
 80098a8:	e000      	b.n	80098ac <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80098be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	db01      	blt.n	80098ca <tcp_kill_prio+0x16>
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	e000      	b.n	80098cc <tcp_kill_prio+0x18>
 80098ca:	237f      	movs	r3, #127	; 0x7f
 80098cc:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80098d6:	4b16      	ldr	r3, [pc, #88]	; (8009930 <tcp_kill_prio+0x7c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e01a      	b.n	8009914 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	7d5b      	ldrb	r3, [r3, #21]
 80098e2:	7afa      	ldrb	r2, [r7, #11]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d312      	bcc.n	800990e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80098e8:	4b12      	ldr	r3, [pc, #72]	; (8009934 <tcp_kill_prio+0x80>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d80a      	bhi.n	800990e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80098f8:	4b0e      	ldr	r3, [pc, #56]	; (8009934 <tcp_kill_prio+0x80>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	7d5b      	ldrb	r3, [r3, #21]
 800990c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e1      	bne.n	80098de <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009920:	6938      	ldr	r0, [r7, #16]
 8009922:	f7ff f97d 	bl	8008c20 <tcp_abort>
  }
}
 8009926:	bf00      	nop
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20007204 	.word	0x20007204
 8009934:	20007208 	.word	0x20007208

08009938 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b08      	cmp	r3, #8
 8009946:	d009      	beq.n	800995c <tcp_kill_state+0x24>
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b09      	cmp	r3, #9
 800994c:	d006      	beq.n	800995c <tcp_kill_state+0x24>
 800994e:	4b1a      	ldr	r3, [pc, #104]	; (80099b8 <tcp_kill_state+0x80>)
 8009950:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009954:	4919      	ldr	r1, [pc, #100]	; (80099bc <tcp_kill_state+0x84>)
 8009956:	481a      	ldr	r0, [pc, #104]	; (80099c0 <tcp_kill_state+0x88>)
 8009958:	f00b fa00 	bl	8014d5c <iprintf>

  inactivity = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009964:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <tcp_kill_state+0x8c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	e017      	b.n	800999c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	7d1b      	ldrb	r3, [r3, #20]
 8009970:	79fa      	ldrb	r2, [r7, #7]
 8009972:	429a      	cmp	r2, r3
 8009974:	d10f      	bne.n	8009996 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <tcp_kill_state+0x90>)
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	429a      	cmp	r2, r3
 8009984:	d807      	bhi.n	8009996 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009986:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <tcp_kill_state+0x90>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e4      	bne.n	800996c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80099a8:	2100      	movs	r1, #0
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	f7ff f886 	bl	8008abc <tcp_abandon>
  }
}
 80099b0:	bf00      	nop
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	08016cf4 	.word	0x08016cf4
 80099bc:	08017004 	.word	0x08017004
 80099c0:	08016d30 	.word	0x08016d30
 80099c4:	20007204 	.word	0x20007204
 80099c8:	20007208 	.word	0x20007208

080099cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80099da:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <tcp_kill_timewait+0x58>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e012      	b.n	8009a08 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80099e2:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <tcp_kill_timewait+0x5c>)
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d807      	bhi.n	8009a02 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <tcp_kill_timewait+0x5c>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e9      	bne.n	80099e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009a14:	68b8      	ldr	r0, [r7, #8]
 8009a16:	f7ff f903 	bl	8008c20 <tcp_abort>
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20007214 	.word	0x20007214
 8009a28:	20007208 	.word	0x20007208

08009a2c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a36:	2001      	movs	r0, #1
 8009a38:	f7fd fe72 	bl	8007720 <memp_malloc>
 8009a3c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d124      	bne.n	8009a8e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009a44:	f7ff ffc2 	bl	80099cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a48:	2001      	movs	r0, #1
 8009a4a:	f7fd fe69 	bl	8007720 <memp_malloc>
 8009a4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d11b      	bne.n	8009a8e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009a56:	2009      	movs	r0, #9
 8009a58:	f7ff ff6e 	bl	8009938 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	f7fd fe5f 	bl	8007720 <memp_malloc>
 8009a62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d111      	bne.n	8009a8e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009a6a:	2008      	movs	r0, #8
 8009a6c:	f7ff ff64 	bl	8009938 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a70:	2001      	movs	r0, #1
 8009a72:	f7fd fe55 	bl	8007720 <memp_malloc>
 8009a76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d107      	bne.n	8009a8e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff ff17 	bl	80098b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a86:	2001      	movs	r0, #1
 8009a88:	f7fd fe4a 	bl	8007720 <memp_malloc>
 8009a8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d03f      	beq.n	8009b14 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009a94:	2298      	movs	r2, #152	; 0x98
 8009a96:	2100      	movs	r1, #0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f00b f957 	bl	8014d4c <memset>
    pcb->prio = prio;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	79fa      	ldrb	r2, [r7, #7]
 8009aa2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009aaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	22ff      	movs	r2, #255	; 0xff
 8009ac2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009aca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2206      	movs	r2, #6
 8009ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2206      	movs	r2, #6
 8009ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ae0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009aea:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <tcp_alloc+0xf4>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <tcp_alloc+0xf8>)
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4a08      	ldr	r2, [pc, #32]	; (8009b28 <tcp_alloc+0xfc>)
 8009b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4a07      	ldr	r2, [pc, #28]	; (8009b2c <tcp_alloc+0x100>)
 8009b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009b14:	68fb      	ldr	r3, [r7, #12]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20007208 	.word	0x20007208
 8009b24:	2000071e 	.word	0x2000071e
 8009b28:	08009871 	.word	0x08009871
 8009b2c:	006ddd00 	.word	0x006ddd00

08009b30 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009b34:	2040      	movs	r0, #64	; 0x40
 8009b36:	f7ff ff79 	bl	8009a2c <tcp_alloc>
 8009b3a:	4603      	mov	r3, r0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009b4a:	2040      	movs	r0, #64	; 0x40
 8009b4c:	f7ff ff6e 	bl	8009a2c <tcp_alloc>
 8009b50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8009b52:	68fb      	ldr	r3, [r7, #12]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	611a      	str	r2, [r3, #16]
  }
}
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7d1b      	ldrb	r3, [r3, #20]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d106      	bne.n	8009ba6 <tcp_recv+0x26>
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <tcp_recv+0x38>)
 8009b9a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8009b9e:	4907      	ldr	r1, [pc, #28]	; (8009bbc <tcp_recv+0x3c>)
 8009ba0:	4807      	ldr	r0, [pc, #28]	; (8009bc0 <tcp_recv+0x40>)
 8009ba2:	f00b f8db 	bl	8014d5c <iprintf>
    pcb->recv = recv;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	08016cf4 	.word	0x08016cf4
 8009bbc:	08017014 	.word	0x08017014
 8009bc0:	08016d30 	.word	0x08016d30

08009bc4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00d      	beq.n	8009bf0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7d1b      	ldrb	r3, [r3, #20]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d106      	bne.n	8009bea <tcp_sent+0x26>
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <tcp_sent+0x34>)
 8009bde:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8009be2:	4906      	ldr	r1, [pc, #24]	; (8009bfc <tcp_sent+0x38>)
 8009be4:	4806      	ldr	r0, [pc, #24]	; (8009c00 <tcp_sent+0x3c>)
 8009be6:	f00b f8b9 	bl	8014d5c <iprintf>
    pcb->sent = sent;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	08016cf4 	.word	0x08016cf4
 8009bfc:	0801703c 	.word	0x0801703c
 8009c00:	08016d30 	.word	0x08016d30

08009c04 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00e      	beq.n	8009c32 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	7d1b      	ldrb	r3, [r3, #20]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d106      	bne.n	8009c2a <tcp_err+0x26>
 8009c1c:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <tcp_err+0x38>)
 8009c1e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8009c22:	4907      	ldr	r1, [pc, #28]	; (8009c40 <tcp_err+0x3c>)
 8009c24:	4807      	ldr	r0, [pc, #28]	; (8009c44 <tcp_err+0x40>)
 8009c26:	f00b f899 	bl	8014d5c <iprintf>
    pcb->errf = err;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08016cf4 	.word	0x08016cf4
 8009c40:	08017064 	.word	0x08017064
 8009c44:	08016d30 	.word	0x08016d30

08009c48 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d008      	beq.n	8009c6a <tcp_accept+0x22>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d104      	bne.n	8009c6a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	619a      	str	r2, [r3, #24]
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
	...

08009c78 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	7d1b      	ldrb	r3, [r3, #20]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d106      	bne.n	8009c9c <tcp_poll+0x24>
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <tcp_poll+0x3c>)
 8009c90:	f240 7203 	movw	r2, #1795	; 0x703
 8009c94:	4908      	ldr	r1, [pc, #32]	; (8009cb8 <tcp_poll+0x40>)
 8009c96:	4809      	ldr	r0, [pc, #36]	; (8009cbc <tcp_poll+0x44>)
 8009c98:	f00b f860 	bl	8014d5c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	79fa      	ldrb	r2, [r7, #7]
 8009ca8:	771a      	strb	r2, [r3, #28]
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	08016cf4 	.word	0x08016cf4
 8009cb8:	0801708c 	.word	0x0801708c
 8009cbc:	08016d30 	.word	0x08016d30

08009cc0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	7d1b      	ldrb	r3, [r3, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d034      	beq.n	8009d3a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009cd4:	2b0a      	cmp	r3, #10
 8009cd6:	d030      	beq.n	8009d3a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d02c      	beq.n	8009d3a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d007      	beq.n	8009cf8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe fa95 	bl	800821c <pbuf_free>
      pcb->refused_data = NULL;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fd60 	bl	80097c2 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff fd54 	bl	80097c2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fd4f 	bl	80097c2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	669a      	str	r2, [r3, #104]	; 0x68
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d105      	bne.n	8009d64 <tcp_pcb_remove+0x20>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e013      	b.n	8009d8c <tcp_pcb_remove+0x48>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	e00c      	b.n	8009d86 <tcp_pcb_remove+0x42>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d104      	bne.n	8009d80 <tcp_pcb_remove+0x3c>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	60da      	str	r2, [r3, #12]
 8009d7e:	e005      	b.n	8009d8c <tcp_pcb_remove+0x48>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ef      	bne.n	8009d6c <tcp_pcb_remove+0x28>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009d92:	6838      	ldr	r0, [r7, #0]
 8009d94:	f7ff ff94 	bl	8009cc0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	7d1b      	ldrb	r3, [r3, #20]
 8009d9c:	2b0a      	cmp	r3, #10
 8009d9e:	d013      	beq.n	8009dc8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d00f      	beq.n	8009dc8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	7e9b      	ldrb	r3, [r3, #26]
 8009dac:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d009      	beq.n	8009dc8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	7e9b      	ldrb	r3, [r3, #26]
 8009db8:	f043 0302 	orr.w	r3, r3, #2
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009dc2:	6838      	ldr	r0, [r7, #0]
 8009dc4:	f003 f9be 	bl	800d144 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	7d1b      	ldrb	r3, [r3, #20]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d020      	beq.n	8009e12 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d006      	beq.n	8009de6 <tcp_pcb_remove+0xa2>
 8009dd8:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <tcp_pcb_remove+0xe4>)
 8009dda:	f240 7253 	movw	r2, #1875	; 0x753
 8009dde:	4913      	ldr	r1, [pc, #76]	; (8009e2c <tcp_pcb_remove+0xe8>)
 8009de0:	4813      	ldr	r0, [pc, #76]	; (8009e30 <tcp_pcb_remove+0xec>)
 8009de2:	f00a ffbb 	bl	8014d5c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d006      	beq.n	8009dfc <tcp_pcb_remove+0xb8>
 8009dee:	4b0e      	ldr	r3, [pc, #56]	; (8009e28 <tcp_pcb_remove+0xe4>)
 8009df0:	f240 7254 	movw	r2, #1876	; 0x754
 8009df4:	490f      	ldr	r1, [pc, #60]	; (8009e34 <tcp_pcb_remove+0xf0>)
 8009df6:	480e      	ldr	r0, [pc, #56]	; (8009e30 <tcp_pcb_remove+0xec>)
 8009df8:	f00a ffb0 	bl	8014d5c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <tcp_pcb_remove+0xce>
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <tcp_pcb_remove+0xe4>)
 8009e06:	f240 7256 	movw	r2, #1878	; 0x756
 8009e0a:	490b      	ldr	r1, [pc, #44]	; (8009e38 <tcp_pcb_remove+0xf4>)
 8009e0c:	4808      	ldr	r0, [pc, #32]	; (8009e30 <tcp_pcb_remove+0xec>)
 8009e0e:	f00a ffa5 	bl	8014d5c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2200      	movs	r2, #0
 8009e16:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009e1e:	bf00      	nop
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	08016cf4 	.word	0x08016cf4
 8009e2c:	080170ac 	.word	0x080170ac
 8009e30:	08016d30 	.word	0x08016d30
 8009e34:	080170c4 	.word	0x080170c4
 8009e38:	080170e0 	.word	0x080170e0

08009e3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009e44:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <tcp_next_iss+0x28>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <tcp_next_iss+0x2c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	4a05      	ldr	r2, [pc, #20]	; (8009e64 <tcp_next_iss+0x28>)
 8009e50:	6013      	str	r3, [r2, #0]
  return iss;
 8009e52:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <tcp_next_iss+0x28>)
 8009e54:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000008 	.word	0x20000008
 8009e68:	20007208 	.word	0x20007208

08009e6c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	6039      	str	r1, [r7, #0]
 8009e76:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8009e78:	6838      	ldr	r0, [r7, #0]
 8009e7a:	f007 fa79 	bl	8011370 <ip4_route>
 8009e7e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	e010      	b.n	8009eac <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e8e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009e90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d008      	beq.n	8009eaa <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8009e98:	897b      	ldrh	r3, [r7, #10]
 8009e9a:	3b28      	subs	r3, #40	; 0x28
 8009e9c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009e9e:	893a      	ldrh	r2, [r7, #8]
 8009ea0:	88fb      	ldrh	r3, [r7, #6]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bf28      	it	cs
 8009ea6:	4613      	movcs	r3, r2
 8009ea8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8009eaa:	88fb      	ldrh	r3, [r7, #6]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009ec2:	e011      	b.n	8009ee8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d108      	bne.n	8009ee2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7fe fea2 	bl	8008c20 <tcp_abort>
      pcb = next;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e002      	b.n	8009ee8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1ea      	bne.n	8009ec4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d02c      	beq.n	8009f62 <tcp_netif_ip_addr_changed+0x6a>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d028      	beq.n	8009f62 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009f10:	4b16      	ldr	r3, [pc, #88]	; (8009f6c <tcp_netif_ip_addr_changed+0x74>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff ffcc 	bl	8009eb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009f1c:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <tcp_netif_ip_addr_changed+0x78>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff ffc6 	bl	8009eb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d019      	beq.n	8009f62 <tcp_netif_ip_addr_changed+0x6a>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d015      	beq.n	8009f62 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009f36:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <tcp_netif_ip_addr_changed+0x7c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e00e      	b.n	8009f5c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d103      	bne.n	8009f58 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1ed      	bne.n	8009f3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20007204 	.word	0x20007204
 8009f70:	20007210 	.word	0x20007210
 8009f74:	2000720c 	.word	0x2000720c

08009f78 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009f78:	b590      	push	{r4, r7, lr}
 8009f7a:	b08b      	sub	sp, #44	; 0x2c
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4a82      	ldr	r2, [pc, #520]	; (800a190 <tcp_input+0x218>)
 8009f88:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	895b      	ldrh	r3, [r3, #10]
 8009f8e:	2b13      	cmp	r3, #19
 8009f90:	f240 838a 	bls.w	800a6a8 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f94:	4b7f      	ldr	r3, [pc, #508]	; (800a194 <tcp_input+0x21c>)
 8009f96:	695a      	ldr	r2, [r3, #20]
 8009f98:	4b7e      	ldr	r3, [pc, #504]	; (800a194 <tcp_input+0x21c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f007 fc7e 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f040 8380 	bne.w	800a6ac <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009fac:	4b79      	ldr	r3, [pc, #484]	; (800a194 <tcp_input+0x21c>)
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009fb4:	2be0      	cmp	r3, #224	; 0xe0
 8009fb6:	f000 8379 	beq.w	800a6ac <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8009fba:	4b75      	ldr	r3, [pc, #468]	; (800a190 <tcp_input+0x218>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	899b      	ldrh	r3, [r3, #12]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fc ff94 	bl	8006ef0 <lwip_htons>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	0b1b      	lsrs	r3, r3, #12
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009fd4:	7cbb      	ldrb	r3, [r7, #18]
 8009fd6:	2b13      	cmp	r3, #19
 8009fd8:	f240 8368 	bls.w	800a6ac <tcp_input+0x734>
 8009fdc:	7cbb      	ldrb	r3, [r7, #18]
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	891b      	ldrh	r3, [r3, #8]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	f200 8361 	bhi.w	800a6ac <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009fea:	7cbb      	ldrb	r3, [r7, #18]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b14      	subs	r3, #20
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	4b69      	ldr	r3, [pc, #420]	; (800a198 <tcp_input+0x220>)
 8009ff4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009ff6:	4b69      	ldr	r3, [pc, #420]	; (800a19c <tcp_input+0x224>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	895a      	ldrh	r2, [r3, #10]
 800a000:	7cbb      	ldrb	r3, [r7, #18]
 800a002:	b29b      	uxth	r3, r3
 800a004:	429a      	cmp	r2, r3
 800a006:	d30d      	bcc.n	800a024 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a008:	4b63      	ldr	r3, [pc, #396]	; (800a198 <tcp_input+0x220>)
 800a00a:	881a      	ldrh	r2, [r3, #0]
 800a00c:	4b64      	ldr	r3, [pc, #400]	; (800a1a0 <tcp_input+0x228>)
 800a00e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800a010:	7cbb      	ldrb	r3, [r7, #18]
 800a012:	b29b      	uxth	r3, r3
 800a014:	425b      	negs	r3, r3
 800a016:	b29b      	uxth	r3, r3
 800a018:	b21b      	sxth	r3, r3
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7fe f8d9 	bl	80081d4 <pbuf_header>
 800a022:	e055      	b.n	800a0d0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d105      	bne.n	800a038 <tcp_input+0xc0>
 800a02c:	4b5d      	ldr	r3, [pc, #372]	; (800a1a4 <tcp_input+0x22c>)
 800a02e:	22b2      	movs	r2, #178	; 0xb2
 800a030:	495d      	ldr	r1, [pc, #372]	; (800a1a8 <tcp_input+0x230>)
 800a032:	485e      	ldr	r0, [pc, #376]	; (800a1ac <tcp_input+0x234>)
 800a034:	f00a fe92 	bl	8014d5c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800a038:	f06f 0113 	mvn.w	r1, #19
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7fe f8c9 	bl	80081d4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	895a      	ldrh	r2, [r3, #10]
 800a046:	4b56      	ldr	r3, [pc, #344]	; (800a1a0 <tcp_input+0x228>)
 800a048:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800a04a:	4b53      	ldr	r3, [pc, #332]	; (800a198 <tcp_input+0x220>)
 800a04c:	881a      	ldrh	r2, [r3, #0]
 800a04e:	4b54      	ldr	r3, [pc, #336]	; (800a1a0 <tcp_input+0x228>)
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a056:	4b52      	ldr	r3, [pc, #328]	; (800a1a0 <tcp_input+0x228>)
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	425b      	negs	r3, r3
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	b21b      	sxth	r3, r3
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7fe f8b6 	bl	80081d4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	895b      	ldrh	r3, [r3, #10]
 800a06e:	8a3a      	ldrh	r2, [r7, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	f200 831d 	bhi.w	800a6b0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	4a47      	ldr	r2, [pc, #284]	; (800a19c <tcp_input+0x224>)
 800a07e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	8a3b      	ldrh	r3, [r7, #16]
 800a086:	425b      	negs	r3, r3
 800a088:	b29b      	uxth	r3, r3
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fe f8a0 	bl	80081d4 <pbuf_header>
    p->tot_len -= opt2len;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	891a      	ldrh	r2, [r3, #8]
 800a098:	8a3b      	ldrh	r3, [r7, #16]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	895b      	ldrh	r3, [r3, #10]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <tcp_input+0x13e>
 800a0aa:	4b3e      	ldr	r3, [pc, #248]	; (800a1a4 <tcp_input+0x22c>)
 800a0ac:	22cf      	movs	r2, #207	; 0xcf
 800a0ae:	4940      	ldr	r1, [pc, #256]	; (800a1b0 <tcp_input+0x238>)
 800a0b0:	483e      	ldr	r0, [pc, #248]	; (800a1ac <tcp_input+0x234>)
 800a0b2:	f00a fe53 	bl	8014d5c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	891a      	ldrh	r2, [r3, #8]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	891b      	ldrh	r3, [r3, #8]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d005      	beq.n	800a0d0 <tcp_input+0x158>
 800a0c4:	4b37      	ldr	r3, [pc, #220]	; (800a1a4 <tcp_input+0x22c>)
 800a0c6:	22d0      	movs	r2, #208	; 0xd0
 800a0c8:	493a      	ldr	r1, [pc, #232]	; (800a1b4 <tcp_input+0x23c>)
 800a0ca:	4838      	ldr	r0, [pc, #224]	; (800a1ac <tcp_input+0x234>)
 800a0cc:	f00a fe46 	bl	8014d5c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a0d0:	4b2f      	ldr	r3, [pc, #188]	; (800a190 <tcp_input+0x218>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	4b2d      	ldr	r3, [pc, #180]	; (800a190 <tcp_input+0x218>)
 800a0da:	681c      	ldr	r4, [r3, #0]
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f7fc ff07 	bl	8006ef0 <lwip_htons>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a0e6:	4b2a      	ldr	r3, [pc, #168]	; (800a190 <tcp_input+0x218>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	885b      	ldrh	r3, [r3, #2]
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	4b28      	ldr	r3, [pc, #160]	; (800a190 <tcp_input+0x218>)
 800a0f0:	681c      	ldr	r4, [r3, #0]
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fc fefc 	bl	8006ef0 <lwip_htons>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a0fc:	4b24      	ldr	r3, [pc, #144]	; (800a190 <tcp_input+0x218>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	4b23      	ldr	r3, [pc, #140]	; (800a190 <tcp_input+0x218>)
 800a104:	681c      	ldr	r4, [r3, #0]
 800a106:	4610      	mov	r0, r2
 800a108:	f7fc ff00 	bl	8006f0c <lwip_htonl>
 800a10c:	4603      	mov	r3, r0
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	4a29      	ldr	r2, [pc, #164]	; (800a1b8 <tcp_input+0x240>)
 800a114:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a116:	4b1e      	ldr	r3, [pc, #120]	; (800a190 <tcp_input+0x218>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	4b1c      	ldr	r3, [pc, #112]	; (800a190 <tcp_input+0x218>)
 800a11e:	681c      	ldr	r4, [r3, #0]
 800a120:	4610      	mov	r0, r2
 800a122:	f7fc fef3 	bl	8006f0c <lwip_htonl>
 800a126:	4603      	mov	r3, r0
 800a128:	60a3      	str	r3, [r4, #8]
 800a12a:	68a3      	ldr	r3, [r4, #8]
 800a12c:	4a23      	ldr	r2, [pc, #140]	; (800a1bc <tcp_input+0x244>)
 800a12e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a130:	4b17      	ldr	r3, [pc, #92]	; (800a190 <tcp_input+0x218>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	89db      	ldrh	r3, [r3, #14]
 800a136:	b29a      	uxth	r2, r3
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <tcp_input+0x218>)
 800a13a:	681c      	ldr	r4, [r3, #0]
 800a13c:	4610      	mov	r0, r2
 800a13e:	f7fc fed7 	bl	8006ef0 <lwip_htons>
 800a142:	4603      	mov	r3, r0
 800a144:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <tcp_input+0x218>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	899b      	ldrh	r3, [r3, #12]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fc fece 	bl	8006ef0 <lwip_htons>
 800a154:	4603      	mov	r3, r0
 800a156:	b2db      	uxtb	r3, r3
 800a158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <tcp_input+0x248>)
 800a160:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	891a      	ldrh	r2, [r3, #8]
 800a166:	4b16      	ldr	r3, [pc, #88]	; (800a1c0 <tcp_input+0x248>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 0303 	and.w	r3, r3, #3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bf14      	ite	ne
 800a172:	2301      	movne	r3, #1
 800a174:	2300      	moveq	r3, #0
 800a176:	b2db      	uxtb	r3, r3
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <tcp_input+0x24c>)
 800a180:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <tcp_input+0x250>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	61fb      	str	r3, [r7, #28]
 800a18c:	e082      	b.n	800a294 <tcp_input+0x31c>
 800a18e:	bf00      	nop
 800a190:	20000730 	.word	0x20000730
 800a194:	2000091c 	.word	0x2000091c
 800a198:	20000734 	.word	0x20000734
 800a19c:	20000738 	.word	0x20000738
 800a1a0:	20000736 	.word	0x20000736
 800a1a4:	080170f8 	.word	0x080170f8
 800a1a8:	0801712c 	.word	0x0801712c
 800a1ac:	0801713c 	.word	0x0801713c
 800a1b0:	08017164 	.word	0x08017164
 800a1b4:	08017170 	.word	0x08017170
 800a1b8:	20000740 	.word	0x20000740
 800a1bc:	20000744 	.word	0x20000744
 800a1c0:	2000074c 	.word	0x2000074c
 800a1c4:	2000074a 	.word	0x2000074a
 800a1c8:	20007204 	.word	0x20007204
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	7d1b      	ldrb	r3, [r3, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d105      	bne.n	800a1e0 <tcp_input+0x268>
 800a1d4:	4b8f      	ldr	r3, [pc, #572]	; (800a414 <tcp_input+0x49c>)
 800a1d6:	22e2      	movs	r2, #226	; 0xe2
 800a1d8:	498f      	ldr	r1, [pc, #572]	; (800a418 <tcp_input+0x4a0>)
 800a1da:	4890      	ldr	r0, [pc, #576]	; (800a41c <tcp_input+0x4a4>)
 800a1dc:	f00a fdbe 	bl	8014d5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	7d1b      	ldrb	r3, [r3, #20]
 800a1e4:	2b0a      	cmp	r3, #10
 800a1e6:	d105      	bne.n	800a1f4 <tcp_input+0x27c>
 800a1e8:	4b8a      	ldr	r3, [pc, #552]	; (800a414 <tcp_input+0x49c>)
 800a1ea:	22e3      	movs	r2, #227	; 0xe3
 800a1ec:	498c      	ldr	r1, [pc, #560]	; (800a420 <tcp_input+0x4a8>)
 800a1ee:	488b      	ldr	r0, [pc, #556]	; (800a41c <tcp_input+0x4a4>)
 800a1f0:	f00a fdb4 	bl	8014d5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	7d1b      	ldrb	r3, [r3, #20]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d105      	bne.n	800a208 <tcp_input+0x290>
 800a1fc:	4b85      	ldr	r3, [pc, #532]	; (800a414 <tcp_input+0x49c>)
 800a1fe:	22e4      	movs	r2, #228	; 0xe4
 800a200:	4988      	ldr	r1, [pc, #544]	; (800a424 <tcp_input+0x4ac>)
 800a202:	4886      	ldr	r0, [pc, #536]	; (800a41c <tcp_input+0x4a4>)
 800a204:	f00a fdaa 	bl	8014d5c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	8b1a      	ldrh	r2, [r3, #24]
 800a20c:	4b86      	ldr	r3, [pc, #536]	; (800a428 <tcp_input+0x4b0>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	429a      	cmp	r2, r3
 800a216:	d138      	bne.n	800a28a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	8ada      	ldrh	r2, [r3, #22]
 800a21c:	4b82      	ldr	r3, [pc, #520]	; (800a428 <tcp_input+0x4b0>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	885b      	ldrh	r3, [r3, #2]
 800a222:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a224:	429a      	cmp	r2, r3
 800a226:	d130      	bne.n	800a28a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b7f      	ldr	r3, [pc, #508]	; (800a42c <tcp_input+0x4b4>)
 800a22e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a230:	429a      	cmp	r2, r3
 800a232:	d12a      	bne.n	800a28a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b7c      	ldr	r3, [pc, #496]	; (800a42c <tcp_input+0x4b4>)
 800a23a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d124      	bne.n	800a28a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	429a      	cmp	r2, r3
 800a248:	d105      	bne.n	800a256 <tcp_input+0x2de>
 800a24a:	4b72      	ldr	r3, [pc, #456]	; (800a414 <tcp_input+0x49c>)
 800a24c:	22ec      	movs	r2, #236	; 0xec
 800a24e:	4978      	ldr	r1, [pc, #480]	; (800a430 <tcp_input+0x4b8>)
 800a250:	4872      	ldr	r0, [pc, #456]	; (800a41c <tcp_input+0x4a4>)
 800a252:	f00a fd83 	bl	8014d5c <iprintf>
      if (prev != NULL) {
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a264:	4b73      	ldr	r3, [pc, #460]	; (800a434 <tcp_input+0x4bc>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a26c:	4a71      	ldr	r2, [pc, #452]	; (800a434 <tcp_input+0x4bc>)
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d10f      	bne.n	800a29c <tcp_input+0x324>
 800a27c:	4b65      	ldr	r3, [pc, #404]	; (800a414 <tcp_input+0x49c>)
 800a27e:	22f4      	movs	r2, #244	; 0xf4
 800a280:	496d      	ldr	r1, [pc, #436]	; (800a438 <tcp_input+0x4c0>)
 800a282:	4866      	ldr	r0, [pc, #408]	; (800a41c <tcp_input+0x4a4>)
 800a284:	f00a fd6a 	bl	8014d5c <iprintf>
      break;
 800a288:	e008      	b.n	800a29c <tcp_input+0x324>
    }
    prev = pcb;
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d198      	bne.n	800a1cc <tcp_input+0x254>
 800a29a:	e000      	b.n	800a29e <tcp_input+0x326>
      break;
 800a29c:	bf00      	nop
  }

  if (pcb == NULL) {
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d173      	bne.n	800a38c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2a4:	4b65      	ldr	r3, [pc, #404]	; (800a43c <tcp_input+0x4c4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	61fb      	str	r3, [r7, #28]
 800a2aa:	e02f      	b.n	800a30c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	7d1b      	ldrb	r3, [r3, #20]
 800a2b0:	2b0a      	cmp	r3, #10
 800a2b2:	d005      	beq.n	800a2c0 <tcp_input+0x348>
 800a2b4:	4b57      	ldr	r3, [pc, #348]	; (800a414 <tcp_input+0x49c>)
 800a2b6:	22fe      	movs	r2, #254	; 0xfe
 800a2b8:	4961      	ldr	r1, [pc, #388]	; (800a440 <tcp_input+0x4c8>)
 800a2ba:	4858      	ldr	r0, [pc, #352]	; (800a41c <tcp_input+0x4a4>)
 800a2bc:	f00a fd4e 	bl	8014d5c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	8b1a      	ldrh	r2, [r3, #24]
 800a2c4:	4b58      	ldr	r3, [pc, #352]	; (800a428 <tcp_input+0x4b0>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d11a      	bne.n	800a306 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	8ada      	ldrh	r2, [r3, #22]
 800a2d4:	4b54      	ldr	r3, [pc, #336]	; (800a428 <tcp_input+0x4b0>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	885b      	ldrh	r3, [r3, #2]
 800a2da:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d112      	bne.n	800a306 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	4b51      	ldr	r3, [pc, #324]	; (800a42c <tcp_input+0x4b4>)
 800a2e6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d10c      	bne.n	800a306 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	4b4e      	ldr	r3, [pc, #312]	; (800a42c <tcp_input+0x4b4>)
 800a2f2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d106      	bne.n	800a306 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800a2f8:	69f8      	ldr	r0, [r7, #28]
 800a2fa:	f000 fb15 	bl	800a928 <tcp_timewait_input>
        pbuf_free(p);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fd ff8c 	bl	800821c <pbuf_free>
        return;
 800a304:	e1da      	b.n	800a6bc <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1cc      	bne.n	800a2ac <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a316:	4b4b      	ldr	r3, [pc, #300]	; (800a444 <tcp_input+0x4cc>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	617b      	str	r3, [r7, #20]
 800a31c:	e019      	b.n	800a352 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	8ada      	ldrh	r2, [r3, #22]
 800a322:	4b41      	ldr	r3, [pc, #260]	; (800a428 <tcp_input+0x4b0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	885b      	ldrh	r3, [r3, #2]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d10c      	bne.n	800a348 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b3e      	ldr	r3, [pc, #248]	; (800a42c <tcp_input+0x4b4>)
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	429a      	cmp	r2, r3
 800a338:	d00f      	beq.n	800a35a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00d      	beq.n	800a35c <tcp_input+0x3e4>
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d009      	beq.n	800a35c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e2      	bne.n	800a31e <tcp_input+0x3a6>
 800a358:	e000      	b.n	800a35c <tcp_input+0x3e4>
            break;
 800a35a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d014      	beq.n	800a38c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a370:	4b34      	ldr	r3, [pc, #208]	; (800a444 <tcp_input+0x4cc>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a378:	4a32      	ldr	r2, [pc, #200]	; (800a444 <tcp_input+0x4cc>)
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800a37e:	6978      	ldr	r0, [r7, #20]
 800a380:	f000 f9f0 	bl	800a764 <tcp_listen_input>
      pbuf_free(p);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7fd ff49 	bl	800821c <pbuf_free>
      return;
 800a38a:	e197      	b.n	800a6bc <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 8164 	beq.w	800a65c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a394:	4b2c      	ldr	r3, [pc, #176]	; (800a448 <tcp_input+0x4d0>)
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	891a      	ldrh	r2, [r3, #8]
 800a39e:	4b2a      	ldr	r3, [pc, #168]	; (800a448 <tcp_input+0x4d0>)
 800a3a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a3a2:	4a29      	ldr	r2, [pc, #164]	; (800a448 <tcp_input+0x4d0>)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a3a8:	4b1f      	ldr	r3, [pc, #124]	; (800a428 <tcp_input+0x4b0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a26      	ldr	r2, [pc, #152]	; (800a448 <tcp_input+0x4d0>)
 800a3ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a3b0:	4b26      	ldr	r3, [pc, #152]	; (800a44c <tcp_input+0x4d4>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a3b6:	4b26      	ldr	r3, [pc, #152]	; (800a450 <tcp_input+0x4d8>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a3bc:	4b25      	ldr	r3, [pc, #148]	; (800a454 <tcp_input+0x4dc>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a3c2:	4b25      	ldr	r3, [pc, #148]	; (800a458 <tcp_input+0x4e0>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	f003 0308 	and.w	r3, r3, #8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d006      	beq.n	800a3dc <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7b5b      	ldrb	r3, [r3, #13]
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d03d      	beq.n	800a460 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3e4:	69f8      	ldr	r0, [r7, #28]
 800a3e6:	f7ff f983 	bl	80096f0 <tcp_process_refused_data>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f113 0f0d 	cmn.w	r3, #13
 800a3f0:	d007      	beq.n	800a402 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d032      	beq.n	800a460 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3fa:	4b18      	ldr	r3, [pc, #96]	; (800a45c <tcp_input+0x4e4>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d02e      	beq.n	800a460 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a406:	2b00      	cmp	r3, #0
 800a408:	f040 8108 	bne.w	800a61c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a40c:	69f8      	ldr	r0, [r7, #28]
 800a40e:	f002 fe3d 	bl	800d08c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a412:	e103      	b.n	800a61c <tcp_input+0x6a4>
 800a414:	080170f8 	.word	0x080170f8
 800a418:	08017190 	.word	0x08017190
 800a41c:	0801713c 	.word	0x0801713c
 800a420:	080171b8 	.word	0x080171b8
 800a424:	080171e4 	.word	0x080171e4
 800a428:	20000730 	.word	0x20000730
 800a42c:	2000091c 	.word	0x2000091c
 800a430:	0801720c 	.word	0x0801720c
 800a434:	20007204 	.word	0x20007204
 800a438:	08017238 	.word	0x08017238
 800a43c:	20007214 	.word	0x20007214
 800a440:	08017264 	.word	0x08017264
 800a444:	2000720c 	.word	0x2000720c
 800a448:	20000720 	.word	0x20000720
 800a44c:	20000750 	.word	0x20000750
 800a450:	2000074d 	.word	0x2000074d
 800a454:	20000748 	.word	0x20000748
 800a458:	2000074c 	.word	0x2000074c
 800a45c:	2000074a 	.word	0x2000074a
      }
    }
    tcp_input_pcb = pcb;
 800a460:	4a98      	ldr	r2, [pc, #608]	; (800a6c4 <tcp_input+0x74c>)
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a466:	69f8      	ldr	r0, [r7, #28]
 800a468:	f000 fac6 	bl	800a9f8 <tcp_process>
 800a46c:	4603      	mov	r3, r0
 800a46e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a470:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a474:	f113 0f0d 	cmn.w	r3, #13
 800a478:	f000 80d2 	beq.w	800a620 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800a47c:	4b92      	ldr	r3, [pc, #584]	; (800a6c8 <tcp_input+0x750>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d016      	beq.n	800a4b6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d008      	beq.n	800a4a4 <tcp_input+0x52c>
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a498:	69fa      	ldr	r2, [r7, #28]
 800a49a:	6912      	ldr	r2, [r2, #16]
 800a49c:	f06f 010d 	mvn.w	r1, #13
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a4a4:	69f9      	ldr	r1, [r7, #28]
 800a4a6:	4889      	ldr	r0, [pc, #548]	; (800a6cc <tcp_input+0x754>)
 800a4a8:	f7ff fc4c 	bl	8009d44 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800a4ac:	69f9      	ldr	r1, [r7, #28]
 800a4ae:	2001      	movs	r0, #1
 800a4b0:	f7fd f982 	bl	80077b8 <memp_free>
 800a4b4:	e0bf      	b.n	800a636 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a4ba:	4b85      	ldr	r3, [pc, #532]	; (800a6d0 <tcp_input+0x758>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01b      	beq.n	800a4fa <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a4c2:	4b83      	ldr	r3, [pc, #524]	; (800a6d0 <tcp_input+0x758>)
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <tcp_input+0x56c>
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d4:	69fa      	ldr	r2, [r7, #28]
 800a4d6:	6910      	ldr	r0, [r2, #16]
 800a4d8:	89fa      	ldrh	r2, [r7, #14]
 800a4da:	69f9      	ldr	r1, [r7, #28]
 800a4dc:	4798      	blx	r3
 800a4de:	4603      	mov	r3, r0
 800a4e0:	74fb      	strb	r3, [r7, #19]
 800a4e2:	e001      	b.n	800a4e8 <tcp_input+0x570>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a4e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4ec:	f113 0f0d 	cmn.w	r3, #13
 800a4f0:	f000 8098 	beq.w	800a624 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a4f4:	4b76      	ldr	r3, [pc, #472]	; (800a6d0 <tcp_input+0x758>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a4fa:	69f8      	ldr	r0, [r7, #28]
 800a4fc:	f000 f900 	bl	800a700 <tcp_input_delayed_close>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	f040 8090 	bne.w	800a628 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a508:	4b72      	ldr	r3, [pc, #456]	; (800a6d4 <tcp_input+0x75c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d041      	beq.n	800a594 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a514:	2b00      	cmp	r3, #0
 800a516:	d006      	beq.n	800a526 <tcp_input+0x5ae>
 800a518:	4b6f      	ldr	r3, [pc, #444]	; (800a6d8 <tcp_input+0x760>)
 800a51a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800a51e:	496f      	ldr	r1, [pc, #444]	; (800a6dc <tcp_input+0x764>)
 800a520:	486f      	ldr	r0, [pc, #444]	; (800a6e0 <tcp_input+0x768>)
 800a522:	f00a fc1b 	bl	8014d5c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	7e9b      	ldrb	r3, [r3, #26]
 800a52a:	f003 0310 	and.w	r3, r3, #16
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a532:	4b68      	ldr	r3, [pc, #416]	; (800a6d4 <tcp_input+0x75c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f7fd fe70 	bl	800821c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a53c:	69f8      	ldr	r0, [r7, #28]
 800a53e:	f7fe fb6f 	bl	8008c20 <tcp_abort>
            goto aborted;
 800a542:	e078      	b.n	800a636 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00c      	beq.n	800a568 <tcp_input+0x5f0>
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	6918      	ldr	r0, [r3, #16]
 800a558:	4b5e      	ldr	r3, [pc, #376]	; (800a6d4 <tcp_input+0x75c>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	2300      	movs	r3, #0
 800a55e:	69f9      	ldr	r1, [r7, #28]
 800a560:	47a0      	blx	r4
 800a562:	4603      	mov	r3, r0
 800a564:	74fb      	strb	r3, [r7, #19]
 800a566:	e008      	b.n	800a57a <tcp_input+0x602>
 800a568:	4b5a      	ldr	r3, [pc, #360]	; (800a6d4 <tcp_input+0x75c>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	2300      	movs	r3, #0
 800a56e:	69f9      	ldr	r1, [r7, #28]
 800a570:	2000      	movs	r0, #0
 800a572:	f7ff f97d 	bl	8009870 <tcp_recv_null>
 800a576:	4603      	mov	r3, r0
 800a578:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a57a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a57e:	f113 0f0d 	cmn.w	r3, #13
 800a582:	d053      	beq.n	800a62c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a58c:	4b51      	ldr	r3, [pc, #324]	; (800a6d4 <tcp_input+0x75c>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a594:	4b4c      	ldr	r3, [pc, #304]	; (800a6c8 <tcp_input+0x750>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d030      	beq.n	800a602 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d009      	beq.n	800a5bc <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ac:	7b5a      	ldrb	r2, [r3, #13]
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b2:	f042 0220 	orr.w	r2, r2, #32
 800a5b6:	b2d2      	uxtb	r2, r2
 800a5b8:	735a      	strb	r2, [r3, #13]
 800a5ba:	e022      	b.n	800a602 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c4:	d005      	beq.n	800a5d2 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <tcp_input+0x67c>
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	6918      	ldr	r0, [r3, #16]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	69f9      	ldr	r1, [r7, #28]
 800a5ec:	47a0      	blx	r4
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	74fb      	strb	r3, [r7, #19]
 800a5f2:	e001      	b.n	800a5f8 <tcp_input+0x680>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a5f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5fc:	f113 0f0d 	cmn.w	r3, #13
 800a600:	d016      	beq.n	800a630 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a602:	4b30      	ldr	r3, [pc, #192]	; (800a6c4 <tcp_input+0x74c>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a608:	69f8      	ldr	r0, [r7, #28]
 800a60a:	f000 f879 	bl	800a700 <tcp_input_delayed_close>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10f      	bne.n	800a634 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a614:	69f8      	ldr	r0, [r7, #28]
 800a616:	f002 fd95 	bl	800d144 <tcp_output>
 800a61a:	e00c      	b.n	800a636 <tcp_input+0x6be>
        goto aborted;
 800a61c:	bf00      	nop
 800a61e:	e00a      	b.n	800a636 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a620:	bf00      	nop
 800a622:	e008      	b.n	800a636 <tcp_input+0x6be>
              goto aborted;
 800a624:	bf00      	nop
 800a626:	e006      	b.n	800a636 <tcp_input+0x6be>
          goto aborted;
 800a628:	bf00      	nop
 800a62a:	e004      	b.n	800a636 <tcp_input+0x6be>
            goto aborted;
 800a62c:	bf00      	nop
 800a62e:	e002      	b.n	800a636 <tcp_input+0x6be>
              goto aborted;
 800a630:	bf00      	nop
 800a632:	e000      	b.n	800a636 <tcp_input+0x6be>
          goto aborted;
 800a634:	bf00      	nop
    tcp_input_pcb = NULL;
 800a636:	4b23      	ldr	r3, [pc, #140]	; (800a6c4 <tcp_input+0x74c>)
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a63c:	4b25      	ldr	r3, [pc, #148]	; (800a6d4 <tcp_input+0x75c>)
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800a642:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <tcp_input+0x76c>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d037      	beq.n	800a6ba <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800a64a:	4b26      	ldr	r3, [pc, #152]	; (800a6e4 <tcp_input+0x76c>)
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fd fde4 	bl	800821c <pbuf_free>
      inseg.p = NULL;
 800a654:	4b23      	ldr	r3, [pc, #140]	; (800a6e4 <tcp_input+0x76c>)
 800a656:	2200      	movs	r2, #0
 800a658:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a65a:	e02e      	b.n	800a6ba <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a65c:	4b22      	ldr	r3, [pc, #136]	; (800a6e8 <tcp_input+0x770>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	899b      	ldrh	r3, [r3, #12]
 800a662:	b29b      	uxth	r3, r3
 800a664:	4618      	mov	r0, r3
 800a666:	f7fc fc43 	bl	8006ef0 <lwip_htons>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d115      	bne.n	800a6a0 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a674:	4b1d      	ldr	r3, [pc, #116]	; (800a6ec <tcp_input+0x774>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <tcp_input+0x778>)
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	4b1d      	ldr	r3, [pc, #116]	; (800a6f4 <tcp_input+0x77c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a684:	4b18      	ldr	r3, [pc, #96]	; (800a6e8 <tcp_input+0x770>)
 800a686:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a688:	885b      	ldrh	r3, [r3, #2]
 800a68a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a68c:	4a16      	ldr	r2, [pc, #88]	; (800a6e8 <tcp_input+0x770>)
 800a68e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a690:	8812      	ldrh	r2, [r2, #0]
 800a692:	b292      	uxth	r2, r2
 800a694:	9201      	str	r2, [sp, #4]
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	4b17      	ldr	r3, [pc, #92]	; (800a6f8 <tcp_input+0x780>)
 800a69a:	4a18      	ldr	r2, [pc, #96]	; (800a6fc <tcp_input+0x784>)
 800a69c:	f002 ffdc 	bl	800d658 <tcp_rst>
    pbuf_free(p);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7fd fdbb 	bl	800821c <pbuf_free>
  return;
 800a6a6:	e008      	b.n	800a6ba <tcp_input+0x742>
    goto dropped;
 800a6a8:	bf00      	nop
 800a6aa:	e002      	b.n	800a6b2 <tcp_input+0x73a>
dropped:
 800a6ac:	bf00      	nop
 800a6ae:	e000      	b.n	800a6b2 <tcp_input+0x73a>
      goto dropped;
 800a6b0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fd fdb2 	bl	800821c <pbuf_free>
 800a6b8:	e000      	b.n	800a6bc <tcp_input+0x744>
  return;
 800a6ba:	bf00      	nop
}
 800a6bc:	3724      	adds	r7, #36	; 0x24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd90      	pop	{r4, r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20007218 	.word	0x20007218
 800a6c8:	2000074d 	.word	0x2000074d
 800a6cc:	20007204 	.word	0x20007204
 800a6d0:	20000748 	.word	0x20000748
 800a6d4:	20000750 	.word	0x20000750
 800a6d8:	080170f8 	.word	0x080170f8
 800a6dc:	08017294 	.word	0x08017294
 800a6e0:	0801713c 	.word	0x0801713c
 800a6e4:	20000720 	.word	0x20000720
 800a6e8:	20000730 	.word	0x20000730
 800a6ec:	20000744 	.word	0x20000744
 800a6f0:	2000074a 	.word	0x2000074a
 800a6f4:	20000740 	.word	0x20000740
 800a6f8:	2000092c 	.word	0x2000092c
 800a6fc:	20000930 	.word	0x20000930

0800a700 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800a708:	4b14      	ldr	r3, [pc, #80]	; (800a75c <tcp_input_delayed_close+0x5c>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01d      	beq.n	800a750 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7e9b      	ldrb	r3, [r3, #26]
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10d      	bne.n	800a73c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d008      	beq.n	800a73c <tcp_input_delayed_close+0x3c>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	6912      	ldr	r2, [r2, #16]
 800a734:	f06f 010e 	mvn.w	r1, #14
 800a738:	4610      	mov	r0, r2
 800a73a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	4808      	ldr	r0, [pc, #32]	; (800a760 <tcp_input_delayed_close+0x60>)
 800a740:	f7ff fb00 	bl	8009d44 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	2001      	movs	r0, #1
 800a748:	f7fd f836 	bl	80077b8 <memp_free>
    return 1;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e000      	b.n	800a752 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	2000074d 	.word	0x2000074d
 800a760:	20007204 	.word	0x20007204

0800a764 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af02      	add	r7, sp, #8
 800a76a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a76c:	4b64      	ldr	r3, [pc, #400]	; (800a900 <tcp_listen_input+0x19c>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 80bc 	bne.w	800a8f2 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a77a:	4b61      	ldr	r3, [pc, #388]	; (800a900 <tcp_listen_input+0x19c>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 0310 	and.w	r3, r3, #16
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a786:	4b5f      	ldr	r3, [pc, #380]	; (800a904 <tcp_listen_input+0x1a0>)
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	4b5f      	ldr	r3, [pc, #380]	; (800a908 <tcp_listen_input+0x1a4>)
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	4b5e      	ldr	r3, [pc, #376]	; (800a90c <tcp_listen_input+0x1a8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a796:	4b5e      	ldr	r3, [pc, #376]	; (800a910 <tcp_listen_input+0x1ac>)
 800a798:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a79a:	885b      	ldrh	r3, [r3, #2]
 800a79c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a79e:	4a5c      	ldr	r2, [pc, #368]	; (800a910 <tcp_listen_input+0x1ac>)
 800a7a0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7a2:	8812      	ldrh	r2, [r2, #0]
 800a7a4:	b292      	uxth	r2, r2
 800a7a6:	9201      	str	r2, [sp, #4]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4b5a      	ldr	r3, [pc, #360]	; (800a914 <tcp_listen_input+0x1b0>)
 800a7ac:	4a5a      	ldr	r2, [pc, #360]	; (800a918 <tcp_listen_input+0x1b4>)
 800a7ae:	f002 ff53 	bl	800d658 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a7b2:	e0a0      	b.n	800a8f6 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800a7b4:	4b52      	ldr	r3, [pc, #328]	; (800a900 <tcp_listen_input+0x19c>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 809a 	beq.w	800a8f6 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	7d5b      	ldrb	r3, [r3, #21]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff f930 	bl	8009a2c <tcp_alloc>
 800a7cc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d111      	bne.n	800a7f8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <tcp_listen_input+0x8e>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6910      	ldr	r0, [r2, #16]
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4798      	blx	r3
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73bb      	strb	r3, [r7, #14]
      return;
 800a7f0:	e082      	b.n	800a8f8 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7f2:	23f0      	movs	r3, #240	; 0xf0
 800a7f4:	73bb      	strb	r3, [r7, #14]
      return;
 800a7f6:	e07f      	b.n	800a8f8 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a7f8:	4b48      	ldr	r3, [pc, #288]	; (800a91c <tcp_listen_input+0x1b8>)
 800a7fa:	695a      	ldr	r2, [r3, #20]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a800:	4b46      	ldr	r3, [pc, #280]	; (800a91c <tcp_listen_input+0x1b8>)
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	8ada      	ldrh	r2, [r3, #22]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a810:	4b3f      	ldr	r3, [pc, #252]	; (800a910 <tcp_listen_input+0x1ac>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	b29a      	uxth	r2, r3
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2203      	movs	r2, #3
 800a820:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a822:	4b3a      	ldr	r3, [pc, #232]	; (800a90c <tcp_listen_input+0x1a8>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a834:	6978      	ldr	r0, [r7, #20]
 800a836:	f7ff fb01 	bl	8009e3c <tcp_next_iss>
 800a83a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a854:	4b2d      	ldr	r3, [pc, #180]	; (800a90c <tcp_listen_input+0x1a8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	1e5a      	subs	r2, r3, #1
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7a1b      	ldrb	r3, [r3, #8]
 800a870:	f003 030c 	and.w	r3, r3, #12
 800a874:	b2da      	uxtb	r2, r3
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a87a:	4b29      	ldr	r3, [pc, #164]	; (800a920 <tcp_listen_input+0x1bc>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	60da      	str	r2, [r3, #12]
 800a882:	4a27      	ldr	r2, [pc, #156]	; (800a920 <tcp_listen_input+0x1bc>)
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	f003 f934 	bl	800daf4 <tcp_timer_needed>
 800a88c:	4b25      	ldr	r3, [pc, #148]	; (800a924 <tcp_listen_input+0x1c0>)
 800a88e:	2201      	movs	r2, #1
 800a890:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a892:	6978      	ldr	r0, [r7, #20]
 800a894:	f001 fd14 	bl	800c2c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a898:	4b1d      	ldr	r3, [pc, #116]	; (800a910 <tcp_listen_input+0x1ac>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	89db      	ldrh	r3, [r3, #14]
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4610      	mov	r0, r2
 800a8be:	f7ff fad5 	bl	8009e6c <tcp_eff_send_mss_impl>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a8ca:	2112      	movs	r1, #18
 800a8cc:	6978      	ldr	r0, [r7, #20]
 800a8ce:	f002 fae1 	bl	800ce94 <tcp_enqueue_flags>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800a8de:	2100      	movs	r1, #0
 800a8e0:	6978      	ldr	r0, [r7, #20]
 800a8e2:	f7fe f8eb 	bl	8008abc <tcp_abandon>
      return;
 800a8e6:	e007      	b.n	800a8f8 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800a8e8:	6978      	ldr	r0, [r7, #20]
 800a8ea:	f002 fc2b 	bl	800d144 <tcp_output>
  return;
 800a8ee:	bf00      	nop
 800a8f0:	e001      	b.n	800a8f6 <tcp_listen_input+0x192>
    return;
 800a8f2:	bf00      	nop
 800a8f4:	e000      	b.n	800a8f8 <tcp_listen_input+0x194>
  return;
 800a8f6:	bf00      	nop
}
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	2000074c 	.word	0x2000074c
 800a904:	20000744 	.word	0x20000744
 800a908:	2000074a 	.word	0x2000074a
 800a90c:	20000740 	.word	0x20000740
 800a910:	20000730 	.word	0x20000730
 800a914:	2000092c 	.word	0x2000092c
 800a918:	20000930 	.word	0x20000930
 800a91c:	2000091c 	.word	0x2000091c
 800a920:	20007204 	.word	0x20007204
 800a924:	20007200 	.word	0x20007200

0800a928 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af02      	add	r7, sp, #8
 800a92e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a930:	4b29      	ldr	r3, [pc, #164]	; (800a9d8 <tcp_timewait_input+0xb0>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d147      	bne.n	800a9cc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a93c:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <tcp_timewait_input+0xb0>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d027      	beq.n	800a998 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a948:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <tcp_timewait_input+0xb4>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	db2a      	blt.n	800a9ac <tcp_timewait_input+0x84>
 800a956:	4b21      	ldr	r3, [pc, #132]	; (800a9dc <tcp_timewait_input+0xb4>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a962:	440b      	add	r3, r1
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	dc20      	bgt.n	800a9ac <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a96a:	4b1d      	ldr	r3, [pc, #116]	; (800a9e0 <tcp_timewait_input+0xb8>)
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	4b1d      	ldr	r3, [pc, #116]	; (800a9e4 <tcp_timewait_input+0xbc>)
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	4b19      	ldr	r3, [pc, #100]	; (800a9dc <tcp_timewait_input+0xb4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a97a:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <tcp_timewait_input+0xc0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a97e:	885b      	ldrh	r3, [r3, #2]
 800a980:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a982:	4a19      	ldr	r2, [pc, #100]	; (800a9e8 <tcp_timewait_input+0xc0>)
 800a984:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a986:	8812      	ldrh	r2, [r2, #0]
 800a988:	b292      	uxth	r2, r2
 800a98a:	9201      	str	r2, [sp, #4]
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	4b17      	ldr	r3, [pc, #92]	; (800a9ec <tcp_timewait_input+0xc4>)
 800a990:	4a17      	ldr	r2, [pc, #92]	; (800a9f0 <tcp_timewait_input+0xc8>)
 800a992:	f002 fe61 	bl	800d658 <tcp_rst>
      return;
 800a996:	e01c      	b.n	800a9d2 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800a998:	4b0f      	ldr	r3, [pc, #60]	; (800a9d8 <tcp_timewait_input+0xb0>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a9a4:	4b13      	ldr	r3, [pc, #76]	; (800a9f4 <tcp_timewait_input+0xcc>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <tcp_timewait_input+0xbc>)
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00d      	beq.n	800a9d0 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7e9b      	ldrb	r3, [r3, #26]
 800a9b8:	f043 0302 	orr.w	r3, r3, #2
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f002 fbbe 	bl	800d144 <tcp_output>
  }
  return;
 800a9c8:	bf00      	nop
 800a9ca:	e001      	b.n	800a9d0 <tcp_timewait_input+0xa8>
    return;
 800a9cc:	bf00      	nop
 800a9ce:	e000      	b.n	800a9d2 <tcp_timewait_input+0xaa>
  return;
 800a9d0:	bf00      	nop
}
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	2000074c 	.word	0x2000074c
 800a9dc:	20000740 	.word	0x20000740
 800a9e0:	20000744 	.word	0x20000744
 800a9e4:	2000074a 	.word	0x2000074a
 800a9e8:	20000730 	.word	0x20000730
 800a9ec:	2000092c 	.word	0x2000092c
 800a9f0:	20000930 	.word	0x20000930
 800a9f4:	20007208 	.word	0x20007208

0800a9f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b08a      	sub	sp, #40	; 0x28
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800aa08:	4ba4      	ldr	r3, [pc, #656]	; (800ac9c <tcp_process+0x2a4>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f003 0304 	and.w	r3, r3, #4
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d04e      	beq.n	800aab2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7d1b      	ldrb	r3, [r3, #20]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d108      	bne.n	800aa2e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa20:	4b9f      	ldr	r3, [pc, #636]	; (800aca0 <tcp_process+0x2a8>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d123      	bne.n	800aa70 <tcp_process+0x78>
        acceptable = 1;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	76fb      	strb	r3, [r7, #27]
 800aa2c:	e020      	b.n	800aa70 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa32:	4b9c      	ldr	r3, [pc, #624]	; (800aca4 <tcp_process+0x2ac>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d102      	bne.n	800aa40 <tcp_process+0x48>
        acceptable = 1;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	76fb      	strb	r3, [r7, #27]
 800aa3e:	e017      	b.n	800aa70 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa40:	4b98      	ldr	r3, [pc, #608]	; (800aca4 <tcp_process+0x2ac>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	db10      	blt.n	800aa70 <tcp_process+0x78>
 800aa4e:	4b95      	ldr	r3, [pc, #596]	; (800aca4 <tcp_process+0x2ac>)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa5a:	440b      	add	r3, r1
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dc06      	bgt.n	800aa70 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	7e9b      	ldrb	r3, [r3, #26]
 800aa66:	f043 0302 	orr.w	r3, r3, #2
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aa70:	7efb      	ldrb	r3, [r7, #27]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01b      	beq.n	800aaae <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	7d1b      	ldrb	r3, [r3, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <tcp_process+0x94>
 800aa7e:	4b8a      	ldr	r3, [pc, #552]	; (800aca8 <tcp_process+0x2b0>)
 800aa80:	f240 22e7 	movw	r2, #743	; 0x2e7
 800aa84:	4989      	ldr	r1, [pc, #548]	; (800acac <tcp_process+0x2b4>)
 800aa86:	488a      	ldr	r0, [pc, #552]	; (800acb0 <tcp_process+0x2b8>)
 800aa88:	f00a f968 	bl	8014d5c <iprintf>
      recv_flags |= TF_RESET;
 800aa8c:	4b89      	ldr	r3, [pc, #548]	; (800acb4 <tcp_process+0x2bc>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f043 0308 	orr.w	r3, r3, #8
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	4b87      	ldr	r3, [pc, #540]	; (800acb4 <tcp_process+0x2bc>)
 800aa98:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	7e9b      	ldrb	r3, [r3, #26]
 800aa9e:	f023 0301 	bic.w	r3, r3, #1
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800aaa8:	f06f 030d 	mvn.w	r3, #13
 800aaac:	e34d      	b.n	800b14a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	e34b      	b.n	800b14a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aab2:	4b7a      	ldr	r3, [pc, #488]	; (800ac9c <tcp_process+0x2a4>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d010      	beq.n	800aae0 <tcp_process+0xe8>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7d1b      	ldrb	r3, [r3, #20]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d00c      	beq.n	800aae0 <tcp_process+0xe8>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	7d1b      	ldrb	r3, [r3, #20]
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d008      	beq.n	800aae0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	7e9b      	ldrb	r3, [r3, #26]
 800aad2:	f043 0302 	orr.w	r3, r3, #2
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	e334      	b.n	800b14a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7e9b      	ldrb	r3, [r3, #26]
 800aae4:	f003 0310 	and.w	r3, r3, #16
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d103      	bne.n	800aaf4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aaec:	4b72      	ldr	r3, [pc, #456]	; (800acb8 <tcp_process+0x2c0>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 fbdf 	bl	800c2c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7d1b      	ldrb	r3, [r3, #20]
 800ab06:	3b02      	subs	r3, #2
 800ab08:	2b07      	cmp	r3, #7
 800ab0a:	f200 830e 	bhi.w	800b12a <tcp_process+0x732>
 800ab0e:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <tcp_process+0x11c>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800ab35 	.word	0x0800ab35
 800ab18:	0800ad2d 	.word	0x0800ad2d
 800ab1c:	0800ae85 	.word	0x0800ae85
 800ab20:	0800aeaf 	.word	0x0800aeaf
 800ab24:	0800afd9 	.word	0x0800afd9
 800ab28:	0800ae85 	.word	0x0800ae85
 800ab2c:	0800b065 	.word	0x0800b065
 800ab30:	0800b0f5 	.word	0x0800b0f5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ab34:	4b59      	ldr	r3, [pc, #356]	; (800ac9c <tcp_process+0x2a4>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80cb 	beq.w	800acd8 <tcp_process+0x2e0>
 800ab42:	4b56      	ldr	r3, [pc, #344]	; (800ac9c <tcp_process+0x2a4>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 80c4 	beq.w	800acd8 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	4b52      	ldr	r3, [pc, #328]	; (800aca0 <tcp_process+0x2a8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	f040 80bc 	bne.w	800acd8 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800ab60:	4b50      	ldr	r3, [pc, #320]	; (800aca4 <tcp_process+0x2ac>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800ab72:	4b4b      	ldr	r3, [pc, #300]	; (800aca0 <tcp_process+0x2a8>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ab7a:	4b50      	ldr	r3, [pc, #320]	; (800acbc <tcp_process+0x2c4>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	89db      	ldrh	r3, [r3, #14]
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ab94:	4b43      	ldr	r3, [pc, #268]	; (800aca4 <tcp_process+0x2ac>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	1e5a      	subs	r2, r3, #1
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2204      	movs	r2, #4
 800aba2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f7ff f95c 	bl	8009e6c <tcp_eff_send_mss_impl>
 800abb4:	4603      	mov	r3, r0
 800abb6:	461a      	mov	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	f241 121c 	movw	r2, #4380	; 0x111c
 800abc6:	429a      	cmp	r2, r3
 800abc8:	bf38      	it	cc
 800abca:	461a      	movcc	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4293      	cmp	r3, r2
 800abd4:	bf28      	it	cs
 800abd6:	4613      	movcs	r3, r2
 800abd8:	b29a      	uxth	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <tcp_process+0x200>
 800abea:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <tcp_process+0x2b0>)
 800abec:	f240 321a 	movw	r2, #794	; 0x31a
 800abf0:	4933      	ldr	r1, [pc, #204]	; (800acc0 <tcp_process+0x2c8>)
 800abf2:	482f      	ldr	r0, [pc, #188]	; (800acb0 <tcp_process+0x2b8>)
 800abf4:	f00a f8b2 	bl	8014d5c <iprintf>
      --pcb->snd_queuelen;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abfe:	3b01      	subs	r3, #1
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d111      	bne.n	800ac38 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac18:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d106      	bne.n	800ac2e <tcp_process+0x236>
 800ac20:	4b21      	ldr	r3, [pc, #132]	; (800aca8 <tcp_process+0x2b0>)
 800ac22:	f240 3222 	movw	r2, #802	; 0x322
 800ac26:	4927      	ldr	r1, [pc, #156]	; (800acc4 <tcp_process+0x2cc>)
 800ac28:	4821      	ldr	r0, [pc, #132]	; (800acb0 <tcp_process+0x2b8>)
 800ac2a:	f00a f897 	bl	8014d5c <iprintf>
        pcb->unsent = rseg->next;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	669a      	str	r2, [r3, #104]	; 0x68
 800ac36:	e003      	b.n	800ac40 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800ac40:	69f8      	ldr	r0, [r7, #28]
 800ac42:	f7fe fdd2 	bl	80097ea <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d104      	bne.n	800ac58 <tcp_process+0x260>
        pcb->rtime = -1;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac54:	861a      	strh	r2, [r3, #48]	; 0x30
 800ac56:	e006      	b.n	800ac66 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00a      	beq.n	800ac86 <tcp_process+0x28e>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	6910      	ldr	r0, [r2, #16]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	6879      	ldr	r1, [r7, #4]
 800ac7e:	4798      	blx	r3
 800ac80:	4603      	mov	r3, r0
 800ac82:	76bb      	strb	r3, [r7, #26]
 800ac84:	e001      	b.n	800ac8a <tcp_process+0x292>
 800ac86:	2300      	movs	r3, #0
 800ac88:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800ac8a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ac8e:	f113 0f0d 	cmn.w	r3, #13
 800ac92:	d119      	bne.n	800acc8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800ac94:	f06f 030c 	mvn.w	r3, #12
 800ac98:	e257      	b.n	800b14a <tcp_process+0x752>
 800ac9a:	bf00      	nop
 800ac9c:	2000074c 	.word	0x2000074c
 800aca0:	20000744 	.word	0x20000744
 800aca4:	20000740 	.word	0x20000740
 800aca8:	080170f8 	.word	0x080170f8
 800acac:	080172b0 	.word	0x080172b0
 800acb0:	0801713c 	.word	0x0801713c
 800acb4:	2000074d 	.word	0x2000074d
 800acb8:	20007208 	.word	0x20007208
 800acbc:	20000730 	.word	0x20000730
 800acc0:	080172d0 	.word	0x080172d0
 800acc4:	080172e8 	.word	0x080172e8
      }
      tcp_ack_now(pcb);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7e9b      	ldrb	r3, [r3, #26]
 800accc:	f043 0302 	orr.w	r3, r3, #2
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800acd6:	e22a      	b.n	800b12e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800acd8:	4b9f      	ldr	r3, [pc, #636]	; (800af58 <tcp_process+0x560>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	f003 0310 	and.w	r3, r3, #16
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8224 	beq.w	800b12e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ace6:	4b9d      	ldr	r3, [pc, #628]	; (800af5c <tcp_process+0x564>)
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	4b9d      	ldr	r3, [pc, #628]	; (800af60 <tcp_process+0x568>)
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	4b9c      	ldr	r3, [pc, #624]	; (800af64 <tcp_process+0x56c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acf6:	4b9c      	ldr	r3, [pc, #624]	; (800af68 <tcp_process+0x570>)
 800acf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800acfa:	885b      	ldrh	r3, [r3, #2]
 800acfc:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acfe:	4a9a      	ldr	r2, [pc, #616]	; (800af68 <tcp_process+0x570>)
 800ad00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad02:	8812      	ldrh	r2, [r2, #0]
 800ad04:	b292      	uxth	r2, r2
 800ad06:	9201      	str	r2, [sp, #4]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	4b98      	ldr	r3, [pc, #608]	; (800af6c <tcp_process+0x574>)
 800ad0c:	4a98      	ldr	r2, [pc, #608]	; (800af70 <tcp_process+0x578>)
 800ad0e:	f002 fca3 	bl	800d658 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	f200 8208 	bhi.w	800b12e <tcp_process+0x736>
        pcb->rtime = 0;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f002 fd0b 	bl	800d740 <tcp_rexmit_rto>
    break;
 800ad2a:	e200      	b.n	800b12e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ad2c:	4b8a      	ldr	r3, [pc, #552]	; (800af58 <tcp_process+0x560>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 0310 	and.w	r3, r3, #16
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 8091 	beq.w	800ae5c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ad3a:	4b88      	ldr	r3, [pc, #544]	; (800af5c <tcp_process+0x564>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	3b01      	subs	r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	db71      	blt.n	800ae2e <tcp_process+0x436>
 800ad4a:	4b84      	ldr	r3, [pc, #528]	; (800af5c <tcp_process+0x564>)
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dc6a      	bgt.n	800ae2e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2204      	movs	r2, #4
 800ad5c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00b      	beq.n	800ad7e <tcp_process+0x386>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <tcp_process+0x386>
 800ad70:	4b80      	ldr	r3, [pc, #512]	; (800af74 <tcp_process+0x57c>)
 800ad72:	f240 3251 	movw	r2, #849	; 0x351
 800ad76:	4980      	ldr	r1, [pc, #512]	; (800af78 <tcp_process+0x580>)
 800ad78:	4880      	ldr	r0, [pc, #512]	; (800af7c <tcp_process+0x584>)
 800ad7a:	f009 ffef 	bl	8014d5c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ad86:	23fa      	movs	r3, #250	; 0xfa
 800ad88:	76bb      	strb	r3, [r7, #26]
 800ad8a:	e011      	b.n	800adb0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <tcp_process+0x3b4>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	6910      	ldr	r0, [r2, #16]
 800ada0:	2200      	movs	r2, #0
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4798      	blx	r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	76bb      	strb	r3, [r7, #26]
 800adaa:	e001      	b.n	800adb0 <tcp_process+0x3b8>
 800adac:	23f0      	movs	r3, #240	; 0xf0
 800adae:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800adb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00a      	beq.n	800adce <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800adb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800adbc:	f113 0f0d 	cmn.w	r3, #13
 800adc0:	d002      	beq.n	800adc8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fd ff2c 	bl	8008c20 <tcp_abort>
          }
          return ERR_ABRT;
 800adc8:	f06f 030c 	mvn.w	r3, #12
 800adcc:	e1bd      	b.n	800b14a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa42 	bl	800b258 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800add4:	4b6a      	ldr	r3, [pc, #424]	; (800af80 <tcp_process+0x588>)
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <tcp_process+0x3f0>
          recv_acked--;
 800addc:	4b68      	ldr	r3, [pc, #416]	; (800af80 <tcp_process+0x588>)
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	4b66      	ldr	r3, [pc, #408]	; (800af80 <tcp_process+0x588>)
 800ade6:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	f241 121c 	movw	r2, #4380	; 0x111c
 800adf2:	429a      	cmp	r2, r3
 800adf4:	bf38      	it	cc
 800adf6:	461a      	movcc	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4293      	cmp	r3, r2
 800ae00:	bf28      	it	cs
 800ae02:	4613      	movcs	r3, r2
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ae0c:	4b5d      	ldr	r3, [pc, #372]	; (800af84 <tcp_process+0x58c>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	f003 0320 	and.w	r3, r3, #32
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d034      	beq.n	800ae82 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7e9b      	ldrb	r3, [r3, #26]
 800ae1c:	f043 0302 	orr.w	r3, r3, #2
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2207      	movs	r2, #7
 800ae2a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ae2c:	e029      	b.n	800ae82 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae2e:	4b4b      	ldr	r3, [pc, #300]	; (800af5c <tcp_process+0x564>)
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	4b4b      	ldr	r3, [pc, #300]	; (800af60 <tcp_process+0x568>)
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	4b4a      	ldr	r3, [pc, #296]	; (800af64 <tcp_process+0x56c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae3e:	4b4a      	ldr	r3, [pc, #296]	; (800af68 <tcp_process+0x570>)
 800ae40:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae42:	885b      	ldrh	r3, [r3, #2]
 800ae44:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae46:	4a48      	ldr	r2, [pc, #288]	; (800af68 <tcp_process+0x570>)
 800ae48:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae4a:	8812      	ldrh	r2, [r2, #0]
 800ae4c:	b292      	uxth	r2, r2
 800ae4e:	9201      	str	r2, [sp, #4]
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	4b46      	ldr	r3, [pc, #280]	; (800af6c <tcp_process+0x574>)
 800ae54:	4a46      	ldr	r2, [pc, #280]	; (800af70 <tcp_process+0x578>)
 800ae56:	f002 fbff 	bl	800d658 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ae5a:	e16a      	b.n	800b132 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ae5c:	4b3e      	ldr	r3, [pc, #248]	; (800af58 <tcp_process+0x560>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 8164 	beq.w	800b132 <tcp_process+0x73a>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	1e5a      	subs	r2, r3, #1
 800ae70:	4b3c      	ldr	r3, [pc, #240]	; (800af64 <tcp_process+0x56c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	f040 815c 	bne.w	800b132 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f002 fc96 	bl	800d7ac <tcp_rexmit>
    break;
 800ae80:	e157      	b.n	800b132 <tcp_process+0x73a>
 800ae82:	e156      	b.n	800b132 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f9e7 	bl	800b258 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ae8a:	4b3e      	ldr	r3, [pc, #248]	; (800af84 <tcp_process+0x58c>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0320 	and.w	r3, r3, #32
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 814f 	beq.w	800b136 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	7e9b      	ldrb	r3, [r3, #26]
 800ae9c:	f043 0302 	orr.w	r3, r3, #2
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2207      	movs	r2, #7
 800aeaa:	751a      	strb	r2, [r3, #20]
    }
    break;
 800aeac:	e143      	b.n	800b136 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9d2 	bl	800b258 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800aeb4:	4b33      	ldr	r3, [pc, #204]	; (800af84 <tcp_process+0x58c>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	f003 0320 	and.w	r3, r3, #32
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d074      	beq.n	800afaa <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <tcp_process+0x560>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	f003 0310 	and.w	r3, r3, #16
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d063      	beq.n	800af94 <tcp_process+0x59c>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aed0:	4b22      	ldr	r3, [pc, #136]	; (800af5c <tcp_process+0x564>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d15d      	bne.n	800af94 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d159      	bne.n	800af94 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7e9b      	ldrb	r3, [r3, #26]
 800aee4:	f043 0302 	orr.w	r3, r3, #2
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7fe fee6 	bl	8009cc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aef4:	4b24      	ldr	r3, [pc, #144]	; (800af88 <tcp_process+0x590>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d105      	bne.n	800af0a <tcp_process+0x512>
 800aefe:	4b22      	ldr	r3, [pc, #136]	; (800af88 <tcp_process+0x590>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4a20      	ldr	r2, [pc, #128]	; (800af88 <tcp_process+0x590>)
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	e013      	b.n	800af32 <tcp_process+0x53a>
 800af0a:	4b1f      	ldr	r3, [pc, #124]	; (800af88 <tcp_process+0x590>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	e00c      	b.n	800af2c <tcp_process+0x534>
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d104      	bne.n	800af26 <tcp_process+0x52e>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	60da      	str	r2, [r3, #12]
 800af24:	e005      	b.n	800af32 <tcp_process+0x53a>
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1ef      	bne.n	800af12 <tcp_process+0x51a>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	60da      	str	r2, [r3, #12]
 800af38:	4b14      	ldr	r3, [pc, #80]	; (800af8c <tcp_process+0x594>)
 800af3a:	2201      	movs	r2, #1
 800af3c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	220a      	movs	r2, #10
 800af42:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800af44:	4b12      	ldr	r3, [pc, #72]	; (800af90 <tcp_process+0x598>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	60da      	str	r2, [r3, #12]
 800af4c:	4a10      	ldr	r2, [pc, #64]	; (800af90 <tcp_process+0x598>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	f002 fdcf 	bl	800daf4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800af56:	e0f0      	b.n	800b13a <tcp_process+0x742>
 800af58:	2000074c 	.word	0x2000074c
 800af5c:	20000744 	.word	0x20000744
 800af60:	2000074a 	.word	0x2000074a
 800af64:	20000740 	.word	0x20000740
 800af68:	20000730 	.word	0x20000730
 800af6c:	2000092c 	.word	0x2000092c
 800af70:	20000930 	.word	0x20000930
 800af74:	080170f8 	.word	0x080170f8
 800af78:	080172fc 	.word	0x080172fc
 800af7c:	0801713c 	.word	0x0801713c
 800af80:	20000748 	.word	0x20000748
 800af84:	2000074d 	.word	0x2000074d
 800af88:	20007204 	.word	0x20007204
 800af8c:	20007200 	.word	0x20007200
 800af90:	20007214 	.word	0x20007214
        tcp_ack_now(pcb);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	7e9b      	ldrb	r3, [r3, #26]
 800af98:	f043 0302 	orr.w	r3, r3, #2
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2208      	movs	r2, #8
 800afa6:	751a      	strb	r2, [r3, #20]
    break;
 800afa8:	e0c7      	b.n	800b13a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afaa:	4b6a      	ldr	r3, [pc, #424]	; (800b154 <tcp_process+0x75c>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	f003 0310 	and.w	r3, r3, #16
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 80c1 	beq.w	800b13a <tcp_process+0x742>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afbc:	4b66      	ldr	r3, [pc, #408]	; (800b158 <tcp_process+0x760>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	f040 80ba 	bne.w	800b13a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f040 80b5 	bne.w	800b13a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2206      	movs	r2, #6
 800afd4:	751a      	strb	r2, [r3, #20]
    break;
 800afd6:	e0b0      	b.n	800b13a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f93d 	bl	800b258 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800afde:	4b5f      	ldr	r3, [pc, #380]	; (800b15c <tcp_process+0x764>)
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 80a9 	beq.w	800b13e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7e9b      	ldrb	r3, [r3, #26]
 800aff0:	f043 0302 	orr.w	r3, r3, #2
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7fe fe60 	bl	8009cc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b000:	4b57      	ldr	r3, [pc, #348]	; (800b160 <tcp_process+0x768>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	429a      	cmp	r2, r3
 800b008:	d105      	bne.n	800b016 <tcp_process+0x61e>
 800b00a:	4b55      	ldr	r3, [pc, #340]	; (800b160 <tcp_process+0x768>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	4a53      	ldr	r2, [pc, #332]	; (800b160 <tcp_process+0x768>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	e013      	b.n	800b03e <tcp_process+0x646>
 800b016:	4b52      	ldr	r3, [pc, #328]	; (800b160 <tcp_process+0x768>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	613b      	str	r3, [r7, #16]
 800b01c:	e00c      	b.n	800b038 <tcp_process+0x640>
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d104      	bne.n	800b032 <tcp_process+0x63a>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	60da      	str	r2, [r3, #12]
 800b030:	e005      	b.n	800b03e <tcp_process+0x646>
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1ef      	bne.n	800b01e <tcp_process+0x626>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	60da      	str	r2, [r3, #12]
 800b044:	4b47      	ldr	r3, [pc, #284]	; (800b164 <tcp_process+0x76c>)
 800b046:	2201      	movs	r2, #1
 800b048:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	220a      	movs	r2, #10
 800b04e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b050:	4b45      	ldr	r3, [pc, #276]	; (800b168 <tcp_process+0x770>)
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	60da      	str	r2, [r3, #12]
 800b058:	4a43      	ldr	r2, [pc, #268]	; (800b168 <tcp_process+0x770>)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	f002 fd49 	bl	800daf4 <tcp_timer_needed>
    }
    break;
 800b062:	e06c      	b.n	800b13e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f8f7 	bl	800b258 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b06a:	4b3a      	ldr	r3, [pc, #232]	; (800b154 <tcp_process+0x75c>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	2b00      	cmp	r3, #0
 800b074:	d065      	beq.n	800b142 <tcp_process+0x74a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b07a:	4b37      	ldr	r3, [pc, #220]	; (800b158 <tcp_process+0x760>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d15f      	bne.n	800b142 <tcp_process+0x74a>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b086:	2b00      	cmp	r3, #0
 800b088:	d15b      	bne.n	800b142 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7fe fe18 	bl	8009cc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b090:	4b33      	ldr	r3, [pc, #204]	; (800b160 <tcp_process+0x768>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d105      	bne.n	800b0a6 <tcp_process+0x6ae>
 800b09a:	4b31      	ldr	r3, [pc, #196]	; (800b160 <tcp_process+0x768>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	4a2f      	ldr	r2, [pc, #188]	; (800b160 <tcp_process+0x768>)
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	e013      	b.n	800b0ce <tcp_process+0x6d6>
 800b0a6:	4b2e      	ldr	r3, [pc, #184]	; (800b160 <tcp_process+0x768>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	e00c      	b.n	800b0c8 <tcp_process+0x6d0>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d104      	bne.n	800b0c2 <tcp_process+0x6ca>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	60da      	str	r2, [r3, #12]
 800b0c0:	e005      	b.n	800b0ce <tcp_process+0x6d6>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1ef      	bne.n	800b0ae <tcp_process+0x6b6>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	60da      	str	r2, [r3, #12]
 800b0d4:	4b23      	ldr	r3, [pc, #140]	; (800b164 <tcp_process+0x76c>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	220a      	movs	r2, #10
 800b0de:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b0e0:	4b21      	ldr	r3, [pc, #132]	; (800b168 <tcp_process+0x770>)
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60da      	str	r2, [r3, #12]
 800b0e8:	4a1f      	ldr	r2, [pc, #124]	; (800b168 <tcp_process+0x770>)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	f002 fd01 	bl	800daf4 <tcp_timer_needed>
    }
    break;
 800b0f2:	e026      	b.n	800b142 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f8af 	bl	800b258 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b0fa:	4b16      	ldr	r3, [pc, #88]	; (800b154 <tcp_process+0x75c>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	f003 0310 	and.w	r3, r3, #16
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01f      	beq.n	800b146 <tcp_process+0x74e>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b10a:	4b13      	ldr	r3, [pc, #76]	; (800b158 <tcp_process+0x760>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d119      	bne.n	800b146 <tcp_process+0x74e>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b116:	2b00      	cmp	r3, #0
 800b118:	d115      	bne.n	800b146 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800b11a:	4b10      	ldr	r3, [pc, #64]	; (800b15c <tcp_process+0x764>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	f043 0310 	orr.w	r3, r3, #16
 800b122:	b2da      	uxtb	r2, r3
 800b124:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <tcp_process+0x764>)
 800b126:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b128:	e00d      	b.n	800b146 <tcp_process+0x74e>
  default:
    break;
 800b12a:	bf00      	nop
 800b12c:	e00c      	b.n	800b148 <tcp_process+0x750>
    break;
 800b12e:	bf00      	nop
 800b130:	e00a      	b.n	800b148 <tcp_process+0x750>
    break;
 800b132:	bf00      	nop
 800b134:	e008      	b.n	800b148 <tcp_process+0x750>
    break;
 800b136:	bf00      	nop
 800b138:	e006      	b.n	800b148 <tcp_process+0x750>
    break;
 800b13a:	bf00      	nop
 800b13c:	e004      	b.n	800b148 <tcp_process+0x750>
    break;
 800b13e:	bf00      	nop
 800b140:	e002      	b.n	800b148 <tcp_process+0x750>
    break;
 800b142:	bf00      	nop
 800b144:	e000      	b.n	800b148 <tcp_process+0x750>
    break;
 800b146:	bf00      	nop
  }
  return ERR_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	2000074c 	.word	0x2000074c
 800b158:	20000744 	.word	0x20000744
 800b15c:	2000074d 	.word	0x2000074d
 800b160:	20007204 	.word	0x20007204
 800b164:	20007200 	.word	0x20007200
 800b168:	20007214 	.word	0x20007214

0800b16c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	899b      	ldrh	r3, [r3, #12]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fb feb6 	bl	8006ef0 <lwip_htons>
 800b184:	4603      	mov	r3, r0
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d027      	beq.n	800b1de <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b18e:	6838      	ldr	r0, [r7, #0]
 800b190:	f7fe fb17 	bl	80097c2 <tcp_segs_free>
    next = NULL;
 800b194:	2300      	movs	r3, #0
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	e055      	b.n	800b246 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	899b      	ldrh	r3, [r3, #12]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fb fea4 	bl	8006ef0 <lwip_htons>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00d      	beq.n	800b1ce <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	899b      	ldrh	r3, [r3, #12]
 800b1b8:	b29c      	uxth	r4, r3
 800b1ba:	2001      	movs	r0, #1
 800b1bc:	f7fb fe98 	bl	8006ef0 <lwip_htons>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	4322      	orrs	r2, r4
 800b1ca:	b292      	uxth	r2, r2
 800b1cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7fe fb06 	bl	80097ea <tcp_seg_free>
    while (next &&
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00e      	beq.n	800b202 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	891b      	ldrh	r3, [r3, #8]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	4b1a      	ldr	r3, [pc, #104]	; (800b254 <tcp_oos_insert_segment+0xe8>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	441a      	add	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	8909      	ldrh	r1, [r1, #8]
 800b1fa:	440b      	add	r3, r1
 800b1fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	dacb      	bge.n	800b19a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d01e      	beq.n	800b246 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	891b      	ldrh	r3, [r3, #8]
 800b20c:	461a      	mov	r2, r3
 800b20e:	4b11      	ldr	r3, [pc, #68]	; (800b254 <tcp_oos_insert_segment+0xe8>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	441a      	add	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd12      	ble.n	800b246 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	b29a      	uxth	r2, r3
 800b228:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <tcp_oos_insert_segment+0xe8>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b29a      	uxth	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	891b      	ldrh	r3, [r3, #8]
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7fc fe77 	bl	8007f34 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]
}
 800b24c:	bf00      	nop
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	bd90      	pop	{r4, r7, pc}
 800b254:	20000740 	.word	0x20000740

0800b258 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b25a:	b08d      	sub	sp, #52	; 0x34
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7d1b      	ldrb	r3, [r3, #20]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d806      	bhi.n	800b27a <tcp_receive+0x22>
 800b26c:	4ba6      	ldr	r3, [pc, #664]	; (800b508 <tcp_receive+0x2b0>)
 800b26e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b272:	49a6      	ldr	r1, [pc, #664]	; (800b50c <tcp_receive+0x2b4>)
 800b274:	48a6      	ldr	r0, [pc, #664]	; (800b510 <tcp_receive+0x2b8>)
 800b276:	f009 fd71 	bl	8014d5c <iprintf>

  if (flags & TCP_ACK) {
 800b27a:	4ba6      	ldr	r3, [pc, #664]	; (800b514 <tcp_receive+0x2bc>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 82bf 	beq.w	800b806 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b28e:	461a      	mov	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b294:	4413      	add	r3, r2
 800b296:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b29c:	4b9e      	ldr	r3, [pc, #632]	; (800b518 <tcp_receive+0x2c0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	db1b      	blt.n	800b2de <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2aa:	4b9b      	ldr	r3, [pc, #620]	; (800b518 <tcp_receive+0x2c0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d106      	bne.n	800b2c0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2b6:	4b99      	ldr	r3, [pc, #612]	; (800b51c <tcp_receive+0x2c4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	db0e      	blt.n	800b2de <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2c4:	4b95      	ldr	r3, [pc, #596]	; (800b51c <tcp_receive+0x2c4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d141      	bne.n	800b350 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b2cc:	4b94      	ldr	r3, [pc, #592]	; (800b520 <tcp_receive+0x2c8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	89db      	ldrh	r3, [r3, #14]
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d938      	bls.n	800b350 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b2de:	4b90      	ldr	r3, [pc, #576]	; (800b520 <tcp_receive+0x2c8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	89db      	ldrh	r3, [r3, #14]
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d205      	bcs.n	800b308 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800b308:	4b83      	ldr	r3, [pc, #524]	; (800b518 <tcp_receive+0x2c0>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800b310:	4b82      	ldr	r3, [pc, #520]	; (800b51c <tcp_receive+0x2c4>)
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10d      	bne.n	800b33e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d111      	bne.n	800b350 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b33c:	e008      	b.n	800b350 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b350:	4b72      	ldr	r3, [pc, #456]	; (800b51c <tcp_receive+0x2c4>)
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	dc53      	bgt.n	800b406 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800b35e:	4b71      	ldr	r3, [pc, #452]	; (800b524 <tcp_receive+0x2cc>)
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d146      	bne.n	800b3f4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800b370:	4413      	add	r3, r2
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	429a      	cmp	r2, r3
 800b376:	d13d      	bne.n	800b3f4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b37e:	2b00      	cmp	r3, #0
 800b380:	db38      	blt.n	800b3f4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b386:	4b65      	ldr	r3, [pc, #404]	; (800b51c <tcp_receive+0x2c4>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d132      	bne.n	800b3f4 <tcp_receive+0x19c>
              found_dupack = 1;
 800b38e:	2301      	movs	r3, #1
 800b390:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b398:	2bff      	cmp	r3, #255	; 0xff
 800b39a:	d007      	beq.n	800b3ac <tcp_receive+0x154>
                ++pcb->dupacks;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d916      	bls.n	800b3e4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3c0:	4413      	add	r3, r2
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d912      	bls.n	800b3f4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3d8:	4413      	add	r3, r2
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b3e2:	e007      	b.n	800b3f4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d102      	bne.n	800b3f4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f002 fa2c 	bl	800d84c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f040 8169 	bne.w	800b6ce <tcp_receive+0x476>
        pcb->dupacks = 0;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b404:	e163      	b.n	800b6ce <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b406:	4b45      	ldr	r3, [pc, #276]	; (800b51c <tcp_receive+0x2c4>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	2b00      	cmp	r3, #0
 800b414:	f2c0 8107 	blt.w	800b626 <tcp_receive+0x3ce>
 800b418:	4b40      	ldr	r3, [pc, #256]	; (800b51c <tcp_receive+0x2c4>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	f300 80ff 	bgt.w	800b626 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	7e9b      	ldrb	r3, [r3, #26]
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00c      	beq.n	800b44e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	7e9b      	ldrb	r3, [r3, #26]
 800b438:	f023 0304 	bic.w	r3, r3, #4
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b45c:	10db      	asrs	r3, r3, #3
 800b45e:	b21b      	sxth	r3, r3
 800b460:	b29a      	uxth	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4413      	add	r3, r2
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	b21a      	sxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b47e:	4b27      	ldr	r3, [pc, #156]	; (800b51c <tcp_receive+0x2c4>)
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	7d1b      	ldrb	r3, [r3, #20]
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	f240 8094 	bls.w	800b5b8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d216      	bcs.n	800b4ce <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4aa:	4413      	add	r3, r2
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d97f      	bls.n	800b5b8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c2:	4413      	add	r3, r2
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4cc:	e074      	b.n	800b5b8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d8:	4619      	mov	r1, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4de:	fb03 f301 	mul.w	r3, r3, r1
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800b4e8:	fb93 f3f1 	sdiv	r3, r3, r1
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	4413      	add	r3, r2
 800b4f0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4f8:	8a7a      	ldrh	r2, [r7, #18]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d95c      	bls.n	800b5b8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	8a7a      	ldrh	r2, [r7, #18]
 800b502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800b506:	e057      	b.n	800b5b8 <tcp_receive+0x360>
 800b508:	080170f8 	.word	0x080170f8
 800b50c:	0801731c 	.word	0x0801731c
 800b510:	0801713c 	.word	0x0801713c
 800b514:	2000074c 	.word	0x2000074c
 800b518:	20000740 	.word	0x20000740
 800b51c:	20000744 	.word	0x20000744
 800b520:	20000730 	.word	0x20000730
 800b524:	2000074a 	.word	0x2000074a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	f7fc fefe 	bl	8008344 <pbuf_clen>
 800b548:	4603      	mov	r3, r0
 800b54a:	429c      	cmp	r4, r3
 800b54c:	d206      	bcs.n	800b55c <tcp_receive+0x304>
 800b54e:	4b70      	ldr	r3, [pc, #448]	; (800b710 <tcp_receive+0x4b8>)
 800b550:	f240 429e 	movw	r2, #1182	; 0x49e
 800b554:	496f      	ldr	r1, [pc, #444]	; (800b714 <tcp_receive+0x4bc>)
 800b556:	4870      	ldr	r0, [pc, #448]	; (800b718 <tcp_receive+0x4c0>)
 800b558:	f009 fc00 	bl	8014d5c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	4618      	mov	r0, r3
 800b562:	f7fc feef 	bl	8008344 <pbuf_clen>
 800b566:	4603      	mov	r3, r0
 800b568:	461a      	mov	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b570:	1a9b      	subs	r3, r3, r2
 800b572:	b29a      	uxth	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800b57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57c:	891a      	ldrh	r2, [r3, #8]
 800b57e:	4b67      	ldr	r3, [pc, #412]	; (800b71c <tcp_receive+0x4c4>)
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	4413      	add	r3, r2
 800b584:	b29a      	uxth	r2, r3
 800b586:	4b65      	ldr	r3, [pc, #404]	; (800b71c <tcp_receive+0x4c4>)
 800b588:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800b58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b58c:	f7fe f92d 	bl	80097ea <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00e      	beq.n	800b5b8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10a      	bne.n	800b5b8 <tcp_receive+0x360>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <tcp_receive+0x360>
 800b5aa:	4b59      	ldr	r3, [pc, #356]	; (800b710 <tcp_receive+0x4b8>)
 800b5ac:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800b5b0:	495b      	ldr	r1, [pc, #364]	; (800b720 <tcp_receive+0x4c8>)
 800b5b2:	4859      	ldr	r0, [pc, #356]	; (800b718 <tcp_receive+0x4c0>)
 800b5b4:	f009 fbd2 	bl	8014d5c <iprintf>
      while (pcb->unacked != NULL &&
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d022      	beq.n	800b606 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fb fc9f 	bl	8006f0c <lwip_htonl>
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d4:	891b      	ldrh	r3, [r3, #8]
 800b5d6:	461d      	mov	r5, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	899b      	ldrh	r3, [r3, #12]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fb fc84 	bl	8006ef0 <lwip_htons>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <tcp_receive+0x39e>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e000      	b.n	800b5f8 <tcp_receive+0x3a0>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	442b      	add	r3, r5
 800b5fa:	18e2      	adds	r2, r4, r3
 800b5fc:	4b49      	ldr	r3, [pc, #292]	; (800b724 <tcp_receive+0x4cc>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800b602:	2b00      	cmp	r3, #0
 800b604:	dd90      	ble.n	800b528 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d104      	bne.n	800b618 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b614:	861a      	strh	r2, [r3, #48]	; 0x30
 800b616:	e002      	b.n	800b61e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	76da      	strb	r2, [r3, #27]
 800b624:	e002      	b.n	800b62c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fd30 	bl	800d08c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800b62c:	e04f      	b.n	800b6ce <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b632:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fc fe73 	bl	8008344 <pbuf_clen>
 800b65e:	4603      	mov	r3, r0
 800b660:	429c      	cmp	r4, r3
 800b662:	d206      	bcs.n	800b672 <tcp_receive+0x41a>
 800b664:	4b2a      	ldr	r3, [pc, #168]	; (800b710 <tcp_receive+0x4b8>)
 800b666:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b66a:	492a      	ldr	r1, [pc, #168]	; (800b714 <tcp_receive+0x4bc>)
 800b66c:	482a      	ldr	r0, [pc, #168]	; (800b718 <tcp_receive+0x4c0>)
 800b66e:	f009 fb75 	bl	8014d5c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	4618      	mov	r0, r3
 800b678:	f7fc fe64 	bl	8008344 <pbuf_clen>
 800b67c:	4603      	mov	r3, r0
 800b67e:	461a      	mov	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b686:	1a9b      	subs	r3, r3, r2
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	891a      	ldrh	r2, [r3, #8]
 800b694:	4b21      	ldr	r3, [pc, #132]	; (800b71c <tcp_receive+0x4c4>)
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	4413      	add	r3, r2
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	4b1f      	ldr	r3, [pc, #124]	; (800b71c <tcp_receive+0x4c4>)
 800b69e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800b6a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6a2:	f7fe f8a2 	bl	80097ea <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00e      	beq.n	800b6ce <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <tcp_receive+0x476>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <tcp_receive+0x476>
 800b6c0:	4b13      	ldr	r3, [pc, #76]	; (800b710 <tcp_receive+0x4b8>)
 800b6c2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800b6c6:	4916      	ldr	r1, [pc, #88]	; (800b720 <tcp_receive+0x4c8>)
 800b6c8:	4813      	ldr	r0, [pc, #76]	; (800b718 <tcp_receive+0x4c0>)
 800b6ca:	f009 fb47 	bl	8014d5c <iprintf>
    while (pcb->unsent != NULL &&
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d036      	beq.n	800b744 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b6d6:	4b13      	ldr	r3, [pc, #76]	; (800b724 <tcp_receive+0x4cc>)
 800b6d8:	681c      	ldr	r4, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fb fc12 	bl	8006f0c <lwip_htonl>
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ee:	891b      	ldrh	r3, [r3, #8]
 800b6f0:	461e      	mov	r6, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	899b      	ldrh	r3, [r3, #12]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fb fbf7 	bl	8006ef0 <lwip_htons>
 800b702:	4603      	mov	r3, r0
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00d      	beq.n	800b728 <tcp_receive+0x4d0>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e00c      	b.n	800b72a <tcp_receive+0x4d2>
 800b710:	080170f8 	.word	0x080170f8
 800b714:	08017338 	.word	0x08017338
 800b718:	0801713c 	.word	0x0801713c
 800b71c:	20000748 	.word	0x20000748
 800b720:	08017360 	.word	0x08017360
 800b724:	20000744 	.word	0x20000744
 800b728:	2300      	movs	r3, #0
 800b72a:	4433      	add	r3, r6
 800b72c:	442b      	add	r3, r5
 800b72e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800b730:	2b00      	cmp	r3, #0
 800b732:	db07      	blt.n	800b744 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b734:	4b8d      	ldr	r3, [pc, #564]	; (800b96c <tcp_receive+0x714>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f77f af75 	ble.w	800b62e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b74a:	4b89      	ldr	r3, [pc, #548]	; (800b970 <tcp_receive+0x718>)
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	4413      	add	r3, r2
 800b750:	b29a      	uxth	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d052      	beq.n	800b806 <tcp_receive+0x5ae>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b764:	4b81      	ldr	r3, [pc, #516]	; (800b96c <tcp_receive+0x714>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da4b      	bge.n	800b806 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b76e:	4b81      	ldr	r3, [pc, #516]	; (800b974 <tcp_receive+0x71c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	b29a      	uxth	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b778:	b29b      	uxth	r3, r3
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800b780:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b788:	10db      	asrs	r3, r3, #3
 800b78a:	b21b      	sxth	r3, r3
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	b29b      	uxth	r3, r3
 800b792:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b79e:	4413      	add	r3, r2
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	b21a      	sxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b7a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	da03      	bge.n	800b7b8 <tcp_receive+0x560>
        m = -m;
 800b7b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7b2:	425b      	negs	r3, r3
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800b7b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b7c0:	109b      	asrs	r3, r3, #2
 800b7c2:	b21b      	sxth	r3, r3
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7d6:	4413      	add	r3, r2
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	b21a      	sxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b7e6:	10db      	asrs	r3, r3, #3
 800b7e8:	b21b      	sxth	r3, r3
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	b21a      	sxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b806:	4b5c      	ldr	r3, [pc, #368]	; (800b978 <tcp_receive+0x720>)
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 84f1 	beq.w	800c1f2 <tcp_receive+0xf9a>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7d1b      	ldrb	r3, [r3, #20]
 800b814:	2b06      	cmp	r3, #6
 800b816:	f200 84ec 	bhi.w	800c1f2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b81e:	4b57      	ldr	r3, [pc, #348]	; (800b97c <tcp_receive+0x724>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	3b01      	subs	r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	f2c0 80b8 	blt.w	800b99c <tcp_receive+0x744>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b830:	4b51      	ldr	r3, [pc, #324]	; (800b978 <tcp_receive+0x720>)
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	4619      	mov	r1, r3
 800b836:	4b51      	ldr	r3, [pc, #324]	; (800b97c <tcp_receive+0x724>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	440b      	add	r3, r1
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	3301      	adds	r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	f300 80ab 	bgt.w	800b99c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b846:	4b4e      	ldr	r3, [pc, #312]	; (800b980 <tcp_receive+0x728>)
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b850:	4b4a      	ldr	r3, [pc, #296]	; (800b97c <tcp_receive+0x724>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b858:	4b49      	ldr	r3, [pc, #292]	; (800b980 <tcp_receive+0x728>)
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <tcp_receive+0x616>
 800b860:	4b48      	ldr	r3, [pc, #288]	; (800b984 <tcp_receive+0x72c>)
 800b862:	f240 523c 	movw	r2, #1340	; 0x53c
 800b866:	4948      	ldr	r1, [pc, #288]	; (800b988 <tcp_receive+0x730>)
 800b868:	4848      	ldr	r0, [pc, #288]	; (800b98c <tcp_receive+0x734>)
 800b86a:	f009 fa77 	bl	8014d5c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b870:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b874:	4293      	cmp	r3, r2
 800b876:	dd06      	ble.n	800b886 <tcp_receive+0x62e>
 800b878:	4b42      	ldr	r3, [pc, #264]	; (800b984 <tcp_receive+0x72c>)
 800b87a:	f240 523d 	movw	r2, #1341	; 0x53d
 800b87e:	4944      	ldr	r1, [pc, #272]	; (800b990 <tcp_receive+0x738>)
 800b880:	4842      	ldr	r0, [pc, #264]	; (800b98c <tcp_receive+0x734>)
 800b882:	f009 fa6b 	bl	8014d5c <iprintf>
      if (inseg.p->len < off) {
 800b886:	4b3e      	ldr	r3, [pc, #248]	; (800b980 <tcp_receive+0x728>)
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	895b      	ldrh	r3, [r3, #10]
 800b88c:	461a      	mov	r2, r3
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	4293      	cmp	r3, r2
 800b892:	dd3e      	ble.n	800b912 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b894:	4b3a      	ldr	r3, [pc, #232]	; (800b980 <tcp_receive+0x728>)
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	891b      	ldrh	r3, [r3, #8]
 800b89a:	461a      	mov	r2, r3
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	dd06      	ble.n	800b8b0 <tcp_receive+0x658>
 800b8a2:	4b38      	ldr	r3, [pc, #224]	; (800b984 <tcp_receive+0x72c>)
 800b8a4:	f240 523f 	movw	r2, #1343	; 0x53f
 800b8a8:	493a      	ldr	r1, [pc, #232]	; (800b994 <tcp_receive+0x73c>)
 800b8aa:	4838      	ldr	r0, [pc, #224]	; (800b98c <tcp_receive+0x734>)
 800b8ac:	f009 fa56 	bl	8014d5c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b8b0:	4b33      	ldr	r3, [pc, #204]	; (800b980 <tcp_receive+0x728>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	891a      	ldrh	r2, [r3, #8]
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800b8be:	e00e      	b.n	800b8de <tcp_receive+0x686>
          off -= p->len;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	895b      	ldrh	r3, [r3, #10]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	1a9b      	subs	r3, r3, r2
 800b8ca:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	8a3a      	ldrh	r2, [r7, #16]
 800b8d0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	895b      	ldrh	r3, [r3, #10]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	dcea      	bgt.n	800b8c0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	425b      	negs	r3, r3
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	b21b      	sxth	r3, r3
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	69b8      	ldr	r0, [r7, #24]
 800b8f8:	f7fc fc6c 	bl	80081d4 <pbuf_header>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d01c      	beq.n	800b93c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b902:	4b20      	ldr	r3, [pc, #128]	; (800b984 <tcp_receive+0x72c>)
 800b904:	f240 524c 	movw	r2, #1356	; 0x54c
 800b908:	4923      	ldr	r1, [pc, #140]	; (800b998 <tcp_receive+0x740>)
 800b90a:	4820      	ldr	r0, [pc, #128]	; (800b98c <tcp_receive+0x734>)
 800b90c:	f009 fa26 	bl	8014d5c <iprintf>
 800b910:	e014      	b.n	800b93c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800b912:	4b1b      	ldr	r3, [pc, #108]	; (800b980 <tcp_receive+0x728>)
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b918:	b292      	uxth	r2, r2
 800b91a:	4252      	negs	r2, r2
 800b91c:	b292      	uxth	r2, r2
 800b91e:	b212      	sxth	r2, r2
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7fc fc56 	bl	80081d4 <pbuf_header>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d006      	beq.n	800b93c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b92e:	4b15      	ldr	r3, [pc, #84]	; (800b984 <tcp_receive+0x72c>)
 800b930:	f240 5251 	movw	r2, #1361	; 0x551
 800b934:	4918      	ldr	r1, [pc, #96]	; (800b998 <tcp_receive+0x740>)
 800b936:	4815      	ldr	r0, [pc, #84]	; (800b98c <tcp_receive+0x734>)
 800b938:	f009 fa10 	bl	8014d5c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b93c:	4b10      	ldr	r3, [pc, #64]	; (800b980 <tcp_receive+0x728>)
 800b93e:	891a      	ldrh	r2, [r3, #8]
 800b940:	4b0e      	ldr	r3, [pc, #56]	; (800b97c <tcp_receive+0x724>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	b299      	uxth	r1, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	1acb      	subs	r3, r1, r3
 800b94e:	b29b      	uxth	r3, r3
 800b950:	4413      	add	r3, r2
 800b952:	b29a      	uxth	r2, r3
 800b954:	4b0a      	ldr	r3, [pc, #40]	; (800b980 <tcp_receive+0x728>)
 800b956:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	4a07      	ldr	r2, [pc, #28]	; (800b97c <tcp_receive+0x724>)
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	4b07      	ldr	r3, [pc, #28]	; (800b980 <tcp_receive+0x728>)
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	4a05      	ldr	r2, [pc, #20]	; (800b97c <tcp_receive+0x724>)
 800b966:	6812      	ldr	r2, [r2, #0]
 800b968:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b96a:	e025      	b.n	800b9b8 <tcp_receive+0x760>
 800b96c:	20000744 	.word	0x20000744
 800b970:	20000748 	.word	0x20000748
 800b974:	20007208 	.word	0x20007208
 800b978:	2000074a 	.word	0x2000074a
 800b97c:	20000740 	.word	0x20000740
 800b980:	20000720 	.word	0x20000720
 800b984:	080170f8 	.word	0x080170f8
 800b988:	08017380 	.word	0x08017380
 800b98c:	0801713c 	.word	0x0801713c
 800b990:	08017390 	.word	0x08017390
 800b994:	080173a0 	.word	0x080173a0
 800b998:	080173b0 	.word	0x080173b0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b99c:	4b87      	ldr	r3, [pc, #540]	; (800bbbc <tcp_receive+0x964>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	da06      	bge.n	800b9b8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7e9b      	ldrb	r3, [r3, #26]
 800b9ae:	f043 0302 	orr.w	r3, r3, #2
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b9b8:	4b80      	ldr	r3, [pc, #512]	; (800bbbc <tcp_receive+0x964>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f2c0 8410 	blt.w	800c1e8 <tcp_receive+0xf90>
 800b9c8:	4b7c      	ldr	r3, [pc, #496]	; (800bbbc <tcp_receive+0x964>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	6879      	ldr	r1, [r7, #4]
 800b9d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9d4:	440b      	add	r3, r1
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	3301      	adds	r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f300 8404 	bgt.w	800c1e8 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9e4:	4b75      	ldr	r3, [pc, #468]	; (800bbbc <tcp_receive+0x964>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	f040 8287 	bne.w	800befc <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b9ee:	4b74      	ldr	r3, [pc, #464]	; (800bbc0 <tcp_receive+0x968>)
 800b9f0:	891c      	ldrh	r4, [r3, #8]
 800b9f2:	4b73      	ldr	r3, [pc, #460]	; (800bbc0 <tcp_receive+0x968>)
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	899b      	ldrh	r3, [r3, #12]
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fb fa78 	bl	8006ef0 <lwip_htons>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <tcp_receive+0x7b6>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e000      	b.n	800ba10 <tcp_receive+0x7b8>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4423      	add	r3, r4
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	4b6b      	ldr	r3, [pc, #428]	; (800bbc4 <tcp_receive+0x96c>)
 800ba16:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba1c:	4b69      	ldr	r3, [pc, #420]	; (800bbc4 <tcp_receive+0x96c>)
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d26e      	bcs.n	800bb02 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba24:	4b66      	ldr	r3, [pc, #408]	; (800bbc0 <tcp_receive+0x968>)
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	899b      	ldrh	r3, [r3, #12]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fb fa5f 	bl	8006ef0 <lwip_htons>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d01b      	beq.n	800ba74 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ba3c:	4b60      	ldr	r3, [pc, #384]	; (800bbc0 <tcp_receive+0x968>)
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba48:	b29c      	uxth	r4, r3
 800ba4a:	4b5d      	ldr	r3, [pc, #372]	; (800bbc0 <tcp_receive+0x968>)
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	899b      	ldrh	r3, [r3, #12]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fb fa4c 	bl	8006ef0 <lwip_htons>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fb fa45 	bl	8006ef0 <lwip_htons>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4b55      	ldr	r3, [pc, #340]	; (800bbc0 <tcp_receive+0x968>)
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	4322      	orrs	r2, r4
 800ba70:	b292      	uxth	r2, r2
 800ba72:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba78:	4b51      	ldr	r3, [pc, #324]	; (800bbc0 <tcp_receive+0x968>)
 800ba7a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ba7c:	4b50      	ldr	r3, [pc, #320]	; (800bbc0 <tcp_receive+0x968>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	899b      	ldrh	r3, [r3, #12]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fb fa33 	bl	8006ef0 <lwip_htons>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d005      	beq.n	800baa0 <tcp_receive+0x848>
            inseg.len -= 1;
 800ba94:	4b4a      	ldr	r3, [pc, #296]	; (800bbc0 <tcp_receive+0x968>)
 800ba96:	891b      	ldrh	r3, [r3, #8]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	4b48      	ldr	r3, [pc, #288]	; (800bbc0 <tcp_receive+0x968>)
 800ba9e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800baa0:	4b47      	ldr	r3, [pc, #284]	; (800bbc0 <tcp_receive+0x968>)
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	4b46      	ldr	r3, [pc, #280]	; (800bbc0 <tcp_receive+0x968>)
 800baa6:	891b      	ldrh	r3, [r3, #8]
 800baa8:	4619      	mov	r1, r3
 800baaa:	4610      	mov	r0, r2
 800baac:	f7fc fa42 	bl	8007f34 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bab0:	4b43      	ldr	r3, [pc, #268]	; (800bbc0 <tcp_receive+0x968>)
 800bab2:	891c      	ldrh	r4, [r3, #8]
 800bab4:	4b42      	ldr	r3, [pc, #264]	; (800bbc0 <tcp_receive+0x968>)
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	b29b      	uxth	r3, r3
 800babc:	4618      	mov	r0, r3
 800babe:	f7fb fa17 	bl	8006ef0 <lwip_htons>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f003 0303 	and.w	r3, r3, #3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <tcp_receive+0x878>
 800bacc:	2301      	movs	r3, #1
 800bace:	e000      	b.n	800bad2 <tcp_receive+0x87a>
 800bad0:	2300      	movs	r3, #0
 800bad2:	4423      	add	r3, r4
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	4b3b      	ldr	r3, [pc, #236]	; (800bbc4 <tcp_receive+0x96c>)
 800bad8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bada:	4b3a      	ldr	r3, [pc, #232]	; (800bbc4 <tcp_receive+0x96c>)
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	4b36      	ldr	r3, [pc, #216]	; (800bbbc <tcp_receive+0x964>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	441a      	add	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800baee:	440b      	add	r3, r1
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d006      	beq.n	800bb02 <tcp_receive+0x8aa>
 800baf4:	4b34      	ldr	r3, [pc, #208]	; (800bbc8 <tcp_receive+0x970>)
 800baf6:	f240 527f 	movw	r2, #1407	; 0x57f
 800bafa:	4934      	ldr	r1, [pc, #208]	; (800bbcc <tcp_receive+0x974>)
 800bafc:	4834      	ldr	r0, [pc, #208]	; (800bbd0 <tcp_receive+0x978>)
 800bafe:	f009 f92d 	bl	8014d5c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 80e1 	beq.w	800bcce <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb0c:	4b2c      	ldr	r3, [pc, #176]	; (800bbc0 <tcp_receive+0x968>)
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	899b      	ldrh	r3, [r3, #12]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fb f9eb 	bl	8006ef0 <lwip_htons>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d010      	beq.n	800bb46 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bb24:	e00a      	b.n	800bb3c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800bb36:	68b8      	ldr	r0, [r7, #8]
 800bb38:	f7fd fe57 	bl	80097ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1f0      	bne.n	800bb26 <tcp_receive+0x8ce>
 800bb44:	e0c3      	b.n	800bcce <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bb4c:	e04f      	b.n	800bbee <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	899b      	ldrh	r3, [r3, #12]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fb f9ca 	bl	8006ef0 <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d03b      	beq.n	800bbde <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bb66:	4b16      	ldr	r3, [pc, #88]	; (800bbc0 <tcp_receive+0x968>)
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	899b      	ldrh	r3, [r3, #12]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fb f9be 	bl	8006ef0 <lwip_htons>
 800bb74:	4603      	mov	r3, r0
 800bb76:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d12f      	bne.n	800bbde <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bb7e:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <tcp_receive+0x968>)
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	899b      	ldrh	r3, [r3, #12]
 800bb84:	b29c      	uxth	r4, r3
 800bb86:	2001      	movs	r0, #1
 800bb88:	f7fb f9b2 	bl	8006ef0 <lwip_htons>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	461a      	mov	r2, r3
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <tcp_receive+0x968>)
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	4322      	orrs	r2, r4
 800bb96:	b292      	uxth	r2, r2
 800bb98:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bb9a:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <tcp_receive+0x968>)
 800bb9c:	891c      	ldrh	r4, [r3, #8]
 800bb9e:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <tcp_receive+0x968>)
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	899b      	ldrh	r3, [r3, #12]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fb f9a2 	bl	8006ef0 <lwip_htons>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00e      	beq.n	800bbd4 <tcp_receive+0x97c>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e00d      	b.n	800bbd6 <tcp_receive+0x97e>
 800bbba:	bf00      	nop
 800bbbc:	20000740 	.word	0x20000740
 800bbc0:	20000720 	.word	0x20000720
 800bbc4:	2000074a 	.word	0x2000074a
 800bbc8:	080170f8 	.word	0x080170f8
 800bbcc:	080173c4 	.word	0x080173c4
 800bbd0:	0801713c 	.word	0x0801713c
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4423      	add	r3, r4
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	4b95      	ldr	r3, [pc, #596]	; (800be30 <tcp_receive+0xbd8>)
 800bbdc:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800bbe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbea:	f7fd fdfe 	bl	80097ea <tcp_seg_free>
            while (next &&
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00e      	beq.n	800bc12 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bbf4:	4b8e      	ldr	r3, [pc, #568]	; (800be30 <tcp_receive+0xbd8>)
 800bbf6:	881b      	ldrh	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4b8e      	ldr	r3, [pc, #568]	; (800be34 <tcp_receive+0xbdc>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	441a      	add	r2, r3
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc08:	8909      	ldrh	r1, [r1, #8]
 800bc0a:	440b      	add	r3, r1
 800bc0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	da9d      	bge.n	800bb4e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d057      	beq.n	800bcc8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800bc18:	4b85      	ldr	r3, [pc, #532]	; (800be30 <tcp_receive+0xbd8>)
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	4b85      	ldr	r3, [pc, #532]	; (800be34 <tcp_receive+0xbdc>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	441a      	add	r2, r3
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dd4b      	ble.n	800bcc8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	4b7e      	ldr	r3, [pc, #504]	; (800be34 <tcp_receive+0xbdc>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	4b7d      	ldr	r3, [pc, #500]	; (800be38 <tcp_receive+0xbe0>)
 800bc44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bc46:	4b7c      	ldr	r3, [pc, #496]	; (800be38 <tcp_receive+0xbe0>)
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	899b      	ldrh	r3, [r3, #12]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fb f94e 	bl	8006ef0 <lwip_htons>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d005      	beq.n	800bc6a <tcp_receive+0xa12>
                inseg.len -= 1;
 800bc5e:	4b76      	ldr	r3, [pc, #472]	; (800be38 <tcp_receive+0xbe0>)
 800bc60:	891b      	ldrh	r3, [r3, #8]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	4b74      	ldr	r3, [pc, #464]	; (800be38 <tcp_receive+0xbe0>)
 800bc68:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bc6a:	4b73      	ldr	r3, [pc, #460]	; (800be38 <tcp_receive+0xbe0>)
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	4b72      	ldr	r3, [pc, #456]	; (800be38 <tcp_receive+0xbe0>)
 800bc70:	891b      	ldrh	r3, [r3, #8]
 800bc72:	4619      	mov	r1, r3
 800bc74:	4610      	mov	r0, r2
 800bc76:	f7fc f95d 	bl	8007f34 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bc7a:	4b6f      	ldr	r3, [pc, #444]	; (800be38 <tcp_receive+0xbe0>)
 800bc7c:	891c      	ldrh	r4, [r3, #8]
 800bc7e:	4b6e      	ldr	r3, [pc, #440]	; (800be38 <tcp_receive+0xbe0>)
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	899b      	ldrh	r3, [r3, #12]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fb f932 	bl	8006ef0 <lwip_htons>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f003 0303 	and.w	r3, r3, #3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <tcp_receive+0xa42>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <tcp_receive+0xa44>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	4423      	add	r3, r4
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	4b63      	ldr	r3, [pc, #396]	; (800be30 <tcp_receive+0xbd8>)
 800bca2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bca4:	4b62      	ldr	r3, [pc, #392]	; (800be30 <tcp_receive+0xbd8>)
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	4b62      	ldr	r3, [pc, #392]	; (800be34 <tcp_receive+0xbdc>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	441a      	add	r2, r3
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d006      	beq.n	800bcc8 <tcp_receive+0xa70>
 800bcba:	4b60      	ldr	r3, [pc, #384]	; (800be3c <tcp_receive+0xbe4>)
 800bcbc:	f240 52af 	movw	r2, #1455	; 0x5af
 800bcc0:	495f      	ldr	r1, [pc, #380]	; (800be40 <tcp_receive+0xbe8>)
 800bcc2:	4860      	ldr	r0, [pc, #384]	; (800be44 <tcp_receive+0xbec>)
 800bcc4:	f009 f84a 	bl	8014d5c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bccc:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bcce:	4b58      	ldr	r3, [pc, #352]	; (800be30 <tcp_receive+0xbd8>)
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	4b57      	ldr	r3, [pc, #348]	; (800be34 <tcp_receive+0xbdc>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	441a      	add	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bce2:	4b53      	ldr	r3, [pc, #332]	; (800be30 <tcp_receive+0xbd8>)
 800bce4:	881b      	ldrh	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d206      	bcs.n	800bcf8 <tcp_receive+0xaa0>
 800bcea:	4b54      	ldr	r3, [pc, #336]	; (800be3c <tcp_receive+0xbe4>)
 800bcec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bcf0:	4955      	ldr	r1, [pc, #340]	; (800be48 <tcp_receive+0xbf0>)
 800bcf2:	4854      	ldr	r0, [pc, #336]	; (800be44 <tcp_receive+0xbec>)
 800bcf4:	f009 f832 	bl	8014d5c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bcfc:	4b4c      	ldr	r3, [pc, #304]	; (800be30 <tcp_receive+0xbd8>)
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7fd f8e1 	bl	8008ed0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bd0e:	4b4a      	ldr	r3, [pc, #296]	; (800be38 <tcp_receive+0xbe0>)
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	891b      	ldrh	r3, [r3, #8]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <tcp_receive+0xace>
          recv_data = inseg.p;
 800bd18:	4b47      	ldr	r3, [pc, #284]	; (800be38 <tcp_receive+0xbe0>)
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4a4b      	ldr	r2, [pc, #300]	; (800be4c <tcp_receive+0xbf4>)
 800bd1e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bd20:	4b45      	ldr	r3, [pc, #276]	; (800be38 <tcp_receive+0xbe0>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bd26:	4b44      	ldr	r3, [pc, #272]	; (800be38 <tcp_receive+0xbe0>)
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	899b      	ldrh	r3, [r3, #12]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fb f8de 	bl	8006ef0 <lwip_htons>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80b4 	beq.w	800bea8 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bd40:	4b43      	ldr	r3, [pc, #268]	; (800be50 <tcp_receive+0xbf8>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	f043 0320 	orr.w	r3, r3, #32
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b41      	ldr	r3, [pc, #260]	; (800be50 <tcp_receive+0xbf8>)
 800bd4c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bd4e:	e0ab      	b.n	800bea8 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd54:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	4a35      	ldr	r2, [pc, #212]	; (800be34 <tcp_receive+0xbdc>)
 800bd60:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	891b      	ldrh	r3, [r3, #8]
 800bd66:	461c      	mov	r4, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	899b      	ldrh	r3, [r3, #12]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fb f8bd 	bl	8006ef0 <lwip_htons>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <tcp_receive+0xb2c>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e000      	b.n	800bd86 <tcp_receive+0xb2e>
 800bd84:	2300      	movs	r3, #0
 800bd86:	191a      	adds	r2, r3, r4
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	441a      	add	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd96:	461c      	mov	r4, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	891b      	ldrh	r3, [r3, #8]
 800bd9c:	461d      	mov	r5, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	899b      	ldrh	r3, [r3, #12]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fb f8a2 	bl	8006ef0 <lwip_htons>
 800bdac:	4603      	mov	r3, r0
 800bdae:	f003 0303 	and.w	r3, r3, #3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <tcp_receive+0xb62>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e000      	b.n	800bdbc <tcp_receive+0xb64>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	442b      	add	r3, r5
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	d206      	bcs.n	800bdd0 <tcp_receive+0xb78>
 800bdc2:	4b1e      	ldr	r3, [pc, #120]	; (800be3c <tcp_receive+0xbe4>)
 800bdc4:	f240 52de 	movw	r2, #1502	; 0x5de
 800bdc8:	4922      	ldr	r1, [pc, #136]	; (800be54 <tcp_receive+0xbfc>)
 800bdca:	481e      	ldr	r0, [pc, #120]	; (800be44 <tcp_receive+0xbec>)
 800bdcc:	f008 ffc6 	bl	8014d5c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	891b      	ldrh	r3, [r3, #8]
 800bdd4:	461c      	mov	r4, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	899b      	ldrh	r3, [r3, #12]
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fb f886 	bl	8006ef0 <lwip_htons>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <tcp_receive+0xb9a>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e000      	b.n	800bdf4 <tcp_receive+0xb9c>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	1919      	adds	r1, r3, r4
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdfa:	b28b      	uxth	r3, r1
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f7fd f863 	bl	8008ed0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	891b      	ldrh	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d028      	beq.n	800be66 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800be14:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <tcp_receive+0xbf4>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01d      	beq.n	800be58 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800be1c:	4b0b      	ldr	r3, [pc, #44]	; (800be4c <tcp_receive+0xbf4>)
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4619      	mov	r1, r3
 800be26:	4610      	mov	r0, r2
 800be28:	f7fc fac6 	bl	80083b8 <pbuf_cat>
 800be2c:	e018      	b.n	800be60 <tcp_receive+0xc08>
 800be2e:	bf00      	nop
 800be30:	2000074a 	.word	0x2000074a
 800be34:	20000740 	.word	0x20000740
 800be38:	20000720 	.word	0x20000720
 800be3c:	080170f8 	.word	0x080170f8
 800be40:	080173fc 	.word	0x080173fc
 800be44:	0801713c 	.word	0x0801713c
 800be48:	08017438 	.word	0x08017438
 800be4c:	20000750 	.word	0x20000750
 800be50:	2000074d 	.word	0x2000074d
 800be54:	08017458 	.word	0x08017458
            } else {
              recv_data = cseg->p;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	4a71      	ldr	r2, [pc, #452]	; (800c024 <tcp_receive+0xdcc>)
 800be5e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	899b      	ldrh	r3, [r3, #12]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fb f83e 	bl	8006ef0 <lwip_htons>
 800be74:	4603      	mov	r3, r0
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00d      	beq.n	800be9a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800be7e:	4b6a      	ldr	r3, [pc, #424]	; (800c028 <tcp_receive+0xdd0>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	f043 0320 	orr.w	r3, r3, #32
 800be86:	b2da      	uxtb	r2, r3
 800be88:	4b67      	ldr	r3, [pc, #412]	; (800c028 <tcp_receive+0xdd0>)
 800be8a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	7d1b      	ldrb	r3, [r3, #20]
 800be90:	2b04      	cmp	r3, #4
 800be92:	d102      	bne.n	800be9a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2207      	movs	r2, #7
 800be98:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7fd fca1 	bl	80097ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	2b00      	cmp	r3, #0
 800beae:	d008      	beq.n	800bec2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bebc:	429a      	cmp	r2, r3
 800bebe:	f43f af47 	beq.w	800bd50 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	7e9b      	ldrb	r3, [r3, #26]
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00e      	beq.n	800beec <tcp_receive+0xc94>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7e9b      	ldrb	r3, [r3, #26]
 800bed2:	f023 0301 	bic.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	769a      	strb	r2, [r3, #26]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7e9b      	ldrb	r3, [r3, #26]
 800bee0:	f043 0302 	orr.w	r3, r3, #2
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800beea:	e181      	b.n	800c1f0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	7e9b      	ldrb	r3, [r3, #26]
 800bef0:	f043 0301 	orr.w	r3, r3, #1
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800befa:	e179      	b.n	800c1f0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 f8c5 	bl	800d08c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d106      	bne.n	800bf18 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bf0a:	4848      	ldr	r0, [pc, #288]	; (800c02c <tcp_receive+0xdd4>)
 800bf0c:	f7fd fc94 	bl	8009838 <tcp_seg_copy>
 800bf10:	4602      	mov	r2, r0
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800bf16:	e16b      	b.n	800c1f0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf22:	e150      	b.n	800c1c6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	4b41      	ldr	r3, [pc, #260]	; (800c030 <tcp_receive+0xdd8>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d11d      	bne.n	800bf6e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bf32:	4b3e      	ldr	r3, [pc, #248]	; (800c02c <tcp_receive+0xdd4>)
 800bf34:	891a      	ldrh	r2, [r3, #8]
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	891b      	ldrh	r3, [r3, #8]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	f240 8148 	bls.w	800c1d0 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800bf40:	483a      	ldr	r0, [pc, #232]	; (800c02c <tcp_receive+0xdd4>)
 800bf42:	f7fd fc79 	bl	8009838 <tcp_seg_copy>
 800bf46:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 8142 	beq.w	800c1d4 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <tcp_receive+0xd06>
                    prev->next = cseg;
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	e002      	b.n	800bf64 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bf64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f7ff f900 	bl	800b16c <tcp_oos_insert_segment>
                }
                break;
 800bf6c:	e132      	b.n	800c1d4 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d117      	bne.n	800bfa4 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bf74:	4b2e      	ldr	r3, [pc, #184]	; (800c030 <tcp_receive+0xdd8>)
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	da57      	bge.n	800c034 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800bf84:	4829      	ldr	r0, [pc, #164]	; (800c02c <tcp_receive+0xdd4>)
 800bf86:	f7fd fc57 	bl	8009838 <tcp_seg_copy>
 800bf8a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 8122 	beq.w	800c1d8 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800bf9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7ff f8e5 	bl	800b16c <tcp_oos_insert_segment>
                  }
                  break;
 800bfa2:	e119      	b.n	800c1d8 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800bfa4:	4b22      	ldr	r3, [pc, #136]	; (800c030 <tcp_receive+0xdd8>)
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	db3e      	blt.n	800c034 <tcp_receive+0xddc>
 800bfb6:	4b1e      	ldr	r3, [pc, #120]	; (800c030 <tcp_receive+0xdd8>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dc35      	bgt.n	800c034 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800bfc8:	4818      	ldr	r0, [pc, #96]	; (800c02c <tcp_receive+0xdd4>)
 800bfca:	f7fd fc35 	bl	8009838 <tcp_seg_copy>
 800bfce:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 8102 	beq.w	800c1dc <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe0:	8912      	ldrh	r2, [r2, #8]
 800bfe2:	441a      	add	r2, r3
 800bfe4:	4b12      	ldr	r3, [pc, #72]	; (800c030 <tcp_receive+0xdd8>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	dd12      	ble.n	800c014 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bfee:	4b10      	ldr	r3, [pc, #64]	; (800c030 <tcp_receive+0xdd8>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	b29a      	uxth	r2, r3
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	685a      	ldr	r2, [r3, #4]
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	891b      	ldrh	r3, [r3, #8]
 800c00c:	4619      	mov	r1, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	f7fb ff90 	bl	8007f34 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff f8a5 	bl	800b16c <tcp_oos_insert_segment>
                  }
                  break;
 800c022:	e0db      	b.n	800c1dc <tcp_receive+0xf84>
 800c024:	20000750 	.word	0x20000750
 800c028:	2000074d 	.word	0x2000074d
 800c02c:	20000720 	.word	0x20000720
 800c030:	20000740 	.word	0x20000740
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f040 80bf 	bne.w	800c1bc <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c03e:	4b7c      	ldr	r3, [pc, #496]	; (800c230 <tcp_receive+0xfd8>)
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f340 80b6 	ble.w	800c1bc <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	899b      	ldrh	r3, [r3, #12]
 800c056:	b29b      	uxth	r3, r3
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fa ff49 	bl	8006ef0 <lwip_htons>
 800c05e:	4603      	mov	r3, r0
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	f040 80bb 	bne.w	800c1e0 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c06a:	4872      	ldr	r0, [pc, #456]	; (800c234 <tcp_receive+0xfdc>)
 800c06c:	f7fd fbe4 	bl	8009838 <tcp_seg_copy>
 800c070:	4602      	mov	r2, r0
 800c072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c074:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 80b2 	beq.w	800c1e4 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c088:	8912      	ldrh	r2, [r2, #8]
 800c08a:	441a      	add	r2, r3
 800c08c:	4b68      	ldr	r3, [pc, #416]	; (800c230 <tcp_receive+0xfd8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd12      	ble.n	800c0bc <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c096:	4b66      	ldr	r3, [pc, #408]	; (800c230 <tcp_receive+0xfd8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	891b      	ldrh	r3, [r3, #8]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	f7fb ff3c 	bl	8007f34 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c0bc:	4b5e      	ldr	r3, [pc, #376]	; (800c238 <tcp_receive+0xfe0>)
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	4b5b      	ldr	r3, [pc, #364]	; (800c230 <tcp_receive+0xfd8>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	441a      	add	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0d0:	440b      	add	r3, r1
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f340 8085 	ble.w	800c1e4 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	899b      	ldrh	r3, [r3, #12]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fa ff03 	bl	8006ef0 <lwip_htons>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01e      	beq.n	800c132 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	899b      	ldrh	r3, [r3, #12]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c102:	b29c      	uxth	r4, r3
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	899b      	ldrh	r3, [r3, #12]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fa feee 	bl	8006ef0 <lwip_htons>
 800c114:	4603      	mov	r3, r0
 800c116:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fa fee7 	bl	8006ef0 <lwip_htons>
 800c122:	4603      	mov	r3, r0
 800c124:	461a      	mov	r2, r3
 800c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	4322      	orrs	r2, r4
 800c12e:	b292      	uxth	r2, r2
 800c130:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c136:	b29a      	uxth	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c13c:	4413      	add	r3, r2
 800c13e:	b299      	uxth	r1, r3
 800c140:	4b3b      	ldr	r3, [pc, #236]	; (800c230 <tcp_receive+0xfd8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	b29a      	uxth	r2, r3
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	1a8a      	subs	r2, r1, r2
 800c14c:	b292      	uxth	r2, r2
 800c14e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	891b      	ldrh	r3, [r3, #8]
 800c15c:	4619      	mov	r1, r3
 800c15e:	4610      	mov	r0, r2
 800c160:	f7fb fee8 	bl	8007f34 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	891c      	ldrh	r4, [r3, #8]
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	899b      	ldrh	r3, [r3, #12]
 800c172:	b29b      	uxth	r3, r3
 800c174:	4618      	mov	r0, r3
 800c176:	f7fa febb 	bl	8006ef0 <lwip_htons>
 800c17a:	4603      	mov	r3, r0
 800c17c:	f003 0303 	and.w	r3, r3, #3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <tcp_receive+0xf30>
 800c184:	2301      	movs	r3, #1
 800c186:	e000      	b.n	800c18a <tcp_receive+0xf32>
 800c188:	2300      	movs	r3, #0
 800c18a:	4423      	add	r3, r4
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	4b2a      	ldr	r3, [pc, #168]	; (800c238 <tcp_receive+0xfe0>)
 800c190:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c192:	4b29      	ldr	r3, [pc, #164]	; (800c238 <tcp_receive+0xfe0>)
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	4b25      	ldr	r3, [pc, #148]	; (800c230 <tcp_receive+0xfd8>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	441a      	add	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1a6:	440b      	add	r3, r1
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d01b      	beq.n	800c1e4 <tcp_receive+0xf8c>
 800c1ac:	4b23      	ldr	r3, [pc, #140]	; (800c23c <tcp_receive+0xfe4>)
 800c1ae:	f240 627b 	movw	r2, #1659	; 0x67b
 800c1b2:	4923      	ldr	r1, [pc, #140]	; (800c240 <tcp_receive+0xfe8>)
 800c1b4:	4823      	ldr	r0, [pc, #140]	; (800c244 <tcp_receive+0xfec>)
 800c1b6:	f008 fdd1 	bl	8014d5c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c1ba:	e013      	b.n	800c1e4 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f47f aeab 	bne.w	800bf24 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800c1ce:	e00f      	b.n	800c1f0 <tcp_receive+0xf98>
                break;
 800c1d0:	bf00      	nop
 800c1d2:	e00d      	b.n	800c1f0 <tcp_receive+0xf98>
                break;
 800c1d4:	bf00      	nop
 800c1d6:	e00b      	b.n	800c1f0 <tcp_receive+0xf98>
                  break;
 800c1d8:	bf00      	nop
 800c1da:	e009      	b.n	800c1f0 <tcp_receive+0xf98>
                  break;
 800c1dc:	bf00      	nop
 800c1de:	e007      	b.n	800c1f0 <tcp_receive+0xf98>
                  break;
 800c1e0:	bf00      	nop
 800c1e2:	e005      	b.n	800c1f0 <tcp_receive+0xf98>
                break;
 800c1e4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800c1e6:	e003      	b.n	800c1f0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 ff4f 	bl	800d08c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1ee:	e01a      	b.n	800c226 <tcp_receive+0xfce>
 800c1f0:	e019      	b.n	800c226 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c1f2:	4b0f      	ldr	r3, [pc, #60]	; (800c230 <tcp_receive+0xfd8>)
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	db0a      	blt.n	800c216 <tcp_receive+0xfbe>
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <tcp_receive+0xfd8>)
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c20c:	440b      	add	r3, r1
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	3301      	adds	r3, #1
 800c212:	2b00      	cmp	r3, #0
 800c214:	dd07      	ble.n	800c226 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7e9b      	ldrb	r3, [r3, #26]
 800c21a:	f043 0302 	orr.w	r3, r3, #2
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800c224:	e7ff      	b.n	800c226 <tcp_receive+0xfce>
 800c226:	bf00      	nop
 800c228:	3734      	adds	r7, #52	; 0x34
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000740 	.word	0x20000740
 800c234:	20000720 	.word	0x20000720
 800c238:	2000074a 	.word	0x2000074a
 800c23c:	080170f8 	.word	0x080170f8
 800c240:	080173c4 	.word	0x080173c4
 800c244:	0801713c 	.word	0x0801713c

0800c248 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c24e:	4b18      	ldr	r3, [pc, #96]	; (800c2b0 <tcp_getoptbyte+0x68>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d005      	beq.n	800c262 <tcp_getoptbyte+0x1a>
 800c256:	4b17      	ldr	r3, [pc, #92]	; (800c2b4 <tcp_getoptbyte+0x6c>)
 800c258:	881a      	ldrh	r2, [r3, #0]
 800c25a:	4b17      	ldr	r3, [pc, #92]	; (800c2b8 <tcp_getoptbyte+0x70>)
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d20e      	bcs.n	800c280 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c262:	4b16      	ldr	r3, [pc, #88]	; (800c2bc <tcp_getoptbyte+0x74>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3314      	adds	r3, #20
 800c268:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800c26a:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <tcp_getoptbyte+0x6c>)
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	b291      	uxth	r1, r2
 800c272:	4a10      	ldr	r2, [pc, #64]	; (800c2b4 <tcp_getoptbyte+0x6c>)
 800c274:	8011      	strh	r1, [r2, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	4413      	add	r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	e010      	b.n	800c2a2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c280:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <tcp_getoptbyte+0x6c>)
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	b291      	uxth	r1, r2
 800c288:	4a0a      	ldr	r2, [pc, #40]	; (800c2b4 <tcp_getoptbyte+0x6c>)
 800c28a:	8011      	strh	r1, [r2, #0]
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <tcp_getoptbyte+0x70>)
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800c298:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <tcp_getoptbyte+0x68>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	4413      	add	r3, r2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	20000738 	.word	0x20000738
 800c2b4:	2000073c 	.word	0x2000073c
 800c2b8:	20000736 	.word	0x20000736
 800c2bc:	20000730 	.word	0x20000730

0800c2c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c2c8:	4b2d      	ldr	r3, [pc, #180]	; (800c380 <tcp_parseopt+0xc0>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d053      	beq.n	800c378 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c2d0:	4b2c      	ldr	r3, [pc, #176]	; (800c384 <tcp_parseopt+0xc4>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	801a      	strh	r2, [r3, #0]
 800c2d6:	e043      	b.n	800c360 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800c2d8:	f7ff ffb6 	bl	800c248 <tcp_getoptbyte>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d03c      	beq.n	800c360 <tcp_parseopt+0xa0>
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d002      	beq.n	800c2f0 <tcp_parseopt+0x30>
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d03f      	beq.n	800c36e <tcp_parseopt+0xae>
 800c2ee:	e026      	b.n	800c33e <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c2f0:	f7ff ffaa 	bl	800c248 <tcp_getoptbyte>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b04      	cmp	r3, #4
 800c2f8:	d13b      	bne.n	800c372 <tcp_parseopt+0xb2>
 800c2fa:	4b22      	ldr	r3, [pc, #136]	; (800c384 <tcp_parseopt+0xc4>)
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	3302      	adds	r3, #2
 800c300:	4a1f      	ldr	r2, [pc, #124]	; (800c380 <tcp_parseopt+0xc0>)
 800c302:	8812      	ldrh	r2, [r2, #0]
 800c304:	4293      	cmp	r3, r2
 800c306:	dc34      	bgt.n	800c372 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c308:	f7ff ff9e 	bl	800c248 <tcp_getoptbyte>
 800c30c:	4603      	mov	r3, r0
 800c30e:	b29b      	uxth	r3, r3
 800c310:	021b      	lsls	r3, r3, #8
 800c312:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800c314:	f7ff ff98 	bl	800c248 <tcp_getoptbyte>
 800c318:	4603      	mov	r3, r0
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	89bb      	ldrh	r3, [r7, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c322:	89bb      	ldrh	r3, [r7, #12]
 800c324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c328:	d804      	bhi.n	800c334 <tcp_parseopt+0x74>
 800c32a:	89bb      	ldrh	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <tcp_parseopt+0x74>
 800c330:	89ba      	ldrh	r2, [r7, #12]
 800c332:	e001      	b.n	800c338 <tcp_parseopt+0x78>
 800c334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800c33c:	e010      	b.n	800c360 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800c33e:	f7ff ff83 	bl	800c248 <tcp_getoptbyte>
 800c342:	4603      	mov	r3, r0
 800c344:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800c346:	7afb      	ldrb	r3, [r7, #11]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d914      	bls.n	800c376 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	b29a      	uxth	r2, r3
 800c350:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <tcp_parseopt+0xc4>)
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	4413      	add	r3, r2
 800c356:	b29b      	uxth	r3, r3
 800c358:	3b02      	subs	r3, #2
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	4b09      	ldr	r3, [pc, #36]	; (800c384 <tcp_parseopt+0xc4>)
 800c35e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c360:	4b08      	ldr	r3, [pc, #32]	; (800c384 <tcp_parseopt+0xc4>)
 800c362:	881a      	ldrh	r2, [r3, #0]
 800c364:	4b06      	ldr	r3, [pc, #24]	; (800c380 <tcp_parseopt+0xc0>)
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d3b5      	bcc.n	800c2d8 <tcp_parseopt+0x18>
 800c36c:	e004      	b.n	800c378 <tcp_parseopt+0xb8>
        return;
 800c36e:	bf00      	nop
 800c370:	e002      	b.n	800c378 <tcp_parseopt+0xb8>
          return;
 800c372:	bf00      	nop
 800c374:	e000      	b.n	800c378 <tcp_parseopt+0xb8>
          return;
 800c376:	bf00      	nop
      }
    }
  }
}
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	20000734 	.word	0x20000734
 800c384:	2000073c 	.word	0x2000073c

0800c388 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c388:	b480      	push	{r7}
 800c38a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c38c:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <tcp_trigger_input_pcb_close+0x1c>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	f043 0310 	orr.w	r3, r3, #16
 800c394:	b2da      	uxtb	r2, r3
 800c396:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <tcp_trigger_input_pcb_close+0x1c>)
 800c398:	701a      	strb	r2, [r3, #0]
}
 800c39a:	bf00      	nop
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	2000074d 	.word	0x2000074d

0800c3a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	607b      	str	r3, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	817b      	strh	r3, [r7, #10]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c3ba:	897a      	ldrh	r2, [r7, #10]
 800c3bc:	893b      	ldrh	r3, [r7, #8]
 800c3be:	4413      	add	r3, r2
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3314      	adds	r3, #20
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	f7fb fbb4 	bl	8007b38 <pbuf_alloc>
 800c3d0:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d057      	beq.n	800c488 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	895b      	ldrh	r3, [r3, #10]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	897b      	ldrh	r3, [r7, #10]
 800c3e0:	3314      	adds	r3, #20
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	da05      	bge.n	800c3f2 <tcp_output_alloc_header+0x4a>
 800c3e6:	4b2b      	ldr	r3, [pc, #172]	; (800c494 <tcp_output_alloc_header+0xec>)
 800c3e8:	2273      	movs	r2, #115	; 0x73
 800c3ea:	492b      	ldr	r1, [pc, #172]	; (800c498 <tcp_output_alloc_header+0xf0>)
 800c3ec:	482b      	ldr	r0, [pc, #172]	; (800c49c <tcp_output_alloc_header+0xf4>)
 800c3ee:	f008 fcb5 	bl	8014d5c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	8adb      	ldrh	r3, [r3, #22]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fa fd77 	bl	8006ef0 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	8b1b      	ldrh	r3, [r3, #24]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fa fd6e 	bl	8006ef0 <lwip_htons>
 800c414:	4603      	mov	r3, r0
 800c416:	461a      	mov	r2, r3
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c426:	4618      	mov	r0, r3
 800c428:	f7fa fd70 	bl	8006f0c <lwip_htonl>
 800c42c:	4602      	mov	r2, r0
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800c432:	897b      	ldrh	r3, [r7, #10]
 800c434:	089b      	lsrs	r3, r3, #2
 800c436:	b29b      	uxth	r3, r3
 800c438:	3305      	adds	r3, #5
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	031b      	lsls	r3, r3, #12
 800c43e:	b29b      	uxth	r3, r3
 800c440:	f043 0310 	orr.w	r3, r3, #16
 800c444:	b29b      	uxth	r3, r3
 800c446:	4618      	mov	r0, r3
 800c448:	f7fa fd52 	bl	8006ef0 <lwip_htons>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fa fd49 	bl	8006ef0 <lwip_htons>
 800c45e:	4603      	mov	r3, r0
 800c460:	461a      	mov	r2, r3
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2200      	movs	r2, #0
 800c46a:	741a      	strb	r2, [r3, #16]
 800c46c:	2200      	movs	r2, #0
 800c46e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	2200      	movs	r2, #0
 800c474:	749a      	strb	r2, [r3, #18]
 800c476:	2200      	movs	r2, #0
 800c478:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c482:	441a      	add	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c488:	697b      	ldr	r3, [r7, #20]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	08017480 	.word	0x08017480
 800c498:	080174b4 	.word	0x080174b4
 800c49c:	080174e4 	.word	0x080174e4

0800c4a0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c4a0:	b590      	push	{r4, r7, lr}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d02d      	beq.n	800c50c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4b4:	60fb      	str	r3, [r7, #12]
 800c4b6:	e002      	b.n	800c4be <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1f8      	bne.n	800c4b8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	899b      	ldrh	r3, [r3, #12]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fa fd0e 	bl	8006ef0 <lwip_htons>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d116      	bne.n	800c50c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	899b      	ldrh	r3, [r3, #12]
 800c4e4:	b29c      	uxth	r4, r3
 800c4e6:	2001      	movs	r0, #1
 800c4e8:	f7fa fd02 	bl	8006ef0 <lwip_htons>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	4322      	orrs	r2, r4
 800c4f6:	b292      	uxth	r2, r2
 800c4f8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7e9b      	ldrb	r3, [r3, #26]
 800c4fe:	f043 0320 	orr.w	r3, r3, #32
 800c502:	b2da      	uxtb	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	e004      	b.n	800c516 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c50c:	2101      	movs	r1, #1
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fcc0 	bl	800ce94 <tcp_enqueue_flags>
 800c514:	4603      	mov	r3, r0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd90      	pop	{r4, r7, pc}
	...

0800c520 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800c520:	b590      	push	{r4, r7, lr}
 800c522:	b087      	sub	sp, #28
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	4613      	mov	r3, r2
 800c52e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f003 0304 	and.w	r3, r3, #4
 800c53c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c53e:	2003      	movs	r0, #3
 800c540:	f7fb f8ee 	bl	8007720 <memp_malloc>
 800c544:	6138      	str	r0, [r7, #16]
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d104      	bne.n	800c556 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c54c:	68b8      	ldr	r0, [r7, #8]
 800c54e:	f7fb fe65 	bl	800821c <pbuf_free>
    return NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	e061      	b.n	800c61a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c55c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	891a      	ldrh	r2, [r3, #8]
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	b29b      	uxth	r3, r3
 800c572:	429a      	cmp	r2, r3
 800c574:	d205      	bcs.n	800c582 <tcp_create_segment+0x62>
 800c576:	4b2b      	ldr	r3, [pc, #172]	; (800c624 <tcp_create_segment+0x104>)
 800c578:	22ba      	movs	r2, #186	; 0xba
 800c57a:	492b      	ldr	r1, [pc, #172]	; (800c628 <tcp_create_segment+0x108>)
 800c57c:	482b      	ldr	r0, [pc, #172]	; (800c62c <tcp_create_segment+0x10c>)
 800c57e:	f008 fbed 	bl	8014d5c <iprintf>
  seg->len = p->tot_len - optlen;
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	891a      	ldrh	r2, [r3, #8]
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	b29b      	uxth	r3, r3
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800c592:	2114      	movs	r1, #20
 800c594:	68b8      	ldr	r0, [r7, #8]
 800c596:	f7fb fe1d 	bl	80081d4 <pbuf_header>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c5a0:	6938      	ldr	r0, [r7, #16]
 800c5a2:	f7fd f922 	bl	80097ea <tcp_seg_free>
    return NULL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e037      	b.n	800c61a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	8ada      	ldrh	r2, [r3, #22]
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	68dc      	ldr	r4, [r3, #12]
 800c5bc:	4610      	mov	r0, r2
 800c5be:	f7fa fc97 	bl	8006ef0 <lwip_htons>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	8b1a      	ldrh	r2, [r3, #24]
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	68dc      	ldr	r4, [r3, #12]
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	f7fa fc8e 	bl	8006ef0 <lwip_htons>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	68dc      	ldr	r4, [r3, #12]
 800c5dc:	6838      	ldr	r0, [r7, #0]
 800c5de:	f7fa fc95 	bl	8006f0c <lwip_htonl>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
 800c5e8:	089b      	lsrs	r3, r3, #2
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	3305      	adds	r3, #5
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	031b      	lsls	r3, r3, #12
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	79fb      	ldrb	r3, [r7, #7]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	68dc      	ldr	r4, [r3, #12]
 800c602:	4610      	mov	r0, r2
 800c604:	f7fa fc74 	bl	8006ef0 <lwip_htons>
 800c608:	4603      	mov	r3, r0
 800c60a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	749a      	strb	r2, [r3, #18]
 800c614:	2200      	movs	r2, #0
 800c616:	74da      	strb	r2, [r3, #19]
  return seg;
 800c618:	693b      	ldr	r3, [r7, #16]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd90      	pop	{r4, r7, pc}
 800c622:	bf00      	nop
 800c624:	08017480 	.word	0x08017480
 800c628:	0801750c 	.word	0x0801750c
 800c62c:	080174e4 	.word	0x080174e4

0800c630 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	607b      	str	r3, [r7, #4]
 800c638:	4603      	mov	r3, r0
 800c63a:	73fb      	strb	r3, [r7, #15]
 800c63c:	460b      	mov	r3, r1
 800c63e:	81bb      	strh	r3, [r7, #12]
 800c640:	4613      	mov	r3, r2
 800c642:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c644:	89bb      	ldrh	r3, [r7, #12]
 800c646:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c648:	89ba      	ldrh	r2, [r7, #12]
 800c64a:	897b      	ldrh	r3, [r7, #10]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d221      	bcs.n	800c694 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c654:	f003 0302 	and.w	r3, r3, #2
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d111      	bne.n	800c680 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	7e9b      	ldrb	r3, [r3, #26]
 800c660:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c664:	2b00      	cmp	r3, #0
 800c666:	d115      	bne.n	800c694 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800c668:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d007      	beq.n	800c680 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800c674:	2b00      	cmp	r3, #0
 800c676:	d103      	bne.n	800c680 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d009      	beq.n	800c694 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c680:	89bb      	ldrh	r3, [r7, #12]
 800c682:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800c686:	f023 0203 	bic.w	r2, r3, #3
 800c68a:	897b      	ldrh	r3, [r7, #10]
 800c68c:	4293      	cmp	r3, r2
 800c68e:	bf28      	it	cs
 800c690:	4613      	movcs	r3, r2
 800c692:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c694:	8af9      	ldrh	r1, [r7, #22]
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2200      	movs	r2, #0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fb fa4c 	bl	8007b38 <pbuf_alloc>
 800c6a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e019      	b.n	800c6e0 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d006      	beq.n	800c6c2 <tcp_pbuf_prealloc+0x92>
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	; (800c6e8 <tcp_pbuf_prealloc+0xb8>)
 800c6b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800c6ba:	490c      	ldr	r1, [pc, #48]	; (800c6ec <tcp_pbuf_prealloc+0xbc>)
 800c6bc:	480c      	ldr	r0, [pc, #48]	; (800c6f0 <tcp_pbuf_prealloc+0xc0>)
 800c6be:	f008 fb4d 	bl	8014d5c <iprintf>
  *oversize = p->len - length;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	895a      	ldrh	r2, [r3, #10]
 800c6c6:	89bb      	ldrh	r3, [r7, #12]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	89ba      	ldrh	r2, [r7, #12]
 800c6d4:	811a      	strh	r2, [r3, #8]
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	891a      	ldrh	r2, [r3, #8]
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	815a      	strh	r2, [r3, #10]
  return p;
 800c6de:	693b      	ldr	r3, [r7, #16]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3718      	adds	r7, #24
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	08017480 	.word	0x08017480
 800c6ec:	08017524 	.word	0x08017524
 800c6f0:	080174e4 	.word	0x080174e4

0800c6f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7d1b      	ldrb	r3, [r3, #20]
 800c704:	2b04      	cmp	r3, #4
 800c706:	d00e      	beq.n	800c726 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c70c:	2b07      	cmp	r3, #7
 800c70e:	d00a      	beq.n	800c726 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c714:	2b02      	cmp	r3, #2
 800c716:	d006      	beq.n	800c726 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d002      	beq.n	800c726 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c720:	f06f 030a 	mvn.w	r3, #10
 800c724:	e04f      	b.n	800c7c6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800c726:	887b      	ldrh	r3, [r7, #2]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <tcp_write_checks+0x3c>
    return ERR_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	e04a      	b.n	800c7c6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c736:	887a      	ldrh	r2, [r7, #2]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d909      	bls.n	800c750 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	7e9b      	ldrb	r3, [r3, #26]
 800c740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c744:	b2da      	uxtb	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800c74a:	f04f 33ff 	mov.w	r3, #4294967295
 800c74e:	e03a      	b.n	800c7c6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c756:	2b13      	cmp	r3, #19
 800c758:	d806      	bhi.n	800c768 <tcp_write_checks+0x74>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c760:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c764:	4293      	cmp	r3, r2
 800c766:	d909      	bls.n	800c77c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7e9b      	ldrb	r3, [r3, #26]
 800c76c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c770:	b2da      	uxtb	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800c776:	f04f 33ff 	mov.w	r3, #4294967295
 800c77a:	e024      	b.n	800c7c6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00f      	beq.n	800c7a6 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d11a      	bne.n	800c7c4 <tcp_write_checks+0xd0>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c792:	2b00      	cmp	r3, #0
 800c794:	d116      	bne.n	800c7c4 <tcp_write_checks+0xd0>
 800c796:	4b0e      	ldr	r3, [pc, #56]	; (800c7d0 <tcp_write_checks+0xdc>)
 800c798:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800c79c:	490d      	ldr	r1, [pc, #52]	; (800c7d4 <tcp_write_checks+0xe0>)
 800c79e:	480e      	ldr	r0, [pc, #56]	; (800c7d8 <tcp_write_checks+0xe4>)
 800c7a0:	f008 fadc 	bl	8014d5c <iprintf>
 800c7a4:	e00e      	b.n	800c7c4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d103      	bne.n	800c7b6 <tcp_write_checks+0xc2>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d006      	beq.n	800c7c4 <tcp_write_checks+0xd0>
 800c7b6:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <tcp_write_checks+0xdc>)
 800c7b8:	f240 1259 	movw	r2, #345	; 0x159
 800c7bc:	4907      	ldr	r1, [pc, #28]	; (800c7dc <tcp_write_checks+0xe8>)
 800c7be:	4806      	ldr	r0, [pc, #24]	; (800c7d8 <tcp_write_checks+0xe4>)
 800c7c0:	f008 facc 	bl	8014d5c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	08017480 	.word	0x08017480
 800c7d4:	08017538 	.word	0x08017538
 800c7d8:	080174e4 	.word	0x080174e4
 800c7dc:	08017574 	.word	0x08017574

0800c7e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c7e0:	b590      	push	{r4, r7, lr}
 800c7e2:	b09b      	sub	sp, #108	; 0x6c
 800c7e4:	af04      	add	r7, sp, #16
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	80fb      	strh	r3, [r7, #6]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	653b      	str	r3, [r7, #80]	; 0x50
 800c7fe:	2300      	movs	r3, #0
 800c800:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c802:	2300      	movs	r3, #0
 800c804:	64bb      	str	r3, [r7, #72]	; 0x48
 800c806:	2300      	movs	r3, #0
 800c808:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c80a:	2300      	movs	r3, #0
 800c80c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c82e:	085b      	lsrs	r3, r3, #1
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c836:	4293      	cmp	r3, r2
 800c838:	bf28      	it	cs
 800c83a:	4613      	movcs	r3, r2
 800c83c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d102      	bne.n	800c84a <tcp_write+0x6a>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c848:	e000      	b.n	800c84c <tcp_write+0x6c>
 800c84a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c84c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d109      	bne.n	800c868 <tcp_write+0x88>
 800c854:	4b92      	ldr	r3, [pc, #584]	; (800caa0 <tcp_write+0x2c0>)
 800c856:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800c85a:	4992      	ldr	r1, [pc, #584]	; (800caa4 <tcp_write+0x2c4>)
 800c85c:	4892      	ldr	r0, [pc, #584]	; (800caa8 <tcp_write+0x2c8>)
 800c85e:	f008 fa7d 	bl	8014d5c <iprintf>
 800c862:	f06f 030f 	mvn.w	r3, #15
 800c866:	e30a      	b.n	800ce7e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c868:	88fb      	ldrh	r3, [r7, #6]
 800c86a:	4619      	mov	r1, r3
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f7ff ff41 	bl	800c6f4 <tcp_write_checks>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c878:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <tcp_write+0xa6>
    return err;
 800c880:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c884:	e2fb      	b.n	800ce7e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c88c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 80f5 	beq.w	800ca84 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c89e:	653b      	str	r3, [r7, #80]	; 0x50
 800c8a0:	e002      	b.n	800c8a8 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800c8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f8      	bne.n	800c8a2 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800c8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b2:	7a9b      	ldrb	r3, [r3, #10]
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c8be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c2:	891b      	ldrh	r3, [r3, #8]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	8c3b      	ldrh	r3, [r7, #32]
 800c8c8:	440b      	add	r3, r1
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	da06      	bge.n	800c8dc <tcp_write+0xfc>
 800c8ce:	4b74      	ldr	r3, [pc, #464]	; (800caa0 <tcp_write+0x2c0>)
 800c8d0:	f240 12c7 	movw	r2, #455	; 0x1c7
 800c8d4:	4975      	ldr	r1, [pc, #468]	; (800caac <tcp_write+0x2cc>)
 800c8d6:	4874      	ldr	r0, [pc, #464]	; (800caa8 <tcp_write+0x2c8>)
 800c8d8:	f008 fa40 	bl	8014d5c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8de:	891a      	ldrh	r2, [r3, #8]
 800c8e0:	8c3b      	ldrh	r3, [r7, #32]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c8f2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c8f4:	8a7b      	ldrh	r3, [r7, #18]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d027      	beq.n	800c94a <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c8fa:	8a7b      	ldrh	r3, [r7, #18]
 800c8fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d206      	bcs.n	800c910 <tcp_write+0x130>
 800c902:	4b67      	ldr	r3, [pc, #412]	; (800caa0 <tcp_write+0x2c0>)
 800c904:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c908:	4969      	ldr	r1, [pc, #420]	; (800cab0 <tcp_write+0x2d0>)
 800c90a:	4867      	ldr	r0, [pc, #412]	; (800caa8 <tcp_write+0x2c8>)
 800c90c:	f008 fa26 	bl	8014d5c <iprintf>
      seg = last_unsent;
 800c910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c912:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c914:	8a7b      	ldrh	r3, [r7, #18]
 800c916:	88fa      	ldrh	r2, [r7, #6]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d901      	bls.n	800c920 <tcp_write+0x140>
 800c91c:	8a7b      	ldrh	r3, [r7, #18]
 800c91e:	e000      	b.n	800c922 <tcp_write+0x142>
 800c920:	88fb      	ldrh	r3, [r7, #6]
 800c922:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c924:	4293      	cmp	r3, r2
 800c926:	bfa8      	it	ge
 800c928:	4613      	movge	r3, r2
 800c92a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c92c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c930:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c932:	4413      	add	r3, r2
 800c934:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c938:	8a7a      	ldrh	r2, [r7, #18]
 800c93a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c942:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c944:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c94a:	8a7b      	ldrh	r3, [r7, #18]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <tcp_write+0x188>
 800c950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c954:	88fb      	ldrh	r3, [r7, #6]
 800c956:	429a      	cmp	r2, r3
 800c958:	d006      	beq.n	800c968 <tcp_write+0x188>
 800c95a:	4b51      	ldr	r3, [pc, #324]	; (800caa0 <tcp_write+0x2c0>)
 800c95c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c960:	4954      	ldr	r1, [pc, #336]	; (800cab4 <tcp_write+0x2d4>)
 800c962:	4851      	ldr	r0, [pc, #324]	; (800caa8 <tcp_write+0x2c8>)
 800c964:	f008 f9fa 	bl	8014d5c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c968:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c96c:	88fb      	ldrh	r3, [r7, #6]
 800c96e:	429a      	cmp	r2, r3
 800c970:	f080 8168 	bcs.w	800cc44 <tcp_write+0x464>
 800c974:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 8164 	beq.w	800cc44 <tcp_write+0x464>
 800c97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c97e:	891b      	ldrh	r3, [r3, #8]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 815f 	beq.w	800cc44 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c986:	88fa      	ldrh	r2, [r7, #6]
 800c988:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c98c:	1ad2      	subs	r2, r2, r3
 800c98e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c990:	4293      	cmp	r3, r2
 800c992:	bfa8      	it	ge
 800c994:	4613      	movge	r3, r2
 800c996:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c99a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c99c:	797b      	ldrb	r3, [r7, #5]
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d027      	beq.n	800c9f6 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c9a6:	f107 0012 	add.w	r0, r7, #18
 800c9aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c9ac:	8bf9      	ldrh	r1, [r7, #30]
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	9302      	str	r3, [sp, #8]
 800c9b2:	797b      	ldrb	r3, [r7, #5]
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2004      	movs	r0, #4
 800c9be:	f7ff fe37 	bl	800c630 <tcp_pbuf_prealloc>
 800c9c2:	6578      	str	r0, [r7, #84]	; 0x54
 800c9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 8227 	beq.w	800ce1a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ce:	6858      	ldr	r0, [r3, #4]
 800c9d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	8bfa      	ldrh	r2, [r7, #30]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	f008 f9ab 	bl	8014d36 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c9e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9e2:	f7fb fcaf 	bl	8008344 <pbuf_clen>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c9f4:	e03f      	b.n	800ca76 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c9fc:	e002      	b.n	800ca04 <tcp_write+0x224>
 800c9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	637b      	str	r3, [r7, #52]	; 0x34
 800ca04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1f8      	bne.n	800c9fe <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	7b1b      	ldrb	r3, [r3, #12]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d115      	bne.n	800ca40 <tcp_write+0x260>
 800ca14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca1a:	8952      	ldrh	r2, [r2, #10]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d10d      	bne.n	800ca40 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ca24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d006      	beq.n	800ca3a <tcp_write+0x25a>
 800ca2c:	4b1c      	ldr	r3, [pc, #112]	; (800caa0 <tcp_write+0x2c0>)
 800ca2e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ca32:	4921      	ldr	r1, [pc, #132]	; (800cab8 <tcp_write+0x2d8>)
 800ca34:	481c      	ldr	r0, [pc, #112]	; (800caa8 <tcp_write+0x2c8>)
 800ca36:	f008 f991 	bl	8014d5c <iprintf>
          extendlen = seglen;
 800ca3a:	8bfb      	ldrh	r3, [r7, #30]
 800ca3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ca3e:	e01a      	b.n	800ca76 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ca40:	8bfb      	ldrh	r3, [r7, #30]
 800ca42:	2201      	movs	r2, #1
 800ca44:	4619      	mov	r1, r3
 800ca46:	2004      	movs	r0, #4
 800ca48:	f7fb f876 	bl	8007b38 <pbuf_alloc>
 800ca4c:	6578      	str	r0, [r7, #84]	; 0x54
 800ca4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 81e4 	beq.w	800ce1e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800ca56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	441a      	add	r2, r3
 800ca5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca60:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ca62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca64:	f7fb fc6e 	bl	8008344 <pbuf_clen>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca70:	4413      	add	r3, r2
 800ca72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ca76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca7a:	8bfb      	ldrh	r3, [r7, #30]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ca82:	e0df      	b.n	800cc44 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 80da 	beq.w	800cc44 <tcp_write+0x464>
 800ca90:	4b03      	ldr	r3, [pc, #12]	; (800caa0 <tcp_write+0x2c0>)
 800ca92:	f240 2225 	movw	r2, #549	; 0x225
 800ca96:	4909      	ldr	r1, [pc, #36]	; (800cabc <tcp_write+0x2dc>)
 800ca98:	4803      	ldr	r0, [pc, #12]	; (800caa8 <tcp_write+0x2c8>)
 800ca9a:	f008 f95f 	bl	8014d5c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ca9e:	e0d1      	b.n	800cc44 <tcp_write+0x464>
 800caa0:	08017480 	.word	0x08017480
 800caa4:	080175a8 	.word	0x080175a8
 800caa8:	080174e4 	.word	0x080174e4
 800caac:	080175dc 	.word	0x080175dc
 800cab0:	080175f4 	.word	0x080175f4
 800cab4:	08017614 	.word	0x08017614
 800cab8:	08017634 	.word	0x08017634
 800cabc:	08017660 	.word	0x08017660
    struct pbuf *p;
    u16_t left = len - pos;
 800cac0:	88fa      	ldrh	r2, [r7, #6]
 800cac2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800caca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cace:	b29b      	uxth	r3, r3
 800cad0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cad6:	8b7a      	ldrh	r2, [r7, #26]
 800cad8:	8bbb      	ldrh	r3, [r7, #28]
 800cada:	4293      	cmp	r3, r2
 800cadc:	bf28      	it	cs
 800cade:	4613      	movcs	r3, r2
 800cae0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cae2:	797b      	ldrb	r3, [r7, #5]
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d036      	beq.n	800cb5a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800caec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	8b3b      	ldrh	r3, [r7, #24]
 800caf4:	4413      	add	r3, r2
 800caf6:	b299      	uxth	r1, r3
 800caf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	bf0c      	ite	eq
 800cafe:	2301      	moveq	r3, #1
 800cb00:	2300      	movne	r3, #0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f107 0012 	add.w	r0, r7, #18
 800cb08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb0a:	9302      	str	r3, [sp, #8]
 800cb0c:	797b      	ldrb	r3, [r7, #5]
 800cb0e:	9301      	str	r3, [sp, #4]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	4603      	mov	r3, r0
 800cb16:	2000      	movs	r0, #0
 800cb18:	f7ff fd8a 	bl	800c630 <tcp_pbuf_prealloc>
 800cb1c:	6338      	str	r0, [r7, #48]	; 0x30
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 817e 	beq.w	800ce22 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb28:	895b      	ldrh	r3, [r3, #10]
 800cb2a:	8b3a      	ldrh	r2, [r7, #24]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d906      	bls.n	800cb3e <tcp_write+0x35e>
 800cb30:	4b8f      	ldr	r3, [pc, #572]	; (800cd70 <tcp_write+0x590>)
 800cb32:	f240 2241 	movw	r2, #577	; 0x241
 800cb36:	498f      	ldr	r1, [pc, #572]	; (800cd74 <tcp_write+0x594>)
 800cb38:	488f      	ldr	r0, [pc, #572]	; (800cd78 <tcp_write+0x598>)
 800cb3a:	f008 f90f 	bl	8014d5c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb46:	18d0      	adds	r0, r2, r3
 800cb48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	4413      	add	r3, r2
 800cb50:	8b3a      	ldrh	r2, [r7, #24]
 800cb52:	4619      	mov	r1, r3
 800cb54:	f008 f8ef 	bl	8014d36 <memcpy>
 800cb58:	e02e      	b.n	800cbb8 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cb5a:	8a7b      	ldrh	r3, [r7, #18]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d006      	beq.n	800cb6e <tcp_write+0x38e>
 800cb60:	4b83      	ldr	r3, [pc, #524]	; (800cd70 <tcp_write+0x590>)
 800cb62:	f240 224b 	movw	r2, #587	; 0x24b
 800cb66:	4985      	ldr	r1, [pc, #532]	; (800cd7c <tcp_write+0x59c>)
 800cb68:	4883      	ldr	r0, [pc, #524]	; (800cd78 <tcp_write+0x598>)
 800cb6a:	f008 f8f7 	bl	8014d5c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cb6e:	8b3b      	ldrh	r3, [r7, #24]
 800cb70:	2201      	movs	r2, #1
 800cb72:	4619      	mov	r1, r3
 800cb74:	2000      	movs	r0, #0
 800cb76:	f7fa ffdf 	bl	8007b38 <pbuf_alloc>
 800cb7a:	6178      	str	r0, [r7, #20]
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 8151 	beq.w	800ce26 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800cb84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	441a      	add	r2, r3
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cb90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	2200      	movs	r2, #0
 800cb98:	4619      	mov	r1, r3
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	f7fa ffcc 	bl	8007b38 <pbuf_alloc>
 800cba0:	6338      	str	r0, [r7, #48]	; 0x30
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d103      	bne.n	800cbb0 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cba8:	6978      	ldr	r0, [r7, #20]
 800cbaa:	f7fb fb37 	bl	800821c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cbae:	e13d      	b.n	800ce2c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cbb0:	6979      	ldr	r1, [r7, #20]
 800cbb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbb4:	f7fb fc00 	bl	80083b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cbb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbba:	f7fb fbc3 	bl	8008344 <pbuf_clen>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800cbcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cbd0:	2b14      	cmp	r3, #20
 800cbd2:	d805      	bhi.n	800cbe0 <tcp_write+0x400>
 800cbd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cbd8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d903      	bls.n	800cbe8 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cbe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbe2:	f7fb fb1b 	bl	800821c <pbuf_free>
      goto memerr;
 800cbe6:	e121      	b.n	800ce2c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cbec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbf0:	441a      	add	r2, r3
 800cbf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f7ff fc8e 	bl	800c520 <tcp_create_segment>
 800cc04:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 810e 	beq.w	800ce2a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cc0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <tcp_write+0x43a>
      queue = seg;
 800cc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc16:	647b      	str	r3, [r7, #68]	; 0x44
 800cc18:	e00c      	b.n	800cc34 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cc1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <tcp_write+0x44e>
 800cc20:	4b53      	ldr	r3, [pc, #332]	; (800cd70 <tcp_write+0x590>)
 800cc22:	f240 2285 	movw	r2, #645	; 0x285
 800cc26:	4956      	ldr	r1, [pc, #344]	; (800cd80 <tcp_write+0x5a0>)
 800cc28:	4853      	ldr	r0, [pc, #332]	; (800cd78 <tcp_write+0x598>)
 800cc2a:	f008 f897 	bl	8014d5c <iprintf>
      prev_seg->next = seg;
 800cc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc32:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800cc34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc36:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800cc38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc3c:	8b3b      	ldrh	r3, [r7, #24]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800cc44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc48:	88fb      	ldrh	r3, [r7, #6]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	f4ff af38 	bcc.w	800cac0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800cc50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d02c      	beq.n	800ccb0 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800cc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc5c:	e01e      	b.n	800cc9c <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	891a      	ldrh	r2, [r3, #8]
 800cc62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc64:	4413      	add	r3, r2
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d110      	bne.n	800cc96 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7a:	8952      	ldrh	r2, [r2, #10]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cc80:	68b9      	ldr	r1, [r7, #8]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f008 f857 	bl	8014d36 <memcpy>
        p->len += oversize_used;
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	895a      	ldrh	r2, [r3, #10]
 800cc8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc8e:	4413      	add	r3, r2
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1dd      	bne.n	800cc5e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800cca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca4:	891a      	ldrh	r2, [r3, #8]
 800cca6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cca8:	4413      	add	r3, r2
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccae:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ccb0:	8a7a      	ldrh	r2, [r7, #18]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ccb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d018      	beq.n	800ccf0 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ccbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d106      	bne.n	800ccd2 <tcp_write+0x4f2>
 800ccc4:	4b2a      	ldr	r3, [pc, #168]	; (800cd70 <tcp_write+0x590>)
 800ccc6:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ccca:	492e      	ldr	r1, [pc, #184]	; (800cd84 <tcp_write+0x5a4>)
 800cccc:	482a      	ldr	r0, [pc, #168]	; (800cd78 <tcp_write+0x598>)
 800ccce:	f008 f845 	bl	8014d5c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ccd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fb fb6d 	bl	80083b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ccde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce0:	891a      	ldrh	r2, [r3, #8]
 800cce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cce4:	891b      	ldrh	r3, [r3, #8]
 800cce6:	4413      	add	r3, r2
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccec:	811a      	strh	r2, [r3, #8]
 800ccee:	e037      	b.n	800cd60 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800ccf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d034      	beq.n	800cd60 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ccf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <tcp_write+0x524>
 800ccfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <tcp_write+0x532>
 800cd04:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <tcp_write+0x590>)
 800cd06:	f240 22c1 	movw	r2, #705	; 0x2c1
 800cd0a:	491f      	ldr	r1, [pc, #124]	; (800cd88 <tcp_write+0x5a8>)
 800cd0c:	481a      	ldr	r0, [pc, #104]	; (800cd78 <tcp_write+0x598>)
 800cd0e:	f008 f825 	bl	8014d5c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cd12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd18:	e009      	b.n	800cd2e <tcp_write+0x54e>
      p->tot_len += extendlen;
 800cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1c:	891a      	ldrh	r2, [r3, #8]
 800cd1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd20:	4413      	add	r3, r2
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1f1      	bne.n	800cd1a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	891a      	ldrh	r2, [r3, #8]
 800cd3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd3c:	4413      	add	r3, r2
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	895a      	ldrh	r2, [r3, #10]
 800cd48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd4a:	4413      	add	r3, r2
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cd52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd54:	891a      	ldrh	r2, [r3, #8]
 800cd56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd58:	4413      	add	r3, r2
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd5e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d112      	bne.n	800cd8c <tcp_write+0x5ac>
    pcb->unsent = queue;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd6a:	669a      	str	r2, [r3, #104]	; 0x68
 800cd6c:	e011      	b.n	800cd92 <tcp_write+0x5b2>
 800cd6e:	bf00      	nop
 800cd70:	08017480 	.word	0x08017480
 800cd74:	08017690 	.word	0x08017690
 800cd78:	080174e4 	.word	0x080174e4
 800cd7c:	080176d0 	.word	0x080176d0
 800cd80:	080176e0 	.word	0x080176e0
 800cd84:	080176f4 	.word	0x080176f4
 800cd88:	0801772c 	.word	0x0801772c
  } else {
    last_unsent->next = queue;
 800cd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd90:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cd96:	88fb      	ldrh	r3, [r7, #6]
 800cd98:	441a      	add	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cda4:	88fb      	ldrh	r3, [r7, #6]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cdb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00e      	beq.n	800cde2 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10a      	bne.n	800cde2 <tcp_write+0x602>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d106      	bne.n	800cde2 <tcp_write+0x602>
 800cdd4:	4b2c      	ldr	r3, [pc, #176]	; (800ce88 <tcp_write+0x6a8>)
 800cdd6:	f240 22ed 	movw	r2, #749	; 0x2ed
 800cdda:	492c      	ldr	r1, [pc, #176]	; (800ce8c <tcp_write+0x6ac>)
 800cddc:	482c      	ldr	r0, [pc, #176]	; (800ce90 <tcp_write+0x6b0>)
 800cdde:	f007 ffbd 	bl	8014d5c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800cde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d016      	beq.n	800ce16 <tcp_write+0x636>
 800cde8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d012      	beq.n	800ce16 <tcp_write+0x636>
 800cdf0:	797b      	ldrb	r3, [r7, #5]
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10d      	bne.n	800ce16 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cdfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	899b      	ldrh	r3, [r3, #12]
 800ce00:	b29c      	uxth	r4, r3
 800ce02:	2008      	movs	r0, #8
 800ce04:	f7fa f874 	bl	8006ef0 <lwip_htons>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	4322      	orrs	r2, r4
 800ce12:	b292      	uxth	r2, r2
 800ce14:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	e031      	b.n	800ce7e <tcp_write+0x69e>
          goto memerr;
 800ce1a:	bf00      	nop
 800ce1c:	e006      	b.n	800ce2c <tcp_write+0x64c>
            goto memerr;
 800ce1e:	bf00      	nop
 800ce20:	e004      	b.n	800ce2c <tcp_write+0x64c>
        goto memerr;
 800ce22:	bf00      	nop
 800ce24:	e002      	b.n	800ce2c <tcp_write+0x64c>
        goto memerr;
 800ce26:	bf00      	nop
 800ce28:	e000      	b.n	800ce2c <tcp_write+0x64c>
      goto memerr;
 800ce2a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	7e9b      	ldrb	r3, [r3, #26]
 800ce30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ce3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <tcp_write+0x666>
    pbuf_free(concat_p);
 800ce40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce42:	f7fb f9eb 	bl	800821c <pbuf_free>
  }
  if (queue != NULL) {
 800ce46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <tcp_write+0x672>
    tcp_segs_free(queue);
 800ce4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ce4e:	f7fc fcb8 	bl	80097c2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00e      	beq.n	800ce7a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <tcp_write+0x69a>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d106      	bne.n	800ce7a <tcp_write+0x69a>
 800ce6c:	4b06      	ldr	r3, [pc, #24]	; (800ce88 <tcp_write+0x6a8>)
 800ce6e:	f240 3202 	movw	r2, #770	; 0x302
 800ce72:	4906      	ldr	r1, [pc, #24]	; (800ce8c <tcp_write+0x6ac>)
 800ce74:	4806      	ldr	r0, [pc, #24]	; (800ce90 <tcp_write+0x6b0>)
 800ce76:	f007 ff71 	bl	8014d5c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ce7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	375c      	adds	r7, #92	; 0x5c
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd90      	pop	{r4, r7, pc}
 800ce86:	bf00      	nop
 800ce88:	08017480 	.word	0x08017480
 800ce8c:	08017764 	.word	0x08017764
 800ce90:	080174e4 	.word	0x080174e4

0800ce94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08a      	sub	sp, #40	; 0x28
 800ce98:	af02      	add	r7, sp, #8
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	f003 0303 	and.w	r3, r3, #3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <tcp_enqueue_flags+0x2c>
 800ceb2:	4b6f      	ldr	r3, [pc, #444]	; (800d070 <tcp_enqueue_flags+0x1dc>)
 800ceb4:	f240 321b 	movw	r2, #795	; 0x31b
 800ceb8:	496e      	ldr	r1, [pc, #440]	; (800d074 <tcp_enqueue_flags+0x1e0>)
 800ceba:	486f      	ldr	r0, [pc, #444]	; (800d078 <tcp_enqueue_flags+0x1e4>)
 800cebc:	f007 ff4e 	bl	8014d5c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cec6:	2b13      	cmp	r3, #19
 800cec8:	d806      	bhi.n	800ced8 <tcp_enqueue_flags+0x44>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ced0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d90e      	bls.n	800cef6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d109      	bne.n	800cef6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	7e9b      	ldrb	r3, [r3, #26]
 800cee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800cef0:	f04f 33ff 	mov.w	r3, #4294967295
 800cef4:	e0b7      	b.n	800d066 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800cf00:	2301      	movs	r3, #1
 800cf02:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cf04:	7ffb      	ldrb	r3, [r7, #31]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	f003 0304 	and.w	r3, r3, #4
 800cf0e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cf10:	7dfb      	ldrb	r3, [r7, #23]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	2200      	movs	r2, #0
 800cf16:	4619      	mov	r1, r3
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f7fa fe0d 	bl	8007b38 <pbuf_alloc>
 800cf1e:	6138      	str	r0, [r7, #16]
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d109      	bne.n	800cf3a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	7e9b      	ldrb	r3, [r3, #26]
 800cf2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295
 800cf38:	e095      	b.n	800d066 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	895a      	ldrh	r2, [r3, #10]
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d206      	bcs.n	800cf54 <tcp_enqueue_flags+0xc0>
 800cf46:	4b4a      	ldr	r3, [pc, #296]	; (800d070 <tcp_enqueue_flags+0x1dc>)
 800cf48:	f240 3241 	movw	r2, #833	; 0x341
 800cf4c:	494b      	ldr	r1, [pc, #300]	; (800d07c <tcp_enqueue_flags+0x1e8>)
 800cf4e:	484a      	ldr	r0, [pc, #296]	; (800d078 <tcp_enqueue_flags+0x1e4>)
 800cf50:	f007 ff04 	bl	8014d5c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800cf58:	78fa      	ldrb	r2, [r7, #3]
 800cf5a:	7ffb      	ldrb	r3, [r7, #31]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	6939      	ldr	r1, [r7, #16]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff fadc 	bl	800c520 <tcp_create_segment>
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d109      	bne.n	800cf84 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7e9b      	ldrb	r3, [r3, #26]
 800cf74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf82:	e070      	b.n	800d066 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	f003 0303 	and.w	r3, r3, #3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d006      	beq.n	800cf9e <tcp_enqueue_flags+0x10a>
 800cf90:	4b37      	ldr	r3, [pc, #220]	; (800d070 <tcp_enqueue_flags+0x1dc>)
 800cf92:	f240 3249 	movw	r2, #841	; 0x349
 800cf96:	493a      	ldr	r1, [pc, #232]	; (800d080 <tcp_enqueue_flags+0x1ec>)
 800cf98:	4837      	ldr	r0, [pc, #220]	; (800d078 <tcp_enqueue_flags+0x1e4>)
 800cf9a:	f007 fedf 	bl	8014d5c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	891b      	ldrh	r3, [r3, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d006      	beq.n	800cfb4 <tcp_enqueue_flags+0x120>
 800cfa6:	4b32      	ldr	r3, [pc, #200]	; (800d070 <tcp_enqueue_flags+0x1dc>)
 800cfa8:	f240 324a 	movw	r2, #842	; 0x34a
 800cfac:	4935      	ldr	r1, [pc, #212]	; (800d084 <tcp_enqueue_flags+0x1f0>)
 800cfae:	4832      	ldr	r0, [pc, #200]	; (800d078 <tcp_enqueue_flags+0x1e4>)
 800cfb0:	f007 fed4 	bl	8014d5c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d103      	bne.n	800cfc4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	669a      	str	r2, [r3, #104]	; 0x68
 800cfc2:	e00d      	b.n	800cfe0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfc8:	61bb      	str	r3, [r7, #24]
 800cfca:	e002      	b.n	800cfd2 <tcp_enqueue_flags+0x13e>
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	61bb      	str	r3, [r7, #24]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1f8      	bne.n	800cfcc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d104      	bne.n	800cffc <tcp_enqueue_flags+0x168>
 800cff2:	78fb      	ldrb	r3, [r7, #3]
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d004      	beq.n	800d006 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d000:	1c5a      	adds	r2, r3, #1
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d006:	78fb      	ldrb	r3, [r7, #3]
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	7e9b      	ldrb	r3, [r3, #26]
 800d014:	f043 0320 	orr.w	r3, r3, #32
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	f7fb f98e 	bl	8008344 <pbuf_clen>
 800d028:	4603      	mov	r3, r0
 800d02a:	461a      	mov	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d032:	4413      	add	r3, r2
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00e      	beq.n	800d064 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10a      	bne.n	800d064 <tcp_enqueue_flags+0x1d0>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <tcp_enqueue_flags+0x1d0>
 800d056:	4b06      	ldr	r3, [pc, #24]	; (800d070 <tcp_enqueue_flags+0x1dc>)
 800d058:	f240 326d 	movw	r2, #877	; 0x36d
 800d05c:	490a      	ldr	r1, [pc, #40]	; (800d088 <tcp_enqueue_flags+0x1f4>)
 800d05e:	4806      	ldr	r0, [pc, #24]	; (800d078 <tcp_enqueue_flags+0x1e4>)
 800d060:	f007 fe7c 	bl	8014d5c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3720      	adds	r7, #32
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	08017480 	.word	0x08017480
 800d074:	08017784 	.word	0x08017784
 800d078:	080174e4 	.word	0x080174e4
 800d07c:	080177dc 	.word	0x080177dc
 800d080:	08017818 	.word	0x08017818
 800d084:	08017830 	.word	0x08017830
 800d088:	0801785c 	.word	0x0801785c

0800d08c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b08b      	sub	sp, #44	; 0x2c
 800d090:	af04      	add	r7, sp, #16
 800d092:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d098:	7dbb      	ldrb	r3, [r7, #22]
 800d09a:	b29c      	uxth	r4, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7f9 ff33 	bl	8006f0c <lwip_htonl>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff f97b 	bl	800c3a8 <tcp_output_alloc_header>
 800d0b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	7e9b      	ldrb	r3, [r3, #26]
 800d0be:	f043 0303 	orr.w	r3, r3, #3
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d0c8:	f06f 0301 	mvn.w	r3, #1
 800d0cc:	e036      	b.n	800d13c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f004 f94c 	bl	8011370 <ip4_route>
 800d0d8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800d0e0:	23fc      	movs	r3, #252	; 0xfc
 800d0e2:	75fb      	strb	r3, [r7, #23]
 800d0e4:	e012      	b.n	800d10c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	1d18      	adds	r0, r3, #4
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7a9c      	ldrb	r4, [r3, #10]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7a5b      	ldrb	r3, [r3, #9]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	9202      	str	r2, [sp, #8]
 800d0f8:	2206      	movs	r2, #6
 800d0fa:	9201      	str	r2, [sp, #4]
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	4623      	mov	r3, r4
 800d100:	4602      	mov	r2, r0
 800d102:	6938      	ldr	r0, [r7, #16]
 800d104:	f004 fafa 	bl	80116fc <ip4_output_if>
 800d108:	4603      	mov	r3, r0
 800d10a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d10c:	6938      	ldr	r0, [r7, #16]
 800d10e:	f7fb f885 	bl	800821c <pbuf_free>

  if (err != ERR_OK) {
 800d112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d007      	beq.n	800d12a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7e9b      	ldrb	r3, [r3, #26]
 800d11e:	f043 0303 	orr.w	r3, r3, #3
 800d122:	b2da      	uxtb	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	769a      	strb	r2, [r3, #26]
 800d128:	e006      	b.n	800d138 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	7e9b      	ldrb	r3, [r3, #26]
 800d12e:	f023 0303 	bic.w	r3, r3, #3
 800d132:	b2da      	uxtb	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800d138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	371c      	adds	r7, #28
 800d140:	46bd      	mov	sp, r7
 800d142:	bd90      	pop	{r4, r7, pc}

0800d144 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d144:	b5b0      	push	{r4, r5, r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7d1b      	ldrb	r3, [r3, #20]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d106      	bne.n	800d162 <tcp_output+0x1e>
 800d154:	4b9b      	ldr	r3, [pc, #620]	; (800d3c4 <tcp_output+0x280>)
 800d156:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800d15a:	499b      	ldr	r1, [pc, #620]	; (800d3c8 <tcp_output+0x284>)
 800d15c:	489b      	ldr	r0, [pc, #620]	; (800d3cc <tcp_output+0x288>)
 800d15e:	f007 fdfd 	bl	8014d5c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d162:	4b9b      	ldr	r3, [pc, #620]	; (800d3d0 <tcp_output+0x28c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d101      	bne.n	800d170 <tcp_output+0x2c>
    return ERR_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e1cf      	b.n	800d510 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d203      	bcs.n	800d188 <tcp_output+0x44>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d186:	e002      	b.n	800d18e <tcp_output+0x4a>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d18e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d194:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7e9b      	ldrb	r3, [r3, #26]
 800d19a:	f003 0302 	and.w	r3, r3, #2
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d017      	beq.n	800d1d2 <tcp_output+0x8e>
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00f      	beq.n	800d1c8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7f9 feac 	bl	8006f0c <lwip_htonl>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1be:	8912      	ldrh	r2, [r2, #8]
 800d1c0:	4413      	add	r3, r2
     (seg == NULL ||
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d204      	bcs.n	800d1d2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff ff5f 	bl	800d08c <tcp_send_empty_ack>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	e19e      	b.n	800d510 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d007      	beq.n	800d1ee <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800d1de:	e002      	b.n	800d1e6 <tcp_output+0xa2>
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	623b      	str	r3, [r7, #32]
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1f8      	bne.n	800d1e0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f004 f8bc 	bl	8011370 <ip4_route>
 800d1f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d102      	bne.n	800d206 <tcp_output+0xc2>
    return ERR_RTE;
 800d200:	f06f 0303 	mvn.w	r3, #3
 800d204:	e184      	b.n	800d510 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d003      	beq.n	800d214 <tcp_output+0xd0>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d111      	bne.n	800d238 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <tcp_output+0xdc>
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	3304      	adds	r3, #4
 800d21e:	e000      	b.n	800d222 <tcp_output+0xde>
 800d220:	2300      	movs	r3, #0
 800d222:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <tcp_output+0xec>
      return ERR_RTE;
 800d22a:	f06f 0303 	mvn.w	r3, #3
 800d22e:	e16f      	b.n	800d510 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 813e 	beq.w	800d4bc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	4618      	mov	r0, r3
 800d248:	f7f9 fe60 	bl	8006f0c <lwip_htonl>
 800d24c:	4602      	mov	r2, r0
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d256:	8912      	ldrh	r2, [r2, #8]
 800d258:	4413      	add	r3, r2
  if (seg != NULL &&
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	f080 812d 	bcs.w	800d4bc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 8129 	beq.w	800d4bc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d270:	461a      	mov	r2, r3
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	4293      	cmp	r3, r2
 800d276:	f040 8121 	bne.w	800d4bc <tcp_output+0x378>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f040 811c 	bne.w	800d4bc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f040 812b 	bne.w	800d4e6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800d2a0:	e121      	b.n	800d4e6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	899b      	ldrh	r3, [r3, #12]
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f9 fe20 	bl	8006ef0 <lwip_htons>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f003 0304 	and.w	r3, r3, #4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d006      	beq.n	800d2c8 <tcp_output+0x184>
 800d2ba:	4b42      	ldr	r3, [pc, #264]	; (800d3c4 <tcp_output+0x280>)
 800d2bc:	f240 4246 	movw	r2, #1094	; 0x446
 800d2c0:	4944      	ldr	r1, [pc, #272]	; (800d3d4 <tcp_output+0x290>)
 800d2c2:	4842      	ldr	r0, [pc, #264]	; (800d3cc <tcp_output+0x288>)
 800d2c4:	f007 fd4a 	bl	8014d5c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d01f      	beq.n	800d310 <tcp_output+0x1cc>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7e9b      	ldrb	r3, [r3, #26]
 800d2d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d119      	bne.n	800d310 <tcp_output+0x1cc>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00b      	beq.n	800d2fc <tcp_output+0x1b8>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d110      	bne.n	800d310 <tcp_output+0x1cc>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2f2:	891a      	ldrh	r2, [r3, #8]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d209      	bcs.n	800d310 <tcp_output+0x1cc>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <tcp_output+0x1cc>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d30c:	2b13      	cmp	r3, #19
 800d30e:	d901      	bls.n	800d314 <tcp_output+0x1d0>
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <tcp_output+0x1d2>
 800d314:	2300      	movs	r3, #0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d106      	bne.n	800d328 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7e9b      	ldrb	r3, [r3, #26]
 800d31e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 80e1 	beq.w	800d4ea <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	7d1b      	ldrb	r3, [r3, #20]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d00d      	beq.n	800d34c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	899b      	ldrh	r3, [r3, #12]
 800d336:	b29c      	uxth	r4, r3
 800d338:	2010      	movs	r0, #16
 800d33a:	f7f9 fdd9 	bl	8006ef0 <lwip_htons>
 800d33e:	4603      	mov	r3, r0
 800d340:	461a      	mov	r2, r3
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	4322      	orrs	r2, r4
 800d348:	b292      	uxth	r2, r2
 800d34a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	6879      	ldr	r1, [r7, #4]
 800d350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d352:	f000 f8e1 	bl	800d518 <tcp_output_segment>
 800d356:	4603      	mov	r3, r0
 800d358:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d009      	beq.n	800d376 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7e9b      	ldrb	r3, [r3, #26]
 800d366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	769a      	strb	r2, [r3, #26]
      return err;
 800d370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d374:	e0cc      	b.n	800d510 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7d1b      	ldrb	r3, [r3, #20]
 800d382:	2b02      	cmp	r3, #2
 800d384:	d006      	beq.n	800d394 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	7e9b      	ldrb	r3, [r3, #26]
 800d38a:	f023 0303 	bic.w	r3, r3, #3
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7f9 fdb6 	bl	8006f0c <lwip_htonl>
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a4:	891b      	ldrh	r3, [r3, #8]
 800d3a6:	461d      	mov	r5, r3
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	899b      	ldrh	r3, [r3, #12]
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7f9 fd9d 	bl	8006ef0 <lwip_htons>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	f003 0303 	and.w	r3, r3, #3
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00b      	beq.n	800d3d8 <tcp_output+0x294>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e00a      	b.n	800d3da <tcp_output+0x296>
 800d3c4:	08017480 	.word	0x08017480
 800d3c8:	08017884 	.word	0x08017884
 800d3cc:	080174e4 	.word	0x080174e4
 800d3d0:	20007218 	.word	0x20007218
 800d3d4:	080178ac 	.word	0x080178ac
 800d3d8:	2300      	movs	r3, #0
 800d3da:	442b      	add	r3, r5
 800d3dc:	4423      	add	r3, r4
 800d3de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	da02      	bge.n	800d3f2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	891b      	ldrh	r3, [r3, #8]
 800d3f6:	461c      	mov	r4, r3
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	899b      	ldrh	r3, [r3, #12]
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	4618      	mov	r0, r3
 800d402:	f7f9 fd75 	bl	8006ef0 <lwip_htons>
 800d406:	4603      	mov	r3, r0
 800d408:	f003 0303 	and.w	r3, r3, #3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <tcp_output+0x2d0>
 800d410:	2301      	movs	r3, #1
 800d412:	e000      	b.n	800d416 <tcp_output+0x2d2>
 800d414:	2300      	movs	r3, #0
 800d416:	4423      	add	r3, r4
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d049      	beq.n	800d4b0 <tcp_output+0x36c>
      seg->next = NULL;
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	2200      	movs	r2, #0
 800d420:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d105      	bne.n	800d436 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	623b      	str	r3, [r7, #32]
 800d434:	e03f      	b.n	800d4b6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7f9 fd65 	bl	8006f0c <lwip_htonl>
 800d442:	4604      	mov	r4, r0
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f9 fd5e 	bl	8006f0c <lwip_htonl>
 800d450:	4603      	mov	r3, r0
 800d452:	1ae3      	subs	r3, r4, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	da24      	bge.n	800d4a2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	336c      	adds	r3, #108	; 0x6c
 800d45c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d45e:	e002      	b.n	800d466 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d011      	beq.n	800d492 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	4618      	mov	r0, r3
 800d478:	f7f9 fd48 	bl	8006f0c <lwip_htonl>
 800d47c:	4604      	mov	r4, r0
 800d47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	4618      	mov	r0, r3
 800d486:	f7f9 fd41 	bl	8006f0c <lwip_htonl>
 800d48a:	4603      	mov	r3, r0
 800d48c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d48e:	2b00      	cmp	r3, #0
 800d490:	dbe6      	blt.n	800d460 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	e009      	b.n	800d4b6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d4a2:	6a3b      	ldr	r3, [r7, #32]
 800d4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4a6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	623b      	str	r3, [r7, #32]
 800d4ae:	e002      	b.n	800d4b6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4b2:	f7fc f99a 	bl	80097ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d015      	beq.n	800d4ee <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7f9 fd1f 	bl	8006f0c <lwip_htonl>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4d8:	8912      	ldrh	r2, [r2, #8]
 800d4da:	4413      	add	r3, r2
  while (seg != NULL &&
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	f4bf aedf 	bcs.w	800d2a2 <tcp_output+0x15e>
  }
output_done:
 800d4e4:	e003      	b.n	800d4ee <tcp_output+0x3aa>
    goto output_done;
 800d4e6:	bf00      	nop
 800d4e8:	e002      	b.n	800d4f0 <tcp_output+0x3ac>
      break;
 800d4ea:	bf00      	nop
 800d4ec:	e000      	b.n	800d4f0 <tcp_output+0x3ac>
output_done:
 800d4ee:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d103      	bne.n	800d500 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	7e9b      	ldrb	r3, [r3, #26]
 800d504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3728      	adds	r7, #40	; 0x28
 800d514:	46bd      	mov	sp, r7
 800d516:	bdb0      	pop	{r4, r5, r7, pc}

0800d518 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d518:	b5b0      	push	{r4, r5, r7, lr}
 800d51a:	b08c      	sub	sp, #48	; 0x30
 800d51c:	af04      	add	r7, sp, #16
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	89db      	ldrh	r3, [r3, #14]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d001      	beq.n	800d532 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	e08b      	b.n	800d64a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68dc      	ldr	r4, [r3, #12]
 800d53a:	4610      	mov	r0, r2
 800d53c:	f7f9 fce6 	bl	8006f0c <lwip_htonl>
 800d540:	4603      	mov	r3, r0
 800d542:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	68dc      	ldr	r4, [r3, #12]
 800d54c:	4610      	mov	r0, r2
 800d54e:	f7f9 fccf 	bl	8006ef0 <lwip_htons>
 800d552:	4603      	mov	r3, r0
 800d554:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d55e:	441a      	add	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	3314      	adds	r3, #20
 800d56a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	7a9b      	ldrb	r3, [r3, #10]
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	2b00      	cmp	r3, #0
 800d576:	d014      	beq.n	800d5a2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	3304      	adds	r3, #4
 800d57c:	4619      	mov	r1, r3
 800d57e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d582:	f7fc fc73 	bl	8009e6c <tcp_eff_send_mss_impl>
 800d586:	4603      	mov	r3, r0
 800d588:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d58a:	8b7b      	ldrh	r3, [r7, #26]
 800d58c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d590:	4618      	mov	r0, r3
 800d592:	f7f9 fcbb 	bl	8006f0c <lwip_htonl>
 800d596:	4602      	mov	r2, r0
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	3304      	adds	r3, #4
 800d5a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	da02      	bge.n	800d5b2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10c      	bne.n	800d5d4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800d5ba:	4b26      	ldr	r3, [pc, #152]	; (800d654 <tcp_output_segment+0x13c>)
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7f9 fc9f 	bl	8006f0c <lwip_htonl>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	8959      	ldrh	r1, [r3, #10]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	8b3a      	ldrh	r2, [r7, #24]
 800d5f0:	1a8a      	subs	r2, r1, r2
 800d5f2:	b292      	uxth	r2, r2
 800d5f4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	8919      	ldrh	r1, [r3, #8]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	8b3a      	ldrh	r2, [r7, #24]
 800d602:	1a8a      	subs	r2, r1, r2
 800d604:	b292      	uxth	r2, r2
 800d606:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	68d2      	ldr	r2, [r2, #12]
 800d610:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	741a      	strb	r2, [r3, #16]
 800d61a:	2200      	movs	r2, #0
 800d61c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6858      	ldr	r0, [r3, #4]
 800d622:	68b9      	ldr	r1, [r7, #8]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	1d1c      	adds	r4, r3, #4
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	7a9d      	ldrb	r5, [r3, #10]
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	7a5b      	ldrb	r3, [r3, #9]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	9202      	str	r2, [sp, #8]
 800d634:	2206      	movs	r2, #6
 800d636:	9201      	str	r2, [sp, #4]
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	462b      	mov	r3, r5
 800d63c:	4622      	mov	r2, r4
 800d63e:	f004 f85d 	bl	80116fc <ip4_output_if>
 800d642:	4603      	mov	r3, r0
 800d644:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800d646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bdb0      	pop	{r4, r5, r7, pc}
 800d652:	bf00      	nop
 800d654:	20007208 	.word	0x20007208

0800d658 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b08c      	sub	sp, #48	; 0x30
 800d65c:	af04      	add	r7, sp, #16
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d666:	2200      	movs	r2, #0
 800d668:	2114      	movs	r1, #20
 800d66a:	2001      	movs	r0, #1
 800d66c:	f7fa fa64 	bl	8007b38 <pbuf_alloc>
 800d670:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d059      	beq.n	800d72c <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	895b      	ldrh	r3, [r3, #10]
 800d67c:	2b13      	cmp	r3, #19
 800d67e:	d806      	bhi.n	800d68e <tcp_rst+0x36>
 800d680:	4b2c      	ldr	r3, [pc, #176]	; (800d734 <tcp_rst+0xdc>)
 800d682:	f240 524d 	movw	r2, #1357	; 0x54d
 800d686:	492c      	ldr	r1, [pc, #176]	; (800d738 <tcp_rst+0xe0>)
 800d688:	482c      	ldr	r0, [pc, #176]	; (800d73c <tcp_rst+0xe4>)
 800d68a:	f007 fb67 	bl	8014d5c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800d694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d696:	4618      	mov	r0, r3
 800d698:	f7f9 fc2a 	bl	8006ef0 <lwip_htons>
 800d69c:	4603      	mov	r3, r0
 800d69e:	461a      	mov	r2, r3
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800d6a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7f9 fc22 	bl	8006ef0 <lwip_htons>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f7f9 fc29 	bl	8006f0c <lwip_htonl>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800d6c0:	68b8      	ldr	r0, [r7, #8]
 800d6c2:	f7f9 fc23 	bl	8006f0c <lwip_htonl>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d6cc:	f245 0014 	movw	r0, #20500	; 0x5014
 800d6d0:	f7f9 fc0e 	bl	8006ef0 <lwip_htons>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f042 0210 	orr.w	r2, r2, #16
 800d6e4:	739a      	strb	r2, [r3, #14]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	741a      	strb	r2, [r3, #16]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	749a      	strb	r2, [r3, #18]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800d6fe:	6838      	ldr	r0, [r7, #0]
 800d700:	f003 fe36 	bl	8011370 <ip4_route>
 800d704:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	9302      	str	r3, [sp, #8]
 800d710:	2306      	movs	r3, #6
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	2300      	movs	r3, #0
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	23ff      	movs	r3, #255	; 0xff
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	6879      	ldr	r1, [r7, #4]
 800d71e:	69f8      	ldr	r0, [r7, #28]
 800d720:	f003 ffec 	bl	80116fc <ip4_output_if>
  }
  pbuf_free(p);
 800d724:	69f8      	ldr	r0, [r7, #28]
 800d726:	f7fa fd79 	bl	800821c <pbuf_free>
 800d72a:	e000      	b.n	800d72e <tcp_rst+0xd6>
    return;
 800d72c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d72e:	3720      	adds	r7, #32
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	08017480 	.word	0x08017480
 800d738:	080174b4 	.word	0x080174b4
 800d73c:	080174e4 	.word	0x080174e4

0800d740 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d029      	beq.n	800d7a4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d754:	60fb      	str	r3, [r7, #12]
 800d756:	e002      	b.n	800d75e <tcp_rexmit_rto+0x1e>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	60fb      	str	r3, [r7, #12]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1f8      	bne.n	800d758 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d782:	2bff      	cmp	r3, #255	; 0xff
 800d784:	d007      	beq.n	800d796 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d78c:	3301      	adds	r3, #1
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff fcd1 	bl	800d144 <tcp_output>
 800d7a2:	e000      	b.n	800d7a6 <tcp_rexmit_rto+0x66>
    return;
 800d7a4:	bf00      	nop
}
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d7ac:	b590      	push	{r4, r7, lr}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d043      	beq.n	800d844 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c0:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3368      	adds	r3, #104	; 0x68
 800d7ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d7d0:	e002      	b.n	800d7d8 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d011      	beq.n	800d804 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7f9 fb8f 	bl	8006f0c <lwip_htonl>
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7f9 fb88 	bl	8006f0c <lwip_htonl>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d800:	2b00      	cmp	r3, #0
 800d802:	dbe6      	blt.n	800d7d2 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d103      	bne.n	800d822 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d828:	2bff      	cmp	r3, #255	; 0xff
 800d82a:	d007      	beq.n	800d83c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d832:	3301      	adds	r3, #1
 800d834:	b2da      	uxtb	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	635a      	str	r2, [r3, #52]	; 0x34
 800d842:	e000      	b.n	800d846 <tcp_rexmit+0x9a>
    return;
 800d844:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd90      	pop	{r4, r7, pc}

0800d84c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d04a      	beq.n	800d8f2 <tcp_rexmit_fast+0xa6>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	7e9b      	ldrb	r3, [r3, #26]
 800d860:	f003 0304 	and.w	r3, r3, #4
 800d864:	2b00      	cmp	r3, #0
 800d866:	d144      	bne.n	800d8f2 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff ff9f 	bl	800d7ac <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d207      	bcs.n	800d88e <tcp_rexmit_fast+0x42>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d884:	0fda      	lsrs	r2, r3, #31
 800d886:	4413      	add	r3, r2
 800d888:	105b      	asrs	r3, r3, #1
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	e006      	b.n	800d89c <tcp_rexmit_fast+0x50>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d894:	0fda      	lsrs	r2, r3, #31
 800d896:	4413      	add	r3, r2
 800d898:	105b      	asrs	r3, r3, #1
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d206      	bcs.n	800d8c2 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	0049      	lsls	r1, r1, #1
 800d8d0:	440b      	add	r3, r1
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	4413      	add	r3, r2
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	7e9b      	ldrb	r3, [r3, #26]
 800d8e2:	f043 0304 	orr.w	r3, r3, #4
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b08a      	sub	sp, #40	; 0x28
 800d8fe:	af04      	add	r7, sp, #16
 800d900:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d906:	3b01      	subs	r3, #1
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f9 faff 	bl	8006f0c <lwip_htonl>
 800d90e:	4603      	mov	r3, r0
 800d910:	2200      	movs	r2, #0
 800d912:	2100      	movs	r1, #0
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7fe fd47 	bl	800c3a8 <tcp_output_alloc_header>
 800d91a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d922:	f04f 33ff 	mov.w	r3, #4294967295
 800d926:	e021      	b.n	800d96c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3304      	adds	r3, #4
 800d92c:	4618      	mov	r0, r3
 800d92e:	f003 fd1f 	bl	8011370 <ip4_route>
 800d932:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d102      	bne.n	800d940 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800d93a:	23fc      	movs	r3, #252	; 0xfc
 800d93c:	75fb      	strb	r3, [r7, #23]
 800d93e:	e010      	b.n	800d962 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	1d1a      	adds	r2, r3, #4
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	7a98      	ldrb	r0, [r3, #10]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	9302      	str	r3, [sp, #8]
 800d94e:	2306      	movs	r3, #6
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	2300      	movs	r3, #0
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4603      	mov	r3, r0
 800d958:	6938      	ldr	r0, [r7, #16]
 800d95a:	f003 fecf 	bl	80116fc <ip4_output_if>
 800d95e:	4603      	mov	r3, r0
 800d960:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d962:	6938      	ldr	r0, [r7, #16]
 800d964:	f7fa fc5a 	bl	800821c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d974:	b590      	push	{r4, r7, lr}
 800d976:	b08f      	sub	sp, #60	; 0x3c
 800d978:	af04      	add	r7, sp, #16
 800d97a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d980:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d102      	bne.n	800d98e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d98c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d101      	bne.n	800d998 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	e085      	b.n	800daa4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	899b      	ldrh	r3, [r3, #12]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7f9 faa5 	bl	8006ef0 <lwip_htons>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	f003 0301 	and.w	r3, r3, #1
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d005      	beq.n	800d9bc <tcp_zero_window_probe+0x48>
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	891b      	ldrh	r3, [r3, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <tcp_zero_window_probe+0x48>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e000      	b.n	800d9be <tcp_zero_window_probe+0x4a>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d9c0:	7ffb      	ldrb	r3, [r7, #31]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	bf0c      	ite	eq
 800d9c6:	2301      	moveq	r3, #1
 800d9c8:	2300      	movne	r3, #0
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d9ce:	6a3b      	ldr	r3, [r7, #32]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	8bba      	ldrh	r2, [r7, #28]
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7fe fce5 	bl	800c3a8 <tcp_output_alloc_header>
 800d9de:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d102      	bne.n	800d9ec <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ea:	e05b      	b.n	800daa4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d9f2:	7ffb      	ldrb	r3, [r7, #31]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00e      	beq.n	800da16 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	899b      	ldrh	r3, [r3, #12]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800da02:	b29c      	uxth	r4, r3
 800da04:	2011      	movs	r0, #17
 800da06:	f7f9 fa73 	bl	8006ef0 <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	4323      	orrs	r3, r4
 800da0e:	b29a      	uxth	r2, r3
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	819a      	strh	r2, [r3, #12]
 800da14:	e010      	b.n	800da38 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	3314      	adds	r3, #20
 800da1c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	6858      	ldr	r0, [r3, #4]
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	891a      	ldrh	r2, [r3, #8]
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	891b      	ldrh	r3, [r3, #8]
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	b29b      	uxth	r3, r3
 800da30:	2201      	movs	r2, #1
 800da32:	6939      	ldr	r1, [r7, #16]
 800da34:	f7fa fdf2 	bl	800861c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	4618      	mov	r0, r3
 800da40:	f7f9 fa64 	bl	8006f0c <lwip_htonl>
 800da44:	4603      	mov	r3, r0
 800da46:	3301      	adds	r3, #1
 800da48:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	da02      	bge.n	800da5c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	3304      	adds	r3, #4
 800da60:	4618      	mov	r0, r3
 800da62:	f003 fc85 	bl	8011370 <ip4_route>
 800da66:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800da6e:	23fc      	movs	r3, #252	; 0xfc
 800da70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da74:	e011      	b.n	800da9a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	1d1a      	adds	r2, r3, #4
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	7a98      	ldrb	r0, [r3, #10]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	9302      	str	r3, [sp, #8]
 800da84:	2306      	movs	r3, #6
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	2300      	movs	r3, #0
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	4603      	mov	r3, r0
 800da8e:	69b8      	ldr	r0, [r7, #24]
 800da90:	f003 fe34 	bl	80116fc <ip4_output_if>
 800da94:	4603      	mov	r3, r0
 800da96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800da9a:	69b8      	ldr	r0, [r7, #24]
 800da9c:	f7fa fbbe 	bl	800821c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800daa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	372c      	adds	r7, #44	; 0x2c
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd90      	pop	{r4, r7, pc}

0800daac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dab4:	f7fa fe34 	bl	8008720 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dab8:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <tcpip_tcp_timer+0x38>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d103      	bne.n	800dac8 <tcpip_tcp_timer+0x1c>
 800dac0:	4b09      	ldr	r3, [pc, #36]	; (800dae8 <tcpip_tcp_timer+0x3c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d005      	beq.n	800dad4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dac8:	2200      	movs	r2, #0
 800daca:	4908      	ldr	r1, [pc, #32]	; (800daec <tcpip_tcp_timer+0x40>)
 800dacc:	20fa      	movs	r0, #250	; 0xfa
 800dace:	f000 f86f 	bl	800dbb0 <sys_timeout>
 800dad2:	e002      	b.n	800dada <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dad4:	4b06      	ldr	r3, [pc, #24]	; (800daf0 <tcpip_tcp_timer+0x44>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	601a      	str	r2, [r3, #0]
  }
}
 800dada:	bf00      	nop
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	20007204 	.word	0x20007204
 800dae8:	20007214 	.word	0x20007214
 800daec:	0800daad 	.word	0x0800daad
 800daf0:	2000075c 	.word	0x2000075c

0800daf4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800daf8:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <tcp_timer_needed+0x30>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10f      	bne.n	800db20 <tcp_timer_needed+0x2c>
 800db00:	4b09      	ldr	r3, [pc, #36]	; (800db28 <tcp_timer_needed+0x34>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d103      	bne.n	800db10 <tcp_timer_needed+0x1c>
 800db08:	4b08      	ldr	r3, [pc, #32]	; (800db2c <tcp_timer_needed+0x38>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800db10:	4b04      	ldr	r3, [pc, #16]	; (800db24 <tcp_timer_needed+0x30>)
 800db12:	2201      	movs	r2, #1
 800db14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800db16:	2200      	movs	r2, #0
 800db18:	4905      	ldr	r1, [pc, #20]	; (800db30 <tcp_timer_needed+0x3c>)
 800db1a:	20fa      	movs	r0, #250	; 0xfa
 800db1c:	f000 f848 	bl	800dbb0 <sys_timeout>
  }
}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}
 800db24:	2000075c 	.word	0x2000075c
 800db28:	20007204 	.word	0x20007204
 800db2c:	20007214 	.word	0x20007214
 800db30:	0800daad 	.word	0x0800daad

0800db34 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	4903      	ldr	r1, [pc, #12]	; (800db5c <cyclic_timer+0x28>)
 800db4e:	4618      	mov	r0, r3
 800db50:	f000 f82e 	bl	800dbb0 <sys_timeout>
}
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	0800db35 	.word	0x0800db35

0800db60 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800db66:	2301      	movs	r3, #1
 800db68:	607b      	str	r3, [r7, #4]
 800db6a:	e00e      	b.n	800db8a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800db6c:	4a0d      	ldr	r2, [pc, #52]	; (800dba4 <sys_timeouts_init+0x44>)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	4a0a      	ldr	r2, [pc, #40]	; (800dba4 <sys_timeouts_init+0x44>)
 800db7a:	4413      	add	r3, r2
 800db7c:	461a      	mov	r2, r3
 800db7e:	490a      	ldr	r1, [pc, #40]	; (800dba8 <sys_timeouts_init+0x48>)
 800db80:	f000 f816 	bl	800dbb0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	3301      	adds	r3, #1
 800db88:	607b      	str	r3, [r7, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d9ed      	bls.n	800db6c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800db90:	f005 fb16 	bl	80131c0 <sys_now>
 800db94:	4602      	mov	r2, r0
 800db96:	4b05      	ldr	r3, [pc, #20]	; (800dbac <sys_timeouts_init+0x4c>)
 800db98:	601a      	str	r2, [r3, #0]
}
 800db9a:	bf00      	nop
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	080197ec 	.word	0x080197ec
 800dba8:	0800db35 	.word	0x0800db35
 800dbac:	20000758 	.word	0x20000758

0800dbb0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dbbc:	2006      	movs	r0, #6
 800dbbe:	f7f9 fdaf 	bl	8007720 <memp_malloc>
 800dbc2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10a      	bne.n	800dbe0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f040 8084 	bne.w	800dcda <sys_timeout+0x12a>
 800dbd2:	4b44      	ldr	r3, [pc, #272]	; (800dce4 <sys_timeout+0x134>)
 800dbd4:	22d4      	movs	r2, #212	; 0xd4
 800dbd6:	4944      	ldr	r1, [pc, #272]	; (800dce8 <sys_timeout+0x138>)
 800dbd8:	4844      	ldr	r0, [pc, #272]	; (800dcec <sys_timeout+0x13c>)
 800dbda:	f007 f8bf 	bl	8014d5c <iprintf>
    return;
 800dbde:	e07c      	b.n	800dcda <sys_timeout+0x12a>
  }

  now = sys_now();
 800dbe0:	f005 faee 	bl	80131c0 <sys_now>
 800dbe4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800dbe6:	4b42      	ldr	r3, [pc, #264]	; (800dcf0 <sys_timeout+0x140>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d105      	bne.n	800dbfa <sys_timeout+0x4a>
    diff = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800dbf2:	4a40      	ldr	r2, [pc, #256]	; (800dcf4 <sys_timeout+0x144>)
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	e004      	b.n	800dc04 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800dbfa:	4b3e      	ldr	r3, [pc, #248]	; (800dcf4 <sys_timeout+0x144>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	441a      	add	r2, r3
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dc20:	4b33      	ldr	r3, [pc, #204]	; (800dcf0 <sys_timeout+0x140>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d103      	bne.n	800dc30 <sys_timeout+0x80>
    next_timeout = timeout;
 800dc28:	4a31      	ldr	r2, [pc, #196]	; (800dcf0 <sys_timeout+0x140>)
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	6013      	str	r3, [r2, #0]
    return;
 800dc2e:	e055      	b.n	800dcdc <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800dc30:	4b2f      	ldr	r3, [pc, #188]	; (800dcf0 <sys_timeout+0x140>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d20f      	bcs.n	800dc5c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800dc3c:	4b2c      	ldr	r3, [pc, #176]	; (800dcf0 <sys_timeout+0x140>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	6859      	ldr	r1, [r3, #4]
 800dc42:	4b2b      	ldr	r3, [pc, #172]	; (800dcf0 <sys_timeout+0x140>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	1a8a      	subs	r2, r1, r2
 800dc4a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800dc4c:	4b28      	ldr	r3, [pc, #160]	; (800dcf0 <sys_timeout+0x140>)
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dc54:	4a26      	ldr	r2, [pc, #152]	; (800dcf0 <sys_timeout+0x140>)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	e03f      	b.n	800dcdc <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dc5c:	4b24      	ldr	r3, [pc, #144]	; (800dcf0 <sys_timeout+0x140>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	61fb      	str	r3, [r7, #28]
 800dc62:	e036      	b.n	800dcd2 <sys_timeout+0x122>
      timeout->time -= t->time;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	685a      	ldr	r2, [r3, #4]
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	1ad2      	subs	r2, r2, r3
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <sys_timeout+0xd8>
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d921      	bls.n	800dccc <sys_timeout+0x11c>
        if (t->next != NULL) {
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d009      	beq.n	800dca4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6859      	ldr	r1, [r3, #4]
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	685a      	ldr	r2, [r3, #4]
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	1a8a      	subs	r2, r1, r2
 800dca0:	605a      	str	r2, [r3, #4]
 800dca2:	e00b      	b.n	800dcbc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d206      	bcs.n	800dcbc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800dcae:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <sys_timeout+0x140>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	441a      	add	r2, r3
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	601a      	str	r2, [r3, #0]
        break;
 800dcca:	e007      	b.n	800dcdc <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	61fb      	str	r3, [r7, #28]
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1c5      	bne.n	800dc64 <sys_timeout+0xb4>
 800dcd8:	e000      	b.n	800dcdc <sys_timeout+0x12c>
    return;
 800dcda:	bf00      	nop
      }
    }
  }
}
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	080178c4 	.word	0x080178c4
 800dce8:	080178f8 	.word	0x080178f8
 800dcec:	08017938 	.word	0x08017938
 800dcf0:	20000754 	.word	0x20000754
 800dcf4:	20000758 	.word	0x20000758

0800dcf8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800dcfe:	4b24      	ldr	r3, [pc, #144]	; (800dd90 <sys_check_timeouts+0x98>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d040      	beq.n	800dd88 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800dd06:	f005 fa5b 	bl	80131c0 <sys_now>
 800dd0a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800dd0c:	4b21      	ldr	r3, [pc, #132]	; (800dd94 <sys_check_timeouts+0x9c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800dd16:	4b20      	ldr	r3, [pc, #128]	; (800dd98 <sys_check_timeouts+0xa0>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <sys_check_timeouts+0x2c>
 800dd20:	f7f9 feda 	bl	8007ad8 <pbuf_free_ooseq>
      had_one = 0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800dd28:	4b19      	ldr	r3, [pc, #100]	; (800dd90 <sys_check_timeouts+0x98>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d026      	beq.n	800dd82 <sys_check_timeouts+0x8a>
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d321      	bcc.n	800dd82 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	4b13      	ldr	r3, [pc, #76]	; (800dd94 <sys_check_timeouts+0x9c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	4a11      	ldr	r2, [pc, #68]	; (800dd94 <sys_check_timeouts+0x9c>)
 800dd4e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a0c      	ldr	r2, [pc, #48]	; (800dd90 <sys_check_timeouts+0x98>)
 800dd60:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dd6e:	68b9      	ldr	r1, [r7, #8]
 800dd70:	2006      	movs	r0, #6
 800dd72:	f7f9 fd21 	bl	80077b8 <memp_free>
        if (handler != NULL) {
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6838      	ldr	r0, [r7, #0]
 800dd80:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800dd82:	7cfb      	ldrb	r3, [r7, #19]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1c6      	bne.n	800dd16 <sys_check_timeouts+0x1e>
  }
}
 800dd88:	bf00      	nop
 800dd8a:	3718      	adds	r7, #24
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20000754 	.word	0x20000754
 800dd94:	20000758 	.word	0x20000758
 800dd98:	200071fc 	.word	0x200071fc

0800dd9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800dda0:	bf00      	nop
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ddb6:	4b17      	ldr	r3, [pc, #92]	; (800de14 <udp_new_port+0x68>)
 800ddb8:	881b      	ldrh	r3, [r3, #0]
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	b291      	uxth	r1, r2
 800ddbe:	4a15      	ldr	r2, [pc, #84]	; (800de14 <udp_new_port+0x68>)
 800ddc0:	8011      	strh	r1, [r2, #0]
 800ddc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d103      	bne.n	800ddd2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ddca:	4b12      	ldr	r3, [pc, #72]	; (800de14 <udp_new_port+0x68>)
 800ddcc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ddd0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddd2:	4b11      	ldr	r3, [pc, #68]	; (800de18 <udp_new_port+0x6c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	e011      	b.n	800ddfe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	8a5a      	ldrh	r2, [r3, #18]
 800ddde:	4b0d      	ldr	r3, [pc, #52]	; (800de14 <udp_new_port+0x68>)
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d108      	bne.n	800ddf8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	3301      	adds	r3, #1
 800ddea:	80fb      	strh	r3, [r7, #6]
 800ddec:	88fb      	ldrh	r3, [r7, #6]
 800ddee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddf2:	d3e0      	bcc.n	800ddb6 <udp_new_port+0xa>
        return 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	e007      	b.n	800de08 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	603b      	str	r3, [r7, #0]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1ea      	bne.n	800ddda <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800de04:	4b03      	ldr	r3, [pc, #12]	; (800de14 <udp_new_port+0x68>)
 800de06:	881b      	ldrh	r3, [r3, #0]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	2000000c 	.word	0x2000000c
 800de18:	2000721c 	.word	0x2000721c

0800de1c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	4613      	mov	r3, r2
 800de28:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d018      	beq.n	800de62 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d013      	beq.n	800de5e <udp_input_local_match+0x42>
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00f      	beq.n	800de5e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800de3e:	4b14      	ldr	r3, [pc, #80]	; (800de90 <udp_input_local_match+0x74>)
 800de40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de46:	d00a      	beq.n	800de5e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	4b10      	ldr	r3, [pc, #64]	; (800de90 <udp_input_local_match+0x74>)
 800de4e:	695b      	ldr	r3, [r3, #20]
 800de50:	405a      	eors	r2, r3
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	3308      	adds	r3, #8
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d110      	bne.n	800de80 <udp_input_local_match+0x64>
          return 1;
 800de5e:	2301      	movs	r3, #1
 800de60:	e00f      	b.n	800de82 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d009      	beq.n	800de7c <udp_input_local_match+0x60>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <udp_input_local_match+0x60>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	4b06      	ldr	r3, [pc, #24]	; (800de90 <udp_input_local_match+0x74>)
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d101      	bne.n	800de80 <udp_input_local_match+0x64>
      return 1;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e000      	b.n	800de82 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	2000091c 	.word	0x2000091c

0800de94 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800de94:	b590      	push	{r4, r7, lr}
 800de96:	b08d      	sub	sp, #52	; 0x34
 800de98:	af02      	add	r7, sp, #8
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	895b      	ldrh	r3, [r3, #10]
 800dea6:	2b07      	cmp	r3, #7
 800dea8:	d803      	bhi.n	800deb2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7fa f9b6 	bl	800821c <pbuf_free>
    goto end;
 800deb0:	e0c6      	b.n	800e040 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800deb8:	4b63      	ldr	r3, [pc, #396]	; (800e048 <udp_input+0x1b4>)
 800deba:	695a      	ldr	r2, [r3, #20]
 800debc:	4b62      	ldr	r3, [pc, #392]	; (800e048 <udp_input+0x1b4>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4619      	mov	r1, r3
 800dec2:	4610      	mov	r0, r2
 800dec4:	f003 fcec 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 800dec8:	4603      	mov	r3, r0
 800deca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f9 f80c 	bl	8006ef0 <lwip_htons>
 800ded8:	4603      	mov	r3, r0
 800deda:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	885b      	ldrh	r3, [r3, #2]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f9 f804 	bl	8006ef0 <lwip_htons>
 800dee8:	4603      	mov	r3, r0
 800deea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800deec:	2300      	movs	r3, #0
 800deee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800def0:	2300      	movs	r3, #0
 800def2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800def4:	2300      	movs	r3, #0
 800def6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800def8:	4b54      	ldr	r3, [pc, #336]	; (800e04c <udp_input+0x1b8>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
 800defe:	e03b      	b.n	800df78 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	8a5b      	ldrh	r3, [r3, #18]
 800df04:	89fa      	ldrh	r2, [r7, #14]
 800df06:	429a      	cmp	r2, r3
 800df08:	d131      	bne.n	800df6e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800df0a:	7cfb      	ldrb	r3, [r7, #19]
 800df0c:	461a      	mov	r2, r3
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df12:	f7ff ff83 	bl	800de1c <udp_input_local_match>
 800df16:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d028      	beq.n	800df6e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	7c1b      	ldrb	r3, [r3, #16]
 800df20:	f003 0304 	and.w	r3, r3, #4
 800df24:	2b00      	cmp	r3, #0
 800df26:	d104      	bne.n	800df32 <udp_input+0x9e>
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d101      	bne.n	800df32 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	8a9b      	ldrh	r3, [r3, #20]
 800df36:	8a3a      	ldrh	r2, [r7, #16]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d118      	bne.n	800df6e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800df40:	2b00      	cmp	r3, #0
 800df42:	d005      	beq.n	800df50 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	4b3f      	ldr	r3, [pc, #252]	; (800e048 <udp_input+0x1b4>)
 800df4a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d10e      	bne.n	800df6e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d014      	beq.n	800df80 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	68da      	ldr	r2, [r3, #12]
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800df5e:	4b3b      	ldr	r3, [pc, #236]	; (800e04c <udp_input+0x1b8>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df64:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800df66:	4a39      	ldr	r2, [pc, #228]	; (800e04c <udp_input+0x1b8>)
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800df6c:	e008      	b.n	800df80 <udp_input+0xec>
      }
    }

    prev = pcb;
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	627b      	str	r3, [r7, #36]	; 0x24
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1c0      	bne.n	800df00 <udp_input+0x6c>
 800df7e:	e000      	b.n	800df82 <udp_input+0xee>
        break;
 800df80:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <udp_input+0xf8>
    pcb = uncon_pcb;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <udp_input+0x104>
    for_us = 1;
 800df92:	2301      	movs	r3, #1
 800df94:	76fb      	strb	r3, [r7, #27]
 800df96:	e00a      	b.n	800dfae <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	3304      	adds	r3, #4
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b2a      	ldr	r3, [pc, #168]	; (800e048 <udp_input+0x1b4>)
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	bf0c      	ite	eq
 800dfa6:	2301      	moveq	r3, #1
 800dfa8:	2300      	movne	r3, #0
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dfae:	7efb      	ldrb	r3, [r7, #27]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d042      	beq.n	800e03a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800dfb4:	f06f 0107 	mvn.w	r1, #7
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7fa f90b 	bl	80081d4 <pbuf_header>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00a      	beq.n	800dfda <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800dfc4:	4b22      	ldr	r3, [pc, #136]	; (800e050 <udp_input+0x1bc>)
 800dfc6:	f240 1255 	movw	r2, #341	; 0x155
 800dfca:	4922      	ldr	r1, [pc, #136]	; (800e054 <udp_input+0x1c0>)
 800dfcc:	4822      	ldr	r0, [pc, #136]	; (800e058 <udp_input+0x1c4>)
 800dfce:	f006 fec5 	bl	8014d5c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7fa f922 	bl	800821c <pbuf_free>
      goto end;
 800dfd8:	e032      	b.n	800e040 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d012      	beq.n	800e006 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00a      	beq.n	800dffe <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	699c      	ldr	r4, [r3, #24]
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	69d8      	ldr	r0, [r3, #28]
 800dff0:	8a3b      	ldrh	r3, [r7, #16]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	4b19      	ldr	r3, [pc, #100]	; (800e05c <udp_input+0x1c8>)
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dffa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dffc:	e021      	b.n	800e042 <udp_input+0x1ae>
        pbuf_free(p);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7fa f90c 	bl	800821c <pbuf_free>
        goto end;
 800e004:	e01c      	b.n	800e040 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e006:	7cfb      	ldrb	r3, [r7, #19]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d112      	bne.n	800e032 <udp_input+0x19e>
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <udp_input+0x1b4>)
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e014:	2be0      	cmp	r3, #224	; 0xe0
 800e016:	d00c      	beq.n	800e032 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e018:	4b0b      	ldr	r3, [pc, #44]	; (800e048 <udp_input+0x1b4>)
 800e01a:	899b      	ldrh	r3, [r3, #12]
 800e01c:	3308      	adds	r3, #8
 800e01e:	b29b      	uxth	r3, r3
 800e020:	b21b      	sxth	r3, r3
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7fa f8e7 	bl	80081f8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e02a:	2103      	movs	r1, #3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f003 f917 	bl	8011260 <icmp_dest_unreach>
      pbuf_free(p);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7fa f8f2 	bl	800821c <pbuf_free>
  return;
 800e038:	e003      	b.n	800e042 <udp_input+0x1ae>
    pbuf_free(p);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7fa f8ee 	bl	800821c <pbuf_free>
  return;
 800e040:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e042:	372c      	adds	r7, #44	; 0x2c
 800e044:	46bd      	mov	sp, r7
 800e046:	bd90      	pop	{r4, r7, pc}
 800e048:	2000091c 	.word	0x2000091c
 800e04c:	2000721c 	.word	0x2000721c
 800e050:	08017960 	.word	0x08017960
 800e054:	08017990 	.word	0x08017990
 800e058:	080179a4 	.word	0x080179a4
 800e05c:	2000092c 	.word	0x2000092c

0800e060 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b088      	sub	sp, #32
 800e064:	af02      	add	r7, sp, #8
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <udp_sendto_if+0x1a>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d102      	bne.n	800e080 <udp_sendto_if+0x20>
    return ERR_VAL;
 800e07a:	f06f 0305 	mvn.w	r3, #5
 800e07e:	e028      	b.n	800e0d2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d009      	beq.n	800e09a <udp_sendto_if+0x3a>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d005      	beq.n	800e09a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e096:	2be0      	cmp	r3, #224	; 0xe0
 800e098:	d103      	bne.n	800e0a2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	3304      	adds	r3, #4
 800e09e:	617b      	str	r3, [r7, #20]
 800e0a0:	e00b      	b.n	800e0ba <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	3304      	adds	r3, #4
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d002      	beq.n	800e0b6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800e0b0:	f06f 0303 	mvn.w	r3, #3
 800e0b4:	e00d      	b.n	800e0d2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e0ba:	887a      	ldrh	r2, [r7, #2]
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 f806 	bl	800e0dc <udp_sendto_if_src>
 800e0d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08c      	sub	sp, #48	; 0x30
 800e0e0:	af04      	add	r7, sp, #16
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <udp_sendto_if_src+0x1a>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d102      	bne.n	800e0fc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800e0f6:	f06f 0305 	mvn.w	r3, #5
 800e0fa:	e07e      	b.n	800e1fa <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	8a5b      	ldrh	r3, [r3, #18]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10f      	bne.n	800e124 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e104:	68f9      	ldr	r1, [r7, #12]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	8a5b      	ldrh	r3, [r3, #18]
 800e10a:	461a      	mov	r2, r3
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f87f 	bl	800e210 <udp_bind>
 800e112:	4603      	mov	r3, r0
 800e114:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e116:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e11e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e122:	e06a      	b.n	800e1fa <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800e124:	2108      	movs	r1, #8
 800e126:	68b8      	ldr	r0, [r7, #8]
 800e128:	f7fa f854 	bl	80081d4 <pbuf_header>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d014      	beq.n	800e15c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e132:	2200      	movs	r2, #0
 800e134:	2108      	movs	r1, #8
 800e136:	2001      	movs	r0, #1
 800e138:	f7f9 fcfe 	bl	8007b38 <pbuf_alloc>
 800e13c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e144:	f04f 33ff 	mov.w	r3, #4294967295
 800e148:	e057      	b.n	800e1fa <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	891b      	ldrh	r3, [r3, #8]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d006      	beq.n	800e160 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e152:	68b9      	ldr	r1, [r7, #8]
 800e154:	69f8      	ldr	r0, [r7, #28]
 800e156:	f7fa f985 	bl	8008464 <pbuf_chain>
 800e15a:	e001      	b.n	800e160 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	895b      	ldrh	r3, [r3, #10]
 800e164:	2b07      	cmp	r3, #7
 800e166:	d806      	bhi.n	800e176 <udp_sendto_if_src+0x9a>
 800e168:	4b26      	ldr	r3, [pc, #152]	; (800e204 <udp_sendto_if_src+0x128>)
 800e16a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e16e:	4926      	ldr	r1, [pc, #152]	; (800e208 <udp_sendto_if_src+0x12c>)
 800e170:	4826      	ldr	r0, [pc, #152]	; (800e20c <udp_sendto_if_src+0x130>)
 800e172:	f006 fdf3 	bl	8014d5c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	8a5b      	ldrh	r3, [r3, #18]
 800e180:	4618      	mov	r0, r3
 800e182:	f7f8 feb5 	bl	8006ef0 <lwip_htons>
 800e186:	4603      	mov	r3, r0
 800e188:	461a      	mov	r2, r3
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e18e:	887b      	ldrh	r3, [r7, #2]
 800e190:	4618      	mov	r0, r3
 800e192:	f7f8 fead 	bl	8006ef0 <lwip_htons>
 800e196:	4603      	mov	r3, r0
 800e198:	461a      	mov	r2, r3
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	719a      	strb	r2, [r3, #6]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	891b      	ldrh	r3, [r3, #8]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7f8 fe9f 	bl	8006ef0 <lwip_htons>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e1ba:	2311      	movs	r3, #17
 800e1bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	7a9b      	ldrb	r3, [r3, #10]
 800e1c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	7a5b      	ldrb	r3, [r3, #9]
 800e1c8:	7cb9      	ldrb	r1, [r7, #18]
 800e1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1cc:	9202      	str	r2, [sp, #8]
 800e1ce:	7cfa      	ldrb	r2, [r7, #19]
 800e1d0:	9201      	str	r2, [sp, #4]
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1da:	69f8      	ldr	r0, [r7, #28]
 800e1dc:	f003 fab8 	bl	8011750 <ip4_output_if_src>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e1e4:	69fa      	ldr	r2, [r7, #28]
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d004      	beq.n	800e1f6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800e1ec:	69f8      	ldr	r0, [r7, #28]
 800e1ee:	f7fa f815 	bl	800821c <pbuf_free>
    q = NULL;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e1f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3720      	adds	r7, #32
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	08017960 	.word	0x08017960
 800e208:	080179cc 	.word	0x080179cc
 800e20c:	080179a4 	.word	0x080179a4

0800e210 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	4613      	mov	r3, r2
 800e21c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e224:	4b30      	ldr	r3, [pc, #192]	; (800e2e8 <udp_bind+0xd8>)
 800e226:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d002      	beq.n	800e234 <udp_bind+0x24>
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d102      	bne.n	800e23a <udp_bind+0x2a>
    return ERR_VAL;
 800e234:	f06f 0305 	mvn.w	r3, #5
 800e238:	e052      	b.n	800e2e0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e23e:	4b2b      	ldr	r3, [pc, #172]	; (800e2ec <udp_bind+0xdc>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	617b      	str	r3, [r7, #20]
 800e244:	e009      	b.n	800e25a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d102      	bne.n	800e254 <udp_bind+0x44>
      rebind = 1;
 800e24e:	2301      	movs	r3, #1
 800e250:	74fb      	strb	r3, [r7, #19]
      break;
 800e252:	e005      	b.n	800e260 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	617b      	str	r3, [r7, #20]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1f2      	bne.n	800e246 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800e260:	88fb      	ldrh	r3, [r7, #6]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d109      	bne.n	800e27a <udp_bind+0x6a>
    port = udp_new_port();
 800e266:	f7ff fda1 	bl	800ddac <udp_new_port>
 800e26a:	4603      	mov	r3, r0
 800e26c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e26e:	88fb      	ldrh	r3, [r7, #6]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d11e      	bne.n	800e2b2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e274:	f06f 0307 	mvn.w	r3, #7
 800e278:	e032      	b.n	800e2e0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e27a:	4b1c      	ldr	r3, [pc, #112]	; (800e2ec <udp_bind+0xdc>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	617b      	str	r3, [r7, #20]
 800e280:	e014      	b.n	800e2ac <udp_bind+0x9c>
      if (pcb != ipcb) {
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	429a      	cmp	r2, r3
 800e288:	d00d      	beq.n	800e2a6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	8a5b      	ldrh	r3, [r3, #18]
 800e28e:	88fa      	ldrh	r2, [r7, #6]
 800e290:	429a      	cmp	r2, r3
 800e292:	d108      	bne.n	800e2a6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d102      	bne.n	800e2a6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e2a0:	f06f 0307 	mvn.w	r3, #7
 800e2a4:	e01c      	b.n	800e2e0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	617b      	str	r3, [r7, #20]
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e7      	bne.n	800e282 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <udp_bind+0xae>
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	e000      	b.n	800e2c0 <udp_bind+0xb0>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	88fa      	ldrh	r2, [r7, #6]
 800e2c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e2ca:	7cfb      	ldrb	r3, [r7, #19]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e2d0:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <udp_bind+0xdc>)
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e2d8:	4a04      	ldr	r2, [pc, #16]	; (800e2ec <udp_bind+0xdc>)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	08019814 	.word	0x08019814
 800e2ec:	2000721c 	.word	0x2000721c

0800e2f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <udp_connect+0x1a>
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d102      	bne.n	800e310 <udp_connect+0x20>
    return ERR_VAL;
 800e30a:	f06f 0305 	mvn.w	r3, #5
 800e30e:	e03e      	b.n	800e38e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	8a5b      	ldrh	r3, [r3, #18]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10f      	bne.n	800e338 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e318:	68f9      	ldr	r1, [r7, #12]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	8a5b      	ldrh	r3, [r3, #18]
 800e31e:	461a      	mov	r2, r3
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7ff ff75 	bl	800e210 <udp_bind>
 800e326:	4603      	mov	r3, r0
 800e328:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e32a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d002      	beq.n	800e338 <udp_connect+0x48>
      return err;
 800e332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e336:	e02a      	b.n	800e38e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <udp_connect+0x54>
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	e000      	b.n	800e346 <udp_connect+0x56>
 800e344:	2300      	movs	r3, #0
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	88fa      	ldrh	r2, [r7, #6]
 800e34e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	7c1b      	ldrb	r3, [r3, #16]
 800e354:	f043 0304 	orr.w	r3, r3, #4
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e35e:	4b0e      	ldr	r3, [pc, #56]	; (800e398 <udp_connect+0xa8>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	e008      	b.n	800e378 <udp_connect+0x88>
    if (pcb == ipcb) {
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d101      	bne.n	800e372 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	e00d      	b.n	800e38e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	617b      	str	r3, [r7, #20]
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1f3      	bne.n	800e366 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e37e:	4b06      	ldr	r3, [pc, #24]	; (800e398 <udp_connect+0xa8>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e386:	4a04      	ldr	r2, [pc, #16]	; (800e398 <udp_connect+0xa8>)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3718      	adds	r7, #24
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	2000721c 	.word	0x2000721c

0800e39c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	61da      	str	r2, [r3, #28]
}
 800e3b4:	bf00      	nop
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e3c8:	4b15      	ldr	r3, [pc, #84]	; (800e420 <udp_remove+0x60>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d105      	bne.n	800e3de <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e3d2:	4b13      	ldr	r3, [pc, #76]	; (800e420 <udp_remove+0x60>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	4a11      	ldr	r2, [pc, #68]	; (800e420 <udp_remove+0x60>)
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	e017      	b.n	800e40e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e3de:	4b10      	ldr	r3, [pc, #64]	; (800e420 <udp_remove+0x60>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	60fb      	str	r3, [r7, #12]
 800e3e4:	e010      	b.n	800e408 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d009      	beq.n	800e402 <udp_remove+0x42>
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d104      	bne.n	800e402 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	68da      	ldr	r2, [r3, #12]
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	60da      	str	r2, [r3, #12]
        break;
 800e400:	e005      	b.n	800e40e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1eb      	bne.n	800e3e6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e40e:	6879      	ldr	r1, [r7, #4]
 800e410:	2000      	movs	r0, #0
 800e412:	f7f9 f9d1 	bl	80077b8 <memp_free>
}
 800e416:	bf00      	nop
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	2000721c 	.word	0x2000721c

0800e424 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e42a:	2000      	movs	r0, #0
 800e42c:	f7f9 f978 	bl	8007720 <memp_malloc>
 800e430:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d007      	beq.n	800e448 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e438:	2220      	movs	r2, #32
 800e43a:	2100      	movs	r1, #0
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f006 fc85 	bl	8014d4c <memset>
    pcb->ttl = UDP_TTL;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	22ff      	movs	r2, #255	; 0xff
 800e446:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e448:	687b      	ldr	r3, [r7, #4]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d01e      	beq.n	800e4a2 <udp_netif_ip_addr_changed+0x4e>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d01a      	beq.n	800e4a2 <udp_netif_ip_addr_changed+0x4e>
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d017      	beq.n	800e4a2 <udp_netif_ip_addr_changed+0x4e>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d013      	beq.n	800e4a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e47a:	4b0d      	ldr	r3, [pc, #52]	; (800e4b0 <udp_netif_ip_addr_changed+0x5c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	e00c      	b.n	800e49c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d103      	bne.n	800e496 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1ef      	bne.n	800e482 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e4a2:	bf00      	nop
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	2000721c 	.word	0x2000721c

0800e4b4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e4b8:	4b20      	ldr	r3, [pc, #128]	; (800e53c <dhcp_inc_pcb_refcount+0x88>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d133      	bne.n	800e528 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e4c0:	4b1f      	ldr	r3, [pc, #124]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <dhcp_inc_pcb_refcount+0x20>
 800e4c8:	4b1e      	ldr	r3, [pc, #120]	; (800e544 <dhcp_inc_pcb_refcount+0x90>)
 800e4ca:	22d9      	movs	r2, #217	; 0xd9
 800e4cc:	491e      	ldr	r1, [pc, #120]	; (800e548 <dhcp_inc_pcb_refcount+0x94>)
 800e4ce:	481f      	ldr	r0, [pc, #124]	; (800e54c <dhcp_inc_pcb_refcount+0x98>)
 800e4d0:	f006 fc44 	bl	8014d5c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e4d4:	f7ff ffa6 	bl	800e424 <udp_new>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	4b19      	ldr	r3, [pc, #100]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e4dc:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800e4de:	4b18      	ldr	r3, [pc, #96]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d102      	bne.n	800e4ec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ea:	e024      	b.n	800e536 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e4ec:	4b14      	ldr	r3, [pc, #80]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	7a1a      	ldrb	r2, [r3, #8]
 800e4f2:	4b13      	ldr	r3, [pc, #76]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f042 0220 	orr.w	r2, r2, #32
 800e4fa:	b2d2      	uxtb	r2, r2
 800e4fc:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800e4fe:	4b10      	ldr	r3, [pc, #64]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2244      	movs	r2, #68	; 0x44
 800e504:	4912      	ldr	r1, [pc, #72]	; (800e550 <dhcp_inc_pcb_refcount+0x9c>)
 800e506:	4618      	mov	r0, r3
 800e508:	f7ff fe82 	bl	800e210 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800e50c:	4b0c      	ldr	r3, [pc, #48]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2243      	movs	r2, #67	; 0x43
 800e512:	490f      	ldr	r1, [pc, #60]	; (800e550 <dhcp_inc_pcb_refcount+0x9c>)
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff feeb 	bl	800e2f0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e51a:	4b09      	ldr	r3, [pc, #36]	; (800e540 <dhcp_inc_pcb_refcount+0x8c>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2200      	movs	r2, #0
 800e520:	490c      	ldr	r1, [pc, #48]	; (800e554 <dhcp_inc_pcb_refcount+0xa0>)
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff ff3a 	bl	800e39c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e528:	4b04      	ldr	r3, [pc, #16]	; (800e53c <dhcp_inc_pcb_refcount+0x88>)
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	b2da      	uxtb	r2, r3
 800e530:	4b02      	ldr	r3, [pc, #8]	; (800e53c <dhcp_inc_pcb_refcount+0x88>)
 800e532:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	20000764 	.word	0x20000764
 800e540:	20000760 	.word	0x20000760
 800e544:	080179fc 	.word	0x080179fc
 800e548:	08017a34 	.word	0x08017a34
 800e54c:	08017a5c 	.word	0x08017a5c
 800e550:	08019814 	.word	0x08019814
 800e554:	0800fc11 	.word	0x0800fc11

0800e558 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e55c:	4b0e      	ldr	r3, [pc, #56]	; (800e598 <dhcp_dec_pcb_refcount+0x40>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d105      	bne.n	800e570 <dhcp_dec_pcb_refcount+0x18>
 800e564:	4b0d      	ldr	r3, [pc, #52]	; (800e59c <dhcp_dec_pcb_refcount+0x44>)
 800e566:	22f3      	movs	r2, #243	; 0xf3
 800e568:	490d      	ldr	r1, [pc, #52]	; (800e5a0 <dhcp_dec_pcb_refcount+0x48>)
 800e56a:	480e      	ldr	r0, [pc, #56]	; (800e5a4 <dhcp_dec_pcb_refcount+0x4c>)
 800e56c:	f006 fbf6 	bl	8014d5c <iprintf>
  dhcp_pcb_refcount--;
 800e570:	4b09      	ldr	r3, [pc, #36]	; (800e598 <dhcp_dec_pcb_refcount+0x40>)
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	3b01      	subs	r3, #1
 800e576:	b2da      	uxtb	r2, r3
 800e578:	4b07      	ldr	r3, [pc, #28]	; (800e598 <dhcp_dec_pcb_refcount+0x40>)
 800e57a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e57c:	4b06      	ldr	r3, [pc, #24]	; (800e598 <dhcp_dec_pcb_refcount+0x40>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d107      	bne.n	800e594 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e584:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <dhcp_dec_pcb_refcount+0x50>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff ff19 	bl	800e3c0 <udp_remove>
    dhcp_pcb = NULL;
 800e58e:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <dhcp_dec_pcb_refcount+0x50>)
 800e590:	2200      	movs	r2, #0
 800e592:	601a      	str	r2, [r3, #0]
  }
}
 800e594:	bf00      	nop
 800e596:	bd80      	pop	{r7, pc}
 800e598:	20000764 	.word	0x20000764
 800e59c:	080179fc 	.word	0x080179fc
 800e5a0:	08017a84 	.word	0x08017a84
 800e5a4:	08017a5c 	.word	0x08017a5c
 800e5a8:	20000760 	.word	0x20000760

0800e5ac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6a1b      	ldr	r3, [r3, #32]
 800e5b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e5ba:	210c      	movs	r1, #12
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f000 ff85 	bl	800f4cc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e5c2:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <dhcp_handle_nak+0x30>)
 800e5c4:	4a05      	ldr	r2, [pc, #20]	; (800e5dc <dhcp_handle_nak+0x30>)
 800e5c6:	4905      	ldr	r1, [pc, #20]	; (800e5dc <dhcp_handle_nak+0x30>)
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7f9 f983 	bl	80078d4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fbb6 	bl	800ed40 <dhcp_discover>
}
 800e5d4:	bf00      	nop
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	08019814 	.word	0x08019814

0800e5e0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e5ee:	2108      	movs	r1, #8
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f000 ff6b 	bl	800f4cc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	3328      	adds	r3, #40	; 0x28
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f002 fb1e 	bl	8010c40 <etharp_query>
 800e604:	4603      	mov	r3, r0
 800e606:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	7a9b      	ldrb	r3, [r3, #10]
 800e60c:	2bff      	cmp	r3, #255	; 0xff
 800e60e:	d005      	beq.n	800e61c <dhcp_check+0x3c>
    dhcp->tries++;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	7a9b      	ldrb	r3, [r3, #10]
 800e614:	3301      	adds	r3, #1
 800e616:	b2da      	uxtb	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800e61c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e620:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e622:	893b      	ldrh	r3, [r7, #8]
 800e624:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e628:	4a06      	ldr	r2, [pc, #24]	; (800e644 <dhcp_check+0x64>)
 800e62a:	fb82 1203 	smull	r1, r2, r2, r3
 800e62e:	1152      	asrs	r2, r2, #5
 800e630:	17db      	asrs	r3, r3, #31
 800e632:	1ad3      	subs	r3, r2, r3
 800e634:	b29a      	uxth	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	10624dd3 	.word	0x10624dd3

0800e648 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a1b      	ldr	r3, [r3, #32]
 800e654:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e656:	4b0c      	ldr	r3, [pc, #48]	; (800e688 <dhcp_handle_offer+0x40>)
 800e658:	789b      	ldrb	r3, [r3, #2]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00f      	beq.n	800e67e <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e65e:	4b0b      	ldr	r3, [pc, #44]	; (800e68c <dhcp_handle_offer+0x44>)
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	4618      	mov	r0, r3
 800e664:	f7f8 fc52 	bl	8006f0c <lwip_htonl>
 800e668:	4602      	mov	r2, r0
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	691a      	ldr	r2, [r3, #16]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f809 	bl	800e690 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20007220 	.word	0x20007220
 800e68c:	20007228 	.word	0x20007228

0800e690 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b088      	sub	sp, #32
 800e694:	af02      	add	r7, sp, #8
 800e696:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6a1b      	ldr	r3, [r3, #32]
 800e69c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e69e:	2101      	movs	r1, #1
 800e6a0:	6938      	ldr	r0, [r7, #16]
 800e6a2:	f000 ff13 	bl	800f4cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e6a6:	2203      	movs	r2, #3
 800e6a8:	6939      	ldr	r1, [r7, #16]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f001 fb94 	bl	800fdd8 <dhcp_create_msg>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800e6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d159      	bne.n	800e770 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e6bc:	2202      	movs	r2, #2
 800e6be:	2139      	movs	r1, #57	; 0x39
 800e6c0:	6938      	ldr	r0, [r7, #16]
 800e6c2:	f000 ff1d 	bl	800f500 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6938      	ldr	r0, [r7, #16]
 800e6ce:	f000 ff79 	bl	800f5c4 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800e6d2:	2204      	movs	r2, #4
 800e6d4:	2132      	movs	r1, #50	; 0x32
 800e6d6:	6938      	ldr	r0, [r7, #16]
 800e6d8:	f000 ff12 	bl	800f500 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7f8 fc13 	bl	8006f0c <lwip_htonl>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6938      	ldr	r0, [r7, #16]
 800e6ec:	f000 ffa4 	bl	800f638 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800e6f0:	2204      	movs	r2, #4
 800e6f2:	2136      	movs	r1, #54	; 0x36
 800e6f4:	6938      	ldr	r0, [r7, #16]
 800e6f6:	f000 ff03 	bl	800f500 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f8 fc04 	bl	8006f0c <lwip_htonl>
 800e704:	4603      	mov	r3, r0
 800e706:	4619      	mov	r1, r3
 800e708:	6938      	ldr	r0, [r7, #16]
 800e70a:	f000 ff95 	bl	800f638 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e70e:	2203      	movs	r2, #3
 800e710:	2137      	movs	r1, #55	; 0x37
 800e712:	6938      	ldr	r0, [r7, #16]
 800e714:	f000 fef4 	bl	800f500 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e718:	2300      	movs	r3, #0
 800e71a:	75fb      	strb	r3, [r7, #23]
 800e71c:	e009      	b.n	800e732 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
 800e720:	4a29      	ldr	r2, [pc, #164]	; (800e7c8 <dhcp_select+0x138>)
 800e722:	5cd3      	ldrb	r3, [r2, r3]
 800e724:	4619      	mov	r1, r3
 800e726:	6938      	ldr	r0, [r7, #16]
 800e728:	f000 ff24 	bl	800f574 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
 800e72e:	3301      	adds	r3, #1
 800e730:	75fb      	strb	r3, [r7, #23]
 800e732:	7dfb      	ldrb	r3, [r7, #23]
 800e734:	2b02      	cmp	r3, #2
 800e736:	d9f2      	bls.n	800e71e <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800e738:	6938      	ldr	r0, [r7, #16]
 800e73a:	f001 fcf1 	bl	8010120 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	68da      	ldr	r2, [r3, #12]
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	8a9b      	ldrh	r3, [r3, #20]
 800e746:	33f0      	adds	r3, #240	; 0xf0
 800e748:	b29b      	uxth	r3, r3
 800e74a:	4619      	mov	r1, r3
 800e74c:	4610      	mov	r0, r2
 800e74e:	f7f9 fbf1 	bl	8007f34 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800e752:	4b1e      	ldr	r3, [pc, #120]	; (800e7cc <dhcp_select+0x13c>)
 800e754:	6818      	ldr	r0, [r3, #0]
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	68d9      	ldr	r1, [r3, #12]
 800e75a:	4b1d      	ldr	r3, [pc, #116]	; (800e7d0 <dhcp_select+0x140>)
 800e75c:	9301      	str	r3, [sp, #4]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	2343      	movs	r3, #67	; 0x43
 800e764:	4a1b      	ldr	r2, [pc, #108]	; (800e7d4 <dhcp_select+0x144>)
 800e766:	f7ff fcb9 	bl	800e0dc <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800e76a:	6938      	ldr	r0, [r7, #16]
 800e76c:	f001 fc96 	bl	801009c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	7a9b      	ldrb	r3, [r3, #10]
 800e774:	2bff      	cmp	r3, #255	; 0xff
 800e776:	d005      	beq.n	800e784 <dhcp_select+0xf4>
    dhcp->tries++;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	7a9b      	ldrb	r3, [r3, #10]
 800e77c:	3301      	adds	r3, #1
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	7a9b      	ldrb	r3, [r3, #10]
 800e788:	2b05      	cmp	r3, #5
 800e78a:	d807      	bhi.n	800e79c <dhcp_select+0x10c>
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	7a9b      	ldrb	r3, [r3, #10]
 800e790:	461a      	mov	r2, r3
 800e792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e796:	4093      	lsls	r3, r2
 800e798:	b29b      	uxth	r3, r3
 800e79a:	e001      	b.n	800e7a0 <dhcp_select+0x110>
 800e79c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e7a0:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e7a2:	89bb      	ldrh	r3, [r7, #12]
 800e7a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e7a8:	4a0b      	ldr	r2, [pc, #44]	; (800e7d8 <dhcp_select+0x148>)
 800e7aa:	fb82 1203 	smull	r1, r2, r2, r3
 800e7ae:	1152      	asrs	r2, r2, #5
 800e7b0:	17db      	asrs	r3, r3, #31
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20000010 	.word	0x20000010
 800e7cc:	20000760 	.word	0x20000760
 800e7d0:	08019814 	.word	0x08019814
 800e7d4:	08019818 	.word	0x08019818
 800e7d8:	10624dd3 	.word	0x10624dd3

0800e7dc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800e7e2:	4b27      	ldr	r3, [pc, #156]	; (800e880 <dhcp_coarse_tmr+0xa4>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800e7e8:	e042      	b.n	800e870 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d039      	beq.n	800e86a <dhcp_coarse_tmr+0x8e>
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	7a5b      	ldrb	r3, [r3, #9]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d035      	beq.n	800e86a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e802:	2b00      	cmp	r3, #0
 800e804:	d012      	beq.n	800e82c <dhcp_coarse_tmr+0x50>
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	8c1b      	ldrh	r3, [r3, #32]
 800e80a:	3301      	adds	r3, #1
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	841a      	strh	r2, [r3, #32]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	8c1a      	ldrh	r2, [r3, #32]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d106      	bne.n	800e82c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fd94 	bl	800f34c <dhcp_release>
        dhcp_discover(netif);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fa8b 	bl	800ed40 <dhcp_discover>
 800e82a:	e01e      	b.n	800e86a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	8bdb      	ldrh	r3, [r3, #30]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <dhcp_coarse_tmr+0x70>
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	8bdb      	ldrh	r3, [r3, #30]
 800e838:	1e5a      	subs	r2, r3, #1
 800e83a:	b291      	uxth	r1, r2
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	83d1      	strh	r1, [r2, #30]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d103      	bne.n	800e84c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f000 f8c6 	bl	800e9d6 <dhcp_t2_timeout>
 800e84a:	e00e      	b.n	800e86a <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	8b9b      	ldrh	r3, [r3, #28]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00a      	beq.n	800e86a <dhcp_coarse_tmr+0x8e>
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	8b9b      	ldrh	r3, [r3, #28]
 800e858:	1e5a      	subs	r2, r3, #1
 800e85a:	b291      	uxth	r1, r2
 800e85c:	683a      	ldr	r2, [r7, #0]
 800e85e:	8391      	strh	r1, [r2, #28]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d102      	bne.n	800e86a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f888 	bl	800e97a <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1b9      	bne.n	800e7ea <dhcp_coarse_tmr+0xe>
  }
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	200071f4 	.word	0x200071f4

0800e884 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800e88a:	4b16      	ldr	r3, [pc, #88]	; (800e8e4 <dhcp_fine_tmr+0x60>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800e890:	e020      	b.n	800e8d4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a1b      	ldr	r3, [r3, #32]
 800e896:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d017      	beq.n	800e8ce <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	8adb      	ldrh	r3, [r3, #22]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d906      	bls.n	800e8b4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	8adb      	ldrh	r3, [r3, #22]
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	82da      	strh	r2, [r3, #22]
 800e8b2:	e00c      	b.n	800e8ce <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	8adb      	ldrh	r3, [r3, #22]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d108      	bne.n	800e8ce <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	8adb      	ldrh	r3, [r3, #22]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f80d 	bl	800e8e8 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1db      	bne.n	800e892 <dhcp_fine_tmr+0xe>
  }
}
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	200071f4 	.word	0x200071f4

0800e8e8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6a1b      	ldr	r3, [r3, #32]
 800e8f4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	7a5b      	ldrb	r3, [r3, #9]
 800e8fa:	2b0c      	cmp	r3, #12
 800e8fc:	d003      	beq.n	800e906 <dhcp_timeout+0x1e>
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	7a5b      	ldrb	r3, [r3, #9]
 800e902:	2b06      	cmp	r3, #6
 800e904:	d103      	bne.n	800e90e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 fa1a 	bl	800ed40 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e90c:	e031      	b.n	800e972 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	7a5b      	ldrb	r3, [r3, #9]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d10e      	bne.n	800e934 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	7a9b      	ldrb	r3, [r3, #10]
 800e91a:	2b05      	cmp	r3, #5
 800e91c:	d803      	bhi.n	800e926 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7ff feb6 	bl	800e690 <dhcp_select>
}
 800e924:	e025      	b.n	800e972 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fd10 	bl	800f34c <dhcp_release>
      dhcp_discover(netif);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 fa07 	bl	800ed40 <dhcp_discover>
}
 800e932:	e01e      	b.n	800e972 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	7a5b      	ldrb	r3, [r3, #9]
 800e938:	2b08      	cmp	r3, #8
 800e93a:	d10b      	bne.n	800e954 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	7a9b      	ldrb	r3, [r3, #10]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d803      	bhi.n	800e94c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f7ff fe4b 	bl	800e5e0 <dhcp_check>
}
 800e94a:	e012      	b.n	800e972 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fa83 	bl	800ee58 <dhcp_bind>
}
 800e952:	e00e      	b.n	800e972 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	7a5b      	ldrb	r3, [r3, #9]
 800e958:	2b03      	cmp	r3, #3
 800e95a:	d10a      	bne.n	800e972 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	7a9b      	ldrb	r3, [r3, #10]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d803      	bhi.n	800e96c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 fc5d 	bl	800f224 <dhcp_reboot>
}
 800e96a:	e002      	b.n	800e972 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f9e7 	bl	800ed40 <dhcp_discover>
}
 800e972:	bf00      	nop
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	7a5b      	ldrb	r3, [r3, #9]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d007      	beq.n	800e9a0 <dhcp_t1_timeout+0x26>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	7a5b      	ldrb	r3, [r3, #9]
 800e994:	2b0a      	cmp	r3, #10
 800e996:	d003      	beq.n	800e9a0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e99c:	2b05      	cmp	r3, #5
 800e99e:	d116      	bne.n	800e9ce <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 fb33 	bl	800f00c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	8b5b      	ldrh	r3, [r3, #26]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8c1b      	ldrh	r3, [r3, #32]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	dd0b      	ble.n	800e9ce <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	8b5b      	ldrh	r3, [r3, #26]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	8c1b      	ldrh	r3, [r3, #32]
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	0fda      	lsrs	r2, r3, #31
 800e9c4:	4413      	add	r3, r2
 800e9c6:	105b      	asrs	r3, r3, #1
 800e9c8:	b29a      	uxth	r2, r3
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800e9ce:	bf00      	nop
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b084      	sub	sp, #16
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	7a5b      	ldrb	r3, [r3, #9]
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d00b      	beq.n	800ea04 <dhcp_t2_timeout+0x2e>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	7a5b      	ldrb	r3, [r3, #9]
 800e9f0:	2b0a      	cmp	r3, #10
 800e9f2:	d007      	beq.n	800ea04 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e9f8:	2b05      	cmp	r3, #5
 800e9fa:	d003      	beq.n	800ea04 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	7a5b      	ldrb	r3, [r3, #9]
 800ea00:	2b04      	cmp	r3, #4
 800ea02:	d116      	bne.n	800ea32 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 fb87 	bl	800f118 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ea0e:	461a      	mov	r2, r3
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	8c1b      	ldrh	r3, [r3, #32]
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	dd0b      	ble.n	800ea32 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ea1e:	461a      	mov	r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	8c1b      	ldrh	r3, [r3, #32]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	0fda      	lsrs	r2, r3, #31
 800ea28:	4413      	add	r3, r2
 800ea2a:	105b      	asrs	r3, r3, #1
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
	...

0800ea3c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a1b      	ldr	r3, [r3, #32]
 800ea48:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ea56:	4b27      	ldr	r3, [pc, #156]	; (800eaf4 <dhcp_handle_ack+0xb8>)
 800ea58:	78db      	ldrb	r3, [r3, #3]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ea5e:	4b26      	ldr	r3, [pc, #152]	; (800eaf8 <dhcp_handle_ack+0xbc>)
 800ea60:	68da      	ldr	r2, [r3, #12]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ea66:	4b23      	ldr	r3, [pc, #140]	; (800eaf4 <dhcp_handle_ack+0xb8>)
 800ea68:	791b      	ldrb	r3, [r3, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d004      	beq.n	800ea78 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ea6e:	4b22      	ldr	r3, [pc, #136]	; (800eaf8 <dhcp_handle_ack+0xbc>)
 800ea70:	691a      	ldr	r2, [r3, #16]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	639a      	str	r2, [r3, #56]	; 0x38
 800ea76:	e004      	b.n	800ea82 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea7c:	085a      	lsrs	r2, r3, #1
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ea82:	4b1c      	ldr	r3, [pc, #112]	; (800eaf4 <dhcp_handle_ack+0xb8>)
 800ea84:	795b      	ldrb	r3, [r3, #5]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d004      	beq.n	800ea94 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ea8a:	4b1b      	ldr	r3, [pc, #108]	; (800eaf8 <dhcp_handle_ack+0xbc>)
 800ea8c:	695a      	ldr	r2, [r3, #20]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	63da      	str	r2, [r3, #60]	; 0x3c
 800ea92:	e007      	b.n	800eaa4 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea98:	4613      	mov	r3, r2
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	1a9b      	subs	r3, r3, r2
 800ea9e:	08da      	lsrs	r2, r3, #3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	691a      	ldr	r2, [r3, #16]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800eaae:	4b11      	ldr	r3, [pc, #68]	; (800eaf4 <dhcp_handle_ack+0xb8>)
 800eab0:	799b      	ldrb	r3, [r3, #6]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00b      	beq.n	800eace <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800eab6:	4b10      	ldr	r3, [pc, #64]	; (800eaf8 <dhcp_handle_ack+0xbc>)
 800eab8:	699b      	ldr	r3, [r3, #24]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7f8 fa26 	bl	8006f0c <lwip_htonl>
 800eac0:	4602      	mov	r2, r0
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2201      	movs	r2, #1
 800eaca:	72da      	strb	r2, [r3, #11]
 800eacc:	e002      	b.n	800ead4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ead4:	4b07      	ldr	r3, [pc, #28]	; (800eaf4 <dhcp_handle_ack+0xb8>)
 800ead6:	79db      	ldrb	r3, [r3, #7]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d007      	beq.n	800eaec <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800eadc:	4b06      	ldr	r3, [pc, #24]	; (800eaf8 <dhcp_handle_ack+0xbc>)
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7f8 fa13 	bl	8006f0c <lwip_htonl>
 800eae6:	4602      	mov	r2, r0
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800eaec:	bf00      	nop
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20007220 	.word	0x20007220
 800eaf8:	20007228 	.word	0x20007228

0800eafc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <dhcp_start+0x22>
 800eb0a:	4b3c      	ldr	r3, [pc, #240]	; (800ebfc <dhcp_start+0x100>)
 800eb0c:	f240 22d6 	movw	r2, #726	; 0x2d6
 800eb10:	493b      	ldr	r1, [pc, #236]	; (800ec00 <dhcp_start+0x104>)
 800eb12:	483c      	ldr	r0, [pc, #240]	; (800ec04 <dhcp_start+0x108>)
 800eb14:	f006 f922 	bl	8014d5c <iprintf>
 800eb18:	f06f 030f 	mvn.w	r3, #15
 800eb1c:	e069      	b.n	800ebf2 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb24:	f003 0301 	and.w	r3, r3, #1
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d109      	bne.n	800eb40 <dhcp_start+0x44>
 800eb2c:	4b33      	ldr	r3, [pc, #204]	; (800ebfc <dhcp_start+0x100>)
 800eb2e:	f240 22d7 	movw	r2, #727	; 0x2d7
 800eb32:	4935      	ldr	r1, [pc, #212]	; (800ec08 <dhcp_start+0x10c>)
 800eb34:	4833      	ldr	r0, [pc, #204]	; (800ec04 <dhcp_start+0x108>)
 800eb36:	f006 f911 	bl	8014d5c <iprintf>
 800eb3a:	f06f 030f 	mvn.w	r3, #15
 800eb3e:	e058      	b.n	800ebf2 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb4a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800eb4e:	d202      	bcs.n	800eb56 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295
 800eb54:	e04d      	b.n	800ebf2 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10d      	bne.n	800eb78 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800eb5c:	2040      	movs	r0, #64	; 0x40
 800eb5e:	f7f8 fc81 	bl	8007464 <mem_malloc>
 800eb62:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d102      	bne.n	800eb70 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800eb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb6e:	e040      	b.n	800ebf2 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	621a      	str	r2, [r3, #32]
 800eb76:	e01b      	b.n	800ebb0 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d006      	beq.n	800eb8e <dhcp_start+0x92>
 800eb80:	4b1e      	ldr	r3, [pc, #120]	; (800ebfc <dhcp_start+0x100>)
 800eb82:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800eb86:	4921      	ldr	r1, [pc, #132]	; (800ec0c <dhcp_start+0x110>)
 800eb88:	481e      	ldr	r0, [pc, #120]	; (800ec04 <dhcp_start+0x108>)
 800eb8a:	f006 f8e7 	bl	8014d5c <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d006      	beq.n	800eba4 <dhcp_start+0xa8>
 800eb96:	4b19      	ldr	r3, [pc, #100]	; (800ebfc <dhcp_start+0x100>)
 800eb98:	f240 22f1 	movw	r2, #753	; 0x2f1
 800eb9c:	491c      	ldr	r1, [pc, #112]	; (800ec10 <dhcp_start+0x114>)
 800eb9e:	4819      	ldr	r0, [pc, #100]	; (800ec04 <dhcp_start+0x108>)
 800eba0:	f006 f8dc 	bl	8014d5c <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	7a1b      	ldrb	r3, [r3, #8]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d001      	beq.n	800ebb0 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ebac:	f7ff fcd4 	bl	800e558 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ebb0:	2240      	movs	r2, #64	; 0x40
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f006 f8c9 	bl	8014d4c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ebba:	f7ff fc7b 	bl	800e4b4 <dhcp_inc_pcb_refcount>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <dhcp_start+0xce>
    return ERR_MEM;
 800ebc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc8:	e013      	b.n	800ebf2 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f8b5 	bl	800ed40 <dhcp_discover>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ebda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d005      	beq.n	800ebee <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 fc3a 	bl	800f45c <dhcp_stop>
    return ERR_MEM;
 800ebe8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebec:	e001      	b.n	800ebf2 <dhcp_start+0xf6>
  }
  return result;
 800ebee:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	080179fc 	.word	0x080179fc
 800ec00:	08017aa8 	.word	0x08017aa8
 800ec04:	08017a5c 	.word	0x08017a5c
 800ec08:	08017aec 	.word	0x08017aec
 800ec0c:	08017b10 	.word	0x08017b10
 800ec10:	08017b28 	.word	0x08017b28

0800ec14 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d107      	bne.n	800ec34 <dhcp_arp_reply+0x20>
 800ec24:	4b0e      	ldr	r3, [pc, #56]	; (800ec60 <dhcp_arp_reply+0x4c>)
 800ec26:	f240 327b 	movw	r2, #891	; 0x37b
 800ec2a:	490e      	ldr	r1, [pc, #56]	; (800ec64 <dhcp_arp_reply+0x50>)
 800ec2c:	480e      	ldr	r0, [pc, #56]	; (800ec68 <dhcp_arp_reply+0x54>)
 800ec2e:	f006 f895 	bl	8014d5c <iprintf>
 800ec32:	e012      	b.n	800ec5a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6a1b      	ldr	r3, [r3, #32]
 800ec38:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00c      	beq.n	800ec5a <dhcp_arp_reply+0x46>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	7a5b      	ldrb	r3, [r3, #9]
 800ec44:	2b08      	cmp	r3, #8
 800ec46:	d108      	bne.n	800ec5a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d102      	bne.n	800ec5a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 f809 	bl	800ec6c <dhcp_decline>
    }
  }
}
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	080179fc 	.word	0x080179fc
 800ec64:	08017aa8 	.word	0x08017aa8
 800ec68:	08017a5c 	.word	0x08017a5c

0800ec6c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af02      	add	r7, sp, #8
 800ec72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6a1b      	ldr	r3, [r3, #32]
 800ec78:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ec7e:	210c      	movs	r1, #12
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 fc23 	bl	800f4cc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800ec86:	2204      	movs	r2, #4
 800ec88:	68f9      	ldr	r1, [r7, #12]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 f8a4 	bl	800fdd8 <dhcp_create_msg>
 800ec90:	4603      	mov	r3, r0
 800ec92:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800ec94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d12a      	bne.n	800ecf2 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800ec9c:	2204      	movs	r2, #4
 800ec9e:	2132      	movs	r1, #50	; 0x32
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f000 fc2d 	bl	800f500 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f8 f92e 	bl	8006f0c <lwip_htonl>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f000 fcbf 	bl	800f638 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f001 fa30 	bl	8010120 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	68da      	ldr	r2, [r3, #12]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	8a9b      	ldrh	r3, [r3, #20]
 800ecc8:	33f0      	adds	r3, #240	; 0xf0
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	4619      	mov	r1, r3
 800ecce:	4610      	mov	r0, r2
 800ecd0:	f7f9 f930 	bl	8007f34 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800ecd4:	4b16      	ldr	r3, [pc, #88]	; (800ed30 <dhcp_decline+0xc4>)
 800ecd6:	6818      	ldr	r0, [r3, #0]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68d9      	ldr	r1, [r3, #12]
 800ecdc:	4b15      	ldr	r3, [pc, #84]	; (800ed34 <dhcp_decline+0xc8>)
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	2343      	movs	r3, #67	; 0x43
 800ece6:	4a14      	ldr	r2, [pc, #80]	; (800ed38 <dhcp_decline+0xcc>)
 800ece8:	f7ff f9f8 	bl	800e0dc <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f001 f9d5 	bl	801009c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	7a9b      	ldrb	r3, [r3, #10]
 800ecf6:	2bff      	cmp	r3, #255	; 0xff
 800ecf8:	d005      	beq.n	800ed06 <dhcp_decline+0x9a>
    dhcp->tries++;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	7a9b      	ldrb	r3, [r3, #10]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800ed06:	f242 7310 	movw	r3, #10000	; 0x2710
 800ed0a:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ed0c:	893b      	ldrh	r3, [r7, #8]
 800ed0e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ed12:	4a0a      	ldr	r2, [pc, #40]	; (800ed3c <dhcp_decline+0xd0>)
 800ed14:	fb82 1203 	smull	r1, r2, r2, r3
 800ed18:	1152      	asrs	r2, r2, #5
 800ed1a:	17db      	asrs	r3, r3, #31
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ed24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20000760 	.word	0x20000760
 800ed34:	08019814 	.word	0x08019814
 800ed38:	08019818 	.word	0x08019818
 800ed3c:	10624dd3 	.word	0x10624dd3

0800ed40 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6a1b      	ldr	r3, [r3, #32]
 800ed4c:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	2200      	movs	r2, #0
 800ed56:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ed58:	2106      	movs	r1, #6
 800ed5a:	6938      	ldr	r0, [r7, #16]
 800ed5c:	f000 fbb6 	bl	800f4cc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800ed60:	2201      	movs	r2, #1
 800ed62:	6939      	ldr	r1, [r7, #16]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f001 f837 	bl	800fdd8 <dhcp_create_msg>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800ed6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d13b      	bne.n	800edee <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed76:	2202      	movs	r2, #2
 800ed78:	2139      	movs	r1, #57	; 0x39
 800ed7a:	6938      	ldr	r0, [r7, #16]
 800ed7c:	f000 fbc0 	bl	800f500 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ed84:	4619      	mov	r1, r3
 800ed86:	6938      	ldr	r0, [r7, #16]
 800ed88:	f000 fc1c 	bl	800f5c4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ed8c:	2203      	movs	r2, #3
 800ed8e:	2137      	movs	r1, #55	; 0x37
 800ed90:	6938      	ldr	r0, [r7, #16]
 800ed92:	f000 fbb5 	bl	800f500 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed96:	2300      	movs	r3, #0
 800ed98:	75fb      	strb	r3, [r7, #23]
 800ed9a:	e009      	b.n	800edb0 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800ed9c:	7dfb      	ldrb	r3, [r7, #23]
 800ed9e:	4a29      	ldr	r2, [pc, #164]	; (800ee44 <dhcp_discover+0x104>)
 800eda0:	5cd3      	ldrb	r3, [r2, r3]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6938      	ldr	r0, [r7, #16]
 800eda6:	f000 fbe5 	bl	800f574 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800edaa:	7dfb      	ldrb	r3, [r7, #23]
 800edac:	3301      	adds	r3, #1
 800edae:	75fb      	strb	r3, [r7, #23]
 800edb0:	7dfb      	ldrb	r3, [r7, #23]
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d9f2      	bls.n	800ed9c <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800edb6:	6938      	ldr	r0, [r7, #16]
 800edb8:	f001 f9b2 	bl	8010120 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	68da      	ldr	r2, [r3, #12]
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	8a9b      	ldrh	r3, [r3, #20]
 800edc4:	33f0      	adds	r3, #240	; 0xf0
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	4619      	mov	r1, r3
 800edca:	4610      	mov	r0, r2
 800edcc:	f7f9 f8b2 	bl	8007f34 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800edd0:	4b1d      	ldr	r3, [pc, #116]	; (800ee48 <dhcp_discover+0x108>)
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	68d9      	ldr	r1, [r3, #12]
 800edd8:	4b1c      	ldr	r3, [pc, #112]	; (800ee4c <dhcp_discover+0x10c>)
 800edda:	9301      	str	r3, [sp, #4]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	2343      	movs	r3, #67	; 0x43
 800ede2:	4a1b      	ldr	r2, [pc, #108]	; (800ee50 <dhcp_discover+0x110>)
 800ede4:	f7ff f97a 	bl	800e0dc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800ede8:	6938      	ldr	r0, [r7, #16]
 800edea:	f001 f957 	bl	801009c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	7a9b      	ldrb	r3, [r3, #10]
 800edf2:	2bff      	cmp	r3, #255	; 0xff
 800edf4:	d005      	beq.n	800ee02 <dhcp_discover+0xc2>
    dhcp->tries++;
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	7a9b      	ldrb	r3, [r3, #10]
 800edfa:	3301      	adds	r3, #1
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	7a9b      	ldrb	r3, [r3, #10]
 800ee06:	2b05      	cmp	r3, #5
 800ee08:	d807      	bhi.n	800ee1a <dhcp_discover+0xda>
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	7a9b      	ldrb	r3, [r3, #10]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee14:	4093      	lsls	r3, r2
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	e001      	b.n	800ee1e <dhcp_discover+0xde>
 800ee1a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ee1e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ee20:	89bb      	ldrh	r3, [r7, #12]
 800ee22:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ee26:	4a0b      	ldr	r2, [pc, #44]	; (800ee54 <dhcp_discover+0x114>)
 800ee28:	fb82 1203 	smull	r1, r2, r2, r3
 800ee2c:	1152      	asrs	r2, r2, #5
 800ee2e:	17db      	asrs	r3, r3, #31
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ee38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3718      	adds	r7, #24
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	20000010 	.word	0x20000010
 800ee48:	20000760 	.word	0x20000760
 800ee4c:	08019814 	.word	0x08019814
 800ee50:	08019818 	.word	0x08019818
 800ee54:	10624dd3 	.word	0x10624dd3

0800ee58 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d107      	bne.n	800ee76 <dhcp_bind+0x1e>
 800ee66:	4b64      	ldr	r3, [pc, #400]	; (800eff8 <dhcp_bind+0x1a0>)
 800ee68:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800ee6c:	4963      	ldr	r1, [pc, #396]	; (800effc <dhcp_bind+0x1a4>)
 800ee6e:	4864      	ldr	r0, [pc, #400]	; (800f000 <dhcp_bind+0x1a8>)
 800ee70:	f005 ff74 	bl	8014d5c <iprintf>
 800ee74:	e0bc      	b.n	800eff0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d107      	bne.n	800ee92 <dhcp_bind+0x3a>
 800ee82:	4b5d      	ldr	r3, [pc, #372]	; (800eff8 <dhcp_bind+0x1a0>)
 800ee84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee88:	495e      	ldr	r1, [pc, #376]	; (800f004 <dhcp_bind+0x1ac>)
 800ee8a:	485d      	ldr	r0, [pc, #372]	; (800f000 <dhcp_bind+0x1a8>)
 800ee8c:	f005 ff66 	bl	8014d5c <iprintf>
 800ee90:	e0ae      	b.n	800eff0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	2200      	movs	r2, #0
 800ee96:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea0:	d019      	beq.n	800eed6 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eea6:	331e      	adds	r3, #30
 800eea8:	4a57      	ldr	r2, [pc, #348]	; (800f008 <dhcp_bind+0x1b0>)
 800eeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeb8:	d302      	bcc.n	800eec0 <dhcp_bind+0x68>
       timeout = 0xffff;
 800eeba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eebe:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d102      	bne.n	800eed6 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	2201      	movs	r2, #1
 800eed4:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d01d      	beq.n	800ef1c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee4:	331e      	adds	r3, #30
 800eee6:	4a48      	ldr	r2, [pc, #288]	; (800f008 <dhcp_bind+0x1b0>)
 800eee8:	fba2 2303 	umull	r2, r3, r2, r3
 800eeec:	095b      	lsrs	r3, r3, #5
 800eeee:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eef6:	d302      	bcc.n	800eefe <dhcp_bind+0xa6>
      timeout = 0xffff;
 800eef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eefc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	8b1b      	ldrh	r3, [r3, #24]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d102      	bne.n	800ef14 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	2201      	movs	r2, #1
 800ef12:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	8b1a      	ldrh	r2, [r3, #24]
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef24:	d01d      	beq.n	800ef62 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2a:	331e      	adds	r3, #30
 800ef2c:	4a36      	ldr	r2, [pc, #216]	; (800f008 <dhcp_bind+0x1b0>)
 800ef2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef32:	095b      	lsrs	r3, r3, #5
 800ef34:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef3c:	d302      	bcc.n	800ef44 <dhcp_bind+0xec>
      timeout = 0xffff;
 800ef3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef42:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	8b5b      	ldrh	r3, [r3, #26]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	2201      	movs	r2, #1
 800ef58:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	8b5a      	ldrh	r2, [r3, #26]
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	8b1a      	ldrh	r2, [r3, #24]
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	8b5b      	ldrh	r3, [r3, #26]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d306      	bcc.n	800ef7c <dhcp_bind+0x124>
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	8b5b      	ldrh	r3, [r3, #26]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	7adb      	ldrb	r3, [r3, #11]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d003      	beq.n	800ef8c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	e014      	b.n	800efb6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	3328      	adds	r3, #40	; 0x28
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ef94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	db02      	blt.n	800efa2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ef9c:	23ff      	movs	r3, #255	; 0xff
 800ef9e:	613b      	str	r3, [r7, #16]
 800efa0:	e009      	b.n	800efb6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800efa2:	7dfb      	ldrb	r3, [r7, #23]
 800efa4:	2bbf      	cmp	r3, #191	; 0xbf
 800efa6:	d903      	bls.n	800efb0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800efa8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800efac:	613b      	str	r3, [r7, #16]
 800efae:	e002      	b.n	800efb6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800efb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efb4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efba:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d108      	bne.n	800efd4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	4013      	ands	r3, r2
 800efca:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800efd2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800efd4:	210a      	movs	r1, #10
 800efd6:	69b8      	ldr	r0, [r7, #24]
 800efd8:	f000 fa78 	bl	800f4cc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800efe2:	f107 030c 	add.w	r3, r7, #12
 800efe6:	f107 0210 	add.w	r2, r7, #16
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7f8 fc72 	bl	80078d4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800eff0:	3720      	adds	r7, #32
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	080179fc 	.word	0x080179fc
 800effc:	08017b3c 	.word	0x08017b3c
 800f000:	08017a5c 	.word	0x08017a5c
 800f004:	08017b58 	.word	0x08017b58
 800f008:	88888889 	.word	0x88888889

0800f00c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af02      	add	r7, sp, #8
 800f012:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a1b      	ldr	r3, [r3, #32]
 800f018:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f01a:	2105      	movs	r1, #5
 800f01c:	6938      	ldr	r0, [r7, #16]
 800f01e:	f000 fa55 	bl	800f4cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f022:	2203      	movs	r2, #3
 800f024:	6939      	ldr	r1, [r7, #16]
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 fed6 	bl	800fdd8 <dhcp_create_msg>
 800f02c:	4603      	mov	r3, r0
 800f02e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d13b      	bne.n	800f0b0 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f038:	2202      	movs	r2, #2
 800f03a:	2139      	movs	r1, #57	; 0x39
 800f03c:	6938      	ldr	r0, [r7, #16]
 800f03e:	f000 fa5f 	bl	800f500 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f046:	4619      	mov	r1, r3
 800f048:	6938      	ldr	r0, [r7, #16]
 800f04a:	f000 fabb 	bl	800f5c4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f04e:	2203      	movs	r2, #3
 800f050:	2137      	movs	r1, #55	; 0x37
 800f052:	6938      	ldr	r0, [r7, #16]
 800f054:	f000 fa54 	bl	800f500 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f058:	2300      	movs	r3, #0
 800f05a:	75fb      	strb	r3, [r7, #23]
 800f05c:	e009      	b.n	800f072 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
 800f060:	4a2a      	ldr	r2, [pc, #168]	; (800f10c <dhcp_renew+0x100>)
 800f062:	5cd3      	ldrb	r3, [r2, r3]
 800f064:	4619      	mov	r1, r3
 800f066:	6938      	ldr	r0, [r7, #16]
 800f068:	f000 fa84 	bl	800f574 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	3301      	adds	r3, #1
 800f070:	75fb      	strb	r3, [r7, #23]
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	2b02      	cmp	r3, #2
 800f076:	d9f2      	bls.n	800f05e <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800f078:	6938      	ldr	r0, [r7, #16]
 800f07a:	f001 f851 	bl	8010120 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	68da      	ldr	r2, [r3, #12]
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	8a9b      	ldrh	r3, [r3, #20]
 800f086:	33f0      	adds	r3, #240	; 0xf0
 800f088:	b29b      	uxth	r3, r3
 800f08a:	4619      	mov	r1, r3
 800f08c:	4610      	mov	r0, r2
 800f08e:	f7f8 ff51 	bl	8007f34 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800f092:	4b1f      	ldr	r3, [pc, #124]	; (800f110 <dhcp_renew+0x104>)
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	68d9      	ldr	r1, [r3, #12]
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	2343      	movs	r3, #67	; 0x43
 800f0a6:	f7fe ffdb 	bl	800e060 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f0aa:	6938      	ldr	r0, [r7, #16]
 800f0ac:	f000 fff6 	bl	801009c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	7a9b      	ldrb	r3, [r3, #10]
 800f0b4:	2bff      	cmp	r3, #255	; 0xff
 800f0b6:	d005      	beq.n	800f0c4 <dhcp_renew+0xb8>
    dhcp->tries++;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	7a9b      	ldrb	r3, [r3, #10]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	7a9b      	ldrb	r3, [r3, #10]
 800f0c8:	2b09      	cmp	r3, #9
 800f0ca:	d80a      	bhi.n	800f0e2 <dhcp_renew+0xd6>
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	7a9b      	ldrb	r3, [r3, #10]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	0152      	lsls	r2, r2, #5
 800f0d6:	1ad2      	subs	r2, r2, r3
 800f0d8:	0092      	lsls	r2, r2, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	011b      	lsls	r3, r3, #4
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	e001      	b.n	800f0e6 <dhcp_renew+0xda>
 800f0e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f0e6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f0e8:	89bb      	ldrh	r3, [r7, #12]
 800f0ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0ee:	4a09      	ldr	r2, [pc, #36]	; (800f114 <dhcp_renew+0x108>)
 800f0f0:	fb82 1203 	smull	r1, r2, r2, r3
 800f0f4:	1152      	asrs	r2, r2, #5
 800f0f6:	17db      	asrs	r3, r3, #31
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	20000010 	.word	0x20000010
 800f110:	20000760 	.word	0x20000760
 800f114:	10624dd3 	.word	0x10624dd3

0800f118 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b088      	sub	sp, #32
 800f11c:	af02      	add	r7, sp, #8
 800f11e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a1b      	ldr	r3, [r3, #32]
 800f124:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f126:	2104      	movs	r1, #4
 800f128:	6938      	ldr	r0, [r7, #16]
 800f12a:	f000 f9cf 	bl	800f4cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f12e:	2203      	movs	r2, #3
 800f130:	6939      	ldr	r1, [r7, #16]
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 fe50 	bl	800fdd8 <dhcp_create_msg>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d139      	bne.n	800f1b8 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f144:	2202      	movs	r2, #2
 800f146:	2139      	movs	r1, #57	; 0x39
 800f148:	6938      	ldr	r0, [r7, #16]
 800f14a:	f000 f9d9 	bl	800f500 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f152:	4619      	mov	r1, r3
 800f154:	6938      	ldr	r0, [r7, #16]
 800f156:	f000 fa35 	bl	800f5c4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f15a:	2203      	movs	r2, #3
 800f15c:	2137      	movs	r1, #55	; 0x37
 800f15e:	6938      	ldr	r0, [r7, #16]
 800f160:	f000 f9ce 	bl	800f500 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f164:	2300      	movs	r3, #0
 800f166:	75fb      	strb	r3, [r7, #23]
 800f168:	e009      	b.n	800f17e <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
 800f16c:	4a29      	ldr	r2, [pc, #164]	; (800f214 <dhcp_rebind+0xfc>)
 800f16e:	5cd3      	ldrb	r3, [r2, r3]
 800f170:	4619      	mov	r1, r3
 800f172:	6938      	ldr	r0, [r7, #16]
 800f174:	f000 f9fe 	bl	800f574 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f178:	7dfb      	ldrb	r3, [r7, #23]
 800f17a:	3301      	adds	r3, #1
 800f17c:	75fb      	strb	r3, [r7, #23]
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	2b02      	cmp	r3, #2
 800f182:	d9f2      	bls.n	800f16a <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f184:	6938      	ldr	r0, [r7, #16]
 800f186:	f000 ffcb 	bl	8010120 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	68da      	ldr	r2, [r3, #12]
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	8a9b      	ldrh	r3, [r3, #20]
 800f192:	33f0      	adds	r3, #240	; 0xf0
 800f194:	b29b      	uxth	r3, r3
 800f196:	4619      	mov	r1, r3
 800f198:	4610      	mov	r0, r2
 800f19a:	f7f8 fecb 	bl	8007f34 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800f19e:	4b1e      	ldr	r3, [pc, #120]	; (800f218 <dhcp_rebind+0x100>)
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	68d9      	ldr	r1, [r3, #12]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	9300      	str	r3, [sp, #0]
 800f1aa:	2343      	movs	r3, #67	; 0x43
 800f1ac:	4a1b      	ldr	r2, [pc, #108]	; (800f21c <dhcp_rebind+0x104>)
 800f1ae:	f7fe ff57 	bl	800e060 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f1b2:	6938      	ldr	r0, [r7, #16]
 800f1b4:	f000 ff72 	bl	801009c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	7a9b      	ldrb	r3, [r3, #10]
 800f1bc:	2bff      	cmp	r3, #255	; 0xff
 800f1be:	d005      	beq.n	800f1cc <dhcp_rebind+0xb4>
    dhcp->tries++;
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	7a9b      	ldrb	r3, [r3, #10]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	7a9b      	ldrb	r3, [r3, #10]
 800f1d0:	2b09      	cmp	r3, #9
 800f1d2:	d80a      	bhi.n	800f1ea <dhcp_rebind+0xd2>
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	7a9b      	ldrb	r3, [r3, #10]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	461a      	mov	r2, r3
 800f1dc:	0152      	lsls	r2, r2, #5
 800f1de:	1ad2      	subs	r2, r2, r3
 800f1e0:	0092      	lsls	r2, r2, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	00db      	lsls	r3, r3, #3
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	e001      	b.n	800f1ee <dhcp_rebind+0xd6>
 800f1ea:	f242 7310 	movw	r3, #10000	; 0x2710
 800f1ee:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f1f0:	89bb      	ldrh	r3, [r7, #12]
 800f1f2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f1f6:	4a0a      	ldr	r2, [pc, #40]	; (800f220 <dhcp_rebind+0x108>)
 800f1f8:	fb82 1203 	smull	r1, r2, r2, r3
 800f1fc:	1152      	asrs	r2, r2, #5
 800f1fe:	17db      	asrs	r3, r3, #31
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	b29a      	uxth	r2, r3
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	20000010 	.word	0x20000010
 800f218:	20000760 	.word	0x20000760
 800f21c:	08019818 	.word	0x08019818
 800f220:	10624dd3 	.word	0x10624dd3

0800f224 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af02      	add	r7, sp, #8
 800f22a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a1b      	ldr	r3, [r3, #32]
 800f230:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f232:	2103      	movs	r1, #3
 800f234:	6938      	ldr	r0, [r7, #16]
 800f236:	f000 f949 	bl	800f4cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f23a:	2203      	movs	r2, #3
 800f23c:	6939      	ldr	r1, [r7, #16]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fdca 	bl	800fdd8 <dhcp_create_msg>
 800f244:	4603      	mov	r3, r0
 800f246:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d147      	bne.n	800f2e0 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f250:	2202      	movs	r2, #2
 800f252:	2139      	movs	r1, #57	; 0x39
 800f254:	6938      	ldr	r0, [r7, #16]
 800f256:	f000 f953 	bl	800f500 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f25a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f25e:	6938      	ldr	r0, [r7, #16]
 800f260:	f000 f9b0 	bl	800f5c4 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f264:	2204      	movs	r2, #4
 800f266:	2132      	movs	r1, #50	; 0x32
 800f268:	6938      	ldr	r0, [r7, #16]
 800f26a:	f000 f949 	bl	800f500 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f272:	4618      	mov	r0, r3
 800f274:	f7f7 fe4a 	bl	8006f0c <lwip_htonl>
 800f278:	4603      	mov	r3, r0
 800f27a:	4619      	mov	r1, r3
 800f27c:	6938      	ldr	r0, [r7, #16]
 800f27e:	f000 f9db 	bl	800f638 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f282:	2203      	movs	r2, #3
 800f284:	2137      	movs	r1, #55	; 0x37
 800f286:	6938      	ldr	r0, [r7, #16]
 800f288:	f000 f93a 	bl	800f500 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f28c:	2300      	movs	r3, #0
 800f28e:	75fb      	strb	r3, [r7, #23]
 800f290:	e009      	b.n	800f2a6 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	4a29      	ldr	r2, [pc, #164]	; (800f33c <dhcp_reboot+0x118>)
 800f296:	5cd3      	ldrb	r3, [r2, r3]
 800f298:	4619      	mov	r1, r3
 800f29a:	6938      	ldr	r0, [r7, #16]
 800f29c:	f000 f96a 	bl	800f574 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	75fb      	strb	r3, [r7, #23]
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
 800f2a8:	2b02      	cmp	r3, #2
 800f2aa:	d9f2      	bls.n	800f292 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800f2ac:	6938      	ldr	r0, [r7, #16]
 800f2ae:	f000 ff37 	bl	8010120 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	68da      	ldr	r2, [r3, #12]
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	8a9b      	ldrh	r3, [r3, #20]
 800f2ba:	33f0      	adds	r3, #240	; 0xf0
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	f7f8 fe37 	bl	8007f34 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800f2c6:	4b1e      	ldr	r3, [pc, #120]	; (800f340 <dhcp_reboot+0x11c>)
 800f2c8:	6818      	ldr	r0, [r3, #0]
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	68d9      	ldr	r1, [r3, #12]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	2343      	movs	r3, #67	; 0x43
 800f2d4:	4a1b      	ldr	r2, [pc, #108]	; (800f344 <dhcp_reboot+0x120>)
 800f2d6:	f7fe fec3 	bl	800e060 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f2da:	6938      	ldr	r0, [r7, #16]
 800f2dc:	f000 fede 	bl	801009c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	7a9b      	ldrb	r3, [r3, #10]
 800f2e4:	2bff      	cmp	r3, #255	; 0xff
 800f2e6:	d005      	beq.n	800f2f4 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	7a9b      	ldrb	r3, [r3, #10]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	b2da      	uxtb	r2, r3
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	7a9b      	ldrb	r3, [r3, #10]
 800f2f8:	2b09      	cmp	r3, #9
 800f2fa:	d80a      	bhi.n	800f312 <dhcp_reboot+0xee>
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	7a9b      	ldrb	r3, [r3, #10]
 800f300:	b29b      	uxth	r3, r3
 800f302:	461a      	mov	r2, r3
 800f304:	0152      	lsls	r2, r2, #5
 800f306:	1ad2      	subs	r2, r2, r3
 800f308:	0092      	lsls	r2, r2, #2
 800f30a:	4413      	add	r3, r2
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	b29b      	uxth	r3, r3
 800f310:	e001      	b.n	800f316 <dhcp_reboot+0xf2>
 800f312:	f242 7310 	movw	r3, #10000	; 0x2710
 800f316:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f318:	89bb      	ldrh	r3, [r7, #12]
 800f31a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f31e:	4a0a      	ldr	r2, [pc, #40]	; (800f348 <dhcp_reboot+0x124>)
 800f320:	fb82 1203 	smull	r1, r2, r2, r3
 800f324:	1152      	asrs	r2, r2, #5
 800f326:	17db      	asrs	r3, r3, #31
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3718      	adds	r7, #24
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	20000010 	.word	0x20000010
 800f340:	20000760 	.word	0x20000760
 800f344:	08019818 	.word	0x08019818
 800f348:	10624dd3 	.word	0x10624dd3

0800f34c <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b088      	sub	sp, #32
 800f350:	af02      	add	r7, sp, #8
 800f352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d102      	bne.n	800f366 <dhcp_release+0x1a>
    return ERR_ARG;
 800f360:	f06f 030f 	mvn.w	r3, #15
 800f364:	e072      	b.n	800f44c <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36a:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 ff31 	bl	80101d4 <dhcp_supplied_address>
 800f372:	4603      	mov	r3, r0
 800f374:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f376:	2100      	movs	r1, #0
 800f378:	6978      	ldr	r0, [r7, #20]
 800f37a:	f000 f8a7 	bl	800f4cc <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	2200      	movs	r2, #0
 800f382:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	2200      	movs	r2, #0
 800f388:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	2200      	movs	r2, #0
 800f38e:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	2200      	movs	r2, #0
 800f394:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2200      	movs	r2, #0
 800f39a:	63da      	str	r2, [r3, #60]	; 0x3c
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	639a      	str	r2, [r3, #56]	; 0x38
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	845a      	strh	r2, [r3, #34]	; 0x22
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	841a      	strh	r2, [r3, #32]
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	8c1a      	ldrh	r2, [r3, #32]
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	83da      	strh	r2, [r3, #30]
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	8bda      	ldrh	r2, [r3, #30]
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800f3ca:	7cfb      	ldrb	r3, [r7, #19]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	e03b      	b.n	800f44c <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800f3d4:	2207      	movs	r2, #7
 800f3d6:	6979      	ldr	r1, [r7, #20]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fcfd 	bl	800fdd8 <dhcp_create_msg>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800f3e2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d128      	bne.n	800f43c <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800f3ea:	2204      	movs	r2, #4
 800f3ec:	2136      	movs	r1, #54	; 0x36
 800f3ee:	6978      	ldr	r0, [r7, #20]
 800f3f0:	f000 f886 	bl	800f500 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7f7 fd88 	bl	8006f0c <lwip_htonl>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	4619      	mov	r1, r3
 800f400:	6978      	ldr	r0, [r7, #20]
 800f402:	f000 f919 	bl	800f638 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800f406:	6978      	ldr	r0, [r7, #20]
 800f408:	f000 fe8a 	bl	8010120 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	68da      	ldr	r2, [r3, #12]
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	8a9b      	ldrh	r3, [r3, #20]
 800f414:	33f0      	adds	r3, #240	; 0xf0
 800f416:	b29b      	uxth	r3, r3
 800f418:	4619      	mov	r1, r3
 800f41a:	4610      	mov	r0, r2
 800f41c:	f7f8 fd8a 	bl	8007f34 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800f420:	4b0c      	ldr	r3, [pc, #48]	; (800f454 <dhcp_release+0x108>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	68d9      	ldr	r1, [r3, #12]
 800f428:	f107 020c 	add.w	r2, r7, #12
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	2343      	movs	r3, #67	; 0x43
 800f432:	f7fe fe15 	bl	800e060 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f436:	6978      	ldr	r0, [r7, #20]
 800f438:	f000 fe30 	bl	801009c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f43c:	4b06      	ldr	r3, [pc, #24]	; (800f458 <dhcp_release+0x10c>)
 800f43e:	4a06      	ldr	r2, [pc, #24]	; (800f458 <dhcp_release+0x10c>)
 800f440:	4905      	ldr	r1, [pc, #20]	; (800f458 <dhcp_release+0x10c>)
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f7f8 fa46 	bl	80078d4 <netif_set_addr>

  return result;
 800f448:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	20000760 	.word	0x20000760
 800f458:	08019814 	.word	0x08019814

0800f45c <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d107      	bne.n	800f47a <dhcp_stop+0x1e>
 800f46a:	4b14      	ldr	r3, [pc, #80]	; (800f4bc <dhcp_stop+0x60>)
 800f46c:	f240 5242 	movw	r2, #1346	; 0x542
 800f470:	4913      	ldr	r1, [pc, #76]	; (800f4c0 <dhcp_stop+0x64>)
 800f472:	4814      	ldr	r0, [pc, #80]	; (800f4c4 <dhcp_stop+0x68>)
 800f474:	f005 fc72 	bl	8014d5c <iprintf>
 800f478:	e01d      	b.n	800f4b6 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d017      	beq.n	800f4b6 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d006      	beq.n	800f49c <dhcp_stop+0x40>
 800f48e:	4b0b      	ldr	r3, [pc, #44]	; (800f4bc <dhcp_stop+0x60>)
 800f490:	f240 524f 	movw	r2, #1359	; 0x54f
 800f494:	490c      	ldr	r1, [pc, #48]	; (800f4c8 <dhcp_stop+0x6c>)
 800f496:	480b      	ldr	r0, [pc, #44]	; (800f4c4 <dhcp_stop+0x68>)
 800f498:	f005 fc60 	bl	8014d5c <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f49c:	2100      	movs	r1, #0
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 f814 	bl	800f4cc <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	7a1b      	ldrb	r3, [r3, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d004      	beq.n	800f4b6 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f4ac:	f7ff f854 	bl	800e558 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800f4b6:	3710      	adds	r7, #16
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	080179fc 	.word	0x080179fc
 800f4c0:	08017b70 	.word	0x08017b70
 800f4c4:	08017a5c 	.word	0x08017a5c
 800f4c8:	08017b28 	.word	0x08017b28

0800f4cc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	7a5b      	ldrb	r3, [r3, #9]
 800f4dc:	78fa      	ldrb	r2, [r7, #3]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d008      	beq.n	800f4f4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	78fa      	ldrb	r2, [r7, #3]
 800f4e6:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	82da      	strh	r2, [r3, #22]
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	460b      	mov	r3, r1
 800f50a:	70fb      	strb	r3, [r7, #3]
 800f50c:	4613      	mov	r3, r2
 800f50e:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	8a9b      	ldrh	r3, [r3, #20]
 800f514:	461a      	mov	r2, r3
 800f516:	78bb      	ldrb	r3, [r7, #2]
 800f518:	4413      	add	r3, r2
 800f51a:	3302      	adds	r3, #2
 800f51c:	2b44      	cmp	r3, #68	; 0x44
 800f51e:	d906      	bls.n	800f52e <dhcp_option+0x2e>
 800f520:	4b11      	ldr	r3, [pc, #68]	; (800f568 <dhcp_option+0x68>)
 800f522:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f526:	4911      	ldr	r1, [pc, #68]	; (800f56c <dhcp_option+0x6c>)
 800f528:	4811      	ldr	r0, [pc, #68]	; (800f570 <dhcp_option+0x70>)
 800f52a:	f005 fc17 	bl	8014d5c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	691a      	ldr	r2, [r3, #16]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	8a9b      	ldrh	r3, [r3, #20]
 800f536:	1c59      	adds	r1, r3, #1
 800f538:	b288      	uxth	r0, r1
 800f53a:	6879      	ldr	r1, [r7, #4]
 800f53c:	8288      	strh	r0, [r1, #20]
 800f53e:	4413      	add	r3, r2
 800f540:	78fa      	ldrb	r2, [r7, #3]
 800f542:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	691a      	ldr	r2, [r3, #16]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8a9b      	ldrh	r3, [r3, #20]
 800f54e:	1c59      	adds	r1, r3, #1
 800f550:	b288      	uxth	r0, r1
 800f552:	6879      	ldr	r1, [r7, #4]
 800f554:	8288      	strh	r0, [r1, #20]
 800f556:	4413      	add	r3, r2
 800f558:	78ba      	ldrb	r2, [r7, #2]
 800f55a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800f55e:	bf00      	nop
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	080179fc 	.word	0x080179fc
 800f56c:	08017b8c 	.word	0x08017b8c
 800f570:	08017a5c 	.word	0x08017a5c

0800f574 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	460b      	mov	r3, r1
 800f57e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	8a9b      	ldrh	r3, [r3, #20]
 800f584:	2b43      	cmp	r3, #67	; 0x43
 800f586:	d906      	bls.n	800f596 <dhcp_option_byte+0x22>
 800f588:	4b0b      	ldr	r3, [pc, #44]	; (800f5b8 <dhcp_option_byte+0x44>)
 800f58a:	f240 527b 	movw	r2, #1403	; 0x57b
 800f58e:	490b      	ldr	r1, [pc, #44]	; (800f5bc <dhcp_option_byte+0x48>)
 800f590:	480b      	ldr	r0, [pc, #44]	; (800f5c0 <dhcp_option_byte+0x4c>)
 800f592:	f005 fbe3 	bl	8014d5c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	691a      	ldr	r2, [r3, #16]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	8a9b      	ldrh	r3, [r3, #20]
 800f59e:	1c59      	adds	r1, r3, #1
 800f5a0:	b288      	uxth	r0, r1
 800f5a2:	6879      	ldr	r1, [r7, #4]
 800f5a4:	8288      	strh	r0, [r1, #20]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	78fa      	ldrb	r2, [r7, #3]
 800f5aa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800f5ae:	bf00      	nop
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	080179fc 	.word	0x080179fc
 800f5bc:	08017bd4 	.word	0x08017bd4
 800f5c0:	08017a5c 	.word	0x08017a5c

0800f5c4 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800f5c4:	b590      	push	{r4, r7, lr}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	8a9b      	ldrh	r3, [r3, #20]
 800f5d4:	3302      	adds	r3, #2
 800f5d6:	2b44      	cmp	r3, #68	; 0x44
 800f5d8:	d906      	bls.n	800f5e8 <dhcp_option_short+0x24>
 800f5da:	4b14      	ldr	r3, [pc, #80]	; (800f62c <dhcp_option_short+0x68>)
 800f5dc:	f240 5282 	movw	r2, #1410	; 0x582
 800f5e0:	4913      	ldr	r1, [pc, #76]	; (800f630 <dhcp_option_short+0x6c>)
 800f5e2:	4814      	ldr	r0, [pc, #80]	; (800f634 <dhcp_option_short+0x70>)
 800f5e4:	f005 fbba 	bl	8014d5c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f5e8:	887b      	ldrh	r3, [r7, #2]
 800f5ea:	0a1b      	lsrs	r3, r3, #8
 800f5ec:	b298      	uxth	r0, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	691a      	ldr	r2, [r3, #16]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	8a9b      	ldrh	r3, [r3, #20]
 800f5f6:	1c59      	adds	r1, r3, #1
 800f5f8:	b28c      	uxth	r4, r1
 800f5fa:	6879      	ldr	r1, [r7, #4]
 800f5fc:	828c      	strh	r4, [r1, #20]
 800f5fe:	b2c1      	uxtb	r1, r0
 800f600:	4413      	add	r3, r2
 800f602:	460a      	mov	r2, r1
 800f604:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	691a      	ldr	r2, [r3, #16]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8a9b      	ldrh	r3, [r3, #20]
 800f610:	1c59      	adds	r1, r3, #1
 800f612:	b288      	uxth	r0, r1
 800f614:	6879      	ldr	r1, [r7, #4]
 800f616:	8288      	strh	r0, [r1, #20]
 800f618:	8879      	ldrh	r1, [r7, #2]
 800f61a:	b2c9      	uxtb	r1, r1
 800f61c:	4413      	add	r3, r2
 800f61e:	460a      	mov	r2, r1
 800f620:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800f624:	bf00      	nop
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd90      	pop	{r4, r7, pc}
 800f62c:	080179fc 	.word	0x080179fc
 800f630:	08017c10 	.word	0x08017c10
 800f634:	08017a5c 	.word	0x08017a5c

0800f638 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800f638:	b590      	push	{r4, r7, lr}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	8a9b      	ldrh	r3, [r3, #20]
 800f646:	3304      	adds	r3, #4
 800f648:	2b44      	cmp	r3, #68	; 0x44
 800f64a:	d906      	bls.n	800f65a <dhcp_option_long+0x22>
 800f64c:	4b22      	ldr	r3, [pc, #136]	; (800f6d8 <dhcp_option_long+0xa0>)
 800f64e:	f240 528a 	movw	r2, #1418	; 0x58a
 800f652:	4922      	ldr	r1, [pc, #136]	; (800f6dc <dhcp_option_long+0xa4>)
 800f654:	4822      	ldr	r0, [pc, #136]	; (800f6e0 <dhcp_option_long+0xa8>)
 800f656:	f005 fb81 	bl	8014d5c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	0e18      	lsrs	r0, r3, #24
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	691a      	ldr	r2, [r3, #16]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	8a9b      	ldrh	r3, [r3, #20]
 800f666:	1c59      	adds	r1, r3, #1
 800f668:	b28c      	uxth	r4, r1
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	828c      	strh	r4, [r1, #20]
 800f66e:	b2c1      	uxtb	r1, r0
 800f670:	4413      	add	r3, r2
 800f672:	460a      	mov	r2, r1
 800f674:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	0c18      	lsrs	r0, r3, #16
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	691a      	ldr	r2, [r3, #16]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	8a9b      	ldrh	r3, [r3, #20]
 800f684:	1c59      	adds	r1, r3, #1
 800f686:	b28c      	uxth	r4, r1
 800f688:	6879      	ldr	r1, [r7, #4]
 800f68a:	828c      	strh	r4, [r1, #20]
 800f68c:	b2c1      	uxtb	r1, r0
 800f68e:	4413      	add	r3, r2
 800f690:	460a      	mov	r2, r1
 800f692:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	0a18      	lsrs	r0, r3, #8
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	691a      	ldr	r2, [r3, #16]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	8a9b      	ldrh	r3, [r3, #20]
 800f6a2:	1c59      	adds	r1, r3, #1
 800f6a4:	b28c      	uxth	r4, r1
 800f6a6:	6879      	ldr	r1, [r7, #4]
 800f6a8:	828c      	strh	r4, [r1, #20]
 800f6aa:	b2c1      	uxtb	r1, r0
 800f6ac:	4413      	add	r3, r2
 800f6ae:	460a      	mov	r2, r1
 800f6b0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	691a      	ldr	r2, [r3, #16]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	8a9b      	ldrh	r3, [r3, #20]
 800f6bc:	1c59      	adds	r1, r3, #1
 800f6be:	b288      	uxth	r0, r1
 800f6c0:	6879      	ldr	r1, [r7, #4]
 800f6c2:	8288      	strh	r0, [r1, #20]
 800f6c4:	6839      	ldr	r1, [r7, #0]
 800f6c6:	b2c9      	uxtb	r1, r1
 800f6c8:	4413      	add	r3, r2
 800f6ca:	460a      	mov	r2, r1
 800f6cc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd90      	pop	{r4, r7, pc}
 800f6d8:	080179fc 	.word	0x080179fc
 800f6dc:	08017c54 	.word	0x08017c54
 800f6e0:	08017a5c 	.word	0x08017a5c

0800f6e4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b08e      	sub	sp, #56	; 0x38
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f6f6:	2208      	movs	r2, #8
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	48b3      	ldr	r0, [pc, #716]	; (800f9c8 <dhcp_parse_reply+0x2e4>)
 800f6fc:	f005 fb26 	bl	8014d4c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	895b      	ldrh	r3, [r3, #10]
 800f704:	2b2b      	cmp	r3, #43	; 0x2b
 800f706:	d802      	bhi.n	800f70e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f708:	f06f 0301 	mvn.w	r3, #1
 800f70c:	e26a      	b.n	800fbe4 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f716:	23f0      	movs	r3, #240	; 0xf0
 800f718:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	891b      	ldrh	r3, [r3, #8]
 800f71e:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800f724:	e00c      	b.n	800f740 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800f726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f728:	895b      	ldrh	r3, [r3, #10]
 800f72a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800f730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f732:	895b      	ldrh	r3, [r3, #10]
 800f734:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	2b00      	cmp	r3, #0
 800f744:	d004      	beq.n	800f750 <dhcp_parse_reply+0x6c>
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	895b      	ldrh	r3, [r3, #10]
 800f74a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d2ea      	bcs.n	800f726 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f752:	2b00      	cmp	r3, #0
 800f754:	d102      	bne.n	800f75c <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800f756:	f06f 0301 	mvn.w	r3, #1
 800f75a:	e243      	b.n	800fbe4 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800f75c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f75e:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800f760:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f762:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f76a:	e1fb      	b.n	800fb64 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800f76c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f770:	4413      	add	r3, r2
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800f77a:	f04f 33ff 	mov.w	r3, #4294967295
 800f77e:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800f780:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f782:	3302      	adds	r3, #2
 800f784:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f786:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f788:	3301      	adds	r3, #1
 800f78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f78c:	8952      	ldrh	r2, [r2, #10]
 800f78e:	4293      	cmp	r3, r2
 800f790:	da06      	bge.n	800f7a0 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800f792:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f794:	3301      	adds	r3, #1
 800f796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f798:	4413      	add	r3, r2
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	77fb      	strb	r3, [r7, #31]
 800f79e:	e00a      	b.n	800f7b6 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d004      	beq.n	800f7b2 <dhcp_parse_reply+0xce>
 800f7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	e000      	b.n	800f7b4 <dhcp_parse_reply+0xd0>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f7b6:	7ffb      	ldrb	r3, [r7, #31]
 800f7b8:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800f7ba:	7d7b      	ldrb	r3, [r7, #21]
 800f7bc:	2b3b      	cmp	r3, #59	; 0x3b
 800f7be:	f200 8121 	bhi.w	800fa04 <dhcp_parse_reply+0x320>
 800f7c2:	a201      	add	r2, pc, #4	; (adr r2, 800f7c8 <dhcp_parse_reply+0xe4>)
 800f7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c8:	0800f8b9 	.word	0x0800f8b9
 800f7cc:	0800f8c9 	.word	0x0800f8c9
 800f7d0:	0800fa05 	.word	0x0800fa05
 800f7d4:	0800f8e9 	.word	0x0800f8e9
 800f7d8:	0800fa05 	.word	0x0800fa05
 800f7dc:	0800fa05 	.word	0x0800fa05
 800f7e0:	0800fa05 	.word	0x0800fa05
 800f7e4:	0800fa05 	.word	0x0800fa05
 800f7e8:	0800fa05 	.word	0x0800fa05
 800f7ec:	0800fa05 	.word	0x0800fa05
 800f7f0:	0800fa05 	.word	0x0800fa05
 800f7f4:	0800fa05 	.word	0x0800fa05
 800f7f8:	0800fa05 	.word	0x0800fa05
 800f7fc:	0800fa05 	.word	0x0800fa05
 800f800:	0800fa05 	.word	0x0800fa05
 800f804:	0800fa05 	.word	0x0800fa05
 800f808:	0800fa05 	.word	0x0800fa05
 800f80c:	0800fa05 	.word	0x0800fa05
 800f810:	0800fa05 	.word	0x0800fa05
 800f814:	0800fa05 	.word	0x0800fa05
 800f818:	0800fa05 	.word	0x0800fa05
 800f81c:	0800fa05 	.word	0x0800fa05
 800f820:	0800fa05 	.word	0x0800fa05
 800f824:	0800fa05 	.word	0x0800fa05
 800f828:	0800fa05 	.word	0x0800fa05
 800f82c:	0800fa05 	.word	0x0800fa05
 800f830:	0800fa05 	.word	0x0800fa05
 800f834:	0800fa05 	.word	0x0800fa05
 800f838:	0800fa05 	.word	0x0800fa05
 800f83c:	0800fa05 	.word	0x0800fa05
 800f840:	0800fa05 	.word	0x0800fa05
 800f844:	0800fa05 	.word	0x0800fa05
 800f848:	0800fa05 	.word	0x0800fa05
 800f84c:	0800fa05 	.word	0x0800fa05
 800f850:	0800fa05 	.word	0x0800fa05
 800f854:	0800fa05 	.word	0x0800fa05
 800f858:	0800fa05 	.word	0x0800fa05
 800f85c:	0800fa05 	.word	0x0800fa05
 800f860:	0800fa05 	.word	0x0800fa05
 800f864:	0800fa05 	.word	0x0800fa05
 800f868:	0800fa05 	.word	0x0800fa05
 800f86c:	0800fa05 	.word	0x0800fa05
 800f870:	0800fa05 	.word	0x0800fa05
 800f874:	0800fa05 	.word	0x0800fa05
 800f878:	0800fa05 	.word	0x0800fa05
 800f87c:	0800fa05 	.word	0x0800fa05
 800f880:	0800fa05 	.word	0x0800fa05
 800f884:	0800fa05 	.word	0x0800fa05
 800f888:	0800fa05 	.word	0x0800fa05
 800f88c:	0800fa05 	.word	0x0800fa05
 800f890:	0800fa05 	.word	0x0800fa05
 800f894:	0800f90f 	.word	0x0800f90f
 800f898:	0800f92f 	.word	0x0800f92f
 800f89c:	0800f969 	.word	0x0800f969
 800f8a0:	0800f989 	.word	0x0800f989
 800f8a4:	0800fa05 	.word	0x0800fa05
 800f8a8:	0800fa05 	.word	0x0800fa05
 800f8ac:	0800fa05 	.word	0x0800fa05
 800f8b0:	0800f9a9 	.word	0x0800f9a9
 800f8b4:	0800f9e5 	.word	0x0800f9e5
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	77fb      	strb	r3, [r7, #31]
 800f8bc:	7ffb      	ldrb	r3, [r7, #31]
 800f8be:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800f8c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800f8c6:	e0a0      	b.n	800fa0a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f8c8:	7ffb      	ldrb	r3, [r7, #31]
 800f8ca:	2b04      	cmp	r3, #4
 800f8cc:	d009      	beq.n	800f8e2 <dhcp_parse_reply+0x1fe>
 800f8ce:	4b3f      	ldr	r3, [pc, #252]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f8d0:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800f8d4:	493e      	ldr	r1, [pc, #248]	; (800f9d0 <dhcp_parse_reply+0x2ec>)
 800f8d6:	483f      	ldr	r0, [pc, #252]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f8d8:	f005 fa40 	bl	8014d5c <iprintf>
 800f8dc:	f06f 0305 	mvn.w	r3, #5
 800f8e0:	e180      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f8e2:	2306      	movs	r3, #6
 800f8e4:	61bb      	str	r3, [r7, #24]
        break;
 800f8e6:	e090      	b.n	800fa0a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f8e8:	2304      	movs	r3, #4
 800f8ea:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f8ec:	7ffa      	ldrb	r2, [r7, #31]
 800f8ee:	7fbb      	ldrb	r3, [r7, #30]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d209      	bcs.n	800f908 <dhcp_parse_reply+0x224>
 800f8f4:	4b35      	ldr	r3, [pc, #212]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f8f6:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800f8fa:	4937      	ldr	r1, [pc, #220]	; (800f9d8 <dhcp_parse_reply+0x2f4>)
 800f8fc:	4835      	ldr	r0, [pc, #212]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f8fe:	f005 fa2d 	bl	8014d5c <iprintf>
 800f902:	f06f 0305 	mvn.w	r3, #5
 800f906:	e16d      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f908:	2307      	movs	r3, #7
 800f90a:	61bb      	str	r3, [r7, #24]
        break;
 800f90c:	e07d      	b.n	800fa0a <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f90e:	7ffb      	ldrb	r3, [r7, #31]
 800f910:	2b04      	cmp	r3, #4
 800f912:	d009      	beq.n	800f928 <dhcp_parse_reply+0x244>
 800f914:	4b2d      	ldr	r3, [pc, #180]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f916:	f240 6209 	movw	r2, #1545	; 0x609
 800f91a:	492d      	ldr	r1, [pc, #180]	; (800f9d0 <dhcp_parse_reply+0x2ec>)
 800f91c:	482d      	ldr	r0, [pc, #180]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f91e:	f005 fa1d 	bl	8014d5c <iprintf>
 800f922:	f06f 0305 	mvn.w	r3, #5
 800f926:	e15d      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f928:	2303      	movs	r3, #3
 800f92a:	61bb      	str	r3, [r7, #24]
        break;
 800f92c:	e06d      	b.n	800fa0a <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f92e:	7ffb      	ldrb	r3, [r7, #31]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d009      	beq.n	800f948 <dhcp_parse_reply+0x264>
 800f934:	4b25      	ldr	r3, [pc, #148]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f936:	f240 6217 	movw	r2, #1559	; 0x617
 800f93a:	4928      	ldr	r1, [pc, #160]	; (800f9dc <dhcp_parse_reply+0x2f8>)
 800f93c:	4825      	ldr	r0, [pc, #148]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f93e:	f005 fa0d 	bl	8014d5c <iprintf>
 800f942:	f06f 0305 	mvn.w	r3, #5
 800f946:	e14d      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f948:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f94a:	2bf0      	cmp	r3, #240	; 0xf0
 800f94c:	d009      	beq.n	800f962 <dhcp_parse_reply+0x27e>
 800f94e:	4b1f      	ldr	r3, [pc, #124]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f950:	f240 6219 	movw	r2, #1561	; 0x619
 800f954:	4922      	ldr	r1, [pc, #136]	; (800f9e0 <dhcp_parse_reply+0x2fc>)
 800f956:	481f      	ldr	r0, [pc, #124]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f958:	f005 fa00 	bl	8014d5c <iprintf>
 800f95c:	f06f 0305 	mvn.w	r3, #5
 800f960:	e140      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f962:	2300      	movs	r3, #0
 800f964:	61bb      	str	r3, [r7, #24]
        break;
 800f966:	e050      	b.n	800fa0a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f968:	7ffb      	ldrb	r3, [r7, #31]
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d009      	beq.n	800f982 <dhcp_parse_reply+0x29e>
 800f96e:	4b17      	ldr	r3, [pc, #92]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f970:	f240 621d 	movw	r2, #1565	; 0x61d
 800f974:	4919      	ldr	r1, [pc, #100]	; (800f9dc <dhcp_parse_reply+0x2f8>)
 800f976:	4817      	ldr	r0, [pc, #92]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f978:	f005 f9f0 	bl	8014d5c <iprintf>
 800f97c:	f06f 0305 	mvn.w	r3, #5
 800f980:	e130      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f982:	2301      	movs	r3, #1
 800f984:	61bb      	str	r3, [r7, #24]
        break;
 800f986:	e040      	b.n	800fa0a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f988:	7ffb      	ldrb	r3, [r7, #31]
 800f98a:	2b04      	cmp	r3, #4
 800f98c:	d009      	beq.n	800f9a2 <dhcp_parse_reply+0x2be>
 800f98e:	4b0f      	ldr	r3, [pc, #60]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f990:	f240 6221 	movw	r2, #1569	; 0x621
 800f994:	490e      	ldr	r1, [pc, #56]	; (800f9d0 <dhcp_parse_reply+0x2ec>)
 800f996:	480f      	ldr	r0, [pc, #60]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f998:	f005 f9e0 	bl	8014d5c <iprintf>
 800f99c:	f06f 0305 	mvn.w	r3, #5
 800f9a0:	e120      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f9a2:	2302      	movs	r3, #2
 800f9a4:	61bb      	str	r3, [r7, #24]
        break;
 800f9a6:	e030      	b.n	800fa0a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f9a8:	7ffb      	ldrb	r3, [r7, #31]
 800f9aa:	2b04      	cmp	r3, #4
 800f9ac:	d009      	beq.n	800f9c2 <dhcp_parse_reply+0x2de>
 800f9ae:	4b07      	ldr	r3, [pc, #28]	; (800f9cc <dhcp_parse_reply+0x2e8>)
 800f9b0:	f240 6225 	movw	r2, #1573	; 0x625
 800f9b4:	4906      	ldr	r1, [pc, #24]	; (800f9d0 <dhcp_parse_reply+0x2ec>)
 800f9b6:	4807      	ldr	r0, [pc, #28]	; (800f9d4 <dhcp_parse_reply+0x2f0>)
 800f9b8:	f005 f9d0 	bl	8014d5c <iprintf>
 800f9bc:	f06f 0305 	mvn.w	r3, #5
 800f9c0:	e110      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f9c2:	2304      	movs	r3, #4
 800f9c4:	61bb      	str	r3, [r7, #24]
        break;
 800f9c6:	e020      	b.n	800fa0a <dhcp_parse_reply+0x326>
 800f9c8:	20007220 	.word	0x20007220
 800f9cc:	080179fc 	.word	0x080179fc
 800f9d0:	08017c94 	.word	0x08017c94
 800f9d4:	08017a5c 	.word	0x08017a5c
 800f9d8:	08017ca0 	.word	0x08017ca0
 800f9dc:	08017cb4 	.word	0x08017cb4
 800f9e0:	08017cc0 	.word	0x08017cc0
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f9e4:	7ffb      	ldrb	r3, [r7, #31]
 800f9e6:	2b04      	cmp	r3, #4
 800f9e8:	d009      	beq.n	800f9fe <dhcp_parse_reply+0x31a>
 800f9ea:	4b80      	ldr	r3, [pc, #512]	; (800fbec <dhcp_parse_reply+0x508>)
 800f9ec:	f240 6229 	movw	r2, #1577	; 0x629
 800f9f0:	497f      	ldr	r1, [pc, #508]	; (800fbf0 <dhcp_parse_reply+0x50c>)
 800f9f2:	4880      	ldr	r0, [pc, #512]	; (800fbf4 <dhcp_parse_reply+0x510>)
 800f9f4:	f005 f9b2 	bl	8014d5c <iprintf>
 800f9f8:	f06f 0305 	mvn.w	r3, #5
 800f9fc:	e0f2      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f9fe:	2305      	movs	r3, #5
 800fa00:	61bb      	str	r3, [r7, #24]
        break;
 800fa02:	e002      	b.n	800fa0a <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800fa04:	2300      	movs	r3, #0
 800fa06:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800fa08:	bf00      	nop
    }
    offset += len + 2;
 800fa0a:	7ffb      	ldrb	r3, [r7, #31]
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fa10:	4413      	add	r3, r2
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	3302      	adds	r3, #2
 800fa16:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800fa18:	7fbb      	ldrb	r3, [r7, #30]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d079      	beq.n	800fb12 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	db02      	blt.n	800fa2e <dhcp_parse_reply+0x34a>
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	2b07      	cmp	r3, #7
 800fa2c:	dd06      	ble.n	800fa3c <dhcp_parse_reply+0x358>
 800fa2e:	4b6f      	ldr	r3, [pc, #444]	; (800fbec <dhcp_parse_reply+0x508>)
 800fa30:	f240 6236 	movw	r2, #1590	; 0x636
 800fa34:	4970      	ldr	r1, [pc, #448]	; (800fbf8 <dhcp_parse_reply+0x514>)
 800fa36:	486f      	ldr	r0, [pc, #444]	; (800fbf4 <dhcp_parse_reply+0x510>)
 800fa38:	f005 f990 	bl	8014d5c <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800fa3c:	4a6f      	ldr	r2, [pc, #444]	; (800fbfc <dhcp_parse_reply+0x518>)
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	4413      	add	r3, r2
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d164      	bne.n	800fb12 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800fa48:	7fbb      	ldrb	r3, [r7, #30]
 800fa4a:	2b04      	cmp	r3, #4
 800fa4c:	bf28      	it	cs
 800fa4e:	2304      	movcs	r3, #4
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800fa54:	8afb      	ldrh	r3, [r7, #22]
 800fa56:	8a7a      	ldrh	r2, [r7, #18]
 800fa58:	f107 0108 	add.w	r1, r7, #8
 800fa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa5e:	f7f8 fddd 	bl	800861c <pbuf_copy_partial>
 800fa62:	4603      	mov	r3, r0
 800fa64:	461a      	mov	r2, r3
 800fa66:	8a7b      	ldrh	r3, [r7, #18]
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d002      	beq.n	800fa72 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800fa6c:	f06f 0301 	mvn.w	r3, #1
 800fa70:	e0b8      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800fa72:	7fbb      	ldrb	r3, [r7, #30]
 800fa74:	2b04      	cmp	r3, #4
 800fa76:	d927      	bls.n	800fac8 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800fa78:	7fbb      	ldrb	r3, [r7, #30]
 800fa7a:	f003 0303 	and.w	r3, r3, #3
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d009      	beq.n	800fa98 <dhcp_parse_reply+0x3b4>
 800fa84:	4b59      	ldr	r3, [pc, #356]	; (800fbec <dhcp_parse_reply+0x508>)
 800fa86:	f240 623e 	movw	r2, #1598	; 0x63e
 800fa8a:	495d      	ldr	r1, [pc, #372]	; (800fc00 <dhcp_parse_reply+0x51c>)
 800fa8c:	4859      	ldr	r0, [pc, #356]	; (800fbf4 <dhcp_parse_reply+0x510>)
 800fa8e:	f005 f965 	bl	8014d5c <iprintf>
 800fa92:	f06f 0305 	mvn.w	r3, #5
 800fa96:	e0a5      	b.n	800fbe4 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800fa98:	4a58      	ldr	r2, [pc, #352]	; (800fbfc <dhcp_parse_reply+0x518>)
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	2201      	movs	r2, #1
 800faa0:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f7 fa31 	bl	8006f0c <lwip_htonl>
 800faaa:	4601      	mov	r1, r0
 800faac:	4a55      	ldr	r2, [pc, #340]	; (800fc04 <dhcp_parse_reply+0x520>)
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800fab4:	7fbb      	ldrb	r3, [r7, #30]
 800fab6:	3b04      	subs	r3, #4
 800fab8:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800faba:	8afb      	ldrh	r3, [r7, #22]
 800fabc:	3304      	adds	r3, #4
 800fabe:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	3301      	adds	r3, #1
 800fac4:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800fac6:	e7ac      	b.n	800fa22 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800fac8:	7fbb      	ldrb	r3, [r7, #30]
 800faca:	2b04      	cmp	r3, #4
 800facc:	d106      	bne.n	800fadc <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f7 fa1b 	bl	8006f0c <lwip_htonl>
 800fad6:	4603      	mov	r3, r0
 800fad8:	60bb      	str	r3, [r7, #8]
 800fada:	e010      	b.n	800fafe <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800fadc:	7fbb      	ldrb	r3, [r7, #30]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d009      	beq.n	800faf6 <dhcp_parse_reply+0x412>
 800fae2:	4b42      	ldr	r3, [pc, #264]	; (800fbec <dhcp_parse_reply+0x508>)
 800fae4:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800fae8:	4947      	ldr	r1, [pc, #284]	; (800fc08 <dhcp_parse_reply+0x524>)
 800faea:	4842      	ldr	r0, [pc, #264]	; (800fbf4 <dhcp_parse_reply+0x510>)
 800faec:	f005 f936 	bl	8014d5c <iprintf>
 800faf0:	f06f 0305 	mvn.w	r3, #5
 800faf4:	e076      	b.n	800fbe4 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800faf6:	f107 0308 	add.w	r3, r7, #8
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800fafe:	4a3f      	ldr	r2, [pc, #252]	; (800fbfc <dhcp_parse_reply+0x518>)
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	4413      	add	r3, r2
 800fb04:	2201      	movs	r2, #1
 800fb06:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800fb08:	68ba      	ldr	r2, [r7, #8]
 800fb0a:	493e      	ldr	r1, [pc, #248]	; (800fc04 <dhcp_parse_reply+0x520>)
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	895b      	ldrh	r3, [r3, #10]
 800fb16:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d323      	bcc.n	800fb64 <dhcp_parse_reply+0x480>
      offset -= q->len;
 800fb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1e:	895b      	ldrh	r3, [r3, #10]
 800fb20:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800fb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb28:	895b      	ldrh	r3, [r3, #10]
 800fb2a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fb2c:	1ad3      	subs	r3, r2, r3
 800fb2e:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800fb30:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800fb32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d223      	bcs.n	800fb80 <dhcp_parse_reply+0x49c>
 800fb38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d020      	beq.n	800fb80 <dhcp_parse_reply+0x49c>
        q = q->next;
 800fb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800fb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d109      	bne.n	800fb5e <dhcp_parse_reply+0x47a>
 800fb4a:	4b28      	ldr	r3, [pc, #160]	; (800fbec <dhcp_parse_reply+0x508>)
 800fb4c:	f240 6254 	movw	r2, #1620	; 0x654
 800fb50:	492e      	ldr	r1, [pc, #184]	; (800fc0c <dhcp_parse_reply+0x528>)
 800fb52:	4828      	ldr	r0, [pc, #160]	; (800fbf4 <dhcp_parse_reply+0x510>)
 800fb54:	f005 f902 	bl	8014d5c <iprintf>
 800fb58:	f06f 0305 	mvn.w	r3, #5
 800fb5c:	e042      	b.n	800fbe4 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800fb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00a      	beq.n	800fb80 <dhcp_parse_reply+0x49c>
 800fb6a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800fb6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d206      	bcs.n	800fb80 <dhcp_parse_reply+0x49c>
 800fb72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fb74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb76:	4413      	add	r3, r2
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	2bff      	cmp	r3, #255	; 0xff
 800fb7c:	f47f adf6 	bne.w	800f76c <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800fb80:	4b1e      	ldr	r3, [pc, #120]	; (800fbfc <dhcp_parse_reply+0x518>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d018      	beq.n	800fbba <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fb88:	4b1e      	ldr	r3, [pc, #120]	; (800fc04 <dhcp_parse_reply+0x520>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fb8e:	4b1b      	ldr	r3, [pc, #108]	; (800fbfc <dhcp_parse_reply+0x518>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d102      	bne.n	800fba0 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb9e:	e00c      	b.n	800fbba <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d102      	bne.n	800fbac <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800fba6:	2301      	movs	r3, #1
 800fba8:	623b      	str	r3, [r7, #32]
 800fbaa:	e006      	b.n	800fbba <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2b03      	cmp	r3, #3
 800fbb0:	d103      	bne.n	800fbba <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d006      	beq.n	800fbce <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800fbc4:	236c      	movs	r3, #108	; 0x6c
 800fbc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800fbc8:	23ec      	movs	r3, #236	; 0xec
 800fbca:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800fbcc:	e5a8      	b.n	800f720 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800fbce:	6a3b      	ldr	r3, [r7, #32]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d006      	beq.n	800fbe2 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800fbd8:	232c      	movs	r3, #44	; 0x2c
 800fbda:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800fbdc:	236c      	movs	r3, #108	; 0x6c
 800fbde:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800fbe0:	e59e      	b.n	800f720 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3738      	adds	r7, #56	; 0x38
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	080179fc 	.word	0x080179fc
 800fbf0:	08017c94 	.word	0x08017c94
 800fbf4:	08017a5c 	.word	0x08017a5c
 800fbf8:	08017cd8 	.word	0x08017cd8
 800fbfc:	20007220 	.word	0x20007220
 800fc00:	08017cec 	.word	0x08017cec
 800fc04:	20007228 	.word	0x20007228
 800fc08:	08017d04 	.word	0x08017d04
 800fc0c:	08017d18 	.word	0x08017d18

0800fc10 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b08a      	sub	sp, #40	; 0x28
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
 800fc1c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800fc1e:	4b68      	ldr	r3, [pc, #416]	; (800fdc0 <dhcp_recv+0x1b0>)
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	6a1b      	ldr	r3, [r3, #32]
 800fc28:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 80a9 	beq.w	800fd8a <dhcp_recv+0x17a>
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	7a1b      	ldrb	r3, [r3, #8]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f000 80a4 	beq.w	800fd8a <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d006      	beq.n	800fc58 <dhcp_recv+0x48>
 800fc4a:	4b5e      	ldr	r3, [pc, #376]	; (800fdc4 <dhcp_recv+0x1b4>)
 800fc4c:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800fc50:	495d      	ldr	r1, [pc, #372]	; (800fdc8 <dhcp_recv+0x1b8>)
 800fc52:	485e      	ldr	r0, [pc, #376]	; (800fdcc <dhcp_recv+0x1bc>)
 800fc54:	f005 f882 	bl	8014d5c <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	895b      	ldrh	r3, [r3, #10]
 800fc5c:	2b2b      	cmp	r3, #43	; 0x2b
 800fc5e:	f240 8096 	bls.w	800fd8e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	f040 8093 	bne.w	800fd92 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc72:	e012      	b.n	800fc9a <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc78:	6a3a      	ldr	r2, [r7, #32]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800fc80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc84:	69b9      	ldr	r1, [r7, #24]
 800fc86:	440b      	add	r3, r1
 800fc88:	7f1b      	ldrb	r3, [r3, #28]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	f040 8083 	bne.w	800fd96 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800fc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc94:	3301      	adds	r3, #1
 800fc96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fca0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d207      	bcs.n	800fcb8 <dhcp_recv+0xa8>
 800fca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcac:	2b05      	cmp	r3, #5
 800fcae:	d803      	bhi.n	800fcb8 <dhcp_recv+0xa8>
 800fcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcb4:	2b0f      	cmp	r3, #15
 800fcb6:	d9dd      	bls.n	800fc74 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7f7 f925 	bl	8006f0c <lwip_htonl>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d166      	bne.n	800fd9a <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800fccc:	6879      	ldr	r1, [r7, #4]
 800fcce:	69f8      	ldr	r0, [r7, #28]
 800fcd0:	f7ff fd08 	bl	800f6e4 <dhcp_parse_reply>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d161      	bne.n	800fd9e <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800fcda:	4b3d      	ldr	r3, [pc, #244]	; (800fdd0 <dhcp_recv+0x1c0>)
 800fcdc:	785b      	ldrb	r3, [r3, #1]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d05f      	beq.n	800fda2 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800fce2:	4b3c      	ldr	r3, [pc, #240]	; (800fdd4 <dhcp_recv+0x1c4>)
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800fce8:	7dfb      	ldrb	r3, [r7, #23]
 800fcea:	2b05      	cmp	r3, #5
 800fcec:	d128      	bne.n	800fd40 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	7a5b      	ldrb	r3, [r3, #9]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d111      	bne.n	800fd1a <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800fcf6:	6a38      	ldr	r0, [r7, #32]
 800fcf8:	f7fe fea0 	bl	800ea3c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800fcfc:	6a3b      	ldr	r3, [r7, #32]
 800fcfe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fd02:	f003 0308 	and.w	r3, r3, #8
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800fd0a:	6a38      	ldr	r0, [r7, #32]
 800fd0c:	f7fe fc68 	bl	800e5e0 <dhcp_check>
 800fd10:	e048      	b.n	800fda4 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800fd12:	6a38      	ldr	r0, [r7, #32]
 800fd14:	f7ff f8a0 	bl	800ee58 <dhcp_bind>
 800fd18:	e044      	b.n	800fda4 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	7a5b      	ldrb	r3, [r3, #9]
 800fd1e:	2b03      	cmp	r3, #3
 800fd20:	d007      	beq.n	800fd32 <dhcp_recv+0x122>
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	7a5b      	ldrb	r3, [r3, #9]
 800fd26:	2b04      	cmp	r3, #4
 800fd28:	d003      	beq.n	800fd32 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fd2e:	2b05      	cmp	r3, #5
 800fd30:	d138      	bne.n	800fda4 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800fd32:	6a38      	ldr	r0, [r7, #32]
 800fd34:	f7fe fe82 	bl	800ea3c <dhcp_handle_ack>
      dhcp_bind(netif);
 800fd38:	6a38      	ldr	r0, [r7, #32]
 800fd3a:	f7ff f88d 	bl	800ee58 <dhcp_bind>
 800fd3e:	e031      	b.n	800fda4 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800fd40:	7dfb      	ldrb	r3, [r7, #23]
 800fd42:	2b06      	cmp	r3, #6
 800fd44:	d113      	bne.n	800fd6e <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d00b      	beq.n	800fd66 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	7a5b      	ldrb	r3, [r3, #9]
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d007      	beq.n	800fd66 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fd5a:	2b04      	cmp	r3, #4
 800fd5c:	d003      	beq.n	800fd66 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	7a5b      	ldrb	r3, [r3, #9]
 800fd62:	2b05      	cmp	r3, #5
 800fd64:	d103      	bne.n	800fd6e <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800fd66:	6a38      	ldr	r0, [r7, #32]
 800fd68:	f7fe fc20 	bl	800e5ac <dhcp_handle_nak>
 800fd6c:	e01a      	b.n	800fda4 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d10a      	bne.n	800fd8a <dhcp_recv+0x17a>
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	7a5b      	ldrb	r3, [r3, #9]
 800fd78:	2b06      	cmp	r3, #6
 800fd7a:	d106      	bne.n	800fd8a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800fd82:	6a38      	ldr	r0, [r7, #32]
 800fd84:	f7fe fc60 	bl	800e648 <dhcp_handle_offer>
 800fd88:	e00c      	b.n	800fda4 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800fd8a:	bf00      	nop
 800fd8c:	e00a      	b.n	800fda4 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800fd8e:	bf00      	nop
 800fd90:	e008      	b.n	800fda4 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800fd92:	bf00      	nop
 800fd94:	e006      	b.n	800fda4 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800fd96:	bf00      	nop
 800fd98:	e004      	b.n	800fda4 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800fd9a:	bf00      	nop
 800fd9c:	e002      	b.n	800fda4 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800fd9e:	bf00      	nop
 800fda0:	e000      	b.n	800fda4 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800fda2:	bf00      	nop
  if (dhcp != NULL) {
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d002      	beq.n	800fdb0 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	2200      	movs	r2, #0
 800fdae:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7f8 fa33 	bl	800821c <pbuf_free>
}
 800fdb6:	bf00      	nop
 800fdb8:	3728      	adds	r7, #40	; 0x28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	2000091c 	.word	0x2000091c
 800fdc4:	080179fc 	.word	0x080179fc
 800fdc8:	08017b28 	.word	0x08017b28
 800fdcc:	08017a5c 	.word	0x08017a5c
 800fdd0:	20007220 	.word	0x20007220
 800fdd4:	20007228 	.word	0x20007228

0800fdd8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800fdd8:	b590      	push	{r4, r7, lr}
 800fdda:	b087      	sub	sp, #28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	4613      	mov	r3, r2
 800fde4:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d109      	bne.n	800fe00 <dhcp_create_msg+0x28>
 800fdec:	4ba3      	ldr	r3, [pc, #652]	; (801007c <dhcp_create_msg+0x2a4>)
 800fdee:	f240 721d 	movw	r2, #1821	; 0x71d
 800fdf2:	49a3      	ldr	r1, [pc, #652]	; (8010080 <dhcp_create_msg+0x2a8>)
 800fdf4:	48a3      	ldr	r0, [pc, #652]	; (8010084 <dhcp_create_msg+0x2ac>)
 800fdf6:	f004 ffb1 	bl	8014d5c <iprintf>
 800fdfa:	f06f 030f 	mvn.w	r3, #15
 800fdfe:	e138      	b.n	8010072 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d109      	bne.n	800fe1a <dhcp_create_msg+0x42>
 800fe06:	4b9d      	ldr	r3, [pc, #628]	; (801007c <dhcp_create_msg+0x2a4>)
 800fe08:	f240 721e 	movw	r2, #1822	; 0x71e
 800fe0c:	499e      	ldr	r1, [pc, #632]	; (8010088 <dhcp_create_msg+0x2b0>)
 800fe0e:	489d      	ldr	r0, [pc, #628]	; (8010084 <dhcp_create_msg+0x2ac>)
 800fe10:	f004 ffa4 	bl	8014d5c <iprintf>
 800fe14:	f06f 0305 	mvn.w	r3, #5
 800fe18:	e12b      	b.n	8010072 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d006      	beq.n	800fe30 <dhcp_create_msg+0x58>
 800fe22:	4b96      	ldr	r3, [pc, #600]	; (801007c <dhcp_create_msg+0x2a4>)
 800fe24:	f240 721f 	movw	r2, #1823	; 0x71f
 800fe28:	4998      	ldr	r1, [pc, #608]	; (801008c <dhcp_create_msg+0x2b4>)
 800fe2a:	4896      	ldr	r0, [pc, #600]	; (8010084 <dhcp_create_msg+0x2ac>)
 800fe2c:	f004 ff96 	bl	8014d5c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d006      	beq.n	800fe46 <dhcp_create_msg+0x6e>
 800fe38:	4b90      	ldr	r3, [pc, #576]	; (801007c <dhcp_create_msg+0x2a4>)
 800fe3a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800fe3e:	4994      	ldr	r1, [pc, #592]	; (8010090 <dhcp_create_msg+0x2b8>)
 800fe40:	4890      	ldr	r0, [pc, #576]	; (8010084 <dhcp_create_msg+0x2ac>)
 800fe42:	f004 ff8b 	bl	8014d5c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fe46:	2200      	movs	r2, #0
 800fe48:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	f7f7 fe73 	bl	8007b38 <pbuf_alloc>
 800fe52:	4602      	mov	r2, r0
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d102      	bne.n	800fe66 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800fe60:	f04f 33ff 	mov.w	r3, #4294967295
 800fe64:	e105      	b.n	8010072 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	895b      	ldrh	r3, [r3, #10]
 800fe6c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fe70:	d206      	bcs.n	800fe80 <dhcp_create_msg+0xa8>
 800fe72:	4b82      	ldr	r3, [pc, #520]	; (801007c <dhcp_create_msg+0x2a4>)
 800fe74:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fe78:	4986      	ldr	r1, [pc, #536]	; (8010094 <dhcp_create_msg+0x2bc>)
 800fe7a:	4882      	ldr	r0, [pc, #520]	; (8010084 <dhcp_create_msg+0x2ac>)
 800fe7c:	f004 ff6e 	bl	8014d5c <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	2b03      	cmp	r3, #3
 800fe84:	d103      	bne.n	800fe8e <dhcp_create_msg+0xb6>
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	7a5b      	ldrb	r3, [r3, #9]
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d10d      	bne.n	800feaa <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	7a9b      	ldrb	r3, [r3, #10]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d105      	bne.n	800fea2 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fe96:	f004 ff79 	bl	8014d8c <rand>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	4b7e      	ldr	r3, [pc, #504]	; (8010098 <dhcp_create_msg+0x2c0>)
 800fea0:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fea2:	4b7d      	ldr	r3, [pc, #500]	; (8010098 <dhcp_create_msg+0x2c0>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	685a      	ldr	r2, [r3, #4]
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	2201      	movs	r2, #1
 800feba:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	2201      	movs	r2, #1
 800fec2:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800fece:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	2200      	movs	r2, #0
 800fed6:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	691c      	ldr	r4, [r3, #16]
 800fee0:	4610      	mov	r0, r2
 800fee2:	f7f7 f813 	bl	8006f0c <lwip_htonl>
 800fee6:	4603      	mov	r3, r0
 800fee8:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	2200      	movs	r2, #0
 800fef0:	721a      	strb	r2, [r3, #8]
 800fef2:	2200      	movs	r2, #0
 800fef4:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	2200      	movs	r2, #0
 800fefc:	729a      	strb	r2, [r3, #10]
 800fefe:	2200      	movs	r2, #0
 800ff00:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	2200      	movs	r2, #0
 800ff08:	731a      	strb	r2, [r3, #12]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	735a      	strb	r2, [r3, #13]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	739a      	strb	r2, [r3, #14]
 800ff12:	2200      	movs	r2, #0
 800ff14:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800ff16:	79fb      	ldrb	r3, [r7, #7]
 800ff18:	2b08      	cmp	r3, #8
 800ff1a:	d010      	beq.n	800ff3e <dhcp_create_msg+0x166>
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	2b04      	cmp	r3, #4
 800ff20:	d00d      	beq.n	800ff3e <dhcp_create_msg+0x166>
 800ff22:	79fb      	ldrb	r3, [r7, #7]
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	d00a      	beq.n	800ff3e <dhcp_create_msg+0x166>
 800ff28:	79fb      	ldrb	r3, [r7, #7]
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d10d      	bne.n	800ff4a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ff32:	2b05      	cmp	r3, #5
 800ff34:	d003      	beq.n	800ff3e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	7a5b      	ldrb	r3, [r3, #9]
 800ff3a:	2b04      	cmp	r3, #4
 800ff3c:	d105      	bne.n	800ff4a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	1d1a      	adds	r2, r3, #4
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	6812      	ldr	r2, [r2, #0]
 800ff48:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	741a      	strb	r2, [r3, #16]
 800ff52:	2200      	movs	r2, #0
 800ff54:	745a      	strb	r2, [r3, #17]
 800ff56:	2200      	movs	r2, #0
 800ff58:	749a      	strb	r2, [r3, #18]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	2200      	movs	r2, #0
 800ff64:	751a      	strb	r2, [r3, #20]
 800ff66:	2200      	movs	r2, #0
 800ff68:	755a      	strb	r2, [r3, #21]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	759a      	strb	r2, [r3, #22]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	2200      	movs	r2, #0
 800ff78:	761a      	strb	r2, [r3, #24]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	765a      	strb	r2, [r3, #25]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	769a      	strb	r2, [r3, #26]
 800ff82:	2200      	movs	r2, #0
 800ff84:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800ff86:	2300      	movs	r3, #0
 800ff88:	82fb      	strh	r3, [r7, #22]
 800ff8a:	e019      	b.n	800ffc0 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	8afa      	ldrh	r2, [r7, #22]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d208      	bcs.n	800ffac <dhcp_create_msg+0x1d4>
 800ff9a:	8afb      	ldrh	r3, [r7, #22]
 800ff9c:	2b05      	cmp	r3, #5
 800ff9e:	d805      	bhi.n	800ffac <dhcp_create_msg+0x1d4>
 800ffa0:	8afb      	ldrh	r3, [r7, #22]
 800ffa2:	68fa      	ldr	r2, [r7, #12]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800ffaa:	e000      	b.n	800ffae <dhcp_create_msg+0x1d6>
 800ffac:	2100      	movs	r1, #0
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	691a      	ldr	r2, [r3, #16]
 800ffb2:	8afb      	ldrh	r3, [r7, #22]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	460a      	mov	r2, r1
 800ffb8:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800ffba:	8afb      	ldrh	r3, [r7, #22]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	82fb      	strh	r3, [r7, #22]
 800ffc0:	8afb      	ldrh	r3, [r7, #22]
 800ffc2:	2b0f      	cmp	r3, #15
 800ffc4:	d9e2      	bls.n	800ff8c <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	82fb      	strh	r3, [r7, #22]
 800ffca:	e009      	b.n	800ffe0 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	691a      	ldr	r2, [r3, #16]
 800ffd0:	8afb      	ldrh	r3, [r7, #22]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800ffda:	8afb      	ldrh	r3, [r7, #22]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	82fb      	strh	r3, [r7, #22]
 800ffe0:	8afb      	ldrh	r3, [r7, #22]
 800ffe2:	2b3f      	cmp	r3, #63	; 0x3f
 800ffe4:	d9f2      	bls.n	800ffcc <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	82fb      	strh	r3, [r7, #22]
 800ffea:	e009      	b.n	8010000 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	691a      	ldr	r2, [r3, #16]
 800fff0:	8afb      	ldrh	r3, [r7, #22]
 800fff2:	4413      	add	r3, r2
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800fffa:	8afb      	ldrh	r3, [r7, #22]
 800fffc:	3301      	adds	r3, #1
 800fffe:	82fb      	strh	r3, [r7, #22]
 8010000:	8afb      	ldrh	r3, [r7, #22]
 8010002:	2b7f      	cmp	r3, #127	; 0x7f
 8010004:	d9f2      	bls.n	800ffec <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	2200      	movs	r2, #0
 801000c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010010:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010014:	2200      	movs	r2, #0
 8010016:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801001a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801001e:	2200      	movs	r2, #0
 8010020:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010024:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010028:	2200      	movs	r2, #0
 801002a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801002e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	2200      	movs	r2, #0
 8010036:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010038:	2300      	movs	r3, #0
 801003a:	82fb      	strh	r3, [r7, #22]
 801003c:	e00b      	b.n	8010056 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	691a      	ldr	r2, [r3, #16]
 8010042:	8afb      	ldrh	r3, [r7, #22]
 8010044:	8af9      	ldrh	r1, [r7, #22]
 8010046:	b2c9      	uxtb	r1, r1
 8010048:	4413      	add	r3, r2
 801004a:	460a      	mov	r2, r1
 801004c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010050:	8afb      	ldrh	r3, [r7, #22]
 8010052:	3301      	adds	r3, #1
 8010054:	82fb      	strh	r3, [r7, #22]
 8010056:	8afb      	ldrh	r3, [r7, #22]
 8010058:	2b43      	cmp	r3, #67	; 0x43
 801005a:	d9f0      	bls.n	801003e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801005c:	2201      	movs	r2, #1
 801005e:	2135      	movs	r1, #53	; 0x35
 8010060:	68b8      	ldr	r0, [r7, #8]
 8010062:	f7ff fa4d 	bl	800f500 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8010066:	79fb      	ldrb	r3, [r7, #7]
 8010068:	4619      	mov	r1, r3
 801006a:	68b8      	ldr	r0, [r7, #8]
 801006c:	f7ff fa82 	bl	800f574 <dhcp_option_byte>
  return ERR_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	371c      	adds	r7, #28
 8010076:	46bd      	mov	sp, r7
 8010078:	bd90      	pop	{r4, r7, pc}
 801007a:	bf00      	nop
 801007c:	080179fc 	.word	0x080179fc
 8010080:	08017d2c 	.word	0x08017d2c
 8010084:	08017a5c 	.word	0x08017a5c
 8010088:	08017d4c 	.word	0x08017d4c
 801008c:	08017d6c 	.word	0x08017d6c
 8010090:	08017d94 	.word	0x08017d94
 8010094:	08017dbc 	.word	0x08017dbc
 8010098:	20000768 	.word	0x20000768

0801009c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d107      	bne.n	80100ba <dhcp_delete_msg+0x1e>
 80100aa:	4b18      	ldr	r3, [pc, #96]	; (801010c <dhcp_delete_msg+0x70>)
 80100ac:	f240 726d 	movw	r2, #1901	; 0x76d
 80100b0:	4917      	ldr	r1, [pc, #92]	; (8010110 <dhcp_delete_msg+0x74>)
 80100b2:	4818      	ldr	r0, [pc, #96]	; (8010114 <dhcp_delete_msg+0x78>)
 80100b4:	f004 fe52 	bl	8014d5c <iprintf>
 80100b8:	e024      	b.n	8010104 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d106      	bne.n	80100d0 <dhcp_delete_msg+0x34>
 80100c2:	4b12      	ldr	r3, [pc, #72]	; (801010c <dhcp_delete_msg+0x70>)
 80100c4:	f240 726e 	movw	r2, #1902	; 0x76e
 80100c8:	4913      	ldr	r1, [pc, #76]	; (8010118 <dhcp_delete_msg+0x7c>)
 80100ca:	4812      	ldr	r0, [pc, #72]	; (8010114 <dhcp_delete_msg+0x78>)
 80100cc:	f004 fe46 	bl	8014d5c <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	691b      	ldr	r3, [r3, #16]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d106      	bne.n	80100e6 <dhcp_delete_msg+0x4a>
 80100d8:	4b0c      	ldr	r3, [pc, #48]	; (801010c <dhcp_delete_msg+0x70>)
 80100da:	f240 726f 	movw	r2, #1903	; 0x76f
 80100de:	490f      	ldr	r1, [pc, #60]	; (801011c <dhcp_delete_msg+0x80>)
 80100e0:	480c      	ldr	r0, [pc, #48]	; (8010114 <dhcp_delete_msg+0x78>)
 80100e2:	f004 fe3b 	bl	8014d5c <iprintf>
  if (dhcp->p_out != NULL) {
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d004      	beq.n	80100f8 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7f8 f892 	bl	800821c <pbuf_free>
  }
  dhcp->p_out = NULL;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	611a      	str	r2, [r3, #16]
}
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	080179fc 	.word	0x080179fc
 8010110:	08017dfc 	.word	0x08017dfc
 8010114:	08017a5c 	.word	0x08017a5c
 8010118:	08017e1c 	.word	0x08017e1c
 801011c:	08017e44 	.word	0x08017e44

08010120 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d107      	bne.n	801013e <dhcp_option_trailer+0x1e>
 801012e:	4b24      	ldr	r3, [pc, #144]	; (80101c0 <dhcp_option_trailer+0xa0>)
 8010130:	f240 7282 	movw	r2, #1922	; 0x782
 8010134:	4923      	ldr	r1, [pc, #140]	; (80101c4 <dhcp_option_trailer+0xa4>)
 8010136:	4824      	ldr	r0, [pc, #144]	; (80101c8 <dhcp_option_trailer+0xa8>)
 8010138:	f004 fe10 	bl	8014d5c <iprintf>
 801013c:	e03c      	b.n	80101b8 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d106      	bne.n	8010154 <dhcp_option_trailer+0x34>
 8010146:	4b1e      	ldr	r3, [pc, #120]	; (80101c0 <dhcp_option_trailer+0xa0>)
 8010148:	f240 7283 	movw	r2, #1923	; 0x783
 801014c:	491f      	ldr	r1, [pc, #124]	; (80101cc <dhcp_option_trailer+0xac>)
 801014e:	481e      	ldr	r0, [pc, #120]	; (80101c8 <dhcp_option_trailer+0xa8>)
 8010150:	f004 fe04 	bl	8014d5c <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8a9b      	ldrh	r3, [r3, #20]
 8010158:	2b43      	cmp	r3, #67	; 0x43
 801015a:	d906      	bls.n	801016a <dhcp_option_trailer+0x4a>
 801015c:	4b18      	ldr	r3, [pc, #96]	; (80101c0 <dhcp_option_trailer+0xa0>)
 801015e:	f240 7284 	movw	r2, #1924	; 0x784
 8010162:	491b      	ldr	r1, [pc, #108]	; (80101d0 <dhcp_option_trailer+0xb0>)
 8010164:	4818      	ldr	r0, [pc, #96]	; (80101c8 <dhcp_option_trailer+0xa8>)
 8010166:	f004 fdf9 	bl	8014d5c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	691a      	ldr	r2, [r3, #16]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	8a9b      	ldrh	r3, [r3, #20]
 8010172:	1c59      	adds	r1, r3, #1
 8010174:	b288      	uxth	r0, r1
 8010176:	6879      	ldr	r1, [r7, #4]
 8010178:	8288      	strh	r0, [r1, #20]
 801017a:	4413      	add	r3, r2
 801017c:	22ff      	movs	r2, #255	; 0xff
 801017e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8010182:	e00b      	b.n	801019c <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	691a      	ldr	r2, [r3, #16]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	8a9b      	ldrh	r3, [r3, #20]
 801018c:	1c59      	adds	r1, r3, #1
 801018e:	b288      	uxth	r0, r1
 8010190:	6879      	ldr	r1, [r7, #4]
 8010192:	8288      	strh	r0, [r1, #20]
 8010194:	4413      	add	r3, r2
 8010196:	2200      	movs	r2, #0
 8010198:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	8a9b      	ldrh	r3, [r3, #20]
 80101a0:	2b43      	cmp	r3, #67	; 0x43
 80101a2:	d905      	bls.n	80101b0 <dhcp_option_trailer+0x90>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8a9b      	ldrh	r3, [r3, #20]
 80101a8:	f003 0303 	and.w	r3, r3, #3
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d003      	beq.n	80101b8 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80101b4:	2b43      	cmp	r3, #67	; 0x43
 80101b6:	d9e5      	bls.n	8010184 <dhcp_option_trailer+0x64>
  }
}
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	080179fc 	.word	0x080179fc
 80101c4:	08017e6c 	.word	0x08017e6c
 80101c8:	08017a5c 	.word	0x08017a5c
 80101cc:	08017e90 	.word	0x08017e90
 80101d0:	08017ebc 	.word	0x08017ebc

080101d4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d017      	beq.n	8010212 <dhcp_supplied_address+0x3e>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a1b      	ldr	r3, [r3, #32]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d013      	beq.n	8010212 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6a1b      	ldr	r3, [r3, #32]
 80101ee:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	7a5b      	ldrb	r3, [r3, #9]
 80101f4:	2b0a      	cmp	r3, #10
 80101f6:	d007      	beq.n	8010208 <dhcp_supplied_address+0x34>
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	7a5b      	ldrb	r3, [r3, #9]
 80101fc:	2b05      	cmp	r3, #5
 80101fe:	d003      	beq.n	8010208 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010204:	2b04      	cmp	r3, #4
 8010206:	d101      	bne.n	801020c <dhcp_supplied_address+0x38>
 8010208:	2301      	movs	r3, #1
 801020a:	e000      	b.n	801020e <dhcp_supplied_address+0x3a>
 801020c:	2300      	movs	r3, #0
 801020e:	b2db      	uxtb	r3, r3
 8010210:	e000      	b.n	8010214 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010228:	4915      	ldr	r1, [pc, #84]	; (8010280 <etharp_free_entry+0x60>)
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d013      	beq.n	8010264 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801023c:	4910      	ldr	r1, [pc, #64]	; (8010280 <etharp_free_entry+0x60>)
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	4613      	mov	r3, r2
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	4413      	add	r3, r2
 8010246:	00db      	lsls	r3, r3, #3
 8010248:	440b      	add	r3, r1
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4618      	mov	r0, r3
 801024e:	f7f7 ffe5 	bl	800821c <pbuf_free>
    arp_table[i].q = NULL;
 8010252:	490b      	ldr	r1, [pc, #44]	; (8010280 <etharp_free_entry+0x60>)
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	4613      	mov	r3, r2
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	4413      	add	r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	440b      	add	r3, r1
 8010260:	2200      	movs	r2, #0
 8010262:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010264:	4906      	ldr	r1, [pc, #24]	; (8010280 <etharp_free_entry+0x60>)
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	4613      	mov	r3, r2
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	4413      	add	r3, r2
 801026e:	00db      	lsls	r3, r3, #3
 8010270:	440b      	add	r3, r1
 8010272:	3314      	adds	r3, #20
 8010274:	2200      	movs	r2, #0
 8010276:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	2000076c 	.word	0x2000076c

08010284 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801028a:	2300      	movs	r3, #0
 801028c:	71fb      	strb	r3, [r7, #7]
 801028e:	e096      	b.n	80103be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010290:	79fa      	ldrb	r2, [r7, #7]
 8010292:	494f      	ldr	r1, [pc, #316]	; (80103d0 <etharp_tmr+0x14c>)
 8010294:	4613      	mov	r3, r2
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	4413      	add	r3, r2
 801029a:	00db      	lsls	r3, r3, #3
 801029c:	440b      	add	r3, r1
 801029e:	3314      	adds	r3, #20
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80102a4:	79bb      	ldrb	r3, [r7, #6]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f000 8086 	beq.w	80103b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80102ac:	79fa      	ldrb	r2, [r7, #7]
 80102ae:	4948      	ldr	r1, [pc, #288]	; (80103d0 <etharp_tmr+0x14c>)
 80102b0:	4613      	mov	r3, r2
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	4413      	add	r3, r2
 80102b6:	00db      	lsls	r3, r3, #3
 80102b8:	440b      	add	r3, r1
 80102ba:	3312      	adds	r3, #18
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	3301      	adds	r3, #1
 80102c0:	b298      	uxth	r0, r3
 80102c2:	4943      	ldr	r1, [pc, #268]	; (80103d0 <etharp_tmr+0x14c>)
 80102c4:	4613      	mov	r3, r2
 80102c6:	005b      	lsls	r3, r3, #1
 80102c8:	4413      	add	r3, r2
 80102ca:	00db      	lsls	r3, r3, #3
 80102cc:	440b      	add	r3, r1
 80102ce:	3312      	adds	r3, #18
 80102d0:	4602      	mov	r2, r0
 80102d2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80102d4:	79fa      	ldrb	r2, [r7, #7]
 80102d6:	493e      	ldr	r1, [pc, #248]	; (80103d0 <etharp_tmr+0x14c>)
 80102d8:	4613      	mov	r3, r2
 80102da:	005b      	lsls	r3, r3, #1
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	440b      	add	r3, r1
 80102e2:	3312      	adds	r3, #18
 80102e4:	881b      	ldrh	r3, [r3, #0]
 80102e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80102ea:	d215      	bcs.n	8010318 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80102ec:	79fa      	ldrb	r2, [r7, #7]
 80102ee:	4938      	ldr	r1, [pc, #224]	; (80103d0 <etharp_tmr+0x14c>)
 80102f0:	4613      	mov	r3, r2
 80102f2:	005b      	lsls	r3, r3, #1
 80102f4:	4413      	add	r3, r2
 80102f6:	00db      	lsls	r3, r3, #3
 80102f8:	440b      	add	r3, r1
 80102fa:	3314      	adds	r3, #20
 80102fc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d10f      	bne.n	8010322 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010302:	79fa      	ldrb	r2, [r7, #7]
 8010304:	4932      	ldr	r1, [pc, #200]	; (80103d0 <etharp_tmr+0x14c>)
 8010306:	4613      	mov	r3, r2
 8010308:	005b      	lsls	r3, r3, #1
 801030a:	4413      	add	r3, r2
 801030c:	00db      	lsls	r3, r3, #3
 801030e:	440b      	add	r3, r1
 8010310:	3312      	adds	r3, #18
 8010312:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010314:	2b04      	cmp	r3, #4
 8010316:	d904      	bls.n	8010322 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010318:	79fb      	ldrb	r3, [r7, #7]
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff ff80 	bl	8010220 <etharp_free_entry>
 8010320:	e04a      	b.n	80103b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010322:	79fa      	ldrb	r2, [r7, #7]
 8010324:	492a      	ldr	r1, [pc, #168]	; (80103d0 <etharp_tmr+0x14c>)
 8010326:	4613      	mov	r3, r2
 8010328:	005b      	lsls	r3, r3, #1
 801032a:	4413      	add	r3, r2
 801032c:	00db      	lsls	r3, r3, #3
 801032e:	440b      	add	r3, r1
 8010330:	3314      	adds	r3, #20
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2b03      	cmp	r3, #3
 8010336:	d10a      	bne.n	801034e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010338:	79fa      	ldrb	r2, [r7, #7]
 801033a:	4925      	ldr	r1, [pc, #148]	; (80103d0 <etharp_tmr+0x14c>)
 801033c:	4613      	mov	r3, r2
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	4413      	add	r3, r2
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	440b      	add	r3, r1
 8010346:	3314      	adds	r3, #20
 8010348:	2204      	movs	r2, #4
 801034a:	701a      	strb	r2, [r3, #0]
 801034c:	e034      	b.n	80103b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801034e:	79fa      	ldrb	r2, [r7, #7]
 8010350:	491f      	ldr	r1, [pc, #124]	; (80103d0 <etharp_tmr+0x14c>)
 8010352:	4613      	mov	r3, r2
 8010354:	005b      	lsls	r3, r3, #1
 8010356:	4413      	add	r3, r2
 8010358:	00db      	lsls	r3, r3, #3
 801035a:	440b      	add	r3, r1
 801035c:	3314      	adds	r3, #20
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b04      	cmp	r3, #4
 8010362:	d10a      	bne.n	801037a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010364:	79fa      	ldrb	r2, [r7, #7]
 8010366:	491a      	ldr	r1, [pc, #104]	; (80103d0 <etharp_tmr+0x14c>)
 8010368:	4613      	mov	r3, r2
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	4413      	add	r3, r2
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	440b      	add	r3, r1
 8010372:	3314      	adds	r3, #20
 8010374:	2202      	movs	r2, #2
 8010376:	701a      	strb	r2, [r3, #0]
 8010378:	e01e      	b.n	80103b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801037a:	79fa      	ldrb	r2, [r7, #7]
 801037c:	4914      	ldr	r1, [pc, #80]	; (80103d0 <etharp_tmr+0x14c>)
 801037e:	4613      	mov	r3, r2
 8010380:	005b      	lsls	r3, r3, #1
 8010382:	4413      	add	r3, r2
 8010384:	00db      	lsls	r3, r3, #3
 8010386:	440b      	add	r3, r1
 8010388:	3314      	adds	r3, #20
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d113      	bne.n	80103b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010390:	79fa      	ldrb	r2, [r7, #7]
 8010392:	490f      	ldr	r1, [pc, #60]	; (80103d0 <etharp_tmr+0x14c>)
 8010394:	4613      	mov	r3, r2
 8010396:	005b      	lsls	r3, r3, #1
 8010398:	4413      	add	r3, r2
 801039a:	00db      	lsls	r3, r3, #3
 801039c:	440b      	add	r3, r1
 801039e:	3308      	adds	r3, #8
 80103a0:	6818      	ldr	r0, [r3, #0]
 80103a2:	79fa      	ldrb	r2, [r7, #7]
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	4a08      	ldr	r2, [pc, #32]	; (80103d0 <etharp_tmr+0x14c>)
 80103ae:	4413      	add	r3, r2
 80103b0:	3304      	adds	r3, #4
 80103b2:	4619      	mov	r1, r3
 80103b4:	f000 fe3c 	bl	8011030 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103b8:	79fb      	ldrb	r3, [r7, #7]
 80103ba:	3301      	adds	r3, #1
 80103bc:	71fb      	strb	r3, [r7, #7]
 80103be:	79fb      	ldrb	r3, [r7, #7]
 80103c0:	2b09      	cmp	r3, #9
 80103c2:	f67f af65 	bls.w	8010290 <etharp_tmr+0xc>
      }
    }
  }
}
 80103c6:	bf00      	nop
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	2000076c 	.word	0x2000076c

080103d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b088      	sub	sp, #32
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	460b      	mov	r3, r1
 80103de:	607a      	str	r2, [r7, #4]
 80103e0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80103e2:	230a      	movs	r3, #10
 80103e4:	77fb      	strb	r3, [r7, #31]
 80103e6:	230a      	movs	r3, #10
 80103e8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80103ea:	230a      	movs	r3, #10
 80103ec:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80103ee:	2300      	movs	r3, #0
 80103f0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80103f2:	230a      	movs	r3, #10
 80103f4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	833b      	strh	r3, [r7, #24]
 80103fa:	2300      	movs	r3, #0
 80103fc:	82fb      	strh	r3, [r7, #22]
 80103fe:	2300      	movs	r3, #0
 8010400:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010402:	2300      	movs	r3, #0
 8010404:	773b      	strb	r3, [r7, #28]
 8010406:	e093      	b.n	8010530 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010408:	7f3a      	ldrb	r2, [r7, #28]
 801040a:	4990      	ldr	r1, [pc, #576]	; (801064c <etharp_find_entry+0x278>)
 801040c:	4613      	mov	r3, r2
 801040e:	005b      	lsls	r3, r3, #1
 8010410:	4413      	add	r3, r2
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	440b      	add	r3, r1
 8010416:	3314      	adds	r3, #20
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801041c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010420:	2b0a      	cmp	r3, #10
 8010422:	d105      	bne.n	8010430 <etharp_find_entry+0x5c>
 8010424:	7cfb      	ldrb	r3, [r7, #19]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d102      	bne.n	8010430 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801042a:	7f3b      	ldrb	r3, [r7, #28]
 801042c:	777b      	strb	r3, [r7, #29]
 801042e:	e07c      	b.n	801052a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010430:	7cfb      	ldrb	r3, [r7, #19]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d079      	beq.n	801052a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010436:	7cfb      	ldrb	r3, [r7, #19]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d009      	beq.n	8010450 <etharp_find_entry+0x7c>
 801043c:	7cfb      	ldrb	r3, [r7, #19]
 801043e:	2b01      	cmp	r3, #1
 8010440:	d806      	bhi.n	8010450 <etharp_find_entry+0x7c>
 8010442:	4b83      	ldr	r3, [pc, #524]	; (8010650 <etharp_find_entry+0x27c>)
 8010444:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010448:	4982      	ldr	r1, [pc, #520]	; (8010654 <etharp_find_entry+0x280>)
 801044a:	4883      	ldr	r0, [pc, #524]	; (8010658 <etharp_find_entry+0x284>)
 801044c:	f004 fc86 	bl	8014d5c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00f      	beq.n	8010476 <etharp_find_entry+0xa2>
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	6819      	ldr	r1, [r3, #0]
 801045a:	7f3a      	ldrb	r2, [r7, #28]
 801045c:	487b      	ldr	r0, [pc, #492]	; (801064c <etharp_find_entry+0x278>)
 801045e:	4613      	mov	r3, r2
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	4413      	add	r3, r2
 8010464:	00db      	lsls	r3, r3, #3
 8010466:	4403      	add	r3, r0
 8010468:	3304      	adds	r3, #4
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4299      	cmp	r1, r3
 801046e:	d102      	bne.n	8010476 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010470:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010474:	e0e5      	b.n	8010642 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010476:	7cfb      	ldrb	r3, [r7, #19]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d13b      	bne.n	80104f4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801047c:	7f3a      	ldrb	r2, [r7, #28]
 801047e:	4973      	ldr	r1, [pc, #460]	; (801064c <etharp_find_entry+0x278>)
 8010480:	4613      	mov	r3, r2
 8010482:	005b      	lsls	r3, r3, #1
 8010484:	4413      	add	r3, r2
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	440b      	add	r3, r1
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d018      	beq.n	80104c2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8010490:	7f3a      	ldrb	r2, [r7, #28]
 8010492:	496e      	ldr	r1, [pc, #440]	; (801064c <etharp_find_entry+0x278>)
 8010494:	4613      	mov	r3, r2
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	4413      	add	r3, r2
 801049a:	00db      	lsls	r3, r3, #3
 801049c:	440b      	add	r3, r1
 801049e:	3312      	adds	r3, #18
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	8b3a      	ldrh	r2, [r7, #24]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d840      	bhi.n	801052a <etharp_find_entry+0x156>
            old_queue = i;
 80104a8:	7f3b      	ldrb	r3, [r7, #28]
 80104aa:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80104ac:	7f3a      	ldrb	r2, [r7, #28]
 80104ae:	4967      	ldr	r1, [pc, #412]	; (801064c <etharp_find_entry+0x278>)
 80104b0:	4613      	mov	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	440b      	add	r3, r1
 80104ba:	3312      	adds	r3, #18
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	833b      	strh	r3, [r7, #24]
 80104c0:	e033      	b.n	801052a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80104c2:	7f3a      	ldrb	r2, [r7, #28]
 80104c4:	4961      	ldr	r1, [pc, #388]	; (801064c <etharp_find_entry+0x278>)
 80104c6:	4613      	mov	r3, r2
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	4413      	add	r3, r2
 80104cc:	00db      	lsls	r3, r3, #3
 80104ce:	440b      	add	r3, r1
 80104d0:	3312      	adds	r3, #18
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	8afa      	ldrh	r2, [r7, #22]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d827      	bhi.n	801052a <etharp_find_entry+0x156>
            old_pending = i;
 80104da:	7f3b      	ldrb	r3, [r7, #28]
 80104dc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80104de:	7f3a      	ldrb	r2, [r7, #28]
 80104e0:	495a      	ldr	r1, [pc, #360]	; (801064c <etharp_find_entry+0x278>)
 80104e2:	4613      	mov	r3, r2
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	4413      	add	r3, r2
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	440b      	add	r3, r1
 80104ec:	3312      	adds	r3, #18
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	82fb      	strh	r3, [r7, #22]
 80104f2:	e01a      	b.n	801052a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80104f4:	7cfb      	ldrb	r3, [r7, #19]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d917      	bls.n	801052a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80104fa:	7f3a      	ldrb	r2, [r7, #28]
 80104fc:	4953      	ldr	r1, [pc, #332]	; (801064c <etharp_find_entry+0x278>)
 80104fe:	4613      	mov	r3, r2
 8010500:	005b      	lsls	r3, r3, #1
 8010502:	4413      	add	r3, r2
 8010504:	00db      	lsls	r3, r3, #3
 8010506:	440b      	add	r3, r1
 8010508:	3312      	adds	r3, #18
 801050a:	881b      	ldrh	r3, [r3, #0]
 801050c:	8aba      	ldrh	r2, [r7, #20]
 801050e:	429a      	cmp	r2, r3
 8010510:	d80b      	bhi.n	801052a <etharp_find_entry+0x156>
            old_stable = i;
 8010512:	7f3b      	ldrb	r3, [r7, #28]
 8010514:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010516:	7f3a      	ldrb	r2, [r7, #28]
 8010518:	494c      	ldr	r1, [pc, #304]	; (801064c <etharp_find_entry+0x278>)
 801051a:	4613      	mov	r3, r2
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	4413      	add	r3, r2
 8010520:	00db      	lsls	r3, r3, #3
 8010522:	440b      	add	r3, r1
 8010524:	3312      	adds	r3, #18
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801052a:	7f3b      	ldrb	r3, [r7, #28]
 801052c:	3301      	adds	r3, #1
 801052e:	773b      	strb	r3, [r7, #28]
 8010530:	7f3b      	ldrb	r3, [r7, #28]
 8010532:	2b09      	cmp	r3, #9
 8010534:	f67f af68 	bls.w	8010408 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010538:	7afb      	ldrb	r3, [r7, #11]
 801053a:	f003 0302 	and.w	r3, r3, #2
 801053e:	2b00      	cmp	r3, #0
 8010540:	d108      	bne.n	8010554 <etharp_find_entry+0x180>
 8010542:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010546:	2b0a      	cmp	r3, #10
 8010548:	d107      	bne.n	801055a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801054a:	7afb      	ldrb	r3, [r7, #11]
 801054c:	f003 0301 	and.w	r3, r3, #1
 8010550:	2b00      	cmp	r3, #0
 8010552:	d102      	bne.n	801055a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010554:	f04f 33ff 	mov.w	r3, #4294967295
 8010558:	e073      	b.n	8010642 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801055a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801055e:	2b09      	cmp	r3, #9
 8010560:	dc02      	bgt.n	8010568 <etharp_find_entry+0x194>
    i = empty;
 8010562:	7f7b      	ldrb	r3, [r7, #29]
 8010564:	773b      	strb	r3, [r7, #28]
 8010566:	e036      	b.n	80105d6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010568:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801056c:	2b09      	cmp	r3, #9
 801056e:	dc13      	bgt.n	8010598 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8010570:	7fbb      	ldrb	r3, [r7, #30]
 8010572:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010574:	7f3a      	ldrb	r2, [r7, #28]
 8010576:	4935      	ldr	r1, [pc, #212]	; (801064c <etharp_find_entry+0x278>)
 8010578:	4613      	mov	r3, r2
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	440b      	add	r3, r1
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d018      	beq.n	80105ba <etharp_find_entry+0x1e6>
 8010588:	4b31      	ldr	r3, [pc, #196]	; (8010650 <etharp_find_entry+0x27c>)
 801058a:	f240 126f 	movw	r2, #367	; 0x16f
 801058e:	4933      	ldr	r1, [pc, #204]	; (801065c <etharp_find_entry+0x288>)
 8010590:	4831      	ldr	r0, [pc, #196]	; (8010658 <etharp_find_entry+0x284>)
 8010592:	f004 fbe3 	bl	8014d5c <iprintf>
 8010596:	e010      	b.n	80105ba <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010598:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801059c:	2b09      	cmp	r3, #9
 801059e:	dc02      	bgt.n	80105a6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80105a0:	7ffb      	ldrb	r3, [r7, #31]
 80105a2:	773b      	strb	r3, [r7, #28]
 80105a4:	e009      	b.n	80105ba <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80105a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80105aa:	2b09      	cmp	r3, #9
 80105ac:	dc02      	bgt.n	80105b4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80105ae:	7efb      	ldrb	r3, [r7, #27]
 80105b0:	773b      	strb	r3, [r7, #28]
 80105b2:	e002      	b.n	80105ba <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80105b4:	f04f 33ff 	mov.w	r3, #4294967295
 80105b8:	e043      	b.n	8010642 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80105ba:	7f3b      	ldrb	r3, [r7, #28]
 80105bc:	2b09      	cmp	r3, #9
 80105be:	d906      	bls.n	80105ce <etharp_find_entry+0x1fa>
 80105c0:	4b23      	ldr	r3, [pc, #140]	; (8010650 <etharp_find_entry+0x27c>)
 80105c2:	f240 1281 	movw	r2, #385	; 0x181
 80105c6:	4926      	ldr	r1, [pc, #152]	; (8010660 <etharp_find_entry+0x28c>)
 80105c8:	4823      	ldr	r0, [pc, #140]	; (8010658 <etharp_find_entry+0x284>)
 80105ca:	f004 fbc7 	bl	8014d5c <iprintf>
    etharp_free_entry(i);
 80105ce:	7f3b      	ldrb	r3, [r7, #28]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7ff fe25 	bl	8010220 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80105d6:	7f3b      	ldrb	r3, [r7, #28]
 80105d8:	2b09      	cmp	r3, #9
 80105da:	d906      	bls.n	80105ea <etharp_find_entry+0x216>
 80105dc:	4b1c      	ldr	r3, [pc, #112]	; (8010650 <etharp_find_entry+0x27c>)
 80105de:	f240 1285 	movw	r2, #389	; 0x185
 80105e2:	491f      	ldr	r1, [pc, #124]	; (8010660 <etharp_find_entry+0x28c>)
 80105e4:	481c      	ldr	r0, [pc, #112]	; (8010658 <etharp_find_entry+0x284>)
 80105e6:	f004 fbb9 	bl	8014d5c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80105ea:	7f3a      	ldrb	r2, [r7, #28]
 80105ec:	4917      	ldr	r1, [pc, #92]	; (801064c <etharp_find_entry+0x278>)
 80105ee:	4613      	mov	r3, r2
 80105f0:	005b      	lsls	r3, r3, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	00db      	lsls	r3, r3, #3
 80105f6:	440b      	add	r3, r1
 80105f8:	3314      	adds	r3, #20
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d006      	beq.n	801060e <etharp_find_entry+0x23a>
 8010600:	4b13      	ldr	r3, [pc, #76]	; (8010650 <etharp_find_entry+0x27c>)
 8010602:	f240 1287 	movw	r2, #391	; 0x187
 8010606:	4917      	ldr	r1, [pc, #92]	; (8010664 <etharp_find_entry+0x290>)
 8010608:	4813      	ldr	r0, [pc, #76]	; (8010658 <etharp_find_entry+0x284>)
 801060a:	f004 fba7 	bl	8014d5c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00a      	beq.n	801062a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010614:	7f3a      	ldrb	r2, [r7, #28]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	6819      	ldr	r1, [r3, #0]
 801061a:	480c      	ldr	r0, [pc, #48]	; (801064c <etharp_find_entry+0x278>)
 801061c:	4613      	mov	r3, r2
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	4413      	add	r3, r2
 8010622:	00db      	lsls	r3, r3, #3
 8010624:	4403      	add	r3, r0
 8010626:	3304      	adds	r3, #4
 8010628:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801062a:	7f3a      	ldrb	r2, [r7, #28]
 801062c:	4907      	ldr	r1, [pc, #28]	; (801064c <etharp_find_entry+0x278>)
 801062e:	4613      	mov	r3, r2
 8010630:	005b      	lsls	r3, r3, #1
 8010632:	4413      	add	r3, r2
 8010634:	00db      	lsls	r3, r3, #3
 8010636:	440b      	add	r3, r1
 8010638:	3312      	adds	r3, #18
 801063a:	2200      	movs	r2, #0
 801063c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801063e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010642:	4618      	mov	r0, r3
 8010644:	3720      	adds	r7, #32
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	2000076c 	.word	0x2000076c
 8010650:	08017efc 	.word	0x08017efc
 8010654:	08017f34 	.word	0x08017f34
 8010658:	08017f74 	.word	0x08017f74
 801065c:	08017f9c 	.word	0x08017f9c
 8010660:	08017fb4 	.word	0x08017fb4
 8010664:	08017fc8 	.word	0x08017fc8

08010668 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b088      	sub	sp, #32
 801066c:	af02      	add	r7, sp, #8
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801067c:	2b06      	cmp	r3, #6
 801067e:	d006      	beq.n	801068e <etharp_update_arp_entry+0x26>
 8010680:	4b48      	ldr	r3, [pc, #288]	; (80107a4 <etharp_update_arp_entry+0x13c>)
 8010682:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010686:	4948      	ldr	r1, [pc, #288]	; (80107a8 <etharp_update_arp_entry+0x140>)
 8010688:	4848      	ldr	r0, [pc, #288]	; (80107ac <etharp_update_arp_entry+0x144>)
 801068a:	f004 fb67 	bl	8014d5c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d012      	beq.n	80106ba <etharp_update_arp_entry+0x52>
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00e      	beq.n	80106ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68f9      	ldr	r1, [r7, #12]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f001 f8fc 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 80106a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d105      	bne.n	80106ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80106b6:	2be0      	cmp	r3, #224	; 0xe0
 80106b8:	d102      	bne.n	80106c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80106ba:	f06f 030f 	mvn.w	r3, #15
 80106be:	e06c      	b.n	801079a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80106c0:	78fb      	ldrb	r3, [r7, #3]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	4619      	mov	r1, r3
 80106c6:	68b8      	ldr	r0, [r7, #8]
 80106c8:	f7ff fe84 	bl	80103d4 <etharp_find_entry>
 80106cc:	4603      	mov	r3, r0
 80106ce:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80106d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	da02      	bge.n	80106de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80106d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106dc:	e05d      	b.n	801079a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80106de:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80106e2:	4933      	ldr	r1, [pc, #204]	; (80107b0 <etharp_update_arp_entry+0x148>)
 80106e4:	4613      	mov	r3, r2
 80106e6:	005b      	lsls	r3, r3, #1
 80106e8:	4413      	add	r3, r2
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	440b      	add	r3, r1
 80106ee:	3314      	adds	r3, #20
 80106f0:	2202      	movs	r2, #2
 80106f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80106f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80106f8:	492d      	ldr	r1, [pc, #180]	; (80107b0 <etharp_update_arp_entry+0x148>)
 80106fa:	4613      	mov	r3, r2
 80106fc:	005b      	lsls	r3, r3, #1
 80106fe:	4413      	add	r3, r2
 8010700:	00db      	lsls	r3, r3, #3
 8010702:	440b      	add	r3, r1
 8010704:	3308      	adds	r3, #8
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801070a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801070e:	4613      	mov	r3, r2
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	4413      	add	r3, r2
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	3308      	adds	r3, #8
 8010718:	4a25      	ldr	r2, [pc, #148]	; (80107b0 <etharp_update_arp_entry+0x148>)
 801071a:	4413      	add	r3, r2
 801071c:	3304      	adds	r3, #4
 801071e:	2206      	movs	r2, #6
 8010720:	6879      	ldr	r1, [r7, #4]
 8010722:	4618      	mov	r0, r3
 8010724:	f004 fb07 	bl	8014d36 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010728:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801072c:	4920      	ldr	r1, [pc, #128]	; (80107b0 <etharp_update_arp_entry+0x148>)
 801072e:	4613      	mov	r3, r2
 8010730:	005b      	lsls	r3, r3, #1
 8010732:	4413      	add	r3, r2
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	440b      	add	r3, r1
 8010738:	3312      	adds	r3, #18
 801073a:	2200      	movs	r2, #0
 801073c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801073e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010742:	491b      	ldr	r1, [pc, #108]	; (80107b0 <etharp_update_arp_entry+0x148>)
 8010744:	4613      	mov	r3, r2
 8010746:	005b      	lsls	r3, r3, #1
 8010748:	4413      	add	r3, r2
 801074a:	00db      	lsls	r3, r3, #3
 801074c:	440b      	add	r3, r1
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d021      	beq.n	8010798 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010754:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010758:	4915      	ldr	r1, [pc, #84]	; (80107b0 <etharp_update_arp_entry+0x148>)
 801075a:	4613      	mov	r3, r2
 801075c:	005b      	lsls	r3, r3, #1
 801075e:	4413      	add	r3, r2
 8010760:	00db      	lsls	r3, r3, #3
 8010762:	440b      	add	r3, r1
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010768:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801076c:	4910      	ldr	r1, [pc, #64]	; (80107b0 <etharp_update_arp_entry+0x148>)
 801076e:	4613      	mov	r3, r2
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	4413      	add	r3, r2
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	440b      	add	r3, r1
 8010778:	2200      	movs	r2, #0
 801077a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6939      	ldr	r1, [r7, #16]
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f001 ff29 	bl	80125e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010792:	6938      	ldr	r0, [r7, #16]
 8010794:	f7f7 fd42 	bl	800821c <pbuf_free>
  }
  return ERR_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3718      	adds	r7, #24
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	08017efc 	.word	0x08017efc
 80107a8:	08017ff4 	.word	0x08017ff4
 80107ac:	08017f74 	.word	0x08017f74
 80107b0:	2000076c 	.word	0x2000076c

080107b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107bc:	2300      	movs	r3, #0
 80107be:	73fb      	strb	r3, [r7, #15]
 80107c0:	e01f      	b.n	8010802 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80107c2:	7bfa      	ldrb	r2, [r7, #15]
 80107c4:	4912      	ldr	r1, [pc, #72]	; (8010810 <etharp_cleanup_netif+0x5c>)
 80107c6:	4613      	mov	r3, r2
 80107c8:	005b      	lsls	r3, r3, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	440b      	add	r3, r1
 80107d0:	3314      	adds	r3, #20
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80107d6:	7bbb      	ldrb	r3, [r7, #14]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00f      	beq.n	80107fc <etharp_cleanup_netif+0x48>
 80107dc:	7bfa      	ldrb	r2, [r7, #15]
 80107de:	490c      	ldr	r1, [pc, #48]	; (8010810 <etharp_cleanup_netif+0x5c>)
 80107e0:	4613      	mov	r3, r2
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	4413      	add	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	440b      	add	r3, r1
 80107ea:	3308      	adds	r3, #8
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d103      	bne.n	80107fc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7ff fd12 	bl	8010220 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107fc:	7bfb      	ldrb	r3, [r7, #15]
 80107fe:	3301      	adds	r3, #1
 8010800:	73fb      	strb	r3, [r7, #15]
 8010802:	7bfb      	ldrb	r3, [r7, #15]
 8010804:	2b09      	cmp	r3, #9
 8010806:	d9dc      	bls.n	80107c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010808:	bf00      	nop
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	2000076c 	.word	0x2000076c

08010814 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010814:	b5b0      	push	{r4, r5, r7, lr}
 8010816:	b08a      	sub	sp, #40	; 0x28
 8010818:	af04      	add	r7, sp, #16
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d107      	bne.n	8010834 <etharp_input+0x20>
 8010824:	4b3f      	ldr	r3, [pc, #252]	; (8010924 <etharp_input+0x110>)
 8010826:	f44f 7222 	mov.w	r2, #648	; 0x288
 801082a:	493f      	ldr	r1, [pc, #252]	; (8010928 <etharp_input+0x114>)
 801082c:	483f      	ldr	r0, [pc, #252]	; (801092c <etharp_input+0x118>)
 801082e:	f004 fa95 	bl	8014d5c <iprintf>
 8010832:	e074      	b.n	801091e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	b29b      	uxth	r3, r3
 8010840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010844:	d10c      	bne.n	8010860 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801084a:	2b06      	cmp	r3, #6
 801084c:	d108      	bne.n	8010860 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010852:	2b04      	cmp	r3, #4
 8010854:	d104      	bne.n	8010860 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	885b      	ldrh	r3, [r3, #2]
 801085a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801085c:	2b08      	cmp	r3, #8
 801085e:	d003      	beq.n	8010868 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7f7 fcdb 	bl	800821c <pbuf_free>
    return;
 8010866:	e05a      	b.n	801091e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	330e      	adds	r3, #14
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	3318      	adds	r3, #24
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	3304      	adds	r3, #4
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d102      	bne.n	8010888 <etharp_input+0x74>
    for_us = 0;
 8010882:	2300      	movs	r3, #0
 8010884:	75fb      	strb	r3, [r7, #23]
 8010886:	e009      	b.n	801089c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	3304      	adds	r3, #4
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	429a      	cmp	r2, r3
 8010892:	bf0c      	ite	eq
 8010894:	2301      	moveq	r3, #1
 8010896:	2300      	movne	r3, #0
 8010898:	b2db      	uxtb	r3, r3
 801089a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	f103 0208 	add.w	r2, r3, #8
 80108a2:	7dfb      	ldrb	r3, [r7, #23]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d001      	beq.n	80108ac <etharp_input+0x98>
 80108a8:	2301      	movs	r3, #1
 80108aa:	e000      	b.n	80108ae <etharp_input+0x9a>
 80108ac:	2302      	movs	r3, #2
 80108ae:	f107 010c 	add.w	r1, r7, #12
 80108b2:	6838      	ldr	r0, [r7, #0]
 80108b4:	f7ff fed8 	bl	8010668 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	88db      	ldrh	r3, [r3, #6]
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108c2:	d003      	beq.n	80108cc <etharp_input+0xb8>
 80108c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108c8:	d01e      	beq.n	8010908 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80108ca:	e025      	b.n	8010918 <etharp_input+0x104>
    if (for_us) {
 80108cc:	7dfb      	ldrb	r3, [r7, #23]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d021      	beq.n	8010916 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80108e8:	693a      	ldr	r2, [r7, #16]
 80108ea:	3208      	adds	r2, #8
      etharp_raw(netif,
 80108ec:	2102      	movs	r1, #2
 80108ee:	9103      	str	r1, [sp, #12]
 80108f0:	f107 010c 	add.w	r1, r7, #12
 80108f4:	9102      	str	r1, [sp, #8]
 80108f6:	9201      	str	r2, [sp, #4]
 80108f8:	9300      	str	r3, [sp, #0]
 80108fa:	462b      	mov	r3, r5
 80108fc:	4622      	mov	r2, r4
 80108fe:	4601      	mov	r1, r0
 8010900:	6838      	ldr	r0, [r7, #0]
 8010902:	f000 fae7 	bl	8010ed4 <etharp_raw>
    break;
 8010906:	e006      	b.n	8010916 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8010908:	f107 030c 	add.w	r3, r7, #12
 801090c:	4619      	mov	r1, r3
 801090e:	6838      	ldr	r0, [r7, #0]
 8010910:	f7fe f980 	bl	800ec14 <dhcp_arp_reply>
    break;
 8010914:	e000      	b.n	8010918 <etharp_input+0x104>
    break;
 8010916:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7f7 fc7f 	bl	800821c <pbuf_free>
}
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bdb0      	pop	{r4, r5, r7, pc}
 8010924:	08017efc 	.word	0x08017efc
 8010928:	0801804c 	.word	0x0801804c
 801092c:	08017f74 	.word	0x08017f74

08010930 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b086      	sub	sp, #24
 8010934:	af02      	add	r7, sp, #8
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	4613      	mov	r3, r2
 801093c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801093e:	79fa      	ldrb	r2, [r7, #7]
 8010940:	4944      	ldr	r1, [pc, #272]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 8010942:	4613      	mov	r3, r2
 8010944:	005b      	lsls	r3, r3, #1
 8010946:	4413      	add	r3, r2
 8010948:	00db      	lsls	r3, r3, #3
 801094a:	440b      	add	r3, r1
 801094c:	3314      	adds	r3, #20
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d806      	bhi.n	8010962 <etharp_output_to_arp_index+0x32>
 8010954:	4b40      	ldr	r3, [pc, #256]	; (8010a58 <etharp_output_to_arp_index+0x128>)
 8010956:	f240 22ed 	movw	r2, #749	; 0x2ed
 801095a:	4940      	ldr	r1, [pc, #256]	; (8010a5c <etharp_output_to_arp_index+0x12c>)
 801095c:	4840      	ldr	r0, [pc, #256]	; (8010a60 <etharp_output_to_arp_index+0x130>)
 801095e:	f004 f9fd 	bl	8014d5c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010962:	79fa      	ldrb	r2, [r7, #7]
 8010964:	493b      	ldr	r1, [pc, #236]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 8010966:	4613      	mov	r3, r2
 8010968:	005b      	lsls	r3, r3, #1
 801096a:	4413      	add	r3, r2
 801096c:	00db      	lsls	r3, r3, #3
 801096e:	440b      	add	r3, r1
 8010970:	3314      	adds	r3, #20
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d153      	bne.n	8010a20 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010978:	79fa      	ldrb	r2, [r7, #7]
 801097a:	4936      	ldr	r1, [pc, #216]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 801097c:	4613      	mov	r3, r2
 801097e:	005b      	lsls	r3, r3, #1
 8010980:	4413      	add	r3, r2
 8010982:	00db      	lsls	r3, r3, #3
 8010984:	440b      	add	r3, r1
 8010986:	3312      	adds	r3, #18
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801098e:	d919      	bls.n	80109c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010990:	79fa      	ldrb	r2, [r7, #7]
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	4a2e      	ldr	r2, [pc, #184]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 801099c:	4413      	add	r3, r2
 801099e:	3304      	adds	r3, #4
 80109a0:	4619      	mov	r1, r3
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f000 fb44 	bl	8011030 <etharp_request>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d138      	bne.n	8010a20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80109ae:	79fa      	ldrb	r2, [r7, #7]
 80109b0:	4928      	ldr	r1, [pc, #160]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 80109b2:	4613      	mov	r3, r2
 80109b4:	005b      	lsls	r3, r3, #1
 80109b6:	4413      	add	r3, r2
 80109b8:	00db      	lsls	r3, r3, #3
 80109ba:	440b      	add	r3, r1
 80109bc:	3314      	adds	r3, #20
 80109be:	2203      	movs	r2, #3
 80109c0:	701a      	strb	r2, [r3, #0]
 80109c2:	e02d      	b.n	8010a20 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80109c4:	79fa      	ldrb	r2, [r7, #7]
 80109c6:	4923      	ldr	r1, [pc, #140]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 80109c8:	4613      	mov	r3, r2
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	440b      	add	r3, r1
 80109d2:	3312      	adds	r3, #18
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80109da:	d321      	bcc.n	8010a20 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109dc:	79fa      	ldrb	r2, [r7, #7]
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	00db      	lsls	r3, r3, #3
 80109e6:	4a1b      	ldr	r2, [pc, #108]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 80109e8:	4413      	add	r3, r2
 80109ea:	1d19      	adds	r1, r3, #4
 80109ec:	79fa      	ldrb	r2, [r7, #7]
 80109ee:	4613      	mov	r3, r2
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	4413      	add	r3, r2
 80109f4:	00db      	lsls	r3, r3, #3
 80109f6:	3308      	adds	r3, #8
 80109f8:	4a16      	ldr	r2, [pc, #88]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 80109fa:	4413      	add	r3, r2
 80109fc:	3304      	adds	r3, #4
 80109fe:	461a      	mov	r2, r3
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f000 faf3 	bl	8010fec <etharp_request_dst>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d109      	bne.n	8010a20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010a0c:	79fa      	ldrb	r2, [r7, #7]
 8010a0e:	4911      	ldr	r1, [pc, #68]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 8010a10:	4613      	mov	r3, r2
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	4413      	add	r3, r2
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	440b      	add	r3, r1
 8010a1a:	3314      	adds	r3, #20
 8010a1c:	2203      	movs	r2, #3
 8010a1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8010a26:	79fa      	ldrb	r2, [r7, #7]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	005b      	lsls	r3, r3, #1
 8010a2c:	4413      	add	r3, r2
 8010a2e:	00db      	lsls	r3, r3, #3
 8010a30:	3308      	adds	r3, #8
 8010a32:	4a08      	ldr	r2, [pc, #32]	; (8010a54 <etharp_output_to_arp_index+0x124>)
 8010a34:	4413      	add	r3, r2
 8010a36:	1d1a      	adds	r2, r3, #4
 8010a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	4613      	mov	r3, r2
 8010a40:	460a      	mov	r2, r1
 8010a42:	68b9      	ldr	r1, [r7, #8]
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f001 fdcd 	bl	80125e4 <ethernet_output>
 8010a4a:	4603      	mov	r3, r0
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	2000076c 	.word	0x2000076c
 8010a58:	08017efc 	.word	0x08017efc
 8010a5c:	0801806c 	.word	0x0801806c
 8010a60:	08017f74 	.word	0x08017f74

08010a64 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08a      	sub	sp, #40	; 0x28
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d106      	bne.n	8010a88 <etharp_output+0x24>
 8010a7a:	4b69      	ldr	r3, [pc, #420]	; (8010c20 <etharp_output+0x1bc>)
 8010a7c:	f240 321b 	movw	r2, #795	; 0x31b
 8010a80:	4968      	ldr	r1, [pc, #416]	; (8010c24 <etharp_output+0x1c0>)
 8010a82:	4869      	ldr	r0, [pc, #420]	; (8010c28 <etharp_output+0x1c4>)
 8010a84:	f004 f96a 	bl	8014d5c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d106      	bne.n	8010a9c <etharp_output+0x38>
 8010a8e:	4b64      	ldr	r3, [pc, #400]	; (8010c20 <etharp_output+0x1bc>)
 8010a90:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010a94:	4965      	ldr	r1, [pc, #404]	; (8010c2c <etharp_output+0x1c8>)
 8010a96:	4864      	ldr	r0, [pc, #400]	; (8010c28 <etharp_output+0x1c4>)
 8010a98:	f004 f960 	bl	8014d5c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <etharp_output+0x4c>
 8010aa2:	4b5f      	ldr	r3, [pc, #380]	; (8010c20 <etharp_output+0x1bc>)
 8010aa4:	f240 321d 	movw	r2, #797	; 0x31d
 8010aa8:	4961      	ldr	r1, [pc, #388]	; (8010c30 <etharp_output+0x1cc>)
 8010aaa:	485f      	ldr	r0, [pc, #380]	; (8010c28 <etharp_output+0x1c4>)
 8010aac:	f004 f956 	bl	8014d5c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68f9      	ldr	r1, [r7, #12]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f000 fef2 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d002      	beq.n	8010ac8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010ac2:	4b5c      	ldr	r3, [pc, #368]	; (8010c34 <etharp_output+0x1d0>)
 8010ac4:	61fb      	str	r3, [r7, #28]
 8010ac6:	e09b      	b.n	8010c00 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ad0:	2be0      	cmp	r3, #224	; 0xe0
 8010ad2:	d118      	bne.n	8010b06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010adc:	235e      	movs	r3, #94	; 0x5e
 8010ade:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	3302      	adds	r3, #2
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	3303      	adds	r3, #3
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010afe:	f107 0310 	add.w	r3, r7, #16
 8010b02:	61fb      	str	r3, [r7, #28]
 8010b04:	e07c      	b.n	8010c00 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3304      	adds	r3, #4
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	405a      	eors	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	3308      	adds	r3, #8
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4013      	ands	r3, r2
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d012      	beq.n	8010b44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d00b      	beq.n	8010b44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	330c      	adds	r3, #12
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d003      	beq.n	8010b3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	330c      	adds	r3, #12
 8010b3a:	61bb      	str	r3, [r7, #24]
 8010b3c:	e002      	b.n	8010b44 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010b3e:	f06f 0303 	mvn.w	r3, #3
 8010b42:	e069      	b.n	8010c18 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b44:	4b3c      	ldr	r3, [pc, #240]	; (8010c38 <etharp_output+0x1d4>)
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	4619      	mov	r1, r3
 8010b4a:	4a3c      	ldr	r2, [pc, #240]	; (8010c3c <etharp_output+0x1d8>)
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	440b      	add	r3, r1
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	4413      	add	r3, r2
 8010b56:	3314      	adds	r3, #20
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d917      	bls.n	8010b8e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	4b35      	ldr	r3, [pc, #212]	; (8010c38 <etharp_output+0x1d4>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	4618      	mov	r0, r3
 8010b68:	4934      	ldr	r1, [pc, #208]	; (8010c3c <etharp_output+0x1d8>)
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	4403      	add	r3, r0
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	440b      	add	r3, r1
 8010b74:	3304      	adds	r3, #4
 8010b76:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d108      	bne.n	8010b8e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010b7c:	4b2e      	ldr	r3, [pc, #184]	; (8010c38 <etharp_output+0x1d4>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	461a      	mov	r2, r3
 8010b82:	68b9      	ldr	r1, [r7, #8]
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	f7ff fed3 	bl	8010930 <etharp_output_to_arp_index>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	e044      	b.n	8010c18 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010b8e:	2300      	movs	r3, #0
 8010b90:	75fb      	strb	r3, [r7, #23]
 8010b92:	e02a      	b.n	8010bea <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010b94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b98:	4928      	ldr	r1, [pc, #160]	; (8010c3c <etharp_output+0x1d8>)
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	005b      	lsls	r3, r3, #1
 8010b9e:	4413      	add	r3, r2
 8010ba0:	00db      	lsls	r3, r3, #3
 8010ba2:	440b      	add	r3, r1
 8010ba4:	3314      	adds	r3, #20
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d918      	bls.n	8010bde <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	6819      	ldr	r1, [r3, #0]
 8010bb0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010bb4:	4821      	ldr	r0, [pc, #132]	; (8010c3c <etharp_output+0x1d8>)
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	00db      	lsls	r3, r3, #3
 8010bbe:	4403      	add	r3, r0
 8010bc0:	3304      	adds	r3, #4
 8010bc2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010bc4:	4299      	cmp	r1, r3
 8010bc6:	d10a      	bne.n	8010bde <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010bc8:	7dfa      	ldrb	r2, [r7, #23]
 8010bca:	4b1b      	ldr	r3, [pc, #108]	; (8010c38 <etharp_output+0x1d4>)
 8010bcc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010bce:	7dfb      	ldrb	r3, [r7, #23]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	68b9      	ldr	r1, [r7, #8]
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f7ff feab 	bl	8010930 <etharp_output_to_arp_index>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	e01c      	b.n	8010c18 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	3301      	adds	r3, #1
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	75fb      	strb	r3, [r7, #23]
 8010bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010bee:	2b09      	cmp	r3, #9
 8010bf0:	ddd0      	ble.n	8010b94 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	69b9      	ldr	r1, [r7, #24]
 8010bf6:	68f8      	ldr	r0, [r7, #12]
 8010bf8:	f000 f822 	bl	8010c40 <etharp_query>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	e00b      	b.n	8010c18 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	68b9      	ldr	r1, [r7, #8]
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f001 fce7 	bl	80125e4 <ethernet_output>
 8010c16:	4603      	mov	r3, r0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3720      	adds	r7, #32
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	08017efc 	.word	0x08017efc
 8010c24:	0801804c 	.word	0x0801804c
 8010c28:	08017f74 	.word	0x08017f74
 8010c2c:	0801809c 	.word	0x0801809c
 8010c30:	0801803c 	.word	0x0801803c
 8010c34:	0801981c 	.word	0x0801981c
 8010c38:	2000085c 	.word	0x2000085c
 8010c3c:	2000076c 	.word	0x2000076c

08010c40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b08c      	sub	sp, #48	; 0x30
 8010c44:	af02      	add	r7, sp, #8
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	3329      	adds	r3, #41	; 0x29
 8010c50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010c52:	23ff      	movs	r3, #255	; 0xff
 8010c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68f9      	ldr	r1, [r7, #12]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fe1c 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d10c      	bne.n	8010c88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c76:	2be0      	cmp	r3, #224	; 0xe0
 8010c78:	d006      	beq.n	8010c88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d003      	beq.n	8010c88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d102      	bne.n	8010c8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010c88:	f06f 030f 	mvn.w	r3, #15
 8010c8c:	e10f      	b.n	8010eae <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	2101      	movs	r1, #1
 8010c92:	68b8      	ldr	r0, [r7, #8]
 8010c94:	f7ff fb9e 	bl	80103d4 <etharp_find_entry>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	da02      	bge.n	8010caa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ca8:	e101      	b.n	8010eae <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010caa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cae:	4982      	ldr	r1, [pc, #520]	; (8010eb8 <etharp_query+0x278>)
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	005b      	lsls	r3, r3, #1
 8010cb4:	4413      	add	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	440b      	add	r3, r1
 8010cba:	3314      	adds	r3, #20
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d117      	bne.n	8010cf2 <etharp_query+0xb2>
    is_new_entry = 1;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010cc6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cca:	497b      	ldr	r1, [pc, #492]	; (8010eb8 <etharp_query+0x278>)
 8010ccc:	4613      	mov	r3, r2
 8010cce:	005b      	lsls	r3, r3, #1
 8010cd0:	4413      	add	r3, r2
 8010cd2:	00db      	lsls	r3, r3, #3
 8010cd4:	440b      	add	r3, r1
 8010cd6:	3314      	adds	r3, #20
 8010cd8:	2201      	movs	r2, #1
 8010cda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010cdc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010ce0:	4975      	ldr	r1, [pc, #468]	; (8010eb8 <etharp_query+0x278>)
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	005b      	lsls	r3, r3, #1
 8010ce6:	4413      	add	r3, r2
 8010ce8:	00db      	lsls	r3, r3, #3
 8010cea:	440b      	add	r3, r1
 8010cec:	3308      	adds	r3, #8
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010cf2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cf6:	4970      	ldr	r1, [pc, #448]	; (8010eb8 <etharp_query+0x278>)
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	4413      	add	r3, r2
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	440b      	add	r3, r1
 8010d02:	3314      	adds	r3, #20
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d012      	beq.n	8010d30 <etharp_query+0xf0>
 8010d0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d0e:	496a      	ldr	r1, [pc, #424]	; (8010eb8 <etharp_query+0x278>)
 8010d10:	4613      	mov	r3, r2
 8010d12:	005b      	lsls	r3, r3, #1
 8010d14:	4413      	add	r3, r2
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	440b      	add	r3, r1
 8010d1a:	3314      	adds	r3, #20
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d806      	bhi.n	8010d30 <etharp_query+0xf0>
 8010d22:	4b66      	ldr	r3, [pc, #408]	; (8010ebc <etharp_query+0x27c>)
 8010d24:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010d28:	4965      	ldr	r1, [pc, #404]	; (8010ec0 <etharp_query+0x280>)
 8010d2a:	4866      	ldr	r0, [pc, #408]	; (8010ec4 <etharp_query+0x284>)
 8010d2c:	f004 f816 	bl	8014d5c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010d30:	6a3b      	ldr	r3, [r7, #32]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d102      	bne.n	8010d3c <etharp_query+0xfc>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d10c      	bne.n	8010d56 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010d3c:	68b9      	ldr	r1, [r7, #8]
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f000 f976 	bl	8011030 <etharp_request>
 8010d44:	4603      	mov	r3, r0
 8010d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d102      	bne.n	8010d56 <etharp_query+0x116>
      return result;
 8010d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d54:	e0ab      	b.n	8010eae <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d106      	bne.n	8010d6a <etharp_query+0x12a>
 8010d5c:	4b57      	ldr	r3, [pc, #348]	; (8010ebc <etharp_query+0x27c>)
 8010d5e:	f240 32db 	movw	r2, #987	; 0x3db
 8010d62:	4959      	ldr	r1, [pc, #356]	; (8010ec8 <etharp_query+0x288>)
 8010d64:	4857      	ldr	r0, [pc, #348]	; (8010ec4 <etharp_query+0x284>)
 8010d66:	f003 fff9 	bl	8014d5c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010d6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d6e:	4952      	ldr	r1, [pc, #328]	; (8010eb8 <etharp_query+0x278>)
 8010d70:	4613      	mov	r3, r2
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	4413      	add	r3, r2
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	440b      	add	r3, r1
 8010d7a:	3314      	adds	r3, #20
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d919      	bls.n	8010db6 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8010d82:	7cfa      	ldrb	r2, [r7, #19]
 8010d84:	4b51      	ldr	r3, [pc, #324]	; (8010ecc <etharp_query+0x28c>)
 8010d86:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010d88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	005b      	lsls	r3, r3, #1
 8010d90:	4413      	add	r3, r2
 8010d92:	00db      	lsls	r3, r3, #3
 8010d94:	3308      	adds	r3, #8
 8010d96:	4a48      	ldr	r2, [pc, #288]	; (8010eb8 <etharp_query+0x278>)
 8010d98:	4413      	add	r3, r2
 8010d9a:	1d1a      	adds	r2, r3, #4
 8010d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	4613      	mov	r3, r2
 8010da4:	697a      	ldr	r2, [r7, #20]
 8010da6:	6879      	ldr	r1, [r7, #4]
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f001 fc1b 	bl	80125e4 <ethernet_output>
 8010dae:	4603      	mov	r3, r0
 8010db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010db4:	e079      	b.n	8010eaa <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010db6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010dba:	493f      	ldr	r1, [pc, #252]	; (8010eb8 <etharp_query+0x278>)
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	00db      	lsls	r3, r3, #3
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3314      	adds	r3, #20
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d16d      	bne.n	8010eaa <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010dd6:	e01a      	b.n	8010e0e <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	895a      	ldrh	r2, [r3, #10]
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	891b      	ldrh	r3, [r3, #8]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d10a      	bne.n	8010dfa <etharp_query+0x1ba>
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d006      	beq.n	8010dfa <etharp_query+0x1ba>
 8010dec:	4b33      	ldr	r3, [pc, #204]	; (8010ebc <etharp_query+0x27c>)
 8010dee:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8010df2:	4937      	ldr	r1, [pc, #220]	; (8010ed0 <etharp_query+0x290>)
 8010df4:	4833      	ldr	r0, [pc, #204]	; (8010ec4 <etharp_query+0x284>)
 8010df6:	f003 ffb1 	bl	8014d5c <iprintf>
      if (p->type != PBUF_ROM) {
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	7b1b      	ldrb	r3, [r3, #12]
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d002      	beq.n	8010e08 <etharp_query+0x1c8>
        copy_needed = 1;
 8010e02:	2301      	movs	r3, #1
 8010e04:	61bb      	str	r3, [r7, #24]
        break;
 8010e06:	e005      	b.n	8010e14 <etharp_query+0x1d4>
      }
      p = p->next;
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d1e1      	bne.n	8010dd8 <etharp_query+0x198>
    }
    if (copy_needed) {
 8010e14:	69bb      	ldr	r3, [r7, #24]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d017      	beq.n	8010e4a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	891b      	ldrh	r3, [r3, #8]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	4619      	mov	r1, r3
 8010e22:	2002      	movs	r0, #2
 8010e24:	f7f6 fe88 	bl	8007b38 <pbuf_alloc>
 8010e28:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d011      	beq.n	8010e54 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010e30:	6879      	ldr	r1, [r7, #4]
 8010e32:	69f8      	ldr	r0, [r7, #28]
 8010e34:	f7f7 fb26 	bl	8008484 <pbuf_copy>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00a      	beq.n	8010e54 <etharp_query+0x214>
          pbuf_free(p);
 8010e3e:	69f8      	ldr	r0, [r7, #28]
 8010e40:	f7f7 f9ec 	bl	800821c <pbuf_free>
          p = NULL;
 8010e44:	2300      	movs	r3, #0
 8010e46:	61fb      	str	r3, [r7, #28]
 8010e48:	e004      	b.n	8010e54 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010e4e:	69f8      	ldr	r0, [r7, #28]
 8010e50:	f7f7 fa90 	bl	8008374 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d024      	beq.n	8010ea4 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010e5a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e5e:	4916      	ldr	r1, [pc, #88]	; (8010eb8 <etharp_query+0x278>)
 8010e60:	4613      	mov	r3, r2
 8010e62:	005b      	lsls	r3, r3, #1
 8010e64:	4413      	add	r3, r2
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	440b      	add	r3, r1
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00b      	beq.n	8010e88 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8010e70:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e74:	4910      	ldr	r1, [pc, #64]	; (8010eb8 <etharp_query+0x278>)
 8010e76:	4613      	mov	r3, r2
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	4413      	add	r3, r2
 8010e7c:	00db      	lsls	r3, r3, #3
 8010e7e:	440b      	add	r3, r1
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f7 f9ca 	bl	800821c <pbuf_free>
      }
      arp_table[i].q = p;
 8010e88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e8c:	490a      	ldr	r1, [pc, #40]	; (8010eb8 <etharp_query+0x278>)
 8010e8e:	4613      	mov	r3, r2
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	4413      	add	r3, r2
 8010e94:	00db      	lsls	r3, r3, #3
 8010e96:	440b      	add	r3, r1
 8010e98:	69fa      	ldr	r2, [r7, #28]
 8010e9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ea2:	e002      	b.n	8010eaa <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010ea4:	23ff      	movs	r3, #255	; 0xff
 8010ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3728      	adds	r7, #40	; 0x28
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	2000076c 	.word	0x2000076c
 8010ebc:	08017efc 	.word	0x08017efc
 8010ec0:	080180a8 	.word	0x080180a8
 8010ec4:	08017f74 	.word	0x08017f74
 8010ec8:	0801809c 	.word	0x0801809c
 8010ecc:	2000085c 	.word	0x2000085c
 8010ed0:	080180d0 	.word	0x080180d0

08010ed4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b08a      	sub	sp, #40	; 0x28
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d106      	bne.n	8010efa <etharp_raw+0x26>
 8010eec:	4b3a      	ldr	r3, [pc, #232]	; (8010fd8 <etharp_raw+0x104>)
 8010eee:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8010ef2:	493a      	ldr	r1, [pc, #232]	; (8010fdc <etharp_raw+0x108>)
 8010ef4:	483a      	ldr	r0, [pc, #232]	; (8010fe0 <etharp_raw+0x10c>)
 8010ef6:	f003 ff31 	bl	8014d5c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010efa:	2200      	movs	r2, #0
 8010efc:	211c      	movs	r1, #28
 8010efe:	2002      	movs	r0, #2
 8010f00:	f7f6 fe1a 	bl	8007b38 <pbuf_alloc>
 8010f04:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f10:	e05d      	b.n	8010fce <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	895b      	ldrh	r3, [r3, #10]
 8010f16:	2b1b      	cmp	r3, #27
 8010f18:	d806      	bhi.n	8010f28 <etharp_raw+0x54>
 8010f1a:	4b2f      	ldr	r3, [pc, #188]	; (8010fd8 <etharp_raw+0x104>)
 8010f1c:	f240 4264 	movw	r2, #1124	; 0x464
 8010f20:	4930      	ldr	r1, [pc, #192]	; (8010fe4 <etharp_raw+0x110>)
 8010f22:	482f      	ldr	r0, [pc, #188]	; (8010fe0 <etharp_raw+0x10c>)
 8010f24:	f003 ff1a 	bl	8014d5c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010f2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f5 ffdd 	bl	8006ef0 <lwip_htons>
 8010f36:	4603      	mov	r3, r0
 8010f38:	461a      	mov	r2, r3
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f44:	2b06      	cmp	r3, #6
 8010f46:	d006      	beq.n	8010f56 <etharp_raw+0x82>
 8010f48:	4b23      	ldr	r3, [pc, #140]	; (8010fd8 <etharp_raw+0x104>)
 8010f4a:	f240 426b 	movw	r2, #1131	; 0x46b
 8010f4e:	4926      	ldr	r1, [pc, #152]	; (8010fe8 <etharp_raw+0x114>)
 8010f50:	4823      	ldr	r0, [pc, #140]	; (8010fe0 <etharp_raw+0x10c>)
 8010f52:	f003 ff03 	bl	8014d5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	3308      	adds	r3, #8
 8010f5a:	2206      	movs	r2, #6
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f003 fee9 	bl	8014d36 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	3312      	adds	r3, #18
 8010f68:	2206      	movs	r2, #6
 8010f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f003 fee2 	bl	8014d36 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	330e      	adds	r3, #14
 8010f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f78:	6812      	ldr	r2, [r2, #0]
 8010f7a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	3318      	adds	r3, #24
 8010f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f82:	6812      	ldr	r2, [r2, #0]
 8010f84:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	701a      	strb	r2, [r3, #0]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	f042 0201 	orr.w	r2, r2, #1
 8010f92:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2200      	movs	r2, #0
 8010f98:	f042 0208 	orr.w	r2, r2, #8
 8010f9c:	709a      	strb	r2, [r3, #2]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	2206      	movs	r2, #6
 8010fa6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2204      	movs	r2, #4
 8010fac:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010fae:	f640 0306 	movw	r3, #2054	; 0x806
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	69b9      	ldr	r1, [r7, #24]
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f001 fb12 	bl	80125e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010fc0:	69b8      	ldr	r0, [r7, #24]
 8010fc2:	f7f7 f92b 	bl	800821c <pbuf_free>
  p = NULL;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3720      	adds	r7, #32
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	08017efc 	.word	0x08017efc
 8010fdc:	0801804c 	.word	0x0801804c
 8010fe0:	08017f74 	.word	0x08017f74
 8010fe4:	080180ec 	.word	0x080180ec
 8010fe8:	08018120 	.word	0x08018120

08010fec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b088      	sub	sp, #32
 8010ff0:	af04      	add	r7, sp, #16
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011008:	2201      	movs	r2, #1
 801100a:	9203      	str	r2, [sp, #12]
 801100c:	68ba      	ldr	r2, [r7, #8]
 801100e:	9202      	str	r2, [sp, #8]
 8011010:	4a06      	ldr	r2, [pc, #24]	; (801102c <etharp_request_dst+0x40>)
 8011012:	9201      	str	r2, [sp, #4]
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	4603      	mov	r3, r0
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f7ff ff5a 	bl	8010ed4 <etharp_raw>
 8011020:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	08019824 	.word	0x08019824

08011030 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801103a:	4a05      	ldr	r2, [pc, #20]	; (8011050 <etharp_request+0x20>)
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff ffd4 	bl	8010fec <etharp_request_dst>
 8011044:	4603      	mov	r3, r0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	0801981c 	.word	0x0801981c

08011054 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b08e      	sub	sp, #56	; 0x38
 8011058:	af04      	add	r7, sp, #16
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801105e:	4b7a      	ldr	r3, [pc, #488]	; (8011248 <icmp_input+0x1f4>)
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	b29b      	uxth	r3, r3
 801106a:	f003 030f 	and.w	r3, r3, #15
 801106e:	b29b      	uxth	r3, r3
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011076:	2b13      	cmp	r3, #19
 8011078:	f240 80d1 	bls.w	801121e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	895b      	ldrh	r3, [r3, #10]
 8011080:	2b03      	cmp	r3, #3
 8011082:	f240 80ce 	bls.w	8011222 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011090:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 80bb 	beq.w	8011210 <icmp_input+0x1bc>
 801109a:	2b08      	cmp	r3, #8
 801109c:	f040 80bb 	bne.w	8011216 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80110a0:	4b6a      	ldr	r3, [pc, #424]	; (801124c <icmp_input+0x1f8>)
 80110a2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80110a4:	4b68      	ldr	r3, [pc, #416]	; (8011248 <icmp_input+0x1f4>)
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110ac:	2be0      	cmp	r3, #224	; 0xe0
 80110ae:	f000 80bf 	beq.w	8011230 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80110b2:	4b65      	ldr	r3, [pc, #404]	; (8011248 <icmp_input+0x1f4>)
 80110b4:	695a      	ldr	r2, [r3, #20]
 80110b6:	4b64      	ldr	r3, [pc, #400]	; (8011248 <icmp_input+0x1f4>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4619      	mov	r1, r3
 80110bc:	4610      	mov	r0, r2
 80110be:	f000 fbef 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f040 80b5 	bne.w	8011234 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	891b      	ldrh	r3, [r3, #8]
 80110ce:	2b07      	cmp	r3, #7
 80110d0:	f240 80a9 	bls.w	8011226 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80110d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110d6:	330e      	adds	r3, #14
 80110d8:	b29b      	uxth	r3, r3
 80110da:	b21b      	sxth	r3, r3
 80110dc:	4619      	mov	r1, r3
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7f7 f878 	bl	80081d4 <pbuf_header>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d046      	beq.n	8011178 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	891a      	ldrh	r2, [r3, #8]
 80110ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110f0:	4413      	add	r3, r2
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	2200      	movs	r2, #0
 80110f6:	4619      	mov	r1, r3
 80110f8:	2002      	movs	r0, #2
 80110fa:	f7f6 fd1d 	bl	8007b38 <pbuf_alloc>
 80110fe:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 8098 	beq.w	8011238 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	895b      	ldrh	r3, [r3, #10]
 801110c:	461a      	mov	r2, r3
 801110e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011110:	3308      	adds	r3, #8
 8011112:	429a      	cmp	r2, r3
 8011114:	d203      	bcs.n	801111e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011116:	69b8      	ldr	r0, [r7, #24]
 8011118:	f7f7 f880 	bl	800821c <pbuf_free>
        goto icmperr;
 801111c:	e08d      	b.n	801123a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011126:	4618      	mov	r0, r3
 8011128:	f003 fe05 	bl	8014d36 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801112c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801112e:	425b      	negs	r3, r3
 8011130:	b29b      	uxth	r3, r3
 8011132:	b21b      	sxth	r3, r3
 8011134:	4619      	mov	r1, r3
 8011136:	69b8      	ldr	r0, [r7, #24]
 8011138:	f7f7 f84c 	bl	80081d4 <pbuf_header>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d009      	beq.n	8011156 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011142:	4b43      	ldr	r3, [pc, #268]	; (8011250 <icmp_input+0x1fc>)
 8011144:	22af      	movs	r2, #175	; 0xaf
 8011146:	4943      	ldr	r1, [pc, #268]	; (8011254 <icmp_input+0x200>)
 8011148:	4843      	ldr	r0, [pc, #268]	; (8011258 <icmp_input+0x204>)
 801114a:	f003 fe07 	bl	8014d5c <iprintf>
        pbuf_free(r);
 801114e:	69b8      	ldr	r0, [r7, #24]
 8011150:	f7f7 f864 	bl	800821c <pbuf_free>
        goto icmperr;
 8011154:	e071      	b.n	801123a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	69b8      	ldr	r0, [r7, #24]
 801115a:	f7f7 f993 	bl	8008484 <pbuf_copy>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011164:	69b8      	ldr	r0, [r7, #24]
 8011166:	f7f7 f859 	bl	800821c <pbuf_free>
        goto icmperr;
 801116a:	e066      	b.n	801123a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7f7 f855 	bl	800821c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	607b      	str	r3, [r7, #4]
 8011176:	e015      	b.n	80111a4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801117a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801117e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011182:	33f2      	adds	r3, #242	; 0xf2
 8011184:	b29b      	uxth	r3, r3
 8011186:	b21b      	sxth	r3, r3
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7f7 f822 	bl	80081d4 <pbuf_header>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d006      	beq.n	80111a4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011196:	4b2e      	ldr	r3, [pc, #184]	; (8011250 <icmp_input+0x1fc>)
 8011198:	22c0      	movs	r2, #192	; 0xc0
 801119a:	4930      	ldr	r1, [pc, #192]	; (801125c <icmp_input+0x208>)
 801119c:	482e      	ldr	r0, [pc, #184]	; (8011258 <icmp_input+0x204>)
 801119e:	f003 fddd 	bl	8014d5c <iprintf>
        goto icmperr;
 80111a2:	e04a      	b.n	801123a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80111aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80111ae:	4619      	mov	r1, r3
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f7f7 f80f 	bl	80081d4 <pbuf_header>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d12b      	bne.n	8011214 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80111ca:	4b1f      	ldr	r3, [pc, #124]	; (8011248 <icmp_input+0x1f4>)
 80111cc:	691a      	ldr	r2, [r3, #16]
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	2200      	movs	r2, #0
 80111d6:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	2200      	movs	r2, #0
 80111dc:	709a      	strb	r2, [r3, #2]
 80111de:	2200      	movs	r2, #0
 80111e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	22ff      	movs	r2, #255	; 0xff
 80111e6:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	2200      	movs	r2, #0
 80111ec:	729a      	strb	r2, [r3, #10]
 80111ee:	2200      	movs	r2, #0
 80111f0:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	9302      	str	r3, [sp, #8]
 80111f6:	2301      	movs	r3, #1
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	2300      	movs	r3, #0
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	23ff      	movs	r3, #255	; 0xff
 8011200:	2200      	movs	r2, #0
 8011202:	69f9      	ldr	r1, [r7, #28]
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f000 fa79 	bl	80116fc <ip4_output_if>
 801120a:	4603      	mov	r3, r0
 801120c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801120e:	e001      	b.n	8011214 <icmp_input+0x1c0>
    break;
 8011210:	bf00      	nop
 8011212:	e000      	b.n	8011216 <icmp_input+0x1c2>
    break;
 8011214:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f7f7 f800 	bl	800821c <pbuf_free>
  return;
 801121c:	e011      	b.n	8011242 <icmp_input+0x1ee>
    goto lenerr;
 801121e:	bf00      	nop
 8011220:	e002      	b.n	8011228 <icmp_input+0x1d4>
    goto lenerr;
 8011222:	bf00      	nop
 8011224:	e000      	b.n	8011228 <icmp_input+0x1d4>
      goto lenerr;
 8011226:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f7f6 fff7 	bl	800821c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801122e:	e008      	b.n	8011242 <icmp_input+0x1ee>
      goto icmperr;
 8011230:	bf00      	nop
 8011232:	e002      	b.n	801123a <icmp_input+0x1e6>
      goto icmperr;
 8011234:	bf00      	nop
 8011236:	e000      	b.n	801123a <icmp_input+0x1e6>
        goto icmperr;
 8011238:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f7f6 ffee 	bl	800821c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011240:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011242:	3728      	adds	r7, #40	; 0x28
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	2000091c 	.word	0x2000091c
 801124c:	20000930 	.word	0x20000930
 8011250:	08018164 	.word	0x08018164
 8011254:	0801819c 	.word	0x0801819c
 8011258:	080181d4 	.word	0x080181d4
 801125c:	080181fc 	.word	0x080181fc

08011260 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	460b      	mov	r3, r1
 801126a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801126c:	78fb      	ldrb	r3, [r7, #3]
 801126e:	461a      	mov	r2, r3
 8011270:	2103      	movs	r1, #3
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f814 	bl	80112a0 <icmp_send_response>
}
 8011278:	bf00      	nop
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801128c:	78fb      	ldrb	r3, [r7, #3]
 801128e:	461a      	mov	r2, r3
 8011290:	210b      	movs	r1, #11
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f000 f804 	bl	80112a0 <icmp_send_response>
}
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08c      	sub	sp, #48	; 0x30
 80112a4:	af04      	add	r7, sp, #16
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	460b      	mov	r3, r1
 80112aa:	70fb      	strb	r3, [r7, #3]
 80112ac:	4613      	mov	r3, r2
 80112ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80112b0:	2200      	movs	r2, #0
 80112b2:	2124      	movs	r1, #36	; 0x24
 80112b4:	2001      	movs	r0, #1
 80112b6:	f7f6 fc3f 	bl	8007b38 <pbuf_alloc>
 80112ba:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d04c      	beq.n	801135c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	895b      	ldrh	r3, [r3, #10]
 80112c6:	2b23      	cmp	r3, #35	; 0x23
 80112c8:	d806      	bhi.n	80112d8 <icmp_send_response+0x38>
 80112ca:	4b26      	ldr	r3, [pc, #152]	; (8011364 <icmp_send_response+0xc4>)
 80112cc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80112d0:	4925      	ldr	r1, [pc, #148]	; (8011368 <icmp_send_response+0xc8>)
 80112d2:	4826      	ldr	r0, [pc, #152]	; (801136c <icmp_send_response+0xcc>)
 80112d4:	f003 fd42 	bl	8014d5c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	78fa      	ldrb	r2, [r7, #3]
 80112e8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	78ba      	ldrb	r2, [r7, #2]
 80112ee:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	2200      	movs	r2, #0
 80112f4:	711a      	strb	r2, [r3, #4]
 80112f6:	2200      	movs	r2, #0
 80112f8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	2200      	movs	r2, #0
 80112fe:	719a      	strb	r2, [r3, #6]
 8011300:	2200      	movs	r2, #0
 8011302:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	f103 0008 	add.w	r0, r3, #8
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	221c      	movs	r2, #28
 8011312:	4619      	mov	r1, r3
 8011314:	f003 fd0f 	bl	8014d36 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801131e:	f107 030c 	add.w	r3, r7, #12
 8011322:	4618      	mov	r0, r3
 8011324:	f000 f824 	bl	8011370 <ip4_route>
 8011328:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d011      	beq.n	8011354 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2200      	movs	r2, #0
 8011334:	709a      	strb	r2, [r3, #2]
 8011336:	2200      	movs	r2, #0
 8011338:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801133a:	f107 020c 	add.w	r2, r7, #12
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	9302      	str	r3, [sp, #8]
 8011342:	2301      	movs	r3, #1
 8011344:	9301      	str	r3, [sp, #4]
 8011346:	2300      	movs	r3, #0
 8011348:	9300      	str	r3, [sp, #0]
 801134a:	23ff      	movs	r3, #255	; 0xff
 801134c:	2100      	movs	r1, #0
 801134e:	69f8      	ldr	r0, [r7, #28]
 8011350:	f000 f9d4 	bl	80116fc <ip4_output_if>
  }
  pbuf_free(q);
 8011354:	69f8      	ldr	r0, [r7, #28]
 8011356:	f7f6 ff61 	bl	800821c <pbuf_free>
 801135a:	e000      	b.n	801135e <icmp_send_response+0xbe>
    return;
 801135c:	bf00      	nop
}
 801135e:	3720      	adds	r7, #32
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	08018164 	.word	0x08018164
 8011368:	08018230 	.word	0x08018230
 801136c:	080181d4 	.word	0x080181d4

08011370 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011378:	4b30      	ldr	r3, [pc, #192]	; (801143c <ip4_route+0xcc>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	60fb      	str	r3, [r7, #12]
 801137e:	e036      	b.n	80113ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011386:	f003 0301 	and.w	r3, r3, #1
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b00      	cmp	r3, #0
 801138e:	d02b      	beq.n	80113e8 <ip4_route+0x78>
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011396:	089b      	lsrs	r3, r3, #2
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	b2db      	uxtb	r3, r3
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d022      	beq.n	80113e8 <ip4_route+0x78>
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	3304      	adds	r3, #4
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d01d      	beq.n	80113e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	3304      	adds	r3, #4
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	405a      	eors	r2, r3
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	3308      	adds	r3, #8
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	4013      	ands	r3, r2
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d101      	bne.n	80113c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	e033      	b.n	8011430 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80113ce:	f003 0302 	and.w	r3, r3, #2
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d108      	bne.n	80113e8 <ip4_route+0x78>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	330c      	adds	r3, #12
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d101      	bne.n	80113e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	e023      	b.n	8011430 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	60fb      	str	r3, [r7, #12]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1c5      	bne.n	8011380 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80113f4:	4b12      	ldr	r3, [pc, #72]	; (8011440 <ip4_route+0xd0>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d015      	beq.n	8011428 <ip4_route+0xb8>
 80113fc:	4b10      	ldr	r3, [pc, #64]	; (8011440 <ip4_route+0xd0>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011404:	f003 0301 	and.w	r3, r3, #1
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00d      	beq.n	8011428 <ip4_route+0xb8>
 801140c:	4b0c      	ldr	r3, [pc, #48]	; (8011440 <ip4_route+0xd0>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011414:	f003 0304 	and.w	r3, r3, #4
 8011418:	2b00      	cmp	r3, #0
 801141a:	d005      	beq.n	8011428 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801141c:	4b08      	ldr	r3, [pc, #32]	; (8011440 <ip4_route+0xd0>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3304      	adds	r3, #4
 8011422:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011428:	2300      	movs	r3, #0
 801142a:	e001      	b.n	8011430 <ip4_route+0xc0>
  }

  return netif_default;
 801142c:	4b04      	ldr	r3, [pc, #16]	; (8011440 <ip4_route+0xd0>)
 801142e:	681b      	ldr	r3, [r3, #0]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3714      	adds	r7, #20
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	200071f4 	.word	0x200071f4
 8011440:	200071f8 	.word	0x200071f8

08011444 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801144e:	2301      	movs	r3, #1
 8011450:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	091b      	lsrs	r3, r3, #4
 801145e:	b2db      	uxtb	r3, r3
 8011460:	2b04      	cmp	r3, #4
 8011462:	d004      	beq.n	801146e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7f6 fed9 	bl	800821c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801146a:	2300      	movs	r3, #0
 801146c:	e13e      	b.n	80116ec <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	b29b      	uxth	r3, r3
 8011474:	f003 030f 	and.w	r3, r3, #15
 8011478:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801147a:	89fb      	ldrh	r3, [r7, #14]
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	885b      	ldrh	r3, [r3, #2]
 8011484:	b29b      	uxth	r3, r3
 8011486:	4618      	mov	r0, r3
 8011488:	f7f5 fd32 	bl	8006ef0 <lwip_htons>
 801148c:	4603      	mov	r3, r0
 801148e:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	891b      	ldrh	r3, [r3, #8]
 8011494:	89ba      	ldrh	r2, [r7, #12]
 8011496:	429a      	cmp	r2, r3
 8011498:	d204      	bcs.n	80114a4 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 801149a:	89bb      	ldrh	r3, [r7, #12]
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7f6 fd48 	bl	8007f34 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	895b      	ldrh	r3, [r3, #10]
 80114a8:	89fa      	ldrh	r2, [r7, #14]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d807      	bhi.n	80114be <ip4_input+0x7a>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	891b      	ldrh	r3, [r3, #8]
 80114b2:	89ba      	ldrh	r2, [r7, #12]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d802      	bhi.n	80114be <ip4_input+0x7a>
 80114b8:	89fb      	ldrh	r3, [r7, #14]
 80114ba:	2b13      	cmp	r3, #19
 80114bc:	d804      	bhi.n	80114c8 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f7f6 feac 	bl	800821c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80114c4:	2300      	movs	r3, #0
 80114c6:	e111      	b.n	80116ec <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	4a89      	ldr	r2, [pc, #548]	; (80116f4 <ip4_input+0x2b0>)
 80114ce:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	4a87      	ldr	r2, [pc, #540]	; (80116f4 <ip4_input+0x2b0>)
 80114d6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114d8:	4b86      	ldr	r3, [pc, #536]	; (80116f4 <ip4_input+0x2b0>)
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114e0:	2be0      	cmp	r3, #224	; 0xe0
 80114e2:	d112      	bne.n	801150a <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114ea:	f003 0301 	and.w	r3, r3, #1
 80114ee:	b2db      	uxtb	r3, r3
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d007      	beq.n	8011504 <ip4_input+0xc0>
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	3304      	adds	r3, #4
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <ip4_input+0xc0>
      netif = inp;
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	61bb      	str	r3, [r7, #24]
 8011502:	e041      	b.n	8011588 <ip4_input+0x144>
    } else {
      netif = NULL;
 8011504:	2300      	movs	r3, #0
 8011506:	61bb      	str	r3, [r7, #24]
 8011508:	e03e      	b.n	8011588 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801150a:	2301      	movs	r3, #1
 801150c:	613b      	str	r3, [r7, #16]
    netif = inp;
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011518:	f003 0301 	and.w	r3, r3, #1
 801151c:	b2db      	uxtb	r3, r3
 801151e:	2b00      	cmp	r3, #0
 8011520:	d014      	beq.n	801154c <ip4_input+0x108>
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	3304      	adds	r3, #4
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00f      	beq.n	801154c <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801152c:	4b71      	ldr	r3, [pc, #452]	; (80116f4 <ip4_input+0x2b0>)
 801152e:	695a      	ldr	r2, [r3, #20]
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	3304      	adds	r3, #4
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	429a      	cmp	r2, r3
 8011538:	d026      	beq.n	8011588 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801153a:	4b6e      	ldr	r3, [pc, #440]	; (80116f4 <ip4_input+0x2b0>)
 801153c:	695b      	ldr	r3, [r3, #20]
 801153e:	69b9      	ldr	r1, [r7, #24]
 8011540:	4618      	mov	r0, r3
 8011542:	f000 f9ad 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 8011546:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011548:	2b00      	cmp	r3, #0
 801154a:	d11d      	bne.n	8011588 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00d      	beq.n	801156e <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011552:	4b68      	ldr	r3, [pc, #416]	; (80116f4 <ip4_input+0x2b0>)
 8011554:	695b      	ldr	r3, [r3, #20]
 8011556:	b2db      	uxtb	r3, r3
 8011558:	2b7f      	cmp	r3, #127	; 0x7f
 801155a:	d102      	bne.n	8011562 <ip4_input+0x11e>
          netif = NULL;
 801155c:	2300      	movs	r3, #0
 801155e:	61bb      	str	r3, [r7, #24]
          break;
 8011560:	e012      	b.n	8011588 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011562:	2300      	movs	r3, #0
 8011564:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8011566:	4b64      	ldr	r3, [pc, #400]	; (80116f8 <ip4_input+0x2b4>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	61bb      	str	r3, [r7, #24]
 801156c:	e002      	b.n	8011574 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8011574:	69ba      	ldr	r2, [r7, #24]
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	429a      	cmp	r2, r3
 801157a:	d102      	bne.n	8011582 <ip4_input+0x13e>
        netif = netif->next;
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d1c4      	bne.n	8011512 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011588:	69bb      	ldr	r3, [r7, #24]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d111      	bne.n	80115b2 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	7a5b      	ldrb	r3, [r3, #9]
 8011592:	2b11      	cmp	r3, #17
 8011594:	d10d      	bne.n	80115b2 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8011596:	89fb      	ldrh	r3, [r7, #14]
 8011598:	69fa      	ldr	r2, [r7, #28]
 801159a:	4413      	add	r3, r2
 801159c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	885b      	ldrh	r3, [r3, #2]
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80115a8:	d103      	bne.n	80115b2 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d017      	beq.n	80115e8 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80115b8:	4b4e      	ldr	r3, [pc, #312]	; (80116f4 <ip4_input+0x2b0>)
 80115ba:	691b      	ldr	r3, [r3, #16]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d013      	beq.n	80115e8 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80115c0:	4b4c      	ldr	r3, [pc, #304]	; (80116f4 <ip4_input+0x2b0>)
 80115c2:	691b      	ldr	r3, [r3, #16]
 80115c4:	6839      	ldr	r1, [r7, #0]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f000 f96a 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d105      	bne.n	80115de <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80115d2:	4b48      	ldr	r3, [pc, #288]	; (80116f4 <ip4_input+0x2b0>)
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80115da:	2be0      	cmp	r3, #224	; 0xe0
 80115dc:	d104      	bne.n	80115e8 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7f6 fe1c 	bl	800821c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80115e4:	2300      	movs	r3, #0
 80115e6:	e081      	b.n	80116ec <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80115e8:	69bb      	ldr	r3, [r7, #24]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d104      	bne.n	80115f8 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f7f6 fe14 	bl	800821c <pbuf_free>
    return ERR_OK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	e079      	b.n	80116ec <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	88db      	ldrh	r3, [r3, #6]
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	461a      	mov	r2, r3
 8011600:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011604:	4013      	ands	r3, r2
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00b      	beq.n	8011622 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 fc8e 	bl	8011f2c <ip4_reass>
 8011610:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d101      	bne.n	801161c <ip4_input+0x1d8>
      return ERR_OK;
 8011618:	2300      	movs	r3, #0
 801161a:	e067      	b.n	80116ec <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011622:	4a34      	ldr	r2, [pc, #208]	; (80116f4 <ip4_input+0x2b0>)
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011628:	4a32      	ldr	r2, [pc, #200]	; (80116f4 <ip4_input+0x2b0>)
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801162e:	4a31      	ldr	r2, [pc, #196]	; (80116f4 <ip4_input+0x2b0>)
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	b29b      	uxth	r3, r3
 801163a:	f003 030f 	and.w	r3, r3, #15
 801163e:	b29b      	uxth	r3, r3
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	b29a      	uxth	r2, r3
 8011644:	4b2b      	ldr	r3, [pc, #172]	; (80116f4 <ip4_input+0x2b0>)
 8011646:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011648:	89fb      	ldrh	r3, [r7, #14]
 801164a:	425b      	negs	r3, r3
 801164c:	b29b      	uxth	r3, r3
 801164e:	b21b      	sxth	r3, r3
 8011650:	4619      	mov	r1, r3
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7f6 fdbe 	bl	80081d4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	7a5b      	ldrb	r3, [r3, #9]
 801165c:	2b06      	cmp	r3, #6
 801165e:	d009      	beq.n	8011674 <ip4_input+0x230>
 8011660:	2b11      	cmp	r3, #17
 8011662:	d002      	beq.n	801166a <ip4_input+0x226>
 8011664:	2b01      	cmp	r3, #1
 8011666:	d00a      	beq.n	801167e <ip4_input+0x23a>
 8011668:	e00e      	b.n	8011688 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7fc fc11 	bl	800de94 <udp_input>
      break;
 8011672:	e028      	b.n	80116c6 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7f8 fc7e 	bl	8009f78 <tcp_input>
      break;
 801167c:	e023      	b.n	80116c6 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801167e:	6839      	ldr	r1, [r7, #0]
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7ff fce7 	bl	8011054 <icmp_input>
      break;
 8011686:	e01e      	b.n	80116c6 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011688:	4b1a      	ldr	r3, [pc, #104]	; (80116f4 <ip4_input+0x2b0>)
 801168a:	695b      	ldr	r3, [r3, #20]
 801168c:	69b9      	ldr	r1, [r7, #24]
 801168e:	4618      	mov	r0, r3
 8011690:	f000 f906 	bl	80118a0 <ip4_addr_isbroadcast_u32>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d112      	bne.n	80116c0 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801169a:	4b16      	ldr	r3, [pc, #88]	; (80116f4 <ip4_input+0x2b0>)
 801169c:	695b      	ldr	r3, [r3, #20]
 801169e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80116a2:	2be0      	cmp	r3, #224	; 0xe0
 80116a4:	d00c      	beq.n	80116c0 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80116a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80116aa:	4619      	mov	r1, r3
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f7f6 fda3 	bl	80081f8 <pbuf_header_force>
        p->payload = iphdr;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	69fa      	ldr	r2, [r7, #28]
 80116b6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80116b8:	2102      	movs	r1, #2
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f7ff fdd0 	bl	8011260 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7f6 fdab 	bl	800821c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80116c6:	4b0b      	ldr	r3, [pc, #44]	; (80116f4 <ip4_input+0x2b0>)
 80116c8:	2200      	movs	r2, #0
 80116ca:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80116cc:	4b09      	ldr	r3, [pc, #36]	; (80116f4 <ip4_input+0x2b0>)
 80116ce:	2200      	movs	r2, #0
 80116d0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80116d2:	4b08      	ldr	r3, [pc, #32]	; (80116f4 <ip4_input+0x2b0>)
 80116d4:	2200      	movs	r2, #0
 80116d6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80116d8:	4b06      	ldr	r3, [pc, #24]	; (80116f4 <ip4_input+0x2b0>)
 80116da:	2200      	movs	r2, #0
 80116dc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80116de:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <ip4_input+0x2b0>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80116e4:	4b03      	ldr	r3, [pc, #12]	; (80116f4 <ip4_input+0x2b0>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3720      	adds	r7, #32
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	2000091c 	.word	0x2000091c
 80116f8:	200071f4 	.word	0x200071f4

080116fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b08a      	sub	sp, #40	; 0x28
 8011700:	af04      	add	r7, sp, #16
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
 8011708:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d009      	beq.n	8011728 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <ip4_output_if+0x26>
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d102      	bne.n	8011728 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011724:	3304      	adds	r3, #4
 8011726:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011728:	78fa      	ldrb	r2, [r7, #3]
 801172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172c:	9302      	str	r3, [sp, #8]
 801172e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011732:	9301      	str	r3, [sp, #4]
 8011734:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	4613      	mov	r3, r2
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	6979      	ldr	r1, [r7, #20]
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f000 f805 	bl	8011750 <ip4_output_if_src>
 8011746:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b088      	sub	sp, #32
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
 801175c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	89db      	ldrh	r3, [r3, #14]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d006      	beq.n	8011774 <ip4_output_if_src+0x24>
 8011766:	4b48      	ldr	r3, [pc, #288]	; (8011888 <ip4_output_if_src+0x138>)
 8011768:	f240 3233 	movw	r2, #819	; 0x333
 801176c:	4947      	ldr	r1, [pc, #284]	; (801188c <ip4_output_if_src+0x13c>)
 801176e:	4848      	ldr	r0, [pc, #288]	; (8011890 <ip4_output_if_src+0x140>)
 8011770:	f003 faf4 	bl	8014d5c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d060      	beq.n	801183c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801177a:	2314      	movs	r3, #20
 801177c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801177e:	2114      	movs	r1, #20
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f7f6 fd27 	bl	80081d4 <pbuf_header>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d002      	beq.n	8011792 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801178c:	f06f 0301 	mvn.w	r3, #1
 8011790:	e075      	b.n	801187e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	895b      	ldrh	r3, [r3, #10]
 801179c:	2b13      	cmp	r3, #19
 801179e:	d806      	bhi.n	80117ae <ip4_output_if_src+0x5e>
 80117a0:	4b39      	ldr	r3, [pc, #228]	; (8011888 <ip4_output_if_src+0x138>)
 80117a2:	f240 3261 	movw	r2, #865	; 0x361
 80117a6:	493b      	ldr	r1, [pc, #236]	; (8011894 <ip4_output_if_src+0x144>)
 80117a8:	4839      	ldr	r0, [pc, #228]	; (8011890 <ip4_output_if_src+0x140>)
 80117aa:	f003 fad7 	bl	8014d5c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	78fa      	ldrb	r2, [r7, #3]
 80117b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80117ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681a      	ldr	r2, [r3, #0]
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80117c4:	8b7b      	ldrh	r3, [r7, #26]
 80117c6:	089b      	lsrs	r3, r3, #2
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80117dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	891b      	ldrh	r3, [r3, #8]
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7f5 fb84 	bl	8006ef0 <lwip_htons>
 80117e8:	4603      	mov	r3, r0
 80117ea:	461a      	mov	r2, r3
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	2200      	movs	r2, #0
 80117f4:	719a      	strb	r2, [r3, #6]
 80117f6:	2200      	movs	r2, #0
 80117f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80117fa:	4b27      	ldr	r3, [pc, #156]	; (8011898 <ip4_output_if_src+0x148>)
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	4618      	mov	r0, r3
 8011800:	f7f5 fb76 	bl	8006ef0 <lwip_htons>
 8011804:	4603      	mov	r3, r0
 8011806:	461a      	mov	r2, r3
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801180c:	4b22      	ldr	r3, [pc, #136]	; (8011898 <ip4_output_if_src+0x148>)
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	3301      	adds	r3, #1
 8011812:	b29a      	uxth	r2, r3
 8011814:	4b20      	ldr	r3, [pc, #128]	; (8011898 <ip4_output_if_src+0x148>)
 8011816:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d104      	bne.n	8011828 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801181e:	4b1f      	ldr	r3, [pc, #124]	; (801189c <ip4_output_if_src+0x14c>)
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	60da      	str	r2, [r3, #12]
 8011826:	e003      	b.n	8011830 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	2200      	movs	r2, #0
 8011834:	729a      	strb	r2, [r3, #10]
 8011836:	2200      	movs	r2, #0
 8011838:	72da      	strb	r2, [r3, #11]
 801183a:	e008      	b.n	801184e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	691b      	ldr	r3, [r3, #16]
 8011846:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011848:	f107 0314 	add.w	r3, r7, #20
 801184c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011852:	2b00      	cmp	r3, #0
 8011854:	d00c      	beq.n	8011870 <ip4_output_if_src+0x120>
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	891a      	ldrh	r2, [r3, #8]
 801185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801185e:	429a      	cmp	r2, r3
 8011860:	d906      	bls.n	8011870 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	f000 fd0a 	bl	8012280 <ip4_frag>
 801186c:	4603      	mov	r3, r0
 801186e:	e006      	b.n	801187e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011872:	695b      	ldr	r3, [r3, #20]
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	68f9      	ldr	r1, [r7, #12]
 8011878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801187a:	4798      	blx	r3
 801187c:	4603      	mov	r3, r0
}
 801187e:	4618      	mov	r0, r3
 8011880:	3720      	adds	r7, #32
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	0801825c 	.word	0x0801825c
 801188c:	08018290 	.word	0x08018290
 8011890:	0801829c 	.word	0x0801829c
 8011894:	080182c4 	.word	0x080182c4
 8011898:	2000085e 	.word	0x2000085e
 801189c:	08019814 	.word	0x08019814

080118a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b085      	sub	sp, #20
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118b4:	d002      	beq.n	80118bc <ip4_addr_isbroadcast_u32+0x1c>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d101      	bne.n	80118c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80118bc:	2301      	movs	r3, #1
 80118be:	e02a      	b.n	8011916 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118c6:	f003 0302 	and.w	r3, r3, #2
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	e021      	b.n	8011916 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	3304      	adds	r3, #4
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d101      	bne.n	80118e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80118de:	2300      	movs	r3, #0
 80118e0:	e019      	b.n	8011916 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	3304      	adds	r3, #4
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	405a      	eors	r2, r3
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	3308      	adds	r3, #8
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4013      	ands	r3, r2
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d10d      	bne.n	8011914 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	3308      	adds	r3, #8
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	43da      	mvns	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	3308      	adds	r3, #8
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801190c:	429a      	cmp	r2, r3
 801190e:	d101      	bne.n	8011914 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011910:	2301      	movs	r3, #1
 8011912:	e000      	b.n	8011916 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011914:	2300      	movs	r3, #0
  }
}
 8011916:	4618      	mov	r0, r3
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
	...

08011924 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801192a:	2300      	movs	r3, #0
 801192c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801192e:	4b12      	ldr	r3, [pc, #72]	; (8011978 <ip_reass_tmr+0x54>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011934:	e018      	b.n	8011968 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	7fdb      	ldrb	r3, [r3, #31]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00b      	beq.n	8011956 <ip_reass_tmr+0x32>
      r->timer--;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	7fdb      	ldrb	r3, [r3, #31]
 8011942:	3b01      	subs	r3, #1
 8011944:	b2da      	uxtb	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	60fb      	str	r3, [r7, #12]
 8011954:	e008      	b.n	8011968 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011960:	68b9      	ldr	r1, [r7, #8]
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f000 f80a 	bl	801197c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1e3      	bne.n	8011936 <ip_reass_tmr+0x12>
     }
   }
}
 801196e:	bf00      	nop
 8011970:	3710      	adds	r7, #16
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	20000860 	.word	0x20000860

0801197c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b088      	sub	sp, #32
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011986:	2300      	movs	r3, #0
 8011988:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801198a:	683a      	ldr	r2, [r7, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	429a      	cmp	r2, r3
 8011990:	d105      	bne.n	801199e <ip_reass_free_complete_datagram+0x22>
 8011992:	4b45      	ldr	r3, [pc, #276]	; (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011994:	22ab      	movs	r2, #171	; 0xab
 8011996:	4945      	ldr	r1, [pc, #276]	; (8011aac <ip_reass_free_complete_datagram+0x130>)
 8011998:	4845      	ldr	r0, [pc, #276]	; (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 801199a:	f003 f9df 	bl	8014d5c <iprintf>
  if (prev != NULL) {
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00a      	beq.n	80119ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d005      	beq.n	80119ba <ip_reass_free_complete_datagram+0x3e>
 80119ae:	4b3e      	ldr	r3, [pc, #248]	; (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 80119b0:	22ad      	movs	r2, #173	; 0xad
 80119b2:	4940      	ldr	r1, [pc, #256]	; (8011ab4 <ip_reass_free_complete_datagram+0x138>)
 80119b4:	483e      	ldr	r0, [pc, #248]	; (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 80119b6:	f003 f9d1 	bl	8014d5c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	889b      	ldrh	r3, [r3, #4]
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d12a      	bne.n	8011a22 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	6858      	ldr	r0, [r3, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3308      	adds	r3, #8
 80119e2:	2214      	movs	r2, #20
 80119e4:	4619      	mov	r1, r3
 80119e6:	f003 f9a6 	bl	8014d36 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80119ea:	2101      	movs	r1, #1
 80119ec:	69b8      	ldr	r0, [r7, #24]
 80119ee:	f7ff fc47 	bl	8011280 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80119f2:	69b8      	ldr	r0, [r7, #24]
 80119f4:	f7f6 fca6 	bl	8008344 <pbuf_clen>
 80119f8:	4603      	mov	r3, r0
 80119fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80119fc:	8bfa      	ldrh	r2, [r7, #30]
 80119fe:	8a7b      	ldrh	r3, [r7, #18]
 8011a00:	4413      	add	r3, r2
 8011a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a06:	db05      	blt.n	8011a14 <ip_reass_free_complete_datagram+0x98>
 8011a08:	4b27      	ldr	r3, [pc, #156]	; (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011a0a:	22bc      	movs	r2, #188	; 0xbc
 8011a0c:	492a      	ldr	r1, [pc, #168]	; (8011ab8 <ip_reass_free_complete_datagram+0x13c>)
 8011a0e:	4828      	ldr	r0, [pc, #160]	; (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 8011a10:	f003 f9a4 	bl	8014d5c <iprintf>
    pbufs_freed += clen;
 8011a14:	8bfa      	ldrh	r2, [r7, #30]
 8011a16:	8a7b      	ldrh	r3, [r7, #18]
 8011a18:	4413      	add	r3, r2
 8011a1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011a1c:	69b8      	ldr	r0, [r7, #24]
 8011a1e:	f7f6 fbfd 	bl	800821c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011a28:	e01f      	b.n	8011a6a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f7f6 fc82 	bl	8008344 <pbuf_clen>
 8011a40:	4603      	mov	r3, r0
 8011a42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011a44:	8bfa      	ldrh	r2, [r7, #30]
 8011a46:	8a7b      	ldrh	r3, [r7, #18]
 8011a48:	4413      	add	r3, r2
 8011a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a4e:	db05      	blt.n	8011a5c <ip_reass_free_complete_datagram+0xe0>
 8011a50:	4b15      	ldr	r3, [pc, #84]	; (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011a52:	22cc      	movs	r2, #204	; 0xcc
 8011a54:	4918      	ldr	r1, [pc, #96]	; (8011ab8 <ip_reass_free_complete_datagram+0x13c>)
 8011a56:	4816      	ldr	r0, [pc, #88]	; (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 8011a58:	f003 f980 	bl	8014d5c <iprintf>
    pbufs_freed += clen;
 8011a5c:	8bfa      	ldrh	r2, [r7, #30]
 8011a5e:	8a7b      	ldrh	r3, [r7, #18]
 8011a60:	4413      	add	r3, r2
 8011a62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f7f6 fbd9 	bl	800821c <pbuf_free>
  while (p != NULL) {
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1dc      	bne.n	8011a2a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 f8c2 	bl	8011bfc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011a78:	4b10      	ldr	r3, [pc, #64]	; (8011abc <ip_reass_free_complete_datagram+0x140>)
 8011a7a:	881b      	ldrh	r3, [r3, #0]
 8011a7c:	8bfa      	ldrh	r2, [r7, #30]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d905      	bls.n	8011a8e <ip_reass_free_complete_datagram+0x112>
 8011a82:	4b09      	ldr	r3, [pc, #36]	; (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011a84:	22d2      	movs	r2, #210	; 0xd2
 8011a86:	490e      	ldr	r1, [pc, #56]	; (8011ac0 <ip_reass_free_complete_datagram+0x144>)
 8011a88:	4809      	ldr	r0, [pc, #36]	; (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 8011a8a:	f003 f967 	bl	8014d5c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011a8e:	4b0b      	ldr	r3, [pc, #44]	; (8011abc <ip_reass_free_complete_datagram+0x140>)
 8011a90:	881a      	ldrh	r2, [r3, #0]
 8011a92:	8bfb      	ldrh	r3, [r7, #30]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	4b08      	ldr	r3, [pc, #32]	; (8011abc <ip_reass_free_complete_datagram+0x140>)
 8011a9a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011a9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3720      	adds	r7, #32
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	080182f4 	.word	0x080182f4
 8011aac:	08018330 	.word	0x08018330
 8011ab0:	0801833c 	.word	0x0801833c
 8011ab4:	08018364 	.word	0x08018364
 8011ab8:	08018378 	.word	0x08018378
 8011abc:	20000864 	.word	0x20000864
 8011ac0:	08018398 	.word	0x08018398

08011ac4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08a      	sub	sp, #40	; 0x28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011ada:	2300      	movs	r3, #0
 8011adc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011ae2:	4b28      	ldr	r3, [pc, #160]	; (8011b84 <ip_reass_remove_oldest_datagram+0xc0>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ae8:	e030      	b.n	8011b4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	695a      	ldr	r2, [r3, #20]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d10c      	bne.n	8011b10 <ip_reass_remove_oldest_datagram+0x4c>
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	699a      	ldr	r2, [r3, #24]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	691b      	ldr	r3, [r3, #16]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d106      	bne.n	8011b10 <ip_reass_remove_oldest_datagram+0x4c>
 8011b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b04:	899a      	ldrh	r2, [r3, #12]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	889b      	ldrh	r3, [r3, #4]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d014      	beq.n	8011b3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	3301      	adds	r3, #1
 8011b14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d104      	bne.n	8011b26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	61bb      	str	r3, [r7, #24]
 8011b24:	e009      	b.n	8011b3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	7fda      	ldrb	r2, [r3, #31]
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	7fdb      	ldrb	r3, [r3, #31]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d803      	bhi.n	8011b3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1cb      	bne.n	8011aea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011b52:	6a3b      	ldr	r3, [r7, #32]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d008      	beq.n	8011b6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011b58:	69b9      	ldr	r1, [r7, #24]
 8011b5a:	6a38      	ldr	r0, [r7, #32]
 8011b5c:	f7ff ff0e 	bl	801197c <ip_reass_free_complete_datagram>
 8011b60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011b62:	697a      	ldr	r2, [r7, #20]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	4413      	add	r3, r2
 8011b68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011b6a:	697a      	ldr	r2, [r7, #20]
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	da02      	bge.n	8011b78 <ip_reass_remove_oldest_datagram+0xb4>
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	dcac      	bgt.n	8011ad2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011b78:	697b      	ldr	r3, [r7, #20]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3728      	adds	r7, #40	; 0x28
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20000860 	.word	0x20000860

08011b88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011b92:	2004      	movs	r0, #4
 8011b94:	f7f5 fdc4 	bl	8007720 <memp_malloc>
 8011b98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d110      	bne.n	8011bc2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f7ff ff8e 	bl	8011ac4 <ip_reass_remove_oldest_datagram>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	4293      	cmp	r3, r2
 8011bae:	dc03      	bgt.n	8011bb8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011bb0:	2004      	movs	r0, #4
 8011bb2:	f7f5 fdb5 	bl	8007720 <memp_malloc>
 8011bb6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d101      	bne.n	8011bc2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e016      	b.n	8011bf0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011bc2:	2220      	movs	r2, #32
 8011bc4:	2100      	movs	r1, #0
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f003 f8c0 	bl	8014d4c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2203      	movs	r2, #3
 8011bd0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011bd2:	4b09      	ldr	r3, [pc, #36]	; (8011bf8 <ip_reass_enqueue_new_datagram+0x70>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011bda:	4a07      	ldr	r2, [pc, #28]	; (8011bf8 <ip_reass_enqueue_new_datagram+0x70>)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	3308      	adds	r3, #8
 8011be4:	2214      	movs	r2, #20
 8011be6:	6879      	ldr	r1, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f003 f8a4 	bl	8014d36 <memcpy>
  return ipr;
 8011bee:	68fb      	ldr	r3, [r7, #12]
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	20000860 	.word	0x20000860

08011bfc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011c06:	4b10      	ldr	r3, [pc, #64]	; (8011c48 <ip_reass_dequeue_datagram+0x4c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d104      	bne.n	8011c1a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4a0c      	ldr	r2, [pc, #48]	; (8011c48 <ip_reass_dequeue_datagram+0x4c>)
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	e00d      	b.n	8011c36 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d106      	bne.n	8011c2e <ip_reass_dequeue_datagram+0x32>
 8011c20:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <ip_reass_dequeue_datagram+0x50>)
 8011c22:	f240 1245 	movw	r2, #325	; 0x145
 8011c26:	490a      	ldr	r1, [pc, #40]	; (8011c50 <ip_reass_dequeue_datagram+0x54>)
 8011c28:	480a      	ldr	r0, [pc, #40]	; (8011c54 <ip_reass_dequeue_datagram+0x58>)
 8011c2a:	f003 f897 	bl	8014d5c <iprintf>
    prev->next = ipr->next;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	2004      	movs	r0, #4
 8011c3a:	f7f5 fdbd 	bl	80077b8 <memp_free>
}
 8011c3e:	bf00      	nop
 8011c40:	3708      	adds	r7, #8
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20000860 	.word	0x20000860
 8011c4c:	080182f4 	.word	0x080182f4
 8011c50:	080183b4 	.word	0x080183b4
 8011c54:	0801833c 	.word	0x0801833c

08011c58 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08c      	sub	sp, #48	; 0x30
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011c64:	2300      	movs	r3, #0
 8011c66:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	885b      	ldrh	r3, [r3, #2]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7f5 f939 	bl	8006ef0 <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	461a      	mov	r2, r3
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	f003 030f 	and.w	r3, r3, #15
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	88db      	ldrh	r3, [r3, #6]
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7f5 f927 	bl	8006ef0 <lwip_htons>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	00db      	lsls	r3, r3, #3
 8011cac:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	701a      	strb	r2, [r3, #0]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	705a      	strb	r2, [r3, #1]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	709a      	strb	r2, [r3, #2]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc8:	8b3a      	ldrh	r2, [r7, #24]
 8011cca:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011ccc:	8b3a      	ldrh	r2, [r7, #24]
 8011cce:	8b7b      	ldrh	r3, [r7, #26]
 8011cd0:	4413      	add	r3, r2
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8011cde:	e061      	b.n	8011da4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8011ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce8:	889b      	ldrh	r3, [r3, #4]
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	889b      	ldrh	r3, [r3, #4]
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d232      	bcs.n	8011d5c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cfa:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d01f      	beq.n	8011d42 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d04:	889b      	ldrh	r3, [r3, #4]
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0a:	88db      	ldrh	r3, [r3, #6]
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	f0c0 80e3 	bcc.w	8011eda <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8011d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d16:	88db      	ldrh	r3, [r3, #6]
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	889b      	ldrh	r3, [r3, #4]
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	429a      	cmp	r2, r3
 8011d22:	f200 80da 	bhi.w	8011eda <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d2e:	88db      	ldrh	r3, [r3, #6]
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d34:	889b      	ldrh	r3, [r3, #4]
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d037      	beq.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011d40:	e034      	b.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8011d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d44:	88db      	ldrh	r3, [r3, #6]
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	889b      	ldrh	r3, [r3, #4]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	f200 80c5 	bhi.w	8011ede <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	68ba      	ldr	r2, [r7, #8]
 8011d58:	605a      	str	r2, [r3, #4]
      break;
 8011d5a:	e027      	b.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5e:	889b      	ldrh	r3, [r3, #4]
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	889b      	ldrh	r3, [r3, #4]
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	f000 80ba 	beq.w	8011ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d70:	889b      	ldrh	r3, [r3, #4]
 8011d72:	b29a      	uxth	r2, r3
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	88db      	ldrh	r3, [r3, #6]
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	f0c0 80b3 	bcc.w	8011ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d009      	beq.n	8011d9a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8011d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d88:	88db      	ldrh	r3, [r3, #6]
 8011d8a:	b29a      	uxth	r2, r3
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	889b      	ldrh	r3, [r3, #4]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d001      	beq.n	8011d9a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011d96:	2300      	movs	r3, #0
 8011d98:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d19a      	bne.n	8011ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8011daa:	e000      	b.n	8011dae <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8011dac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d12d      	bne.n	8011e10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8011db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d01c      	beq.n	8011df4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbc:	88db      	ldrh	r3, [r3, #6]
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc2:	889b      	ldrh	r3, [r3, #4]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d906      	bls.n	8011dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8011dca:	4b51      	ldr	r3, [pc, #324]	; (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011dcc:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011dd0:	4950      	ldr	r1, [pc, #320]	; (8011f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011dd2:	4851      	ldr	r0, [pc, #324]	; (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011dd4:	f002 ffc2 	bl	8014d5c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de0:	88db      	ldrh	r3, [r3, #6]
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	889b      	ldrh	r3, [r3, #4]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d010      	beq.n	8011e10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	623b      	str	r3, [r7, #32]
 8011df2:	e00d      	b.n	8011e10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d006      	beq.n	8011e0a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8011dfc:	4b44      	ldr	r3, [pc, #272]	; (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011dfe:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8011e02:	4946      	ldr	r1, [pc, #280]	; (8011f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011e04:	4844      	ldr	r0, [pc, #272]	; (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e06:	f002 ffa9 	bl	8014d5c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	68ba      	ldr	r2, [r7, #8]
 8011e0e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d105      	bne.n	8011e22 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	7f9b      	ldrb	r3, [r3, #30]
 8011e1a:	f003 0301 	and.w	r3, r3, #1
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d059      	beq.n	8011ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8011e22:	6a3b      	ldr	r3, [r7, #32]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d04f      	beq.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d006      	beq.n	8011e3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	889b      	ldrh	r3, [r3, #4]
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d002      	beq.n	8011e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	623b      	str	r3, [r7, #32]
 8011e42:	e041      	b.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e46:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011e4e:	e012      	b.n	8011e76 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e58:	88db      	ldrh	r3, [r3, #6]
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5e:	889b      	ldrh	r3, [r3, #4]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d002      	beq.n	8011e6c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	623b      	str	r3, [r7, #32]
            break;
 8011e6a:	e007      	b.n	8011e7c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d1e9      	bne.n	8011e50 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011e7c:	6a3b      	ldr	r3, [r7, #32]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d022      	beq.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d106      	bne.n	8011e98 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8011e8a:	4b21      	ldr	r3, [pc, #132]	; (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011e8c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8011e90:	4923      	ldr	r1, [pc, #140]	; (8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011e92:	4821      	ldr	r0, [pc, #132]	; (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e94:	f002 ff62 	bl	8014d5c <iprintf>
          LWIP_ASSERT("sanity check",
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d106      	bne.n	8011eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8011ea4:	4b1a      	ldr	r3, [pc, #104]	; (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011ea6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011eaa:	491d      	ldr	r1, [pc, #116]	; (8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011eac:	481a      	ldr	r0, [pc, #104]	; (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011eae:	f002 ff55 	bl	8014d5c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d006      	beq.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8011eba:	4b15      	ldr	r3, [pc, #84]	; (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011ebc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011ec0:	4918      	ldr	r1, [pc, #96]	; (8011f24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011ec2:	4815      	ldr	r0, [pc, #84]	; (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011ec4:	f002 ff4a 	bl	8014d5c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011ec8:	6a3b      	ldr	r3, [r7, #32]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bf14      	ite	ne
 8011ece:	2301      	movne	r3, #1
 8011ed0:	2300      	moveq	r3, #0
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	e018      	b.n	8011f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	e016      	b.n	8011f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8011eda:	bf00      	nop
 8011edc:	e004      	b.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8011ede:	bf00      	nop
 8011ee0:	e002      	b.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011ee2:	bf00      	nop
 8011ee4:	e000      	b.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011ee6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8011ee8:	68b8      	ldr	r0, [r7, #8]
 8011eea:	f7f6 fa2b 	bl	8008344 <pbuf_clen>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011ef4:	881b      	ldrh	r3, [r3, #0]
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	4b0b      	ldr	r3, [pc, #44]	; (8011f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011efc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8011efe:	68b8      	ldr	r0, [r7, #8]
 8011f00:	f7f6 f98c 	bl	800821c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f04:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3730      	adds	r7, #48	; 0x30
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	080182f4 	.word	0x080182f4
 8011f14:	080183d0 	.word	0x080183d0
 8011f18:	0801833c 	.word	0x0801833c
 8011f1c:	080183f0 	.word	0x080183f0
 8011f20:	08018428 	.word	0x08018428
 8011f24:	08018438 	.word	0x08018438
 8011f28:	20000864 	.word	0x20000864

08011f2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b08e      	sub	sp, #56	; 0x38
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8011f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	f003 030f 	and.w	r3, r3, #15
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	2b14      	cmp	r3, #20
 8011f46:	f040 8131 	bne.w	80121ac <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4c:	88db      	ldrh	r3, [r3, #6]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7f4 ffcd 	bl	8006ef0 <lwip_htons>
 8011f56:	4603      	mov	r3, r0
 8011f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	00db      	lsls	r3, r3, #3
 8011f60:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f64:	885b      	ldrh	r3, [r3, #2]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7f4 ffc1 	bl	8006ef0 <lwip_htons>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	461a      	mov	r2, r3
 8011f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	f003 030f 	and.w	r3, r3, #15
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	1ad3      	subs	r3, r2, r3
 8011f84:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7f6 f9dc 	bl	8008344 <pbuf_clen>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011f90:	4b8d      	ldr	r3, [pc, #564]	; (80121c8 <ip4_reass+0x29c>)
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	461a      	mov	r2, r3
 8011f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f98:	4413      	add	r3, r2
 8011f9a:	2b0a      	cmp	r3, #10
 8011f9c:	dd10      	ble.n	8011fc0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011f9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fa4:	f7ff fd8e 	bl	8011ac4 <ip_reass_remove_oldest_datagram>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	f000 8100 	beq.w	80121b0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011fb0:	4b85      	ldr	r3, [pc, #532]	; (80121c8 <ip4_reass+0x29c>)
 8011fb2:	881b      	ldrh	r3, [r3, #0]
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011fb8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011fba:	2b0a      	cmp	r3, #10
 8011fbc:	f300 80f8 	bgt.w	80121b0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011fc0:	4b82      	ldr	r3, [pc, #520]	; (80121cc <ip4_reass+0x2a0>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8011fc6:	e015      	b.n	8011ff4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	695a      	ldr	r2, [r3, #20]
 8011fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d10c      	bne.n	8011fee <ip4_reass+0xc2>
 8011fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd6:	699a      	ldr	r2, [r3, #24]
 8011fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fda:	691b      	ldr	r3, [r3, #16]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d106      	bne.n	8011fee <ip4_reass+0xc2>
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	899a      	ldrh	r2, [r3, #12]
 8011fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe6:	889b      	ldrh	r3, [r3, #4]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d006      	beq.n	8011ffc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d1e6      	bne.n	8011fc8 <ip4_reass+0x9c>
 8011ffa:	e000      	b.n	8011ffe <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011ffc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012000:	2b00      	cmp	r3, #0
 8012002:	d109      	bne.n	8012018 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012006:	4619      	mov	r1, r3
 8012008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801200a:	f7ff fdbd 	bl	8011b88 <ip_reass_enqueue_new_datagram>
 801200e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012012:	2b00      	cmp	r3, #0
 8012014:	d11c      	bne.n	8012050 <ip4_reass+0x124>
      goto nullreturn;
 8012016:	e0ce      	b.n	80121b6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201a:	88db      	ldrh	r3, [r3, #6]
 801201c:	b29b      	uxth	r3, r3
 801201e:	4618      	mov	r0, r3
 8012020:	f7f4 ff66 	bl	8006ef0 <lwip_htons>
 8012024:	4603      	mov	r3, r0
 8012026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801202a:	2b00      	cmp	r3, #0
 801202c:	d110      	bne.n	8012050 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012030:	89db      	ldrh	r3, [r3, #14]
 8012032:	4618      	mov	r0, r3
 8012034:	f7f4 ff5c 	bl	8006ef0 <lwip_htons>
 8012038:	4603      	mov	r3, r0
 801203a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801203e:	2b00      	cmp	r3, #0
 8012040:	d006      	beq.n	8012050 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012044:	3308      	adds	r3, #8
 8012046:	2214      	movs	r2, #20
 8012048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801204a:	4618      	mov	r0, r3
 801204c:	f002 fe73 	bl	8014d36 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012052:	88db      	ldrh	r3, [r3, #6]
 8012054:	b29b      	uxth	r3, r3
 8012056:	f003 0320 	and.w	r3, r3, #32
 801205a:	2b00      	cmp	r3, #0
 801205c:	bf0c      	ite	eq
 801205e:	2301      	moveq	r3, #1
 8012060:	2300      	movne	r3, #0
 8012062:	b2db      	uxtb	r3, r3
 8012064:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00e      	beq.n	801208a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801206c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801206e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012070:	4413      	add	r3, r2
 8012072:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012074:	8b7a      	ldrh	r2, [r7, #26]
 8012076:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012078:	429a      	cmp	r2, r3
 801207a:	f0c0 8099 	bcc.w	80121b0 <ip4_reass+0x284>
 801207e:	8b7b      	ldrh	r3, [r7, #26]
 8012080:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012084:	4293      	cmp	r3, r2
 8012086:	f200 8093 	bhi.w	80121b0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801208a:	69fa      	ldr	r2, [r7, #28]
 801208c:	6879      	ldr	r1, [r7, #4]
 801208e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012090:	f7ff fde2 	bl	8011c58 <ip_reass_chain_frag_into_datagram_and_validate>
 8012094:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801209c:	f000 808a 	beq.w	80121b4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80120a0:	4b49      	ldr	r3, [pc, #292]	; (80121c8 <ip4_reass+0x29c>)
 80120a2:	881a      	ldrh	r2, [r3, #0]
 80120a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120a6:	4413      	add	r3, r2
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	4b47      	ldr	r3, [pc, #284]	; (80121c8 <ip4_reass+0x29c>)
 80120ac:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d00d      	beq.n	80120d0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80120b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80120b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120b8:	4413      	add	r3, r2
 80120ba:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80120bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120be:	8a7a      	ldrh	r2, [r7, #18]
 80120c0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80120c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c4:	7f9b      	ldrb	r3, [r3, #30]
 80120c6:	f043 0301 	orr.w	r3, r3, #1
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ce:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d168      	bne.n	80121a8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	8b9b      	ldrh	r3, [r3, #28]
 80120da:	3314      	adds	r3, #20
 80120dc:	b29a      	uxth	r2, r3
 80120de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80120ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80120f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f6:	3308      	adds	r3, #8
 80120f8:	2214      	movs	r2, #20
 80120fa:	4619      	mov	r1, r3
 80120fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120fe:	f002 fe1a 	bl	8014d36 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	8b9b      	ldrh	r3, [r3, #28]
 8012106:	4618      	mov	r0, r3
 8012108:	f7f4 fef2 	bl	8006ef0 <lwip_htons>
 801210c:	4603      	mov	r3, r0
 801210e:	461a      	mov	r2, r3
 8012110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012112:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012116:	2200      	movs	r2, #0
 8012118:	719a      	strb	r2, [r3, #6]
 801211a:	2200      	movs	r2, #0
 801211c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012120:	2200      	movs	r2, #0
 8012122:	729a      	strb	r2, [r3, #10]
 8012124:	2200      	movs	r2, #0
 8012126:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801212e:	e00e      	b.n	801214e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8012130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012136:	f06f 0113 	mvn.w	r1, #19
 801213a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801213c:	f7f6 f84a 	bl	80081d4 <pbuf_header>
      pbuf_cat(p, r);
 8012140:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7f6 f938 	bl	80083b8 <pbuf_cat>
      r = iprh->next_pbuf;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1ed      	bne.n	8012130 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012154:	4b1d      	ldr	r3, [pc, #116]	; (80121cc <ip4_reass+0x2a0>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801215a:	429a      	cmp	r2, r3
 801215c:	d102      	bne.n	8012164 <ip4_reass+0x238>
      ipr_prev = NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012162:	e010      	b.n	8012186 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012164:	4b19      	ldr	r3, [pc, #100]	; (80121cc <ip4_reass+0x2a0>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	62fb      	str	r3, [r7, #44]	; 0x2c
 801216a:	e007      	b.n	801217c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012172:	429a      	cmp	r2, r3
 8012174:	d006      	beq.n	8012184 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1f4      	bne.n	801216c <ip4_reass+0x240>
 8012182:	e000      	b.n	8012186 <ip4_reass+0x25a>
          break;
 8012184:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801218a:	f7ff fd37 	bl	8011bfc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7f6 f8d8 	bl	8008344 <pbuf_clen>
 8012194:	4603      	mov	r3, r0
 8012196:	461a      	mov	r2, r3
 8012198:	4b0b      	ldr	r3, [pc, #44]	; (80121c8 <ip4_reass+0x29c>)
 801219a:	881b      	ldrh	r3, [r3, #0]
 801219c:	1a9b      	subs	r3, r3, r2
 801219e:	b29a      	uxth	r2, r3
 80121a0:	4b09      	ldr	r3, [pc, #36]	; (80121c8 <ip4_reass+0x29c>)
 80121a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	e00a      	b.n	80121be <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	e008      	b.n	80121be <ip4_reass+0x292>
    goto nullreturn;
 80121ac:	bf00      	nop
 80121ae:	e002      	b.n	80121b6 <ip4_reass+0x28a>

nullreturn:
 80121b0:	bf00      	nop
 80121b2:	e000      	b.n	80121b6 <ip4_reass+0x28a>
    goto nullreturn;
 80121b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7f6 f830 	bl	800821c <pbuf_free>
  return NULL;
 80121bc:	2300      	movs	r3, #0
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3738      	adds	r7, #56	; 0x38
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	20000864 	.word	0x20000864
 80121cc:	20000860 	.word	0x20000860

080121d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80121d4:	2005      	movs	r0, #5
 80121d6:	f7f5 faa3 	bl	8007720 <memp_malloc>
 80121da:	4603      	mov	r3, r0
}
 80121dc:	4618      	mov	r0, r3
 80121de:	bd80      	pop	{r7, pc}

080121e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d106      	bne.n	80121fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80121ee:	4b07      	ldr	r3, [pc, #28]	; (801220c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80121f0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80121f4:	4906      	ldr	r1, [pc, #24]	; (8012210 <ip_frag_free_pbuf_custom_ref+0x30>)
 80121f6:	4807      	ldr	r0, [pc, #28]	; (8012214 <ip_frag_free_pbuf_custom_ref+0x34>)
 80121f8:	f002 fdb0 	bl	8014d5c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80121fc:	6879      	ldr	r1, [r7, #4]
 80121fe:	2005      	movs	r0, #5
 8012200:	f7f5 fada 	bl	80077b8 <memp_free>
}
 8012204:	bf00      	nop
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	080182f4 	.word	0x080182f4
 8012210:	0801845c 	.word	0x0801845c
 8012214:	0801833c 	.word	0x0801833c

08012218 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d106      	bne.n	8012238 <ipfrag_free_pbuf_custom+0x20>
 801222a:	4b11      	ldr	r3, [pc, #68]	; (8012270 <ipfrag_free_pbuf_custom+0x58>)
 801222c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8012230:	4910      	ldr	r1, [pc, #64]	; (8012274 <ipfrag_free_pbuf_custom+0x5c>)
 8012232:	4811      	ldr	r0, [pc, #68]	; (8012278 <ipfrag_free_pbuf_custom+0x60>)
 8012234:	f002 fd92 	bl	8014d5c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012238:	68fa      	ldr	r2, [r7, #12]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	429a      	cmp	r2, r3
 801223e:	d006      	beq.n	801224e <ipfrag_free_pbuf_custom+0x36>
 8012240:	4b0b      	ldr	r3, [pc, #44]	; (8012270 <ipfrag_free_pbuf_custom+0x58>)
 8012242:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012246:	490d      	ldr	r1, [pc, #52]	; (801227c <ipfrag_free_pbuf_custom+0x64>)
 8012248:	480b      	ldr	r0, [pc, #44]	; (8012278 <ipfrag_free_pbuf_custom+0x60>)
 801224a:	f002 fd87 	bl	8014d5c <iprintf>
  if (pcr->original != NULL) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	695b      	ldr	r3, [r3, #20]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d004      	beq.n	8012260 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	695b      	ldr	r3, [r3, #20]
 801225a:	4618      	mov	r0, r3
 801225c:	f7f5 ffde 	bl	800821c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f7ff ffbd 	bl	80121e0 <ip_frag_free_pbuf_custom_ref>
}
 8012266:	bf00      	nop
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	080182f4 	.word	0x080182f4
 8012274:	08018468 	.word	0x08018468
 8012278:	0801833c 	.word	0x0801833c
 801227c:	08018474 	.word	0x08018474

08012280 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b092      	sub	sp, #72	; 0x48
 8012284:	af02      	add	r7, sp, #8
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801228c:	2300      	movs	r3, #0
 801228e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012294:	3b14      	subs	r3, #20
 8012296:	2b00      	cmp	r3, #0
 8012298:	da00      	bge.n	801229c <ip4_frag+0x1c>
 801229a:	3307      	adds	r3, #7
 801229c:	10db      	asrs	r3, r3, #3
 801229e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80122a0:	2314      	movs	r3, #20
 80122a2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80122aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ac:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	f003 030f 	and.w	r3, r3, #15
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	2b14      	cmp	r3, #20
 80122ba:	d009      	beq.n	80122d0 <ip4_frag+0x50>
 80122bc:	4b79      	ldr	r3, [pc, #484]	; (80124a4 <ip4_frag+0x224>)
 80122be:	f240 22e1 	movw	r2, #737	; 0x2e1
 80122c2:	4979      	ldr	r1, [pc, #484]	; (80124a8 <ip4_frag+0x228>)
 80122c4:	4879      	ldr	r0, [pc, #484]	; (80124ac <ip4_frag+0x22c>)
 80122c6:	f002 fd49 	bl	8014d5c <iprintf>
 80122ca:	f06f 0305 	mvn.w	r3, #5
 80122ce:	e0e5      	b.n	801249c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80122d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d2:	88db      	ldrh	r3, [r3, #6]
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7f4 fe0a 	bl	8006ef0 <lwip_htons>
 80122dc:	4603      	mov	r3, r0
 80122de:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80122e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122e6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80122e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d009      	beq.n	8012306 <ip4_frag+0x86>
 80122f2:	4b6c      	ldr	r3, [pc, #432]	; (80124a4 <ip4_frag+0x224>)
 80122f4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80122f8:	496d      	ldr	r1, [pc, #436]	; (80124b0 <ip4_frag+0x230>)
 80122fa:	486c      	ldr	r0, [pc, #432]	; (80124ac <ip4_frag+0x22c>)
 80122fc:	f002 fd2e 	bl	8014d5c <iprintf>
 8012300:	f06f 0305 	mvn.w	r3, #5
 8012304:	e0ca      	b.n	801249c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	891b      	ldrh	r3, [r3, #8]
 801230a:	3b14      	subs	r3, #20
 801230c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801230e:	e0bc      	b.n	801248a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8012310:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012312:	00da      	lsls	r2, r3, #3
 8012314:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012316:	4293      	cmp	r3, r2
 8012318:	bfa8      	it	ge
 801231a:	4613      	movge	r3, r2
 801231c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801231e:	2200      	movs	r2, #0
 8012320:	2114      	movs	r1, #20
 8012322:	2002      	movs	r0, #2
 8012324:	f7f5 fc08 	bl	8007b38 <pbuf_alloc>
 8012328:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	2b00      	cmp	r3, #0
 801232e:	f000 80b2 	beq.w	8012496 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	895b      	ldrh	r3, [r3, #10]
 8012336:	2b13      	cmp	r3, #19
 8012338:	d806      	bhi.n	8012348 <ip4_frag+0xc8>
 801233a:	4b5a      	ldr	r3, [pc, #360]	; (80124a4 <ip4_frag+0x224>)
 801233c:	f240 3209 	movw	r2, #777	; 0x309
 8012340:	495c      	ldr	r1, [pc, #368]	; (80124b4 <ip4_frag+0x234>)
 8012342:	485a      	ldr	r0, [pc, #360]	; (80124ac <ip4_frag+0x22c>)
 8012344:	f002 fd0a 	bl	8014d5c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012348:	6a3b      	ldr	r3, [r7, #32]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	2214      	movs	r2, #20
 801234e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012350:	4618      	mov	r0, r3
 8012352:	f002 fcf0 	bl	8014d36 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012356:	6a3b      	ldr	r3, [r7, #32]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801235c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801235e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8012360:	e04f      	b.n	8012402 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	895a      	ldrh	r2, [r3, #10]
 8012366:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012368:	1ad3      	subs	r3, r2, r3
 801236a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801236c:	8b7a      	ldrh	r2, [r7, #26]
 801236e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012370:	4293      	cmp	r3, r2
 8012372:	bf28      	it	cs
 8012374:	4613      	movcs	r3, r2
 8012376:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012378:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801237a:	2b00      	cmp	r3, #0
 801237c:	d105      	bne.n	801238a <ip4_frag+0x10a>
        poff = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	60fb      	str	r3, [r7, #12]
        continue;
 8012388:	e03b      	b.n	8012402 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801238a:	f7ff ff21 	bl	80121d0 <ip_frag_alloc_pbuf_custom_ref>
 801238e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d103      	bne.n	801239e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8012396:	6a38      	ldr	r0, [r7, #32]
 8012398:	f7f5 ff40 	bl	800821c <pbuf_free>
        goto memerr;
 801239c:	e07c      	b.n	8012498 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801239e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80123a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80123a6:	4413      	add	r3, r2
 80123a8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80123aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80123ac:	9201      	str	r2, [sp, #4]
 80123ae:	9300      	str	r3, [sp, #0]
 80123b0:	4603      	mov	r3, r0
 80123b2:	2202      	movs	r2, #2
 80123b4:	2004      	movs	r0, #4
 80123b6:	f7f5 fd53 	bl	8007e60 <pbuf_alloced_custom>
 80123ba:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80123c2:	6978      	ldr	r0, [r7, #20]
 80123c4:	f7ff ff0c 	bl	80121e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80123c8:	6a38      	ldr	r0, [r7, #32]
 80123ca:	f7f5 ff27 	bl	800821c <pbuf_free>
        goto memerr;
 80123ce:	e063      	b.n	8012498 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f7f5 ffcf 	bl	8008374 <pbuf_ref>
      pcr->original = p;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	4a36      	ldr	r2, [pc, #216]	; (80124b8 <ip4_frag+0x238>)
 80123e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80123e2:	6939      	ldr	r1, [r7, #16]
 80123e4:	6a38      	ldr	r0, [r7, #32]
 80123e6:	f7f5 ffe7 	bl	80083b8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80123ea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80123ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123ee:	1ad3      	subs	r3, r2, r3
 80123f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80123f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d004      	beq.n	8012402 <ip4_frag+0x182>
        poff = 0;
 80123f8:	2300      	movs	r3, #0
 80123fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012402:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1ac      	bne.n	8012362 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8012408:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801240a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801240c:	4413      	add	r3, r2
 801240e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012410:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012416:	3b14      	subs	r3, #20
 8012418:	429a      	cmp	r2, r3
 801241a:	bfd4      	ite	le
 801241c:	2301      	movle	r3, #1
 801241e:	2300      	movgt	r3, #0
 8012420:	b2db      	uxtb	r3, r3
 8012422:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012424:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801242a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d103      	bne.n	801243a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8012432:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012438:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801243a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801243c:	4618      	mov	r0, r3
 801243e:	f7f4 fd57 	bl	8006ef0 <lwip_htons>
 8012442:	4603      	mov	r3, r0
 8012444:	461a      	mov	r2, r3
 8012446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012448:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801244a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801244c:	3314      	adds	r3, #20
 801244e:	b29b      	uxth	r3, r3
 8012450:	4618      	mov	r0, r3
 8012452:	f7f4 fd4d 	bl	8006ef0 <lwip_htons>
 8012456:	4603      	mov	r3, r0
 8012458:	461a      	mov	r2, r3
 801245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012460:	2200      	movs	r2, #0
 8012462:	729a      	strb	r2, [r3, #10]
 8012464:	2200      	movs	r2, #0
 8012466:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	695b      	ldr	r3, [r3, #20]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	6a39      	ldr	r1, [r7, #32]
 8012470:	68b8      	ldr	r0, [r7, #8]
 8012472:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012474:	6a38      	ldr	r0, [r7, #32]
 8012476:	f7f5 fed1 	bl	800821c <pbuf_free>
    left -= fragsize;
 801247a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801247c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8012482:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012484:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012486:	4413      	add	r3, r2
 8012488:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801248a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801248c:	2b00      	cmp	r3, #0
 801248e:	f47f af3f 	bne.w	8012310 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	e002      	b.n	801249c <ip4_frag+0x21c>
      goto memerr;
 8012496:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012498:	f04f 33ff 	mov.w	r3, #4294967295
}
 801249c:	4618      	mov	r0, r3
 801249e:	3740      	adds	r7, #64	; 0x40
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	080182f4 	.word	0x080182f4
 80124a8:	08018480 	.word	0x08018480
 80124ac:	0801833c 	.word	0x0801833c
 80124b0:	080184a8 	.word	0x080184a8
 80124b4:	080184c4 	.word	0x080184c4
 80124b8:	08012219 	.word	0x08012219

080124bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80124c6:	230e      	movs	r3, #14
 80124c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	895b      	ldrh	r3, [r3, #10]
 80124ce:	2b0e      	cmp	r3, #14
 80124d0:	d977      	bls.n	80125c2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	7b1a      	ldrb	r2, [r3, #12]
 80124dc:	7b5b      	ldrb	r3, [r3, #13]
 80124de:	021b      	lsls	r3, r3, #8
 80124e0:	4313      	orrs	r3, r2
 80124e2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d023      	beq.n	8012538 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d10f      	bne.n	8012518 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	785b      	ldrb	r3, [r3, #1]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d11b      	bne.n	8012538 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012504:	2b5e      	cmp	r3, #94	; 0x5e
 8012506:	d117      	bne.n	8012538 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	7b5b      	ldrb	r3, [r3, #13]
 801250c:	f043 0310 	orr.w	r3, r3, #16
 8012510:	b2da      	uxtb	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	735a      	strb	r2, [r3, #13]
 8012516:	e00f      	b.n	8012538 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	2206      	movs	r2, #6
 801251c:	4930      	ldr	r1, [pc, #192]	; (80125e0 <ethernet_input+0x124>)
 801251e:	4618      	mov	r0, r3
 8012520:	f002 fbfa 	bl	8014d18 <memcmp>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d106      	bne.n	8012538 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	7b5b      	ldrb	r3, [r3, #13]
 801252e:	f043 0308 	orr.w	r3, r3, #8
 8012532:	b2da      	uxtb	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012538:	89fb      	ldrh	r3, [r7, #14]
 801253a:	2b08      	cmp	r3, #8
 801253c:	d003      	beq.n	8012546 <ethernet_input+0x8a>
 801253e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012542:	d01e      	beq.n	8012582 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012544:	e044      	b.n	80125d0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801254c:	f003 0308 	and.w	r3, r3, #8
 8012550:	2b00      	cmp	r3, #0
 8012552:	d038      	beq.n	80125c6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	895b      	ldrh	r3, [r3, #10]
 8012558:	461a      	mov	r2, r3
 801255a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801255e:	429a      	cmp	r2, r3
 8012560:	db33      	blt.n	80125ca <ethernet_input+0x10e>
 8012562:	8afb      	ldrh	r3, [r7, #22]
 8012564:	425b      	negs	r3, r3
 8012566:	b29b      	uxth	r3, r3
 8012568:	b21b      	sxth	r3, r3
 801256a:	4619      	mov	r1, r3
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7f5 fe31 	bl	80081d4 <pbuf_header>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d128      	bne.n	80125ca <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7fe ff62 	bl	8011444 <ip4_input>
      break;
 8012580:	e01d      	b.n	80125be <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012588:	f003 0308 	and.w	r3, r3, #8
 801258c:	2b00      	cmp	r3, #0
 801258e:	d01e      	beq.n	80125ce <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	895b      	ldrh	r3, [r3, #10]
 8012594:	461a      	mov	r2, r3
 8012596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801259a:	429a      	cmp	r2, r3
 801259c:	db15      	blt.n	80125ca <ethernet_input+0x10e>
 801259e:	8afb      	ldrh	r3, [r7, #22]
 80125a0:	425b      	negs	r3, r3
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	b21b      	sxth	r3, r3
 80125a6:	4619      	mov	r1, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7f5 fe13 	bl	80081d4 <pbuf_header>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10a      	bne.n	80125ca <ethernet_input+0x10e>
        etharp_input(p, netif);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7fe f92c 	bl	8010814 <etharp_input>
      break;
 80125bc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80125be:	2300      	movs	r3, #0
 80125c0:	e00a      	b.n	80125d8 <ethernet_input+0x11c>
    goto free_and_return;
 80125c2:	bf00      	nop
 80125c4:	e004      	b.n	80125d0 <ethernet_input+0x114>
        goto free_and_return;
 80125c6:	bf00      	nop
 80125c8:	e002      	b.n	80125d0 <ethernet_input+0x114>

free_and_return:
 80125ca:	bf00      	nop
 80125cc:	e000      	b.n	80125d0 <ethernet_input+0x114>
        goto free_and_return;
 80125ce:	bf00      	nop
  pbuf_free(p);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7f5 fe23 	bl	800821c <pbuf_free>
  return ERR_OK;
 80125d6:	2300      	movs	r3, #0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3718      	adds	r7, #24
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	0801981c 	.word	0x0801981c

080125e4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b086      	sub	sp, #24
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80125f2:	8c3b      	ldrh	r3, [r7, #32]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7f4 fc7b 	bl	8006ef0 <lwip_htons>
 80125fa:	4603      	mov	r3, r0
 80125fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80125fe:	210e      	movs	r1, #14
 8012600:	68b8      	ldr	r0, [r7, #8]
 8012602:	f7f5 fde7 	bl	80081d4 <pbuf_header>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d125      	bne.n	8012658 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	8afa      	ldrh	r2, [r7, #22]
 8012616:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	2206      	movs	r2, #6
 801261c:	6839      	ldr	r1, [r7, #0]
 801261e:	4618      	mov	r0, r3
 8012620:	f002 fb89 	bl	8014d36 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	3306      	adds	r3, #6
 8012628:	2206      	movs	r2, #6
 801262a:	6879      	ldr	r1, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	f002 fb82 	bl	8014d36 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012638:	2b06      	cmp	r3, #6
 801263a:	d006      	beq.n	801264a <ethernet_output+0x66>
 801263c:	4b0a      	ldr	r3, [pc, #40]	; (8012668 <ethernet_output+0x84>)
 801263e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012642:	490a      	ldr	r1, [pc, #40]	; (801266c <ethernet_output+0x88>)
 8012644:	480a      	ldr	r0, [pc, #40]	; (8012670 <ethernet_output+0x8c>)
 8012646:	f002 fb89 	bl	8014d5c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	68b9      	ldr	r1, [r7, #8]
 8012650:	68f8      	ldr	r0, [r7, #12]
 8012652:	4798      	blx	r3
 8012654:	4603      	mov	r3, r0
 8012656:	e002      	b.n	801265e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012658:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801265a:	f06f 0301 	mvn.w	r3, #1
}
 801265e:	4618      	mov	r0, r3
 8012660:	3718      	adds	r7, #24
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	080184e4 	.word	0x080184e4
 801266c:	0801851c 	.word	0x0801851c
 8012670:	08018550 	.word	0x08018550

08012674 <ADS8688_Init>:
#include "ADS8688.h"

/*
 * INITIALISATION
 */
uint8_t ADS8688_Init(ADS8688 *ads, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
 8012680:	807b      	strh	r3, [r7, #2]
/* Store interface parameters in struct */
	ads->spiHandle 		= spiHandle;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	68ba      	ldr	r2, [r7, #8]
 8012686:	601a      	str	r2, [r3, #0]
	ads->csPinBank 	= csPinBank;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	605a      	str	r2, [r3, #4]
	ads->csPin 		= csPin;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	887a      	ldrh	r2, [r7, #2]
 8012692:	811a      	strh	r2, [r3, #8]

	uint8_t ads_data[2] = {0};
 8012694:	2300      	movs	r3, #0
 8012696:	82bb      	strh	r3, [r7, #20]
	uint8_t state = 0;
 8012698:	2300      	movs	r3, #0
 801269a:	75fb      	strb	r3, [r7, #23]
	// reset all registers to default
	state += ADS_Cmd_Write(ads, RST, ads_data);
 801269c:	f107 0314 	add.w	r3, r7, #20
 80126a0:	461a      	mov	r2, r3
 80126a2:	2185      	movs	r1, #133	; 0x85
 80126a4:	68f8      	ldr	r0, [r7, #12]
 80126a6:	f000 f90d 	bl	80128c4 <ADS_Cmd_Write>
 80126aa:	4603      	mov	r3, r0
 80126ac:	461a      	mov	r2, r3
 80126ae:	7dfb      	ldrb	r3, [r7, #23]
 80126b0:	4413      	add	r3, r2
 80126b2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80126b4:	2064      	movs	r0, #100	; 0x64
 80126b6:	f7ee fc03 	bl	8000ec0 <HAL_Delay>
	// send a no_op message to the ADS to enter IDLE mode
	state += ADS_Cmd_Write(ads, CONT, ads_data);
 80126ba:	f107 0314 	add.w	r3, r7, #20
 80126be:	461a      	mov	r2, r3
 80126c0:	2100      	movs	r1, #0
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f000 f8fe 	bl	80128c4 <ADS_Cmd_Write>
 80126c8:	4603      	mov	r3, r0
 80126ca:	461a      	mov	r2, r3
 80126cc:	7dfb      	ldrb	r3, [r7, #23]
 80126ce:	4413      	add	r3, r2
 80126d0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80126d2:	200a      	movs	r0, #10
 80126d4:	f7ee fbf4 	bl	8000ec0 <HAL_Delay>
	// enable auto transmit for all inputs(datasheet page 54) or as many as you want
	// if you want only some of the inputs enabled, make sure to power down the unused ones
	ads_data[0] = 0xff;
 80126d8:	23ff      	movs	r3, #255	; 0xff
 80126da:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, AUTO_SEQ_EN, ads_data);
 80126dc:	f107 0314 	add.w	r3, r7, #20
 80126e0:	461a      	mov	r2, r3
 80126e2:	2101      	movs	r1, #1
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f000 f8b2 	bl	801284e <ADS_Prog_Write>
 80126ea:	4603      	mov	r3, r0
 80126ec:	461a      	mov	r2, r3
 80126ee:	7dfb      	ldrb	r3, [r7, #23]
 80126f0:	4413      	add	r3, r2
 80126f2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80126f4:	200a      	movs	r0, #10
 80126f6:	f7ee fbe3 	bl	8000ec0 <HAL_Delay>
	// set the desired features such as device id (if multiple devices are used), alarm enable/disable and output format
	ads_data[0] = 0x03; // here i chose id = 0, alarm = disabled and SDO_format = 3 (datasheet page 56)
 80126fa:	2303      	movs	r3, #3
 80126fc:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, FEATURE_SELECT, ads_data);
 80126fe:	f107 0314 	add.w	r3, r7, #20
 8012702:	461a      	mov	r2, r3
 8012704:	2103      	movs	r1, #3
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f000 f8a1 	bl	801284e <ADS_Prog_Write>
 801270c:	4603      	mov	r3, r0
 801270e:	461a      	mov	r2, r3
 8012710:	7dfb      	ldrb	r3, [r7, #23]
 8012712:	4413      	add	r3, r2
 8012714:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012716:	200a      	movs	r0, #10
 8012718:	f7ee fbd2 	bl	8000ec0 <HAL_Delay>
	// set all channels ranges(page 57)
	// 0x05 -> Input range is set to 0 to 2.5 x VREF (for VREF=5 volts, this means 0-10 volts range)
	// 0x06 -> Input range is set to 0 to 1.25 x VREF (for VREF=5 volts, this means 0-5 volts range)
	ads_data[0] = 0x06;
 801271c:	2306      	movs	r3, #6
 801271e:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_0_RANGE, ads_data);
 8012720:	f107 0314 	add.w	r3, r7, #20
 8012724:	461a      	mov	r2, r3
 8012726:	2105      	movs	r1, #5
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f000 f890 	bl	801284e <ADS_Prog_Write>
 801272e:	4603      	mov	r3, r0
 8012730:	461a      	mov	r2, r3
 8012732:	7dfb      	ldrb	r3, [r7, #23]
 8012734:	4413      	add	r3, r2
 8012736:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012738:	200a      	movs	r0, #10
 801273a:	f7ee fbc1 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x06;
 801273e:	2306      	movs	r3, #6
 8012740:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_1_RANGE, ads_data);
 8012742:	f107 0314 	add.w	r3, r7, #20
 8012746:	461a      	mov	r2, r3
 8012748:	2106      	movs	r1, #6
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f000 f87f 	bl	801284e <ADS_Prog_Write>
 8012750:	4603      	mov	r3, r0
 8012752:	461a      	mov	r2, r3
 8012754:	7dfb      	ldrb	r3, [r7, #23]
 8012756:	4413      	add	r3, r2
 8012758:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 801275a:	200a      	movs	r0, #10
 801275c:	f7ee fbb0 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x05;
 8012760:	2305      	movs	r3, #5
 8012762:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_2_RANGE, ads_data);
 8012764:	f107 0314 	add.w	r3, r7, #20
 8012768:	461a      	mov	r2, r3
 801276a:	2107      	movs	r1, #7
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f000 f86e 	bl	801284e <ADS_Prog_Write>
 8012772:	4603      	mov	r3, r0
 8012774:	461a      	mov	r2, r3
 8012776:	7dfb      	ldrb	r3, [r7, #23]
 8012778:	4413      	add	r3, r2
 801277a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 801277c:	200a      	movs	r0, #10
 801277e:	f7ee fb9f 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x05;
 8012782:	2305      	movs	r3, #5
 8012784:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_3_RANGE, ads_data);
 8012786:	f107 0314 	add.w	r3, r7, #20
 801278a:	461a      	mov	r2, r3
 801278c:	2108      	movs	r1, #8
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f000 f85d 	bl	801284e <ADS_Prog_Write>
 8012794:	4603      	mov	r3, r0
 8012796:	461a      	mov	r2, r3
 8012798:	7dfb      	ldrb	r3, [r7, #23]
 801279a:	4413      	add	r3, r2
 801279c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 801279e:	200a      	movs	r0, #10
 80127a0:	f7ee fb8e 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x05;
 80127a4:	2305      	movs	r3, #5
 80127a6:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_4_RANGE, ads_data);
 80127a8:	f107 0314 	add.w	r3, r7, #20
 80127ac:	461a      	mov	r2, r3
 80127ae:	2109      	movs	r1, #9
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f000 f84c 	bl	801284e <ADS_Prog_Write>
 80127b6:	4603      	mov	r3, r0
 80127b8:	461a      	mov	r2, r3
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	4413      	add	r3, r2
 80127be:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80127c0:	200a      	movs	r0, #10
 80127c2:	f7ee fb7d 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x05;
 80127c6:	2305      	movs	r3, #5
 80127c8:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_5_RANGE, ads_data);
 80127ca:	f107 0314 	add.w	r3, r7, #20
 80127ce:	461a      	mov	r2, r3
 80127d0:	210a      	movs	r1, #10
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f000 f83b 	bl	801284e <ADS_Prog_Write>
 80127d8:	4603      	mov	r3, r0
 80127da:	461a      	mov	r2, r3
 80127dc:	7dfb      	ldrb	r3, [r7, #23]
 80127de:	4413      	add	r3, r2
 80127e0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80127e2:	200a      	movs	r0, #10
 80127e4:	f7ee fb6c 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x06;
 80127e8:	2306      	movs	r3, #6
 80127ea:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_6_RANGE, ads_data);
 80127ec:	f107 0314 	add.w	r3, r7, #20
 80127f0:	461a      	mov	r2, r3
 80127f2:	210b      	movs	r1, #11
 80127f4:	68f8      	ldr	r0, [r7, #12]
 80127f6:	f000 f82a 	bl	801284e <ADS_Prog_Write>
 80127fa:	4603      	mov	r3, r0
 80127fc:	461a      	mov	r2, r3
 80127fe:	7dfb      	ldrb	r3, [r7, #23]
 8012800:	4413      	add	r3, r2
 8012802:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012804:	200a      	movs	r0, #10
 8012806:	f7ee fb5b 	bl	8000ec0 <HAL_Delay>
	ads_data[0] = 0x06;
 801280a:	2306      	movs	r3, #6
 801280c:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_7_RANGE, ads_data);
 801280e:	f107 0314 	add.w	r3, r7, #20
 8012812:	461a      	mov	r2, r3
 8012814:	210c      	movs	r1, #12
 8012816:	68f8      	ldr	r0, [r7, #12]
 8012818:	f000 f819 	bl	801284e <ADS_Prog_Write>
 801281c:	4603      	mov	r3, r0
 801281e:	461a      	mov	r2, r3
 8012820:	7dfb      	ldrb	r3, [r7, #23]
 8012822:	4413      	add	r3, r2
 8012824:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012826:	200a      	movs	r0, #10
 8012828:	f7ee fb4a 	bl	8000ec0 <HAL_Delay>
	// start the auto transmission by entering the appropriate state
	state += ADS_Cmd_Write(ads, AUTO_RST, ads_data);
 801282c:	f107 0314 	add.w	r3, r7, #20
 8012830:	461a      	mov	r2, r3
 8012832:	21a0      	movs	r1, #160	; 0xa0
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f000 f845 	bl	80128c4 <ADS_Cmd_Write>
 801283a:	4603      	mov	r3, r0
 801283c:	461a      	mov	r2, r3
 801283e:	7dfb      	ldrb	r3, [r7, #23]
 8012840:	4413      	add	r3, r2
 8012842:	75fb      	strb	r3, [r7, #23]

	return state;
 8012844:	7dfb      	ldrb	r3, [r7, #23]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3718      	adds	r7, #24
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <ADS_Prog_Write>:
	data[1] = rxbuf[3];
	return ret;
}

// after the write, data should contain the data (byte) written to the addressed register (check equality for evaluation)
HAL_StatusTypeDef ADS_Prog_Write(ADS8688 *ads, uint8_t addr, uint8_t *data) {
 801284e:	b580      	push	{r7, lr}
 8012850:	b088      	sub	sp, #32
 8012852:	af02      	add	r7, sp, #8
 8012854:	60f8      	str	r0, [r7, #12]
 8012856:	460b      	mov	r3, r1
 8012858:	607a      	str	r2, [r7, #4]
 801285a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {data[0], (addr << 1 | 0x01)}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	753b      	strb	r3, [r7, #20]
 8012862:	7afb      	ldrb	r3, [r7, #11]
 8012864:	005b      	lsls	r3, r3, #1
 8012866:	b25b      	sxtb	r3, r3
 8012868:	f043 0301 	orr.w	r3, r3, #1
 801286c:	b25b      	sxtb	r3, r3
 801286e:	b2db      	uxtb	r3, r3
 8012870:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6858      	ldr	r0, [r3, #4]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	891b      	ldrh	r3, [r3, #8]
 801287a:	2200      	movs	r2, #0
 801287c:	4619      	mov	r1, r3
 801287e:	f7f1 fc05 	bl	800408c <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	6818      	ldr	r0, [r3, #0]
 8012886:	f107 0210 	add.w	r2, r7, #16
 801288a:	f107 0114 	add.w	r1, r7, #20
 801288e:	230a      	movs	r3, #10
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	2302      	movs	r3, #2
 8012894:	f7f2 f8f2 	bl	8004a7c <HAL_SPI_TransmitReceive>
 8012898:	4603      	mov	r3, r0
 801289a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	6858      	ldr	r0, [r3, #4]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	891b      	ldrh	r3, [r3, #8]
 80128a4:	2201      	movs	r2, #1
 80128a6:	4619      	mov	r1, r3
 80128a8:	f7f1 fbf0 	bl	800408c <HAL_GPIO_WritePin>

	data[0] = rxbuf[3];
 80128ac:	7cfa      	ldrb	r2, [r7, #19]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	3301      	adds	r3, #1
 80128b6:	2200      	movs	r2, #0
 80128b8:	701a      	strb	r2, [r3, #0]
	return ret;
 80128ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <ADS_Cmd_Write>:

HAL_StatusTypeDef ADS_Cmd_Write(ADS8688 *ads, uint8_t cmd, uint8_t *data) {
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af02      	add	r7, sp, #8
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	460b      	mov	r3, r1
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {0x00,cmd}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 80128d2:	2300      	movs	r3, #0
 80128d4:	753b      	strb	r3, [r7, #20]
 80128d6:	7afb      	ldrb	r3, [r7, #11]
 80128d8:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6858      	ldr	r0, [r3, #4]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	891b      	ldrh	r3, [r3, #8]
 80128e2:	2200      	movs	r2, #0
 80128e4:	4619      	mov	r1, r3
 80128e6:	f7f1 fbd1 	bl	800408c <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	6818      	ldr	r0, [r3, #0]
 80128ee:	f107 0210 	add.w	r2, r7, #16
 80128f2:	f107 0114 	add.w	r1, r7, #20
 80128f6:	230a      	movs	r3, #10
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	2302      	movs	r3, #2
 80128fc:	f7f2 f8be 	bl	8004a7c <HAL_SPI_TransmitReceive>
 8012900:	4603      	mov	r3, r0
 8012902:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6858      	ldr	r0, [r3, #4]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	891b      	ldrh	r3, [r3, #8]
 801290c:	2201      	movs	r2, #1
 801290e:	4619      	mov	r1, r3
 8012910:	f7f1 fbbc 	bl	800408c <HAL_GPIO_WritePin>

	data[0] = rxbuf[2];
 8012914:	7cba      	ldrb	r2, [r7, #18]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	701a      	strb	r2, [r3, #0]
	data[1] = rxbuf[3];
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	3301      	adds	r3, #1
 801291e:	7cfa      	ldrb	r2, [r7, #19]
 8012920:	701a      	strb	r2, [r3, #0]
	return ret;
 8012922:	7dfb      	ldrb	r3, [r7, #23]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3718      	adds	r7, #24
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <ADS_Read_All_Raw>:

HAL_StatusTypeDef ADS_Read_All_Raw(ADS8688 *ads, uint16_t *data) {
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t ads_raw[2];
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8012936:	2300      	movs	r3, #0
 8012938:	613b      	str	r3, [r7, #16]
 801293a:	e01a      	b.n	8012972 <ADS_Read_All_Raw+0x46>
	  ret = ADS_Cmd_Write(ads, CONT, ads_raw);
 801293c:	f107 030c 	add.w	r3, r7, #12
 8012940:	461a      	mov	r2, r3
 8012942:	2100      	movs	r1, #0
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7ff ffbd 	bl	80128c4 <ADS_Cmd_Write>
 801294a:	4603      	mov	r3, r0
 801294c:	75fb      	strb	r3, [r7, #23]
	  data[i] = (int)((uint16_t)(ads_raw[1]<<8 | ads_raw[0]) >> 4);
 801294e:	7b7b      	ldrb	r3, [r7, #13]
 8012950:	021b      	lsls	r3, r3, #8
 8012952:	b21a      	sxth	r2, r3
 8012954:	7b3b      	ldrb	r3, [r7, #12]
 8012956:	b21b      	sxth	r3, r3
 8012958:	4313      	orrs	r3, r2
 801295a:	b21b      	sxth	r3, r3
 801295c:	b29a      	uxth	r2, r3
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	6839      	ldr	r1, [r7, #0]
 8012964:	440b      	add	r3, r1
 8012966:	0912      	lsrs	r2, r2, #4
 8012968:	b292      	uxth	r2, r2
 801296a:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<CHNS_NUM_READ; i++) {
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	3301      	adds	r3, #1
 8012970:	613b      	str	r3, [r7, #16]
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	2b07      	cmp	r3, #7
 8012976:	dde1      	ble.n	801293c <ADS_Read_All_Raw+0x10>
	}
	return ret;
 8012978:	7dfb      	ldrb	r3, [r7, #23]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3718      	adds	r7, #24
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <GetSector>:
/**
  * @brief  Gets the sector of a given address
  * @param  Address, the address in flash memory
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address) {
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 801298c:	2300      	movs	r3, #0
 801298e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000)) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4a44      	ldr	r2, [pc, #272]	; (8012aa4 <GetSector+0x120>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d806      	bhi.n	80129a6 <GetSector+0x22>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801299e:	d302      	bcc.n	80129a6 <GetSector+0x22>
    sector = FLASH_SECTOR_0;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	e077      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address <  0x08007FFF) && (Address >= 0x08004000)) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4a3f      	ldr	r2, [pc, #252]	; (8012aa8 <GetSector+0x124>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d806      	bhi.n	80129bc <GetSector+0x38>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	4a3e      	ldr	r2, [pc, #248]	; (8012aac <GetSector+0x128>)
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d902      	bls.n	80129bc <GetSector+0x38>
    sector = FLASH_SECTOR_1;
 80129b6:	2301      	movs	r3, #1
 80129b8:	60fb      	str	r3, [r7, #12]
 80129ba:	e06c      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000)) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4a3c      	ldr	r2, [pc, #240]	; (8012ab0 <GetSector+0x12c>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d806      	bhi.n	80129d2 <GetSector+0x4e>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	4a3b      	ldr	r2, [pc, #236]	; (8012ab4 <GetSector+0x130>)
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d902      	bls.n	80129d2 <GetSector+0x4e>
    sector = FLASH_SECTOR_2;
 80129cc:	2302      	movs	r3, #2
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	e061      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000)) {
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4a38      	ldr	r2, [pc, #224]	; (8012ab8 <GetSector+0x134>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d806      	bhi.n	80129e8 <GetSector+0x64>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	4a37      	ldr	r2, [pc, #220]	; (8012abc <GetSector+0x138>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d902      	bls.n	80129e8 <GetSector+0x64>
    sector = FLASH_SECTOR_3;
 80129e2:	2303      	movs	r3, #3
 80129e4:	60fb      	str	r3, [r7, #12]
 80129e6:	e056      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000)) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	4a35      	ldr	r2, [pc, #212]	; (8012ac0 <GetSector+0x13c>)
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d806      	bhi.n	80129fe <GetSector+0x7a>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4a34      	ldr	r2, [pc, #208]	; (8012ac4 <GetSector+0x140>)
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d902      	bls.n	80129fe <GetSector+0x7a>
    sector = FLASH_SECTOR_4;
 80129f8:	2304      	movs	r3, #4
 80129fa:	60fb      	str	r3, [r7, #12]
 80129fc:	e04b      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000)) {
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4a31      	ldr	r2, [pc, #196]	; (8012ac8 <GetSector+0x144>)
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d806      	bhi.n	8012a14 <GetSector+0x90>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4a30      	ldr	r2, [pc, #192]	; (8012acc <GetSector+0x148>)
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d902      	bls.n	8012a14 <GetSector+0x90>
    sector = FLASH_SECTOR_5;
 8012a0e:	2305      	movs	r3, #5
 8012a10:	60fb      	str	r3, [r7, #12]
 8012a12:	e040      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000)) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	4a2e      	ldr	r2, [pc, #184]	; (8012ad0 <GetSector+0x14c>)
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d806      	bhi.n	8012a2a <GetSector+0xa6>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	4a2d      	ldr	r2, [pc, #180]	; (8012ad4 <GetSector+0x150>)
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d902      	bls.n	8012a2a <GetSector+0xa6>
    sector = FLASH_SECTOR_6;
 8012a24:	2306      	movs	r3, #6
 8012a26:	60fb      	str	r3, [r7, #12]
 8012a28:	e035      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address <  0x0807FFFF) && (Address >= 0x08060000)) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4a2a      	ldr	r2, [pc, #168]	; (8012ad8 <GetSector+0x154>)
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	d806      	bhi.n	8012a40 <GetSector+0xbc>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4a29      	ldr	r2, [pc, #164]	; (8012adc <GetSector+0x158>)
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d902      	bls.n	8012a40 <GetSector+0xbc>
    sector = FLASH_SECTOR_7;
 8012a3a:	2307      	movs	r3, #7
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	e02a      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000)) {
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4a27      	ldr	r2, [pc, #156]	; (8012ae0 <GetSector+0x15c>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d806      	bhi.n	8012a56 <GetSector+0xd2>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	4a26      	ldr	r2, [pc, #152]	; (8012ae4 <GetSector+0x160>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d902      	bls.n	8012a56 <GetSector+0xd2>
    sector = FLASH_SECTOR_8;
 8012a50:	2308      	movs	r3, #8
 8012a52:	60fb      	str	r3, [r7, #12]
 8012a54:	e01f      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000)) {
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4a23      	ldr	r2, [pc, #140]	; (8012ae8 <GetSector+0x164>)
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	d806      	bhi.n	8012a6c <GetSector+0xe8>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4a22      	ldr	r2, [pc, #136]	; (8012aec <GetSector+0x168>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d902      	bls.n	8012a6c <GetSector+0xe8>
    sector = FLASH_SECTOR_9;
 8012a66:	2309      	movs	r3, #9
 8012a68:	60fb      	str	r3, [r7, #12]
 8012a6a:	e014      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000)) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4a20      	ldr	r2, [pc, #128]	; (8012af0 <GetSector+0x16c>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d806      	bhi.n	8012a82 <GetSector+0xfe>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	4a1f      	ldr	r2, [pc, #124]	; (8012af4 <GetSector+0x170>)
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	d902      	bls.n	8012a82 <GetSector+0xfe>
    sector = FLASH_SECTOR_10;
 8012a7c:	230a      	movs	r3, #10
 8012a7e:	60fb      	str	r3, [r7, #12]
 8012a80:	e009      	b.n	8012a96 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000)) {
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4a1c      	ldr	r2, [pc, #112]	; (8012af8 <GetSector+0x174>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d805      	bhi.n	8012a96 <GetSector+0x112>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4a1b      	ldr	r2, [pc, #108]	; (8012afc <GetSector+0x178>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	d901      	bls.n	8012a96 <GetSector+0x112>
    sector = FLASH_SECTOR_11;
 8012a92:	230b      	movs	r3, #11
 8012a94:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8012a96:	68fb      	ldr	r3, [r7, #12]
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3714      	adds	r7, #20
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr
 8012aa4:	08003ffe 	.word	0x08003ffe
 8012aa8:	08007ffe 	.word	0x08007ffe
 8012aac:	08003fff 	.word	0x08003fff
 8012ab0:	0800bffe 	.word	0x0800bffe
 8012ab4:	08007fff 	.word	0x08007fff
 8012ab8:	0800fffe 	.word	0x0800fffe
 8012abc:	0800bfff 	.word	0x0800bfff
 8012ac0:	0801fffe 	.word	0x0801fffe
 8012ac4:	0800ffff 	.word	0x0800ffff
 8012ac8:	0803fffe 	.word	0x0803fffe
 8012acc:	0801ffff 	.word	0x0801ffff
 8012ad0:	0805fffe 	.word	0x0805fffe
 8012ad4:	0803ffff 	.word	0x0803ffff
 8012ad8:	0807fffe 	.word	0x0807fffe
 8012adc:	0805ffff 	.word	0x0805ffff
 8012ae0:	0809fffe 	.word	0x0809fffe
 8012ae4:	0807ffff 	.word	0x0807ffff
 8012ae8:	080bfffe 	.word	0x080bfffe
 8012aec:	0809ffff 	.word	0x0809ffff
 8012af0:	080dfffe 	.word	0x080dfffe
 8012af4:	080bffff 	.word	0x080bffff
 8012af8:	080ffffe 	.word	0x080ffffe
 8012afc:	080dffff 	.word	0x080dffff

08012b00 <Flash_Write_Data>:
//  return sectorsize;
//}



uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t * DATA_32, uint32_t numberofwords) {
 8012b00:	b590      	push	{r4, r7, lr}
 8012b02:	b08b      	sub	sp, #44	; 0x2c
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	627b      	str	r3, [r7, #36]	; 0x24
//	int numberofwords = (strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);

//	int numberofwords = ((sizeof(DATA_32)/sizeof(uint32_t *))/4) + (((sizeof(DATA_32)/sizeof(uint32_t *)) % 4) != 0);

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8012b10:	f7f0 fe94 	bl	800383c <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8012b14:	68f8      	ldr	r0, [r7, #12]
 8012b16:	f7ff ff35 	bl	8012984 <GetSector>
 8012b1a:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	4413      	add	r3, r2
 8012b24:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8012b26:	69f8      	ldr	r0, [r7, #28]
 8012b28:	f7ff ff2c 	bl	8012984 <GetSector>
 8012b2c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8012b2e:	4b21      	ldr	r3, [pc, #132]	; (8012bb4 <Flash_Write_Data+0xb4>)
 8012b30:	2200      	movs	r2, #0
 8012b32:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8012b34:	4b1f      	ldr	r3, [pc, #124]	; (8012bb4 <Flash_Write_Data+0xb4>)
 8012b36:	2202      	movs	r2, #2
 8012b38:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8012b3a:	4a1e      	ldr	r2, [pc, #120]	; (8012bb4 <Flash_Write_Data+0xb4>)
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8012b40:	69ba      	ldr	r2, [r7, #24]
 8012b42:	6a3b      	ldr	r3, [r7, #32]
 8012b44:	1ad3      	subs	r3, r2, r3
 8012b46:	3301      	adds	r3, #1
 8012b48:	4a1a      	ldr	r2, [pc, #104]	; (8012bb4 <Flash_Write_Data+0xb4>)
 8012b4a:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8012b4c:	f107 0314 	add.w	r3, r7, #20
 8012b50:	4619      	mov	r1, r3
 8012b52:	4818      	ldr	r0, [pc, #96]	; (8012bb4 <Flash_Write_Data+0xb4>)
 8012b54:	f7f0 ffde 	bl	8003b14 <HAL_FLASHEx_Erase>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d01e      	beq.n	8012b9c <Flash_Write_Data+0x9c>
		  return HAL_FLASH_GetError ();
 8012b5e:	f7f0 fe9f 	bl	80038a0 <HAL_FLASH_GetError>
 8012b62:	4603      	mov	r3, r0
 8012b64:	e021      	b.n	8012baa <Flash_Write_Data+0xaa>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords) {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, DATA_32[sofar]) == HAL_OK) {
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	68ba      	ldr	r2, [r7, #8]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f04f 0400 	mov.w	r4, #0
 8012b74:	461a      	mov	r2, r3
 8012b76:	4623      	mov	r3, r4
 8012b78:	68f9      	ldr	r1, [r7, #12]
 8012b7a:	2002      	movs	r0, #2
 8012b7c:	f7f0 fe0a 	bl	8003794 <HAL_FLASH_Program>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d106      	bne.n	8012b94 <Flash_Write_Data+0x94>
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	3304      	adds	r3, #4
 8012b8a:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8e:	3301      	adds	r3, #1
 8012b90:	627b      	str	r3, [r7, #36]	; 0x24
 8012b92:	e003      	b.n	8012b9c <Flash_Write_Data+0x9c>
	     }
	     else {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8012b94:	f7f0 fe84 	bl	80038a0 <HAL_FLASH_GetError>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	e006      	b.n	8012baa <Flash_Write_Data+0xaa>
	   while (sofar<numberofwords) {
 8012b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d8e0      	bhi.n	8012b66 <Flash_Write_Data+0x66>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8012ba4:	f7f0 fe6c 	bl	8003880 <HAL_FLASH_Lock>

	   return 0;
 8012ba8:	2300      	movs	r3, #0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	372c      	adds	r7, #44	; 0x2c
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd90      	pop	{r4, r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	20000868 	.word	0x20000868

08012bb8 <Flash_Read_Data>:

//@todo
// here we can add another parameter to specify the length of the data we are trying to read, so we would not need the while anymore
void Flash_Read_Data (uint32_t StartSectorAddress, __IO uint32_t * DATA_32, uint32_t numberofwords) {
 8012bb8:	b480      	push	{r7}
 8012bba:	b087      	sub	sp, #28
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]

	for(uint32_t i = 0; i < numberofwords; i++, StartSectorAddress += 4, DATA_32++) {
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	617b      	str	r3, [r7, #20]
 8012bc8:	e00c      	b.n	8012be4 <Flash_Read_Data+0x2c>
		*DATA_32 = *(__IO uint32_t *)StartSectorAddress;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681a      	ldr	r2, [r3, #0]
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < numberofwords; i++, StartSectorAddress += 4, DATA_32++) {
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	617b      	str	r3, [r7, #20]
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	3304      	adds	r3, #4
 8012bdc:	60fb      	str	r3, [r7, #12]
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	3304      	adds	r3, #4
 8012be2:	60bb      	str	r3, [r7, #8]
 8012be4:	697a      	ldr	r2, [r7, #20]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d3ee      	bcc.n	8012bca <Flash_Read_Data+0x12>
	}
}
 8012bec:	bf00      	nop
 8012bee:	371c      	adds	r7, #28
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf6:	4770      	bx	lr

08012bf8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08e      	sub	sp, #56	; 0x38
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c04:	2200      	movs	r2, #0
 8012c06:	601a      	str	r2, [r3, #0]
 8012c08:	605a      	str	r2, [r3, #4]
 8012c0a:	609a      	str	r2, [r3, #8]
 8012c0c:	60da      	str	r2, [r3, #12]
 8012c0e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	4a46      	ldr	r2, [pc, #280]	; (8012d30 <HAL_ETH_MspInit+0x138>)
 8012c16:	4293      	cmp	r3, r2
 8012c18:	f040 8085 	bne.w	8012d26 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	623b      	str	r3, [r7, #32]
 8012c20:	4b44      	ldr	r3, [pc, #272]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c24:	4a43      	ldr	r2, [pc, #268]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8012c2c:	4b41      	ldr	r3, [pc, #260]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c34:	623b      	str	r3, [r7, #32]
 8012c36:	6a3b      	ldr	r3, [r7, #32]
 8012c38:	2300      	movs	r3, #0
 8012c3a:	61fb      	str	r3, [r7, #28]
 8012c3c:	4b3d      	ldr	r3, [pc, #244]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c40:	4a3c      	ldr	r2, [pc, #240]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012c46:	6313      	str	r3, [r2, #48]	; 0x30
 8012c48:	4b3a      	ldr	r3, [pc, #232]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012c50:	61fb      	str	r3, [r7, #28]
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	2300      	movs	r3, #0
 8012c56:	61bb      	str	r3, [r7, #24]
 8012c58:	4b36      	ldr	r3, [pc, #216]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c5c:	4a35      	ldr	r2, [pc, #212]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c62:	6313      	str	r3, [r2, #48]	; 0x30
 8012c64:	4b33      	ldr	r3, [pc, #204]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c6c:	61bb      	str	r3, [r7, #24]
 8012c6e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c70:	2300      	movs	r3, #0
 8012c72:	617b      	str	r3, [r7, #20]
 8012c74:	4b2f      	ldr	r3, [pc, #188]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c78:	4a2e      	ldr	r2, [pc, #184]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c7a:	f043 0304 	orr.w	r3, r3, #4
 8012c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8012c80:	4b2c      	ldr	r3, [pc, #176]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c84:	f003 0304 	and.w	r3, r3, #4
 8012c88:	617b      	str	r3, [r7, #20]
 8012c8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	613b      	str	r3, [r7, #16]
 8012c90:	4b28      	ldr	r3, [pc, #160]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c94:	4a27      	ldr	r2, [pc, #156]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c96:	f043 0301 	orr.w	r3, r3, #1
 8012c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8012c9c:	4b25      	ldr	r3, [pc, #148]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca0:	f003 0301 	and.w	r3, r3, #1
 8012ca4:	613b      	str	r3, [r7, #16]
 8012ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012ca8:	2300      	movs	r3, #0
 8012caa:	60fb      	str	r3, [r7, #12]
 8012cac:	4b21      	ldr	r3, [pc, #132]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb0:	4a20      	ldr	r2, [pc, #128]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012cb2:	f043 0302 	orr.w	r3, r3, #2
 8012cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8012cb8:	4b1e      	ldr	r3, [pc, #120]	; (8012d34 <HAL_ETH_MspInit+0x13c>)
 8012cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cbc:	f003 0302 	and.w	r3, r3, #2
 8012cc0:	60fb      	str	r3, [r7, #12]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8012cc4:	2332      	movs	r3, #50	; 0x32
 8012cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cc8:	2302      	movs	r3, #2
 8012cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012cd0:	2303      	movs	r3, #3
 8012cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012cd4:	230b      	movs	r3, #11
 8012cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012cdc:	4619      	mov	r1, r3
 8012cde:	4816      	ldr	r0, [pc, #88]	; (8012d38 <HAL_ETH_MspInit+0x140>)
 8012ce0:	f7f1 f83a 	bl	8003d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8012ce4:	2386      	movs	r3, #134	; 0x86
 8012ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ce8:	2302      	movs	r3, #2
 8012cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cec:	2300      	movs	r3, #0
 8012cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012cf4:	230b      	movs	r3, #11
 8012cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	480f      	ldr	r0, [pc, #60]	; (8012d3c <HAL_ETH_MspInit+0x144>)
 8012d00:	f7f1 f82a 	bl	8003d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8012d04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8012d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d0a:	2302      	movs	r3, #2
 8012d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d12:	2303      	movs	r3, #3
 8012d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012d16:	230b      	movs	r3, #11
 8012d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d1e:	4619      	mov	r1, r3
 8012d20:	4807      	ldr	r0, [pc, #28]	; (8012d40 <HAL_ETH_MspInit+0x148>)
 8012d22:	f7f1 f819 	bl	8003d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8012d26:	bf00      	nop
 8012d28:	3738      	adds	r7, #56	; 0x38
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	40028000 	.word	0x40028000
 8012d34:	40023800 	.word	0x40023800
 8012d38:	40020800 	.word	0x40020800
 8012d3c:	40020000 	.word	0x40020000
 8012d40:	40020400 	.word	0x40020400

08012d44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b086      	sub	sp, #24
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8012d4c:	4b47      	ldr	r3, [pc, #284]	; (8012e6c <low_level_init+0x128>)
 8012d4e:	4a48      	ldr	r2, [pc, #288]	; (8012e70 <low_level_init+0x12c>)
 8012d50:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8012d52:	4b46      	ldr	r3, [pc, #280]	; (8012e6c <low_level_init+0x128>)
 8012d54:	2201      	movs	r2, #1
 8012d56:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8012d58:	4b44      	ldr	r3, [pc, #272]	; (8012e6c <low_level_init+0x128>)
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	743b      	strb	r3, [r7, #16]
  MACAddr[1] = 0x80;
 8012d62:	2380      	movs	r3, #128	; 0x80
 8012d64:	747b      	strb	r3, [r7, #17]
  MACAddr[2] = 0xE1;
 8012d66:	23e1      	movs	r3, #225	; 0xe1
 8012d68:	74bb      	strb	r3, [r7, #18]
  MACAddr[3] = 0x00;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	74fb      	strb	r3, [r7, #19]
  MACAddr[4] = 0x00;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	753b      	strb	r3, [r7, #20]
  MACAddr[5] = 0x01;
 8012d72:	2301      	movs	r3, #1
 8012d74:	757b      	strb	r3, [r7, #21]
  heth.Init.MACAddr = &MACAddr[0];
 8012d76:	4a3d      	ldr	r2, [pc, #244]	; (8012e6c <low_level_init+0x128>)
 8012d78:	f107 0310 	add.w	r3, r7, #16
 8012d7c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8012d7e:	4b3b      	ldr	r3, [pc, #236]	; (8012e6c <low_level_init+0x128>)
 8012d80:	2200      	movs	r2, #0
 8012d82:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8012d84:	4b39      	ldr	r3, [pc, #228]	; (8012e6c <low_level_init+0x128>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8012d8a:	4b38      	ldr	r3, [pc, #224]	; (8012e6c <low_level_init+0x128>)
 8012d8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8012d90:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8012d92:	4836      	ldr	r0, [pc, #216]	; (8012e6c <low_level_init+0x128>)
 8012d94:	f7ef fd6a 	bl	800286c <HAL_ETH_Init>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8012d9c:	7dfb      	ldrb	r3, [r7, #23]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d108      	bne.n	8012db4 <low_level_init+0x70>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012da8:	f043 0304 	orr.w	r3, r3, #4
 8012dac:	b2da      	uxtb	r2, r3
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8012db4:	2304      	movs	r3, #4
 8012db6:	4a2f      	ldr	r2, [pc, #188]	; (8012e74 <low_level_init+0x130>)
 8012db8:	492f      	ldr	r1, [pc, #188]	; (8012e78 <low_level_init+0x134>)
 8012dba:	482c      	ldr	r0, [pc, #176]	; (8012e6c <low_level_init+0x128>)
 8012dbc:	f7ef fef4 	bl	8002ba8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8012dc0:	2304      	movs	r3, #4
 8012dc2:	4a2e      	ldr	r2, [pc, #184]	; (8012e7c <low_level_init+0x138>)
 8012dc4:	492e      	ldr	r1, [pc, #184]	; (8012e80 <low_level_init+0x13c>)
 8012dc6:	4829      	ldr	r0, [pc, #164]	; (8012e6c <low_level_init+0x128>)
 8012dc8:	f7ef ff57 	bl	8002c7a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2206      	movs	r2, #6
 8012dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012dd4:	4b25      	ldr	r3, [pc, #148]	; (8012e6c <low_level_init+0x128>)
 8012dd6:	695b      	ldr	r3, [r3, #20]
 8012dd8:	781a      	ldrb	r2, [r3, #0]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012de0:	4b22      	ldr	r3, [pc, #136]	; (8012e6c <low_level_init+0x128>)
 8012de2:	695b      	ldr	r3, [r3, #20]
 8012de4:	785a      	ldrb	r2, [r3, #1]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012dec:	4b1f      	ldr	r3, [pc, #124]	; (8012e6c <low_level_init+0x128>)
 8012dee:	695b      	ldr	r3, [r3, #20]
 8012df0:	789a      	ldrb	r2, [r3, #2]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8012df8:	4b1c      	ldr	r3, [pc, #112]	; (8012e6c <low_level_init+0x128>)
 8012dfa:	695b      	ldr	r3, [r3, #20]
 8012dfc:	78da      	ldrb	r2, [r3, #3]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8012e04:	4b19      	ldr	r3, [pc, #100]	; (8012e6c <low_level_init+0x128>)
 8012e06:	695b      	ldr	r3, [r3, #20]
 8012e08:	791a      	ldrb	r2, [r3, #4]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012e10:	4b16      	ldr	r3, [pc, #88]	; (8012e6c <low_level_init+0x128>)
 8012e12:	695b      	ldr	r3, [r3, #20]
 8012e14:	795a      	ldrb	r2, [r3, #5]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012e22:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e2a:	f043 030a 	orr.w	r3, r3, #10
 8012e2e:	b2da      	uxtb	r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8012e36:	480d      	ldr	r0, [pc, #52]	; (8012e6c <low_level_init+0x128>)
 8012e38:	f7f0 f9c8 	bl	80031cc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
/* USER CODE END PHY_PRE_CONFIG */
  

/* USER CODE BEGIN PHY_POST_CONFIG */
  uint32_t regvalue = 0;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	60fb      	str	r3, [r7, #12]
  // configure RJ45 leds (Control register address: 0x19)
  HAL_ETH_ReadPHYRegister(&heth, 0x19, &regvalue);
 8012e40:	f107 030c 	add.w	r3, r7, #12
 8012e44:	461a      	mov	r2, r3
 8012e46:	2119      	movs	r1, #25
 8012e48:	4808      	ldr	r0, [pc, #32]	; (8012e6c <low_level_init+0x128>)
 8012e4a:	f7f0 f8f1 	bl	8003030 <HAL_ETH_ReadPHYRegister>
  regvalue &= ~(1<<5);
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f023 0320 	bic.w	r3, r3, #32
 8012e54:	60fb      	str	r3, [r7, #12]
  HAL_ETH_WritePHYRegister(&heth, 0x19, regvalue);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	461a      	mov	r2, r3
 8012e5a:	2119      	movs	r1, #25
 8012e5c:	4803      	ldr	r0, [pc, #12]	; (8012e6c <low_level_init+0x128>)
 8012e5e:	f7f0 f94f 	bl	8003100 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8012e62:	bf00      	nop
 8012e64:	3718      	adds	r7, #24
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	20008b18 	.word	0x20008b18
 8012e70:	40028000 	.word	0x40028000
 8012e74:	20008b60 	.word	0x20008b60
 8012e78:	20007248 	.word	0x20007248
 8012e7c:	200072c8 	.word	0x200072c8
 8012e80:	20008a98 	.word	0x20008a98

08012e84 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b08a      	sub	sp, #40	; 0x28
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012e8e:	4b4b      	ldr	r3, [pc, #300]	; (8012fbc <low_level_output+0x138>)
 8012e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8012e96:	2300      	movs	r3, #0
 8012e98:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8012ea6:	4b45      	ldr	r3, [pc, #276]	; (8012fbc <low_level_output+0x138>)
 8012ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eaa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8012eac:	2300      	movs	r3, #0
 8012eae:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	623b      	str	r3, [r7, #32]
 8012eb4:	e05a      	b.n	8012f6c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	da03      	bge.n	8012ec6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8012ebe:	23f8      	movs	r3, #248	; 0xf8
 8012ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8012ec4:	e05c      	b.n	8012f80 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8012ec6:	6a3b      	ldr	r3, [r7, #32]
 8012ec8:	895b      	ldrh	r3, [r3, #10]
 8012eca:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012ed0:	e02f      	b.n	8012f32 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8012ed2:	69fa      	ldr	r2, [r7, #28]
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	18d0      	adds	r0, r2, r3
 8012ed8:	6a3b      	ldr	r3, [r7, #32]
 8012eda:	685a      	ldr	r2, [r3, #4]
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	18d1      	adds	r1, r2, r3
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8012ee6:	3304      	adds	r3, #4
 8012ee8:	461a      	mov	r2, r3
 8012eea:	f001 ff24 	bl	8014d36 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	da03      	bge.n	8012f04 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8012efc:	23f8      	movs	r3, #248	; 0xf8
 8012efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8012f02:	e03d      	b.n	8012f80 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8012f0a:	693a      	ldr	r2, [r7, #16]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	4413      	add	r3, r2
 8012f10:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8012f14:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012f20:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8012f22:	697a      	ldr	r2, [r7, #20]
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	1ad3      	subs	r3, r2, r3
 8012f28:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012f2c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	4413      	add	r3, r2
 8012f38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d8c8      	bhi.n	8012ed2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8012f40:	69fa      	ldr	r2, [r7, #28]
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	18d0      	adds	r0, r2, r3
 8012f46:	6a3b      	ldr	r3, [r7, #32]
 8012f48:	685a      	ldr	r2, [r3, #4]
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	4619      	mov	r1, r3
 8012f52:	f001 fef0 	bl	8014d36 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8012f56:	693a      	ldr	r2, [r7, #16]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	4413      	add	r3, r2
 8012f5c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8012f5e:	697a      	ldr	r2, [r7, #20]
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	4413      	add	r3, r2
 8012f64:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8012f66:	6a3b      	ldr	r3, [r7, #32]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	623b      	str	r3, [r7, #32]
 8012f6c:	6a3b      	ldr	r3, [r7, #32]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1a1      	bne.n	8012eb6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8012f72:	6979      	ldr	r1, [r7, #20]
 8012f74:	4811      	ldr	r0, [pc, #68]	; (8012fbc <low_level_output+0x138>)
 8012f76:	f7ef feed 	bl	8002d54 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8012f80:	4b0e      	ldr	r3, [pc, #56]	; (8012fbc <low_level_output+0x138>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f88:	3314      	adds	r3, #20
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f003 0320 	and.w	r3, r3, #32
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d00d      	beq.n	8012fb0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8012f94:	4b09      	ldr	r3, [pc, #36]	; (8012fbc <low_level_output+0x138>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f9c:	3314      	adds	r3, #20
 8012f9e:	2220      	movs	r2, #32
 8012fa0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8012fa2:	4b06      	ldr	r3, [pc, #24]	; (8012fbc <low_level_output+0x138>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012faa:	3304      	adds	r3, #4
 8012fac:	2200      	movs	r2, #0
 8012fae:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8012fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3728      	adds	r7, #40	; 0x28
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	20008b18 	.word	0x20008b18

08012fc0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b08c      	sub	sp, #48	; 0x30
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8012fe4:	484e      	ldr	r0, [pc, #312]	; (8013120 <low_level_input+0x160>)
 8012fe6:	f7ef ff9f 	bl	8002f28 <HAL_ETH_GetReceivedFrame>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <low_level_input+0x34>
    return NULL;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	e091      	b.n	8013118 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8012ff4:	4b4a      	ldr	r3, [pc, #296]	; (8013120 <low_level_input+0x160>)
 8012ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ff8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8012ffa:	4b49      	ldr	r3, [pc, #292]	; (8013120 <low_level_input+0x160>)
 8012ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ffe:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8013000:	89fb      	ldrh	r3, [r7, #14]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d006      	beq.n	8013014 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013006:	89fb      	ldrh	r3, [r7, #14]
 8013008:	2203      	movs	r2, #3
 801300a:	4619      	mov	r1, r3
 801300c:	2004      	movs	r0, #4
 801300e:	f7f4 fd93 	bl	8007b38 <pbuf_alloc>
 8013012:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8013014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013016:	2b00      	cmp	r3, #0
 8013018:	d04b      	beq.n	80130b2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801301a:	4b41      	ldr	r3, [pc, #260]	; (8013120 <low_level_input+0x160>)
 801301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801301e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013026:	62bb      	str	r3, [r7, #40]	; 0x28
 8013028:	e040      	b.n	80130ac <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 801302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302c:	895b      	ldrh	r3, [r3, #10]
 801302e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8013030:	2300      	movs	r3, #0
 8013032:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013034:	e021      	b.n	801307a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013038:	685a      	ldr	r2, [r3, #4]
 801303a:	69bb      	ldr	r3, [r7, #24]
 801303c:	18d0      	adds	r0, r2, r3
 801303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013040:	69fb      	ldr	r3, [r7, #28]
 8013042:	18d1      	adds	r1, r2, r3
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801304a:	3304      	adds	r3, #4
 801304c:	461a      	mov	r2, r3
 801304e:	f001 fe72 	bl	8014d36 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013052:	6a3b      	ldr	r3, [r7, #32]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	689b      	ldr	r3, [r3, #8]
 801305c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801305e:	69fa      	ldr	r2, [r7, #28]
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	4413      	add	r3, r2
 8013064:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013068:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801306a:	69ba      	ldr	r2, [r7, #24]
 801306c:	69fb      	ldr	r3, [r7, #28]
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013074:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8013076:	2300      	movs	r3, #0
 8013078:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801307a:	697a      	ldr	r2, [r7, #20]
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	4413      	add	r3, r2
 8013080:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013084:	4293      	cmp	r3, r2
 8013086:	d8d6      	bhi.n	8013036 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308a:	685a      	ldr	r2, [r3, #4]
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	18d0      	adds	r0, r2, r3
 8013090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	4413      	add	r3, r2
 8013096:	697a      	ldr	r2, [r7, #20]
 8013098:	4619      	mov	r1, r3
 801309a:	f001 fe4c 	bl	8014d36 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801309e:	69fa      	ldr	r2, [r7, #28]
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	4413      	add	r3, r2
 80130a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80130a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80130ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d1bb      	bne.n	801302a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80130b2:	4b1b      	ldr	r3, [pc, #108]	; (8013120 <low_level_input+0x160>)
 80130b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130b6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80130b8:	2300      	movs	r3, #0
 80130ba:	613b      	str	r3, [r7, #16]
 80130bc:	e00b      	b.n	80130d6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80130c6:	6a3b      	ldr	r3, [r7, #32]
 80130c8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80130ca:	6a3b      	ldr	r3, [r7, #32]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	3301      	adds	r3, #1
 80130d4:	613b      	str	r3, [r7, #16]
 80130d6:	4b12      	ldr	r3, [pc, #72]	; (8013120 <low_level_input+0x160>)
 80130d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130da:	693a      	ldr	r2, [r7, #16]
 80130dc:	429a      	cmp	r2, r3
 80130de:	d3ee      	bcc.n	80130be <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80130e0:	4b0f      	ldr	r3, [pc, #60]	; (8013120 <low_level_input+0x160>)
 80130e2:	2200      	movs	r2, #0
 80130e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80130e6:	4b0e      	ldr	r3, [pc, #56]	; (8013120 <low_level_input+0x160>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80130ee:	3314      	adds	r3, #20
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00d      	beq.n	8013116 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80130fa:	4b09      	ldr	r3, [pc, #36]	; (8013120 <low_level_input+0x160>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013102:	3314      	adds	r3, #20
 8013104:	2280      	movs	r2, #128	; 0x80
 8013106:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8013108:	4b05      	ldr	r3, [pc, #20]	; (8013120 <low_level_input+0x160>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013110:	3308      	adds	r3, #8
 8013112:	2200      	movs	r2, #0
 8013114:	601a      	str	r2, [r3, #0]
  }
  return p;
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013118:	4618      	mov	r0, r3
 801311a:	3730      	adds	r7, #48	; 0x30
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	20008b18 	.word	0x20008b18

08013124 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f7ff ff47 	bl	8012fc0 <low_level_input>
 8013132:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d010      	beq.n	801315c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	6879      	ldr	r1, [r7, #4]
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	4798      	blx	r3
 8013144:	4603      	mov	r3, r0
 8013146:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8013148:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d006      	beq.n	801315e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8013150:	68f8      	ldr	r0, [r7, #12]
 8013152:	f7f5 f863 	bl	800821c <pbuf_free>
    p = NULL;    
 8013156:	2300      	movs	r3, #0
 8013158:	60fb      	str	r3, [r7, #12]
 801315a:	e000      	b.n	801315e <ethernetif_input+0x3a>
  if (p == NULL) return;
 801315c:	bf00      	nop
  }
}
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d106      	bne.n	8013180 <ethernetif_init+0x1c>
 8013172:	4b0e      	ldr	r3, [pc, #56]	; (80131ac <ethernetif_init+0x48>)
 8013174:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8013178:	490d      	ldr	r1, [pc, #52]	; (80131b0 <ethernetif_init+0x4c>)
 801317a:	480e      	ldr	r0, [pc, #56]	; (80131b4 <ethernetif_init+0x50>)
 801317c:	f001 fdee 	bl	8014d5c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2273      	movs	r2, #115	; 0x73
 8013184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2274      	movs	r2, #116	; 0x74
 801318c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	4a09      	ldr	r2, [pc, #36]	; (80131b8 <ethernetif_init+0x54>)
 8013194:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4a08      	ldr	r2, [pc, #32]	; (80131bc <ethernetif_init+0x58>)
 801319a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f7ff fdd1 	bl	8012d44 <low_level_init>

  return ERR_OK;
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	08018578 	.word	0x08018578
 80131b0:	0801858c 	.word	0x0801858c
 80131b4:	0801859c 	.word	0x0801859c
 80131b8:	08010a65 	.word	0x08010a65
 80131bc:	08012e85 	.word	0x08012e85

080131c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80131c4:	f7ed fe70 	bl	8000ea8 <HAL_GetTick>
 80131c8:	4603      	mov	r3, r0
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	bd80      	pop	{r7, pc}
	...

080131d0 <get_my_ip>:
ip4_addr_t ipaddr;
ip4_addr_t netmask;
ip4_addr_t gw;

/* USER CODE BEGIN 2 */
uint32_t get_my_ip() {
 80131d0:	b480      	push	{r7}
 80131d2:	b083      	sub	sp, #12
 80131d4:	af00      	add	r7, sp, #0
	ip4_addr_t my_ip;
	my_ip = gnetif.ip_addr;
 80131d6:	4b05      	ldr	r3, [pc, #20]	; (80131ec <get_my_ip+0x1c>)
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	607b      	str	r3, [r7, #4]
	return my_ip.addr;
 80131dc:	687b      	ldr	r3, [r7, #4]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	370c      	adds	r7, #12
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	2000a330 	.word	0x2000a330

080131f0 <get_my_netmask>:
uint32_t get_my_netmask() {
 80131f0:	b480      	push	{r7}
 80131f2:	b083      	sub	sp, #12
 80131f4:	af00      	add	r7, sp, #0
	ip4_addr_t my_net;
	my_net = gnetif.netmask;
 80131f6:	4b05      	ldr	r3, [pc, #20]	; (801320c <get_my_netmask+0x1c>)
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	607b      	str	r3, [r7, #4]
	return my_net.addr;
 80131fc:	687b      	ldr	r3, [r7, #4]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	370c      	adds	r7, #12
 8013202:	46bd      	mov	sp, r7
 8013204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	2000a330 	.word	0x2000a330

08013210 <get_my_gateway>:
uint32_t get_my_gateway() {
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
	ip4_addr_t my_gw;
	my_gw = gnetif.gw;
 8013216:	4b05      	ldr	r3, [pc, #20]	; (801322c <get_my_gateway+0x1c>)
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	607b      	str	r3, [r7, #4]
	return my_gw.addr;
 801321c:	687b      	ldr	r3, [r7, #4]
}
 801321e:	4618      	mov	r0, r3
 8013220:	370c      	adds	r7, #12
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop
 801322c:	2000a330 	.word	0x2000a330

08013230 <iEthCtrl_UseStaticIP>:

void iEthCtrl_UseStaticIP(unsigned long ulIPAddress, unsigned long ulIPSubnetMask, unsigned long ulIPGateway) {
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
      // Check, if the network connection is up and DHCP is activated


	if (netif_is_link_up(&gnetif) && (netif_dhcp_data(&gnetif) != NULL)) {
 801323c:	4b15      	ldr	r3, [pc, #84]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 801323e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013242:	089b      	lsrs	r3, r3, #2
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	b2db      	uxtb	r3, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	d01e      	beq.n	801328c <iEthCtrl_UseStaticIP+0x5c>
 801324e:	4b11      	ldr	r3, [pc, #68]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 8013250:	6a1b      	ldr	r3, [r3, #32]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d01a      	beq.n	801328c <iEthCtrl_UseStaticIP+0x5c>
		dhcp_release(&gnetif);// Release the DHCP lease (it already calls netif_set_down() function)
 8013256:	480f      	ldr	r0, [pc, #60]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 8013258:	f7fc f878 	bl	800f34c <dhcp_release>
		dhcp_stop(&gnetif); // Stop the dhcp service
 801325c:	480d      	ldr	r0, [pc, #52]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 801325e:	f7fc f8fd 	bl	800f45c <dhcp_stop>
		netif_set_down(&gnetif); // set the interface down
 8013262:	480c      	ldr	r0, [pc, #48]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 8013264:	f7f4 fc16 	bl	8007a94 <netif_set_down>

		ipaddr.addr = ulIPAddress;
 8013268:	4a0b      	ldr	r2, [pc, #44]	; (8013298 <iEthCtrl_UseStaticIP+0x68>)
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	6013      	str	r3, [r2, #0]
		netmask.addr = ulIPSubnetMask;
 801326e:	4a0b      	ldr	r2, [pc, #44]	; (801329c <iEthCtrl_UseStaticIP+0x6c>)
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	6013      	str	r3, [r2, #0]
		gw.addr = ulIPGateway;
 8013274:	4a0a      	ldr	r2, [pc, #40]	; (80132a0 <iEthCtrl_UseStaticIP+0x70>)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6013      	str	r3, [r2, #0]

		// Set the new ip address
		netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 801327a:	4b09      	ldr	r3, [pc, #36]	; (80132a0 <iEthCtrl_UseStaticIP+0x70>)
 801327c:	4a07      	ldr	r2, [pc, #28]	; (801329c <iEthCtrl_UseStaticIP+0x6c>)
 801327e:	4906      	ldr	r1, [pc, #24]	; (8013298 <iEthCtrl_UseStaticIP+0x68>)
 8013280:	4804      	ldr	r0, [pc, #16]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 8013282:	f7f4 fb27 	bl	80078d4 <netif_set_addr>


		netif_set_up(&gnetif); // Bring the interface up again
 8013286:	4803      	ldr	r0, [pc, #12]	; (8013294 <iEthCtrl_UseStaticIP+0x64>)
 8013288:	f7f4 fbc0 	bl	8007a0c <netif_set_up>
	}
}
 801328c:	bf00      	nop
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	2000a330 	.word	0x2000a330
 8013298:	2000a364 	.word	0x2000a364
 801329c:	2000a368 	.word	0x2000a368
 80132a0:	2000a36c 	.word	0x2000a36c

080132a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b084      	sub	sp, #16
 80132a8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80132aa:	f7f3 feb2 	bl	8007012 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80132ae:	4b20      	ldr	r3, [pc, #128]	; (8013330 <MX_LWIP_Init+0x8c>)
 80132b0:	2200      	movs	r2, #0
 80132b2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80132b4:	4b1f      	ldr	r3, [pc, #124]	; (8013334 <MX_LWIP_Init+0x90>)
 80132b6:	2200      	movs	r2, #0
 80132b8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80132ba:	4b1f      	ldr	r3, [pc, #124]	; (8013338 <MX_LWIP_Init+0x94>)
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80132c0:	4b1e      	ldr	r3, [pc, #120]	; (801333c <MX_LWIP_Init+0x98>)
 80132c2:	9302      	str	r3, [sp, #8]
 80132c4:	4b1e      	ldr	r3, [pc, #120]	; (8013340 <MX_LWIP_Init+0x9c>)
 80132c6:	9301      	str	r3, [sp, #4]
 80132c8:	2300      	movs	r3, #0
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	4b1a      	ldr	r3, [pc, #104]	; (8013338 <MX_LWIP_Init+0x94>)
 80132ce:	4a19      	ldr	r2, [pc, #100]	; (8013334 <MX_LWIP_Init+0x90>)
 80132d0:	4917      	ldr	r1, [pc, #92]	; (8013330 <MX_LWIP_Init+0x8c>)
 80132d2:	481c      	ldr	r0, [pc, #112]	; (8013344 <MX_LWIP_Init+0xa0>)
 80132d4:	f7f4 faa2 	bl	800781c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80132d8:	481a      	ldr	r0, [pc, #104]	; (8013344 <MX_LWIP_Init+0xa0>)
 80132da:	f7f4 fb87 	bl	80079ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80132de:	4b19      	ldr	r3, [pc, #100]	; (8013344 <MX_LWIP_Init+0xa0>)
 80132e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80132e4:	089b      	lsrs	r3, r3, #2
 80132e6:	f003 0301 	and.w	r3, r3, #1
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80132f0:	4814      	ldr	r0, [pc, #80]	; (8013344 <MX_LWIP_Init+0xa0>)
 80132f2:	f7f4 fb8b 	bl	8007a0c <netif_set_up>
 80132f6:	e002      	b.n	80132fe <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80132f8:	4812      	ldr	r0, [pc, #72]	; (8013344 <MX_LWIP_Init+0xa0>)
 80132fa:	f7f4 fbcb 	bl	8007a94 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80132fe:	4811      	ldr	r0, [pc, #68]	; (8013344 <MX_LWIP_Init+0xa0>)
 8013300:	f7fb fbfc 	bl	800eafc <dhcp_start>

/* USER CODE BEGIN 3 */
  //read the flash and first of all check if there has been a change
   Flash_Read_Data(START_F_ADDRESS_IP, fdata_rx, 5);
 8013304:	2205      	movs	r2, #5
 8013306:	4910      	ldr	r1, [pc, #64]	; (8013348 <MX_LWIP_Init+0xa4>)
 8013308:	4810      	ldr	r0, [pc, #64]	; (801334c <MX_LWIP_Init+0xa8>)
 801330a:	f7ff fc55 	bl	8012bb8 <Flash_Read_Data>
   if(fdata_rx[1] == 1) { // it means there has been a change, so we need to change our ip according to flash content
 801330e:	4b0e      	ldr	r3, [pc, #56]	; (8013348 <MX_LWIP_Init+0xa4>)
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	2b01      	cmp	r3, #1
 8013314:	d108      	bne.n	8013328 <MX_LWIP_Init+0x84>
 	  iEthCtrl_UseStaticIP(fdata_rx[2], fdata_rx[3], fdata_rx[4]); // change the ip, mask and gw
 8013316:	4b0c      	ldr	r3, [pc, #48]	; (8013348 <MX_LWIP_Init+0xa4>)
 8013318:	6898      	ldr	r0, [r3, #8]
 801331a:	4b0b      	ldr	r3, [pc, #44]	; (8013348 <MX_LWIP_Init+0xa4>)
 801331c:	68d9      	ldr	r1, [r3, #12]
 801331e:	4b0a      	ldr	r3, [pc, #40]	; (8013348 <MX_LWIP_Init+0xa4>)
 8013320:	691b      	ldr	r3, [r3, #16]
 8013322:	461a      	mov	r2, r3
 8013324:	f7ff ff84 	bl	8013230 <iEthCtrl_UseStaticIP>
   }
/* USER CODE END 3 */
}
 8013328:	bf00      	nop
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	2000a364 	.word	0x2000a364
 8013334:	2000a368 	.word	0x2000a368
 8013338:	2000a36c 	.word	0x2000a36c
 801333c:	080124bd 	.word	0x080124bd
 8013340:	08013165 	.word	0x08013165
 8013344:	2000a330 	.word	0x2000a330
 8013348:	2000a370 	.word	0x2000a370
 801334c:	08060000 	.word	0x08060000

08013350 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8013354:	4803      	ldr	r0, [pc, #12]	; (8013364 <MX_LWIP_Process+0x14>)
 8013356:	f7ff fee5 	bl	8013124 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 801335a:	f7fa fccd 	bl	800dcf8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801335e:	bf00      	nop
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	2000a330 	.word	0x2000a330

08013368 <__NVIC_SystemReset>:
{
 8013368:	b480      	push	{r7}
 801336a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801336c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013370:	4b05      	ldr	r3, [pc, #20]	; (8013388 <__NVIC_SystemReset+0x20>)
 8013372:	68db      	ldr	r3, [r3, #12]
 8013374:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013378:	4903      	ldr	r1, [pc, #12]	; (8013388 <__NVIC_SystemReset+0x20>)
 801337a:	4b04      	ldr	r3, [pc, #16]	; (801338c <__NVIC_SystemReset+0x24>)
 801337c:	4313      	orrs	r3, r2
 801337e:	60cb      	str	r3, [r1, #12]
 8013380:	f3bf 8f4f 	dsb	sy
    __NOP();
 8013384:	bf00      	nop
 8013386:	e7fd      	b.n	8013384 <__NVIC_SystemReset+0x1c>
 8013388:	e000ed00 	.word	0xe000ed00
 801338c:	05fa0004 	.word	0x05fa0004

08013390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013390:	b590      	push	{r4, r7, lr}
 8013392:	b085      	sub	sp, #20
 8013394:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013396:	f7ed fd21 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801339a:	f000 f9f1 	bl	8013780 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);
 801339e:	20c8      	movs	r0, #200	; 0xc8
 80133a0:	f7ed fd8e 	bl	8000ec0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80133a4:	f000 fc14 	bl	8013bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80133a8:	f000 fbf2 	bl	8013b90 <MX_DMA_Init>
  MX_CAN1_Init();
 80133ac:	f000 faa4 	bl	80138f8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80133b0:	f000 fad8 	bl	8013964 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80133b4:	f000 fb6e 	bl	8013a94 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80133b8:	f000 fb0a 	bl	80139d0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80133bc:	f000 fb40 	bl	8013a40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80133c0:	f000 fb92 	bl	8013ae8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80133c4:	f000 fbba 	bl	8013b3c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80133c8:	f000 fa44 	bl	8013854 <MX_ADC1_Init>
  MX_LWIP_Init();
 80133cc:	f7ff ff6a 	bl	80132a4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80133d0:	2202      	movs	r2, #2
 80133d2:	4990      	ldr	r1, [pc, #576]	; (8013614 <main+0x284>)
 80133d4:	4890      	ldr	r0, [pc, #576]	; (8013618 <main+0x288>)
 80133d6:	f7ed fdd9 	bl	8000f8c <HAL_ADC_Start_DMA>

  httpd_init();
 80133da:	f7f3 fccb 	bl	8006d74 <httpd_init>
  myCGIinit();
 80133de:	f000 fec1 	bl	8014164 <myCGIinit>
  mySSIinit();
 80133e2:	f000 ffa3 	bl	801432c <mySSIinit>


  Flash_Read_Data(START_F_ADDRESS_IP, flash_rx_data, 5);
 80133e6:	2205      	movs	r2, #5
 80133e8:	498c      	ldr	r1, [pc, #560]	; (801361c <main+0x28c>)
 80133ea:	488d      	ldr	r0, [pc, #564]	; (8013620 <main+0x290>)
 80133ec:	f7ff fbe4 	bl	8012bb8 <Flash_Read_Data>
  print("Flash variables:\n");
 80133f0:	488c      	ldr	r0, [pc, #560]	; (8013624 <main+0x294>)
 80133f2:	f001 f883 	bl	80144fc <print>
  for(uint8_t i=0; i<5; i++) {
 80133f6:	2300      	movs	r3, #0
 80133f8:	71fb      	strb	r3, [r7, #7]
 80133fa:	e012      	b.n	8013422 <main+0x92>
	  print("%lu\n",flash_rx_data[i]);
 80133fc:	79fb      	ldrb	r3, [r7, #7]
 80133fe:	4a87      	ldr	r2, [pc, #540]	; (801361c <main+0x28c>)
 8013400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013404:	4619      	mov	r1, r3
 8013406:	4888      	ldr	r0, [pc, #544]	; (8013628 <main+0x298>)
 8013408:	f001 f878 	bl	80144fc <print>
	  flash_data[i] = flash_rx_data[i];
 801340c:	79fa      	ldrb	r2, [r7, #7]
 801340e:	79fb      	ldrb	r3, [r7, #7]
 8013410:	4982      	ldr	r1, [pc, #520]	; (801361c <main+0x28c>)
 8013412:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013416:	4985      	ldr	r1, [pc, #532]	; (801362c <main+0x29c>)
 8013418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(uint8_t i=0; i<5; i++) {
 801341c:	79fb      	ldrb	r3, [r7, #7]
 801341e:	3301      	adds	r3, #1
 8013420:	71fb      	strb	r3, [r7, #7]
 8013422:	79fb      	ldrb	r3, [r7, #7]
 8013424:	2b04      	cmp	r3, #4
 8013426:	d9e9      	bls.n	80133fc <main+0x6c>
  }
  flash_data[0]++;
 8013428:	4b80      	ldr	r3, [pc, #512]	; (801362c <main+0x29c>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	3301      	adds	r3, #1
 801342e:	4a7f      	ldr	r2, [pc, #508]	; (801362c <main+0x29c>)
 8013430:	6013      	str	r3, [r2, #0]
//  dhcp_en = (0 ? (flash_data[1] & 0x0001)==1 : 1);
  if((flash_data[1] & 0x0001) == 1) {
 8013432:	4b7e      	ldr	r3, [pc, #504]	; (801362c <main+0x29c>)
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	f003 0301 	and.w	r3, r3, #1
 801343a:	2b00      	cmp	r3, #0
 801343c:	d002      	beq.n	8013444 <main+0xb4>
	  dhcp_en = 0;
 801343e:	4b7c      	ldr	r3, [pc, #496]	; (8013630 <main+0x2a0>)
 8013440:	2200      	movs	r2, #0
 8013442:	701a      	strb	r2, [r3, #0]
  }
  Flash_Write_Data(START_F_ADDRESS_IP, flash_data, 5);
 8013444:	2205      	movs	r2, #5
 8013446:	4979      	ldr	r1, [pc, #484]	; (801362c <main+0x29c>)
 8013448:	4875      	ldr	r0, [pc, #468]	; (8013620 <main+0x290>)
 801344a:	f7ff fb59 	bl	8012b00 <Flash_Write_Data>

  for(uint8_t i=0; i<numofports; i++) {
 801344e:	2300      	movs	r3, #0
 8013450:	71bb      	strb	r3, [r7, #6]
 8013452:	e01e      	b.n	8013492 <main+0x102>
	  for(uint8_t j=0; j<numofclients; j++) {
 8013454:	2300      	movs	r3, #0
 8013456:	717b      	strb	r3, [r7, #5]
 8013458:	e015      	b.n	8013486 <main+0xf6>
		  my_tcp_init(pcb[i][j], startport + i);
 801345a:	79ba      	ldrb	r2, [r7, #6]
 801345c:	7979      	ldrb	r1, [r7, #5]
 801345e:	4875      	ldr	r0, [pc, #468]	; (8013634 <main+0x2a4>)
 8013460:	4613      	mov	r3, r2
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	4413      	add	r3, r2
 8013466:	440b      	add	r3, r1
 8013468:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801346c:	79bb      	ldrb	r3, [r7, #6]
 801346e:	b29b      	uxth	r3, r3
 8013470:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013474:	3308      	adds	r3, #8
 8013476:	b29b      	uxth	r3, r3
 8013478:	4619      	mov	r1, r3
 801347a:	4610      	mov	r0, r2
 801347c:	f001 f810 	bl	80144a0 <my_tcp_init>
	  for(uint8_t j=0; j<numofclients; j++) {
 8013480:	797b      	ldrb	r3, [r7, #5]
 8013482:	3301      	adds	r3, #1
 8013484:	717b      	strb	r3, [r7, #5]
 8013486:	797b      	ldrb	r3, [r7, #5]
 8013488:	2b02      	cmp	r3, #2
 801348a:	d9e6      	bls.n	801345a <main+0xca>
  for(uint8_t i=0; i<numofports; i++) {
 801348c:	79bb      	ldrb	r3, [r7, #6]
 801348e:	3301      	adds	r3, #1
 8013490:	71bb      	strb	r3, [r7, #6]
 8013492:	79bb      	ldrb	r3, [r7, #6]
 8013494:	2b09      	cmp	r3, #9
 8013496:	d9dd      	bls.n	8013454 <main+0xc4>
	  }
  }
#if ETH_TCP_DEBUG
  my_tcp_init(debug_pcb, TCP_DEBUG_PORT);
 8013498:	4b67      	ldr	r3, [pc, #412]	; (8013638 <main+0x2a8>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f241 7170 	movw	r1, #6000	; 0x1770
 80134a0:	4618      	mov	r0, r3
 80134a2:	f000 fffd 	bl	80144a0 <my_tcp_init>
#endif

  ADS8688_Init(&ads, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 80134a6:	2301      	movs	r3, #1
 80134a8:	4a64      	ldr	r2, [pc, #400]	; (801363c <main+0x2ac>)
 80134aa:	4965      	ldr	r1, [pc, #404]	; (8013640 <main+0x2b0>)
 80134ac:	4865      	ldr	r0, [pc, #404]	; (8013644 <main+0x2b4>)
 80134ae:	f7ff f8e1 	bl	8012674 <ADS8688_Init>

  HAL_GPIO_WritePin(E6_GPIO_Port, E6_Pin, GPIO_PIN_RESET);
 80134b2:	2200      	movs	r2, #0
 80134b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80134b8:	4863      	ldr	r0, [pc, #396]	; (8013648 <main+0x2b8>)
 80134ba:	f7f0 fde7 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WARN_GPIO_Port, WARN_Pin, GPIO_PIN_RESET);
 80134be:	2200      	movs	r2, #0
 80134c0:	2140      	movs	r1, #64	; 0x40
 80134c2:	4862      	ldr	r0, [pc, #392]	; (801364c <main+0x2bc>)
 80134c4:	f7f0 fde2 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IP_GPIO_Port, IP_Pin, GPIO_PIN_RESET);
 80134c8:	2200      	movs	r2, #0
 80134ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80134ce:	485e      	ldr	r0, [pc, #376]	; (8013648 <main+0x2b8>)
 80134d0:	f7f0 fddc 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_RESET);
 80134d4:	2200      	movs	r2, #0
 80134d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80134da:	485b      	ldr	r0, [pc, #364]	; (8013648 <main+0x2b8>)
 80134dc:	f7f0 fdd6 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_RESET);
 80134e0:	2200      	movs	r2, #0
 80134e2:	2120      	movs	r1, #32
 80134e4:	4859      	ldr	r0, [pc, #356]	; (801364c <main+0x2bc>)
 80134e6:	f7f0 fdd1 	bl	800408c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80134ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80134ee:	f7ed fce7 	bl	8000ec0 <HAL_Delay>
  HAL_GPIO_WritePin(E6_GPIO_Port, E6_Pin, GPIO_PIN_SET);
 80134f2:	2201      	movs	r2, #1
 80134f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80134f8:	4853      	ldr	r0, [pc, #332]	; (8013648 <main+0x2b8>)
 80134fa:	f7f0 fdc7 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WARN_GPIO_Port, WARN_Pin, GPIO_PIN_SET);
 80134fe:	2201      	movs	r2, #1
 8013500:	2140      	movs	r1, #64	; 0x40
 8013502:	4852      	ldr	r0, [pc, #328]	; (801364c <main+0x2bc>)
 8013504:	f7f0 fdc2 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IP_GPIO_Port, IP_Pin, GPIO_PIN_SET);
 8013508:	2201      	movs	r2, #1
 801350a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801350e:	484e      	ldr	r0, [pc, #312]	; (8013648 <main+0x2b8>)
 8013510:	f7f0 fdbc 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_SET);
 8013514:	2201      	movs	r2, #1
 8013516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801351a:	484b      	ldr	r0, [pc, #300]	; (8013648 <main+0x2b8>)
 801351c:	f7f0 fdb6 	bl	800408c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_SET);
 8013520:	2201      	movs	r2, #1
 8013522:	2120      	movs	r1, #32
 8013524:	4849      	ldr	r0, [pc, #292]	; (801364c <main+0x2bc>)
 8013526:	f7f0 fdb1 	bl	800408c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  current = HAL_GetTick();
 801352a:	f7ed fcbd 	bl	8000ea8 <HAL_GetTick>
 801352e:	4602      	mov	r2, r0
 8013530:	4b47      	ldr	r3, [pc, #284]	; (8013650 <main+0x2c0>)
 8013532:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 8013534:	f7ff ff0c 	bl	8013350 <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(previous<current) {
 8013538:	4b46      	ldr	r3, [pc, #280]	; (8013654 <main+0x2c4>)
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	4b44      	ldr	r3, [pc, #272]	; (8013650 <main+0x2c0>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	429a      	cmp	r2, r3
 8013542:	d2f2      	bcs.n	801352a <main+0x19a>
		  if(get_my_ip() != 0) {
 8013544:	f7ff fe44 	bl	80131d0 <get_my_ip>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00b      	beq.n	8013566 <main+0x1d6>
			  HAL_GPIO_WritePin(IP_GPIO_Port, IP_Pin, GPIO_PIN_RESET);
 801354e:	2200      	movs	r2, #0
 8013550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013554:	483c      	ldr	r0, [pc, #240]	; (8013648 <main+0x2b8>)
 8013556:	f7f0 fd99 	bl	800408c <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(RUN_GPIO_Port, RUN_Pin);
 801355a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801355e:	483a      	ldr	r0, [pc, #232]	; (8013648 <main+0x2b8>)
 8013560:	f7f0 fdad 	bl	80040be <HAL_GPIO_TogglePin>
 8013564:	e004      	b.n	8013570 <main+0x1e0>
		  }
		  else {
			  HAL_GPIO_TogglePin(IP_GPIO_Port, IP_Pin);
 8013566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801356a:	4837      	ldr	r0, [pc, #220]	; (8013648 <main+0x2b8>)
 801356c:	f7f0 fda7 	bl	80040be <HAL_GPIO_TogglePin>
		  }

		  my_ip = get_my_ip();
 8013570:	f7ff fe2e 	bl	80131d0 <get_my_ip>
 8013574:	4602      	mov	r2, r0
 8013576:	4b38      	ldr	r3, [pc, #224]	; (8013658 <main+0x2c8>)
 8013578:	601a      	str	r2, [r3, #0]
		  print("IP = %lu.%lu.%lu.%lu\n",(my_ip & 0xff), ((my_ip >> 8) & 0xff), ((my_ip >> 16) & 0xff), (my_ip >> 24));
 801357a:	4b37      	ldr	r3, [pc, #220]	; (8013658 <main+0x2c8>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	b2d9      	uxtb	r1, r3
 8013580:	4b35      	ldr	r3, [pc, #212]	; (8013658 <main+0x2c8>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	0a1b      	lsrs	r3, r3, #8
 8013586:	b2da      	uxtb	r2, r3
 8013588:	4b33      	ldr	r3, [pc, #204]	; (8013658 <main+0x2c8>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	0c1b      	lsrs	r3, r3, #16
 801358e:	b2d8      	uxtb	r0, r3
 8013590:	4b31      	ldr	r3, [pc, #196]	; (8013658 <main+0x2c8>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	0e1b      	lsrs	r3, r3, #24
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	4603      	mov	r3, r0
 801359a:	4830      	ldr	r0, [pc, #192]	; (801365c <main+0x2cc>)
 801359c:	f000 ffae 	bl	80144fc <print>
		  my_net = get_my_netmask();
 80135a0:	f7ff fe26 	bl	80131f0 <get_my_netmask>
 80135a4:	4602      	mov	r2, r0
 80135a6:	4b2e      	ldr	r3, [pc, #184]	; (8013660 <main+0x2d0>)
 80135a8:	601a      	str	r2, [r3, #0]
		  print("SUBNET = %lu.%lu.%lu.%lu\n",(my_net & 0xff), ((my_net >> 8) & 0xff), ((my_net >> 16) & 0xff), (my_net >> 24));
 80135aa:	4b2d      	ldr	r3, [pc, #180]	; (8013660 <main+0x2d0>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	b2d9      	uxtb	r1, r3
 80135b0:	4b2b      	ldr	r3, [pc, #172]	; (8013660 <main+0x2d0>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	0a1b      	lsrs	r3, r3, #8
 80135b6:	b2da      	uxtb	r2, r3
 80135b8:	4b29      	ldr	r3, [pc, #164]	; (8013660 <main+0x2d0>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	0c1b      	lsrs	r3, r3, #16
 80135be:	b2d8      	uxtb	r0, r3
 80135c0:	4b27      	ldr	r3, [pc, #156]	; (8013660 <main+0x2d0>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	0e1b      	lsrs	r3, r3, #24
 80135c6:	9300      	str	r3, [sp, #0]
 80135c8:	4603      	mov	r3, r0
 80135ca:	4826      	ldr	r0, [pc, #152]	; (8013664 <main+0x2d4>)
 80135cc:	f000 ff96 	bl	80144fc <print>
		  my_gw = get_my_gateway();
 80135d0:	f7ff fe1e 	bl	8013210 <get_my_gateway>
 80135d4:	4602      	mov	r2, r0
 80135d6:	4b24      	ldr	r3, [pc, #144]	; (8013668 <main+0x2d8>)
 80135d8:	601a      	str	r2, [r3, #0]
		  print("GATE = %lu.%lu.%lu.%lu\n",(my_gw & 0xff), ((my_gw >> 8) & 0xff), ((my_gw >> 16) & 0xff), (my_gw >> 24));
 80135da:	4b23      	ldr	r3, [pc, #140]	; (8013668 <main+0x2d8>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	b2d9      	uxtb	r1, r3
 80135e0:	4b21      	ldr	r3, [pc, #132]	; (8013668 <main+0x2d8>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	0a1b      	lsrs	r3, r3, #8
 80135e6:	b2da      	uxtb	r2, r3
 80135e8:	4b1f      	ldr	r3, [pc, #124]	; (8013668 <main+0x2d8>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	0c1b      	lsrs	r3, r3, #16
 80135ee:	b2d8      	uxtb	r0, r3
 80135f0:	4b1d      	ldr	r3, [pc, #116]	; (8013668 <main+0x2d8>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	0e1b      	lsrs	r3, r3, #24
 80135f6:	9300      	str	r3, [sp, #0]
 80135f8:	4603      	mov	r3, r0
 80135fa:	481c      	ldr	r0, [pc, #112]	; (801366c <main+0x2dc>)
 80135fc:	f000 ff7e 	bl	80144fc <print>

//		  Print_PHY_Registers();

		  ADS_Read_All_Raw(&ads, ads_data);
 8013600:	491b      	ldr	r1, [pc, #108]	; (8013670 <main+0x2e0>)
 8013602:	4810      	ldr	r0, [pc, #64]	; (8013644 <main+0x2b4>)
 8013604:	f7ff f992 	bl	801292c <ADS_Read_All_Raw>
		  print("-----------------------------------------------------------\n");
 8013608:	481a      	ldr	r0, [pc, #104]	; (8013674 <main+0x2e4>)
 801360a:	f000 ff77 	bl	80144fc <print>
		  for(int i=0; i<8; i++) {;
 801360e:	2300      	movs	r3, #0
 8013610:	603b      	str	r3, [r7, #0]
 8013612:	e084      	b.n	801371e <main+0x38e>
 8013614:	2000a6b4 	.word	0x2000a6b4
 8013618:	2000a4f0 	.word	0x2000a4f0
 801361c:	2000a3dc 	.word	0x2000a3dc
 8013620:	08060000 	.word	0x08060000
 8013624:	080185f8 	.word	0x080185f8
 8013628:	0801860c 	.word	0x0801860c
 801362c:	20000894 	.word	0x20000894
 8013630:	20000018 	.word	0x20000018
 8013634:	2000a6b8 	.word	0x2000a6b8
 8013638:	2000a730 	.word	0x2000a730
 801363c:	40020c00 	.word	0x40020c00
 8013640:	2000a44c 	.word	0x2000a44c
 8013644:	2000a79c 	.word	0x2000a79c
 8013648:	40020800 	.word	0x40020800
 801364c:	40021000 	.word	0x40021000
 8013650:	2000087c 	.word	0x2000087c
 8013654:	20000880 	.word	0x20000880
 8013658:	20000884 	.word	0x20000884
 801365c:	08018614 	.word	0x08018614
 8013660:	20000888 	.word	0x20000888
 8013664:	0801862c 	.word	0x0801862c
 8013668:	2000088c 	.word	0x2000088c
 801366c:	08018648 	.word	0x08018648
 8013670:	2000a4a4 	.word	0x2000a4a4
 8013674:	08018660 	.word	0x08018660
			  volt_helper = ((float)ads_data[i])*10.0/4095.0;
 8013678:	4a35      	ldr	r2, [pc, #212]	; (8013750 <main+0x3c0>)
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013680:	ee07 3a90 	vmov	s15, r3
 8013684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013688:	ee17 0a90 	vmov	r0, s15
 801368c:	f7ec ff6c 	bl	8000568 <__aeabi_f2d>
 8013690:	f04f 0200 	mov.w	r2, #0
 8013694:	4b2f      	ldr	r3, [pc, #188]	; (8013754 <main+0x3c4>)
 8013696:	f7ec ffbf 	bl	8000618 <__aeabi_dmul>
 801369a:	4603      	mov	r3, r0
 801369c:	460c      	mov	r4, r1
 801369e:	4618      	mov	r0, r3
 80136a0:	4621      	mov	r1, r4
 80136a2:	a329      	add	r3, pc, #164	; (adr r3, 8013748 <main+0x3b8>)
 80136a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a8:	f7ed f8e0 	bl	800086c <__aeabi_ddiv>
 80136ac:	4603      	mov	r3, r0
 80136ae:	460c      	mov	r4, r1
 80136b0:	4618      	mov	r0, r3
 80136b2:	4621      	mov	r1, r4
 80136b4:	f7ed f9c2 	bl	8000a3c <__aeabi_d2f>
 80136b8:	4602      	mov	r2, r0
 80136ba:	4b27      	ldr	r3, [pc, #156]	; (8013758 <main+0x3c8>)
 80136bc:	601a      	str	r2, [r3, #0]
			  volt[i] = (int)(volt_helper*100000000);
 80136be:	4b26      	ldr	r3, [pc, #152]	; (8013758 <main+0x3c8>)
 80136c0:	edd3 7a00 	vldr	s15, [r3]
 80136c4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801375c <main+0x3cc>
 80136c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136d0:	ee17 1a90 	vmov	r1, s15
 80136d4:	4a22      	ldr	r2, [pc, #136]	; (8013760 <main+0x3d0>)
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  print("CHN_%d: %d.%d volt\n", i, volt[i]/100000000, volt[i]%100000000);
 80136dc:	4a20      	ldr	r2, [pc, #128]	; (8013760 <main+0x3d0>)
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136e4:	4a1f      	ldr	r2, [pc, #124]	; (8013764 <main+0x3d4>)
 80136e6:	fb82 1203 	smull	r1, r2, r2, r3
 80136ea:	1652      	asrs	r2, r2, #25
 80136ec:	17db      	asrs	r3, r3, #31
 80136ee:	1ad0      	subs	r0, r2, r3
 80136f0:	4a1b      	ldr	r2, [pc, #108]	; (8013760 <main+0x3d0>)
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136f8:	4a1a      	ldr	r2, [pc, #104]	; (8013764 <main+0x3d4>)
 80136fa:	fb82 1203 	smull	r1, r2, r2, r3
 80136fe:	1651      	asrs	r1, r2, #25
 8013700:	17da      	asrs	r2, r3, #31
 8013702:	1a8a      	subs	r2, r1, r2
 8013704:	4918      	ldr	r1, [pc, #96]	; (8013768 <main+0x3d8>)
 8013706:	fb01 f202 	mul.w	r2, r1, r2
 801370a:	1a9a      	subs	r2, r3, r2
 801370c:	4613      	mov	r3, r2
 801370e:	4602      	mov	r2, r0
 8013710:	6839      	ldr	r1, [r7, #0]
 8013712:	4816      	ldr	r0, [pc, #88]	; (801376c <main+0x3dc>)
 8013714:	f000 fef2 	bl	80144fc <print>
		  for(int i=0; i<8; i++) {;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	3301      	adds	r3, #1
 801371c:	603b      	str	r3, [r7, #0]
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	2b07      	cmp	r3, #7
 8013722:	dda9      	ble.n	8013678 <main+0x2e8>

		  }
		  print("-----------------------------------------------------------\n");
 8013724:	4812      	ldr	r0, [pc, #72]	; (8013770 <main+0x3e0>)
 8013726:	f000 fee9 	bl	80144fc <print>

		  tcp_send_all();
 801372a:	f000 fb21 	bl	8013d70 <tcp_send_all>
		  previous = current;
 801372e:	4b11      	ldr	r3, [pc, #68]	; (8013774 <main+0x3e4>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	4a11      	ldr	r2, [pc, #68]	; (8013778 <main+0x3e8>)
 8013734:	6013      	str	r3, [r2, #0]
		  previous+=interval;
 8013736:	4b10      	ldr	r3, [pc, #64]	; (8013778 <main+0x3e8>)
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	4b10      	ldr	r3, [pc, #64]	; (801377c <main+0x3ec>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	4413      	add	r3, r2
 8013740:	4a0d      	ldr	r2, [pc, #52]	; (8013778 <main+0x3e8>)
 8013742:	6013      	str	r3, [r2, #0]
	  current = HAL_GetTick();
 8013744:	e6f1      	b.n	801352a <main+0x19a>
 8013746:	bf00      	nop
 8013748:	00000000 	.word	0x00000000
 801374c:	40affe00 	.word	0x40affe00
 8013750:	2000a4a4 	.word	0x2000a4a4
 8013754:	40240000 	.word	0x40240000
 8013758:	200008a8 	.word	0x200008a8
 801375c:	4cbebc20 	.word	0x4cbebc20
 8013760:	200008ac 	.word	0x200008ac
 8013764:	55e63b89 	.word	0x55e63b89
 8013768:	05f5e100 	.word	0x05f5e100
 801376c:	080186a0 	.word	0x080186a0
 8013770:	08018660 	.word	0x08018660
 8013774:	2000087c 	.word	0x2000087c
 8013778:	20000880 	.word	0x20000880
 801377c:	20000014 	.word	0x20000014

08013780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b094      	sub	sp, #80	; 0x50
 8013784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013786:	f107 0320 	add.w	r3, r7, #32
 801378a:	2230      	movs	r2, #48	; 0x30
 801378c:	2100      	movs	r1, #0
 801378e:	4618      	mov	r0, r3
 8013790:	f001 fadc 	bl	8014d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013794:	f107 030c 	add.w	r3, r7, #12
 8013798:	2200      	movs	r2, #0
 801379a:	601a      	str	r2, [r3, #0]
 801379c:	605a      	str	r2, [r3, #4]
 801379e:	609a      	str	r2, [r3, #8]
 80137a0:	60da      	str	r2, [r3, #12]
 80137a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80137a4:	2300      	movs	r3, #0
 80137a6:	60bb      	str	r3, [r7, #8]
 80137a8:	4b28      	ldr	r3, [pc, #160]	; (801384c <SystemClock_Config+0xcc>)
 80137aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ac:	4a27      	ldr	r2, [pc, #156]	; (801384c <SystemClock_Config+0xcc>)
 80137ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137b2:	6413      	str	r3, [r2, #64]	; 0x40
 80137b4:	4b25      	ldr	r3, [pc, #148]	; (801384c <SystemClock_Config+0xcc>)
 80137b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137bc:	60bb      	str	r3, [r7, #8]
 80137be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80137c0:	2300      	movs	r3, #0
 80137c2:	607b      	str	r3, [r7, #4]
 80137c4:	4b22      	ldr	r3, [pc, #136]	; (8013850 <SystemClock_Config+0xd0>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4a21      	ldr	r2, [pc, #132]	; (8013850 <SystemClock_Config+0xd0>)
 80137ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80137ce:	6013      	str	r3, [r2, #0]
 80137d0:	4b1f      	ldr	r3, [pc, #124]	; (8013850 <SystemClock_Config+0xd0>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137d8:	607b      	str	r3, [r7, #4]
 80137da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80137dc:	2302      	movs	r3, #2
 80137de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80137e0:	2301      	movs	r3, #1
 80137e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80137e4:	2310      	movs	r3, #16
 80137e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80137e8:	2302      	movs	r3, #2
 80137ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80137ec:	2300      	movs	r3, #0
 80137ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80137f0:	2308      	movs	r3, #8
 80137f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80137f4:	23a8      	movs	r3, #168	; 0xa8
 80137f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80137f8:	2302      	movs	r3, #2
 80137fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80137fc:	2304      	movs	r3, #4
 80137fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013800:	f107 0320 	add.w	r3, r7, #32
 8013804:	4618      	mov	r0, r3
 8013806:	f7f0 fc75 	bl	80040f4 <HAL_RCC_OscConfig>
 801380a:	4603      	mov	r3, r0
 801380c:	2b00      	cmp	r3, #0
 801380e:	d001      	beq.n	8013814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013810:	f000 fec8 	bl	80145a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013814:	230f      	movs	r3, #15
 8013816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013818:	2302      	movs	r3, #2
 801381a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801381c:	2300      	movs	r3, #0
 801381e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801382a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801382c:	f107 030c 	add.w	r3, r7, #12
 8013830:	2105      	movs	r1, #5
 8013832:	4618      	mov	r0, r3
 8013834:	f7f0 fece 	bl	80045d4 <HAL_RCC_ClockConfig>
 8013838:	4603      	mov	r3, r0
 801383a:	2b00      	cmp	r3, #0
 801383c:	d001      	beq.n	8013842 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801383e:	f000 feb1 	bl	80145a4 <Error_Handler>
  }
}
 8013842:	bf00      	nop
 8013844:	3750      	adds	r7, #80	; 0x50
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop
 801384c:	40023800 	.word	0x40023800
 8013850:	40007000 	.word	0x40007000

08013854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b084      	sub	sp, #16
 8013858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801385a:	463b      	mov	r3, r7
 801385c:	2200      	movs	r2, #0
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	605a      	str	r2, [r3, #4]
 8013862:	609a      	str	r2, [r3, #8]
 8013864:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8013866:	4b21      	ldr	r3, [pc, #132]	; (80138ec <MX_ADC1_Init+0x98>)
 8013868:	4a21      	ldr	r2, [pc, #132]	; (80138f0 <MX_ADC1_Init+0x9c>)
 801386a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801386c:	4b1f      	ldr	r3, [pc, #124]	; (80138ec <MX_ADC1_Init+0x98>)
 801386e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8013874:	4b1d      	ldr	r3, [pc, #116]	; (80138ec <MX_ADC1_Init+0x98>)
 8013876:	2200      	movs	r2, #0
 8013878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801387a:	4b1c      	ldr	r3, [pc, #112]	; (80138ec <MX_ADC1_Init+0x98>)
 801387c:	2200      	movs	r2, #0
 801387e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8013880:	4b1a      	ldr	r3, [pc, #104]	; (80138ec <MX_ADC1_Init+0x98>)
 8013882:	2201      	movs	r2, #1
 8013884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8013886:	4b19      	ldr	r3, [pc, #100]	; (80138ec <MX_ADC1_Init+0x98>)
 8013888:	2200      	movs	r2, #0
 801388a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801388e:	4b17      	ldr	r3, [pc, #92]	; (80138ec <MX_ADC1_Init+0x98>)
 8013890:	2200      	movs	r2, #0
 8013892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8013894:	4b15      	ldr	r3, [pc, #84]	; (80138ec <MX_ADC1_Init+0x98>)
 8013896:	4a17      	ldr	r2, [pc, #92]	; (80138f4 <MX_ADC1_Init+0xa0>)
 8013898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801389a:	4b14      	ldr	r3, [pc, #80]	; (80138ec <MX_ADC1_Init+0x98>)
 801389c:	2200      	movs	r2, #0
 801389e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80138a0:	4b12      	ldr	r3, [pc, #72]	; (80138ec <MX_ADC1_Init+0x98>)
 80138a2:	2201      	movs	r2, #1
 80138a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80138a6:	4b11      	ldr	r3, [pc, #68]	; (80138ec <MX_ADC1_Init+0x98>)
 80138a8:	2200      	movs	r2, #0
 80138aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <MX_ADC1_Init+0x98>)
 80138b0:	2201      	movs	r2, #1
 80138b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80138b4:	480d      	ldr	r0, [pc, #52]	; (80138ec <MX_ADC1_Init+0x98>)
 80138b6:	f7ed fb25 	bl	8000f04 <HAL_ADC_Init>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d001      	beq.n	80138c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80138c0:	f000 fe70 	bl	80145a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80138c4:	2310      	movs	r3, #16
 80138c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80138c8:	2301      	movs	r3, #1
 80138ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80138cc:	2307      	movs	r3, #7
 80138ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80138d0:	463b      	mov	r3, r7
 80138d2:	4619      	mov	r1, r3
 80138d4:	4805      	ldr	r0, [pc, #20]	; (80138ec <MX_ADC1_Init+0x98>)
 80138d6:	f7ed fc69 	bl	80011ac <HAL_ADC_ConfigChannel>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d001      	beq.n	80138e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80138e0:	f000 fe60 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80138e4:	bf00      	nop
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	2000a4f0 	.word	0x2000a4f0
 80138f0:	40012000 	.word	0x40012000
 80138f4:	0f000001 	.word	0x0f000001

080138f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80138fc:	4b17      	ldr	r3, [pc, #92]	; (801395c <MX_CAN1_Init+0x64>)
 80138fe:	4a18      	ldr	r2, [pc, #96]	; (8013960 <MX_CAN1_Init+0x68>)
 8013900:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8013902:	4b16      	ldr	r3, [pc, #88]	; (801395c <MX_CAN1_Init+0x64>)
 8013904:	2202      	movs	r2, #2
 8013906:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8013908:	4b14      	ldr	r3, [pc, #80]	; (801395c <MX_CAN1_Init+0x64>)
 801390a:	2200      	movs	r2, #0
 801390c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801390e:	4b13      	ldr	r3, [pc, #76]	; (801395c <MX_CAN1_Init+0x64>)
 8013910:	2200      	movs	r2, #0
 8013912:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8013914:	4b11      	ldr	r3, [pc, #68]	; (801395c <MX_CAN1_Init+0x64>)
 8013916:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 801391a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 801391c:	4b0f      	ldr	r3, [pc, #60]	; (801395c <MX_CAN1_Init+0x64>)
 801391e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8013922:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8013924:	4b0d      	ldr	r3, [pc, #52]	; (801395c <MX_CAN1_Init+0x64>)
 8013926:	2200      	movs	r2, #0
 8013928:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 801392a:	4b0c      	ldr	r3, [pc, #48]	; (801395c <MX_CAN1_Init+0x64>)
 801392c:	2201      	movs	r2, #1
 801392e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8013930:	4b0a      	ldr	r3, [pc, #40]	; (801395c <MX_CAN1_Init+0x64>)
 8013932:	2200      	movs	r2, #0
 8013934:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8013936:	4b09      	ldr	r3, [pc, #36]	; (801395c <MX_CAN1_Init+0x64>)
 8013938:	2200      	movs	r2, #0
 801393a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 801393c:	4b07      	ldr	r3, [pc, #28]	; (801395c <MX_CAN1_Init+0x64>)
 801393e:	2200      	movs	r2, #0
 8013940:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8013942:	4b06      	ldr	r3, [pc, #24]	; (801395c <MX_CAN1_Init+0x64>)
 8013944:	2200      	movs	r2, #0
 8013946:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8013948:	4804      	ldr	r0, [pc, #16]	; (801395c <MX_CAN1_Init+0x64>)
 801394a:	f7ed fecf 	bl	80016ec <HAL_CAN_Init>
 801394e:	4603      	mov	r3, r0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d001      	beq.n	8013958 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8013954:	f000 fe26 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8013958:	bf00      	nop
 801395a:	bd80      	pop	{r7, pc}
 801395c:	2000a774 	.word	0x2000a774
 8013960:	40006400 	.word	0x40006400

08013964 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8013968:	4b17      	ldr	r3, [pc, #92]	; (80139c8 <MX_CAN2_Init+0x64>)
 801396a:	4a18      	ldr	r2, [pc, #96]	; (80139cc <MX_CAN2_Init+0x68>)
 801396c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 801396e:	4b16      	ldr	r3, [pc, #88]	; (80139c8 <MX_CAN2_Init+0x64>)
 8013970:	2202      	movs	r2, #2
 8013972:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8013974:	4b14      	ldr	r3, [pc, #80]	; (80139c8 <MX_CAN2_Init+0x64>)
 8013976:	2200      	movs	r2, #0
 8013978:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801397a:	4b13      	ldr	r3, [pc, #76]	; (80139c8 <MX_CAN2_Init+0x64>)
 801397c:	2200      	movs	r2, #0
 801397e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8013980:	4b11      	ldr	r3, [pc, #68]	; (80139c8 <MX_CAN2_Init+0x64>)
 8013982:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8013986:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8013988:	4b0f      	ldr	r3, [pc, #60]	; (80139c8 <MX_CAN2_Init+0x64>)
 801398a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 801398e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8013990:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <MX_CAN2_Init+0x64>)
 8013992:	2200      	movs	r2, #0
 8013994:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8013996:	4b0c      	ldr	r3, [pc, #48]	; (80139c8 <MX_CAN2_Init+0x64>)
 8013998:	2201      	movs	r2, #1
 801399a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 801399c:	4b0a      	ldr	r3, [pc, #40]	; (80139c8 <MX_CAN2_Init+0x64>)
 801399e:	2200      	movs	r2, #0
 80139a0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80139a2:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <MX_CAN2_Init+0x64>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80139a8:	4b07      	ldr	r3, [pc, #28]	; (80139c8 <MX_CAN2_Init+0x64>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80139ae:	4b06      	ldr	r3, [pc, #24]	; (80139c8 <MX_CAN2_Init+0x64>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80139b4:	4804      	ldr	r0, [pc, #16]	; (80139c8 <MX_CAN2_Init+0x64>)
 80139b6:	f7ed fe99 	bl	80016ec <HAL_CAN_Init>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d001      	beq.n	80139c4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80139c0:	f000 fdf0 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80139c4:	bf00      	nop
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	2000a538 	.word	0x2000a538
 80139cc:	40006800 	.word	0x40006800

080139d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80139d4:	4b18      	ldr	r3, [pc, #96]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139d6:	4a19      	ldr	r2, [pc, #100]	; (8013a3c <MX_SPI3_Init+0x6c>)
 80139d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80139da:	4b17      	ldr	r3, [pc, #92]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80139e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80139e2:	4b15      	ldr	r3, [pc, #84]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139e4:	2200      	movs	r2, #0
 80139e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80139e8:	4b13      	ldr	r3, [pc, #76]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80139ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80139f0:	4b11      	ldr	r3, [pc, #68]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139f2:	2200      	movs	r2, #0
 80139f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80139f6:	4b10      	ldr	r3, [pc, #64]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139f8:	2201      	movs	r2, #1
 80139fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80139fc:	4b0e      	ldr	r3, [pc, #56]	; (8013a38 <MX_SPI3_Init+0x68>)
 80139fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8013a04:	4b0c      	ldr	r3, [pc, #48]	; (8013a38 <MX_SPI3_Init+0x68>)
 8013a06:	2218      	movs	r2, #24
 8013a08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013a0a:	4b0b      	ldr	r3, [pc, #44]	; (8013a38 <MX_SPI3_Init+0x68>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8013a10:	4b09      	ldr	r3, [pc, #36]	; (8013a38 <MX_SPI3_Init+0x68>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013a16:	4b08      	ldr	r3, [pc, #32]	; (8013a38 <MX_SPI3_Init+0x68>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8013a1c:	4b06      	ldr	r3, [pc, #24]	; (8013a38 <MX_SPI3_Init+0x68>)
 8013a1e:	220a      	movs	r2, #10
 8013a20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8013a22:	4805      	ldr	r0, [pc, #20]	; (8013a38 <MX_SPI3_Init+0x68>)
 8013a24:	f7f0 ffc6 	bl	80049b4 <HAL_SPI_Init>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d001      	beq.n	8013a32 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8013a2e:	f000 fdb9 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8013a32:	bf00      	nop
 8013a34:	bd80      	pop	{r7, pc}
 8013a36:	bf00      	nop
 8013a38:	2000a44c 	.word	0x2000a44c
 8013a3c:	40003c00 	.word	0x40003c00

08013a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013a44:	4b11      	ldr	r3, [pc, #68]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a46:	4a12      	ldr	r2, [pc, #72]	; (8013a90 <MX_USART1_UART_Init+0x50>)
 8013a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013a4a:	4b10      	ldr	r3, [pc, #64]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013a52:	4b0e      	ldr	r3, [pc, #56]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013a58:	4b0c      	ldr	r3, [pc, #48]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013a5e:	4b0b      	ldr	r3, [pc, #44]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a60:	2200      	movs	r2, #0
 8013a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013a64:	4b09      	ldr	r3, [pc, #36]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a66:	220c      	movs	r2, #12
 8013a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013a6a:	4b08      	ldr	r3, [pc, #32]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013a70:	4b06      	ldr	r3, [pc, #24]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013a76:	4805      	ldr	r0, [pc, #20]	; (8013a8c <MX_USART1_UART_Init+0x4c>)
 8013a78:	f7f1 fa4e 	bl	8004f18 <HAL_UART_Init>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d001      	beq.n	8013a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8013a82:	f000 fd8f 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013a86:	bf00      	nop
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	2000a560 	.word	0x2000a560
 8013a90:	40011000 	.word	0x40011000

08013a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8013a98:	4b11      	ldr	r3, [pc, #68]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013a9a:	4a12      	ldr	r2, [pc, #72]	; (8013ae4 <MX_USART2_UART_Init+0x50>)
 8013a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8013a9e:	4b10      	ldr	r3, [pc, #64]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013aa6:	4b0e      	ldr	r3, [pc, #56]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8013aac:	4b0c      	ldr	r3, [pc, #48]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8013ab2:	4b0b      	ldr	r3, [pc, #44]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8013ab8:	4b09      	ldr	r3, [pc, #36]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013aba:	220c      	movs	r2, #12
 8013abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013abe:	4b08      	ldr	r3, [pc, #32]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013ac4:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013aca:	4805      	ldr	r0, [pc, #20]	; (8013ae0 <MX_USART2_UART_Init+0x4c>)
 8013acc:	f7f1 fa24 	bl	8004f18 <HAL_UART_Init>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d001      	beq.n	8013ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8013ad6:	f000 fd65 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8013ada:	bf00      	nop
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	2000a734 	.word	0x2000a734
 8013ae4:	40004400 	.word	0x40004400

08013ae8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8013aec:	4b11      	ldr	r3, [pc, #68]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013aee:	4a12      	ldr	r2, [pc, #72]	; (8013b38 <MX_USART3_UART_Init+0x50>)
 8013af0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8013af2:	4b10      	ldr	r3, [pc, #64]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013af8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8013afa:	4b0e      	ldr	r3, [pc, #56]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013afc:	2200      	movs	r2, #0
 8013afe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8013b00:	4b0c      	ldr	r3, [pc, #48]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013b02:	2200      	movs	r2, #0
 8013b04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8013b06:	4b0b      	ldr	r3, [pc, #44]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013b08:	2200      	movs	r2, #0
 8013b0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8013b0c:	4b09      	ldr	r3, [pc, #36]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013b0e:	220c      	movs	r2, #12
 8013b10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013b12:	4b08      	ldr	r3, [pc, #32]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013b14:	2200      	movs	r2, #0
 8013b16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8013b18:	4b06      	ldr	r3, [pc, #24]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8013b1e:	4805      	ldr	r0, [pc, #20]	; (8013b34 <MX_USART3_UART_Init+0x4c>)
 8013b20:	f7f1 f9fa 	bl	8004f18 <HAL_UART_Init>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d001      	beq.n	8013b2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8013b2a:	f000 fd3b 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8013b2e:	bf00      	nop
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	2000a39c 	.word	0x2000a39c
 8013b38:	40004800 	.word	0x40004800

08013b3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8013b40:	4b11      	ldr	r3, [pc, #68]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b42:	4a12      	ldr	r2, [pc, #72]	; (8013b8c <MX_USART6_UART_Init+0x50>)
 8013b44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8013b46:	4b10      	ldr	r3, [pc, #64]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013b4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8013b4e:	4b0e      	ldr	r3, [pc, #56]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b50:	2200      	movs	r2, #0
 8013b52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8013b54:	4b0c      	ldr	r3, [pc, #48]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b56:	2200      	movs	r2, #0
 8013b58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8013b5a:	4b0b      	ldr	r3, [pc, #44]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8013b60:	4b09      	ldr	r3, [pc, #36]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b62:	220c      	movs	r2, #12
 8013b64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013b66:	4b08      	ldr	r3, [pc, #32]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b68:	2200      	movs	r2, #0
 8013b6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8013b6c:	4b06      	ldr	r3, [pc, #24]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b6e:	2200      	movs	r2, #0
 8013b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8013b72:	4805      	ldr	r0, [pc, #20]	; (8013b88 <MX_USART6_UART_Init+0x4c>)
 8013b74:	f7f1 f9d0 	bl	8004f18 <HAL_UART_Init>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d001      	beq.n	8013b82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8013b7e:	f000 fd11 	bl	80145a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8013b82:	bf00      	nop
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	2000a608 	.word	0x2000a608
 8013b8c:	40011400 	.word	0x40011400

08013b90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013b96:	2300      	movs	r3, #0
 8013b98:	607b      	str	r3, [r7, #4]
 8013b9a:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <MX_DMA_Init+0x3c>)
 8013b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b9e:	4a0b      	ldr	r2, [pc, #44]	; (8013bcc <MX_DMA_Init+0x3c>)
 8013ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8013ba6:	4b09      	ldr	r3, [pc, #36]	; (8013bcc <MX_DMA_Init+0x3c>)
 8013ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013bae:	607b      	str	r3, [r7, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	2100      	movs	r1, #0
 8013bb6:	2038      	movs	r0, #56	; 0x38
 8013bb8:	f7ee fab3 	bl	8002122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8013bbc:	2038      	movs	r0, #56	; 0x38
 8013bbe:	f7ee facc 	bl	800215a <HAL_NVIC_EnableIRQ>

}
 8013bc2:	bf00      	nop
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	40023800 	.word	0x40023800

08013bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b08c      	sub	sp, #48	; 0x30
 8013bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013bd6:	f107 031c 	add.w	r3, r7, #28
 8013bda:	2200      	movs	r2, #0
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	605a      	str	r2, [r3, #4]
 8013be0:	609a      	str	r2, [r3, #8]
 8013be2:	60da      	str	r2, [r3, #12]
 8013be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013be6:	2300      	movs	r3, #0
 8013be8:	61bb      	str	r3, [r7, #24]
 8013bea:	4b5c      	ldr	r3, [pc, #368]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bee:	4a5b      	ldr	r2, [pc, #364]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013bf0:	f043 0310 	orr.w	r3, r3, #16
 8013bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8013bf6:	4b59      	ldr	r3, [pc, #356]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfa:	f003 0310 	and.w	r3, r3, #16
 8013bfe:	61bb      	str	r3, [r7, #24]
 8013c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013c02:	2300      	movs	r3, #0
 8013c04:	617b      	str	r3, [r7, #20]
 8013c06:	4b55      	ldr	r3, [pc, #340]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c0a:	4a54      	ldr	r2, [pc, #336]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c0c:	f043 0304 	orr.w	r3, r3, #4
 8013c10:	6313      	str	r3, [r2, #48]	; 0x30
 8013c12:	4b52      	ldr	r3, [pc, #328]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c16:	f003 0304 	and.w	r3, r3, #4
 8013c1a:	617b      	str	r3, [r7, #20]
 8013c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013c1e:	2300      	movs	r3, #0
 8013c20:	613b      	str	r3, [r7, #16]
 8013c22:	4b4e      	ldr	r3, [pc, #312]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c26:	4a4d      	ldr	r2, [pc, #308]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8013c2e:	4b4b      	ldr	r3, [pc, #300]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c36:	613b      	str	r3, [r7, #16]
 8013c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	60fb      	str	r3, [r7, #12]
 8013c3e:	4b47      	ldr	r3, [pc, #284]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c42:	4a46      	ldr	r2, [pc, #280]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c44:	f043 0301 	orr.w	r3, r3, #1
 8013c48:	6313      	str	r3, [r2, #48]	; 0x30
 8013c4a:	4b44      	ldr	r3, [pc, #272]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c4e:	f003 0301 	and.w	r3, r3, #1
 8013c52:	60fb      	str	r3, [r7, #12]
 8013c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013c56:	2300      	movs	r3, #0
 8013c58:	60bb      	str	r3, [r7, #8]
 8013c5a:	4b40      	ldr	r3, [pc, #256]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c5e:	4a3f      	ldr	r2, [pc, #252]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c60:	f043 0302 	orr.w	r3, r3, #2
 8013c64:	6313      	str	r3, [r2, #48]	; 0x30
 8013c66:	4b3d      	ldr	r3, [pc, #244]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c6a:	f003 0302 	and.w	r3, r3, #2
 8013c6e:	60bb      	str	r3, [r7, #8]
 8013c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013c72:	2300      	movs	r3, #0
 8013c74:	607b      	str	r3, [r7, #4]
 8013c76:	4b39      	ldr	r3, [pc, #228]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c7a:	4a38      	ldr	r2, [pc, #224]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c7c:	f043 0308 	orr.w	r3, r3, #8
 8013c80:	6313      	str	r3, [r2, #48]	; 0x30
 8013c82:	4b36      	ldr	r3, [pc, #216]	; (8013d5c <MX_GPIO_Init+0x18c>)
 8013c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c86:	f003 0308 	and.w	r3, r3, #8
 8013c8a:	607b      	str	r3, [r7, #4]
 8013c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_Pin|WARN_Pin, GPIO_PIN_SET);
 8013c8e:	2201      	movs	r2, #1
 8013c90:	2160      	movs	r1, #96	; 0x60
 8013c92:	4833      	ldr	r0, [pc, #204]	; (8013d60 <MX_GPIO_Init+0x190>)
 8013c94:	f7f0 f9fa 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IP_Pin|RUN_Pin|E6_Pin, GPIO_PIN_SET);
 8013c98:	2201      	movs	r2, #1
 8013c9a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8013c9e:	4831      	ldr	r0, [pc, #196]	; (8013d64 <MX_GPIO_Init+0x194>)
 8013ca0:	f7f0 f9f4 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_EN_Pin|SPI3_CS_Pin, GPIO_PIN_SET);
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	f248 0101 	movw	r1, #32769	; 0x8001
 8013caa:	482f      	ldr	r0, [pc, #188]	; (8013d68 <MX_GPIO_Init+0x198>)
 8013cac:	f7f0 f9ee 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERR_Pin WARN_Pin */
  GPIO_InitStruct.Pin = ERR_Pin|WARN_Pin;
 8013cb0:	2360      	movs	r3, #96	; 0x60
 8013cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013cc0:	f107 031c 	add.w	r3, r7, #28
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4826      	ldr	r0, [pc, #152]	; (8013d60 <MX_GPIO_Init+0x190>)
 8013cc8:	f7f0 f846 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_Pin RUN_Pin E6_Pin */
  GPIO_InitStruct.Pin = IP_Pin|RUN_Pin|E6_Pin;
 8013ccc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8013cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013cde:	f107 031c 	add.w	r3, r7, #28
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	481f      	ldr	r0, [pc, #124]	; (8013d64 <MX_GPIO_Init+0x194>)
 8013ce6:	f7f0 f837 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN1_Pin;
 8013cea:	2304      	movs	r3, #4
 8013cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013cf2:	2302      	movs	r3, #2
 8013cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D_IN1_GPIO_Port, &GPIO_InitStruct);
 8013cf6:	f107 031c 	add.w	r3, r7, #28
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	481b      	ldr	r0, [pc, #108]	; (8013d6c <MX_GPIO_Init+0x19c>)
 8013cfe:	f7f0 f82b 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_IN2_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin;
 8013d02:	2380      	movs	r3, #128	; 0x80
 8013d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013d06:	2300      	movs	r3, #0
 8013d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013d0a:	2302      	movs	r3, #2
 8013d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D_IN2_GPIO_Port, &GPIO_InitStruct);
 8013d0e:	f107 031c 	add.w	r3, r7, #28
 8013d12:	4619      	mov	r1, r3
 8013d14:	4812      	ldr	r0, [pc, #72]	; (8013d60 <MX_GPIO_Init+0x190>)
 8013d16:	f7f0 f81f 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 8013d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013d20:	2301      	movs	r3, #1
 8013d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d24:	2300      	movs	r3, #0
 8013d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8013d2c:	f107 031c 	add.w	r3, r7, #28
 8013d30:	4619      	mov	r1, r3
 8013d32:	480d      	ldr	r0, [pc, #52]	; (8013d68 <MX_GPIO_Init+0x198>)
 8013d34:	f7f0 f810 	bl	8003d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d40:	2300      	movs	r3, #0
 8013d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8013d44:	2302      	movs	r3, #2
 8013d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8013d48:	f107 031c 	add.w	r3, r7, #28
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	4806      	ldr	r0, [pc, #24]	; (8013d68 <MX_GPIO_Init+0x198>)
 8013d50:	f7f0 f802 	bl	8003d58 <HAL_GPIO_Init>

}
 8013d54:	bf00      	nop
 8013d56:	3730      	adds	r7, #48	; 0x30
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	40023800 	.word	0x40023800
 8013d60:	40021000 	.word	0x40021000
 8013d64:	40020800 	.word	0x40020800
 8013d68:	40020c00 	.word	0x40020c00
 8013d6c:	40020400 	.word	0x40020400

08013d70 <tcp_send_all>:

/* USER CODE BEGIN 4 */
void tcp_send_all() {
 8013d70:	b590      	push	{r4, r7, lr}
 8013d72:	b089      	sub	sp, #36	; 0x24
 8013d74:	af00      	add	r7, sp, #0

	  for(uint8_t i=0; i<numofports; i++) {
 8013d76:	2300      	movs	r3, #0
 8013d78:	77fb      	strb	r3, [r7, #31]
 8013d7a:	e0ab      	b.n	8013ed4 <tcp_send_all+0x164>
		  char buf_out[30];
		  if(i<8) {
 8013d7c:	7ffb      	ldrb	r3, [r7, #31]
 8013d7e:	2b07      	cmp	r3, #7
 8013d80:	d81e      	bhi.n	8013dc0 <tcp_send_all+0x50>
			  sprintf(buf_out, "%d.%d\n", volt[i]/100000000, volt[i]%100000000);
 8013d82:	7ffb      	ldrb	r3, [r7, #31]
 8013d84:	4a57      	ldr	r2, [pc, #348]	; (8013ee4 <tcp_send_all+0x174>)
 8013d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d8a:	4a57      	ldr	r2, [pc, #348]	; (8013ee8 <tcp_send_all+0x178>)
 8013d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8013d90:	1652      	asrs	r2, r2, #25
 8013d92:	17db      	asrs	r3, r3, #31
 8013d94:	1ad4      	subs	r4, r2, r3
 8013d96:	7ffb      	ldrb	r3, [r7, #31]
 8013d98:	4a52      	ldr	r2, [pc, #328]	; (8013ee4 <tcp_send_all+0x174>)
 8013d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d9e:	4a52      	ldr	r2, [pc, #328]	; (8013ee8 <tcp_send_all+0x178>)
 8013da0:	fb82 1203 	smull	r1, r2, r2, r3
 8013da4:	1651      	asrs	r1, r2, #25
 8013da6:	17da      	asrs	r2, r3, #31
 8013da8:	1a8a      	subs	r2, r1, r2
 8013daa:	4950      	ldr	r1, [pc, #320]	; (8013eec <tcp_send_all+0x17c>)
 8013dac:	fb01 f202 	mul.w	r2, r1, r2
 8013db0:	1a9a      	subs	r2, r3, r2
 8013db2:	4638      	mov	r0, r7
 8013db4:	4613      	mov	r3, r2
 8013db6:	4622      	mov	r2, r4
 8013db8:	494d      	ldr	r1, [pc, #308]	; (8013ef0 <tcp_send_all+0x180>)
 8013dba:	f001 f81b 	bl	8014df4 <siprintf>
 8013dbe:	e006      	b.n	8013dce <tcp_send_all+0x5e>
		  }
		  else {
			  sprintf(buf_out, "this is port: %d\n", 5009);
 8013dc0:	463b      	mov	r3, r7
 8013dc2:	f241 3291 	movw	r2, #5009	; 0x1391
 8013dc6:	494b      	ldr	r1, [pc, #300]	; (8013ef4 <tcp_send_all+0x184>)
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f001 f813 	bl	8014df4 <siprintf>
		  }
		  for(uint8_t j=0; j<numofclients; j++) {
 8013dce:	2300      	movs	r3, #0
 8013dd0:	77bb      	strb	r3, [r7, #30]
 8013dd2:	e079      	b.n	8013ec8 <tcp_send_all+0x158>
			  if(accepted_pcb[i][j]) {
 8013dd4:	7ffa      	ldrb	r2, [r7, #31]
 8013dd6:	7fb9      	ldrb	r1, [r7, #30]
 8013dd8:	4847      	ldr	r0, [pc, #284]	; (8013ef8 <tcp_send_all+0x188>)
 8013dda:	4613      	mov	r3, r2
 8013ddc:	005b      	lsls	r3, r3, #1
 8013dde:	4413      	add	r3, r2
 8013de0:	4403      	add	r3, r0
 8013de2:	440b      	add	r3, r1
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d06a      	beq.n	8013ec2 <tcp_send_all+0x152>

				  if( pcb[i][j] != NULL && pcb[i][j]->state == ESTABLISHED) {
 8013dec:	7ffa      	ldrb	r2, [r7, #31]
 8013dee:	7fb9      	ldrb	r1, [r7, #30]
 8013df0:	4842      	ldr	r0, [pc, #264]	; (8013efc <tcp_send_all+0x18c>)
 8013df2:	4613      	mov	r3, r2
 8013df4:	005b      	lsls	r3, r3, #1
 8013df6:	4413      	add	r3, r2
 8013df8:	440b      	add	r3, r1
 8013dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d03f      	beq.n	8013e82 <tcp_send_all+0x112>
 8013e02:	7ffa      	ldrb	r2, [r7, #31]
 8013e04:	7fb9      	ldrb	r1, [r7, #30]
 8013e06:	483d      	ldr	r0, [pc, #244]	; (8013efc <tcp_send_all+0x18c>)
 8013e08:	4613      	mov	r3, r2
 8013e0a:	005b      	lsls	r3, r3, #1
 8013e0c:	4413      	add	r3, r2
 8013e0e:	440b      	add	r3, r1
 8013e10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013e14:	7d1b      	ldrb	r3, [r3, #20]
 8013e16:	2b04      	cmp	r3, #4
 8013e18:	d133      	bne.n	8013e82 <tcp_send_all+0x112>
					  if(tcp_write(pcb[i][j], &buf_out, strlen(buf_out)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8013e1a:	7ffa      	ldrb	r2, [r7, #31]
 8013e1c:	7fb9      	ldrb	r1, [r7, #30]
 8013e1e:	4837      	ldr	r0, [pc, #220]	; (8013efc <tcp_send_all+0x18c>)
 8013e20:	4613      	mov	r3, r2
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	4413      	add	r3, r2
 8013e26:	440b      	add	r3, r1
 8013e28:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8013e2c:	463b      	mov	r3, r7
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ec f9d8 	bl	80001e4 <strlen>
 8013e34:	4603      	mov	r3, r0
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	3301      	adds	r3, #1
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	4639      	mov	r1, r7
 8013e3e:	2301      	movs	r3, #1
 8013e40:	4620      	mov	r0, r4
 8013e42:	f7f8 fccd 	bl	800c7e0 <tcp_write>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d003      	beq.n	8013e54 <tcp_send_all+0xe4>
						  print("----------- FAIL: write did not return ok\n");
 8013e4c:	482c      	ldr	r0, [pc, #176]	; (8013f00 <tcp_send_all+0x190>)
 8013e4e:	f000 fb55 	bl	80144fc <print>
					  if(tcp_write(pcb[i][j], &buf_out, strlen(buf_out)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8013e52:	e036      	b.n	8013ec2 <tcp_send_all+0x152>
					  }
					  else {
						  tcp_output(pcb[i][j]);
 8013e54:	7ffa      	ldrb	r2, [r7, #31]
 8013e56:	7fb9      	ldrb	r1, [r7, #30]
 8013e58:	4828      	ldr	r0, [pc, #160]	; (8013efc <tcp_send_all+0x18c>)
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	005b      	lsls	r3, r3, #1
 8013e5e:	4413      	add	r3, r2
 8013e60:	440b      	add	r3, r1
 8013e62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7f9 f96c 	bl	800d144 <tcp_output>
						  print(buf, "+++++++   WRITING on port: %d conn %d\n", startport + i, j+1);
 8013e6c:	7ffb      	ldrb	r3, [r7, #31]
 8013e6e:	f503 529c 	add.w	r2, r3, #4992	; 0x1380
 8013e72:	3208      	adds	r2, #8
 8013e74:	7fbb      	ldrb	r3, [r7, #30]
 8013e76:	3301      	adds	r3, #1
 8013e78:	4922      	ldr	r1, [pc, #136]	; (8013f04 <tcp_send_all+0x194>)
 8013e7a:	4823      	ldr	r0, [pc, #140]	; (8013f08 <tcp_send_all+0x198>)
 8013e7c:	f000 fb3e 	bl	80144fc <print>
					  if(tcp_write(pcb[i][j], &buf_out, strlen(buf_out)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8013e80:	e01f      	b.n	8013ec2 <tcp_send_all+0x152>
					  }
				  }
				  else {
					  print("----------- Connection closed on port: %d conn %d\n", startport + i, j+1);
 8013e82:	7ffb      	ldrb	r3, [r7, #31]
 8013e84:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013e88:	3308      	adds	r3, #8
 8013e8a:	7fba      	ldrb	r2, [r7, #30]
 8013e8c:	3201      	adds	r2, #1
 8013e8e:	4619      	mov	r1, r3
 8013e90:	481e      	ldr	r0, [pc, #120]	; (8013f0c <tcp_send_all+0x19c>)
 8013e92:	f000 fb33 	bl	80144fc <print>
					  tcp_close(pcb[i][j]);
 8013e96:	7ffa      	ldrb	r2, [r7, #31]
 8013e98:	7fb9      	ldrb	r1, [r7, #30]
 8013e9a:	4818      	ldr	r0, [pc, #96]	; (8013efc <tcp_send_all+0x18c>)
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	4413      	add	r3, r2
 8013ea2:	440b      	add	r3, r1
 8013ea4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7f4 fdef 	bl	8008a8c <tcp_close>
					  accepted_pcb[i][j] = 0;
 8013eae:	7ffa      	ldrb	r2, [r7, #31]
 8013eb0:	7fb9      	ldrb	r1, [r7, #30]
 8013eb2:	4811      	ldr	r0, [pc, #68]	; (8013ef8 <tcp_send_all+0x188>)
 8013eb4:	4613      	mov	r3, r2
 8013eb6:	005b      	lsls	r3, r3, #1
 8013eb8:	4413      	add	r3, r2
 8013eba:	4403      	add	r3, r0
 8013ebc:	440b      	add	r3, r1
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	701a      	strb	r2, [r3, #0]
		  for(uint8_t j=0; j<numofclients; j++) {
 8013ec2:	7fbb      	ldrb	r3, [r7, #30]
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	77bb      	strb	r3, [r7, #30]
 8013ec8:	7fbb      	ldrb	r3, [r7, #30]
 8013eca:	2b02      	cmp	r3, #2
 8013ecc:	d982      	bls.n	8013dd4 <tcp_send_all+0x64>
	  for(uint8_t i=0; i<numofports; i++) {
 8013ece:	7ffb      	ldrb	r3, [r7, #31]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	77fb      	strb	r3, [r7, #31]
 8013ed4:	7ffb      	ldrb	r3, [r7, #31]
 8013ed6:	2b09      	cmp	r3, #9
 8013ed8:	f67f af50 	bls.w	8013d7c <tcp_send_all+0xc>
				  }
			  }
		  }

	  }
}
 8013edc:	bf00      	nop
 8013ede:	3724      	adds	r7, #36	; 0x24
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd90      	pop	{r4, r7, pc}
 8013ee4:	200008ac 	.word	0x200008ac
 8013ee8:	55e63b89 	.word	0x55e63b89
 8013eec:	05f5e100 	.word	0x05f5e100
 8013ef0:	080186b4 	.word	0x080186b4
 8013ef4:	080186bc 	.word	0x080186bc
 8013ef8:	2000a4b4 	.word	0x2000a4b4
 8013efc:	2000a6b8 	.word	0x2000a6b8
 8013f00:	080186d0 	.word	0x080186d0
 8013f04:	080186fc 	.word	0x080186fc
 8013f08:	2000a648 	.word	0x2000a648
 8013f0c:	08018724 	.word	0x08018724

08013f10 <NetCGIhandler>:

const char* NetCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8013f10:	b590      	push	{r4, r7, lr}
 8013f12:	b087      	sub	sp, #28
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
 8013f1c:	603b      	str	r3, [r7, #0]
	int offset = 0;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	617b      	str	r3, [r7, #20]
	if (strcmp(pcParam[0], "dhcp") == 0) {
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4983      	ldr	r1, [pc, #524]	; (8014134 <NetCGIhandler+0x224>)
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ec f951 	bl	80001d0 <strcmp>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d11e      	bne.n	8013f72 <NetCGIhandler+0x62>
		offset = 1;
 8013f34:	2301      	movs	r3, #1
 8013f36:	617b      	str	r3, [r7, #20]
		if (strcmp(pcValue[0], "1") == 0) { // submitted checked
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	497e      	ldr	r1, [pc, #504]	; (8014138 <NetCGIhandler+0x228>)
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ec f946 	bl	80001d0 <strcmp>
 8013f44:	4603      	mov	r3, r0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d113      	bne.n	8013f72 <NetCGIhandler+0x62>
			if(!dhcp_en) { 	// this means that dhcp was disabled and we want to enable it
 8013f4a:	4b7c      	ldr	r3, [pc, #496]	; (801413c <NetCGIhandler+0x22c>)
 8013f4c:	781b      	ldrb	r3, [r3, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d10f      	bne.n	8013f72 <NetCGIhandler+0x62>
				print("---------------------------------------------------\n");
 8013f52:	487b      	ldr	r0, [pc, #492]	; (8014140 <NetCGIhandler+0x230>)
 8013f54:	f000 fad2 	bl	80144fc <print>
				print(" -Got request to enable DHCP\n");
 8013f58:	487a      	ldr	r0, [pc, #488]	; (8014144 <NetCGIhandler+0x234>)
 8013f5a:	f000 facf 	bl	80144fc <print>
				flash_data[1] = 0;
 8013f5e:	4b7a      	ldr	r3, [pc, #488]	; (8014148 <NetCGIhandler+0x238>)
 8013f60:	2200      	movs	r2, #0
 8013f62:	605a      	str	r2, [r3, #4]
				Flash_Write_Data(START_F_ADDRESS_IP, flash_data, 5);
 8013f64:	2205      	movs	r2, #5
 8013f66:	4978      	ldr	r1, [pc, #480]	; (8014148 <NetCGIhandler+0x238>)
 8013f68:	4878      	ldr	r0, [pc, #480]	; (801414c <NetCGIhandler+0x23c>)
 8013f6a:	f7fe fdc9 	bl	8012b00 <Flash_Write_Data>
				NVIC_SystemReset();
 8013f6e:	f7ff f9fb 	bl	8013368 <__NVIC_SystemReset>
			}
		}
	}
	if(strcmp(pcParam[0+offset], "ip_1") == 0 && !offset) {
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	4413      	add	r3, r2
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4974      	ldr	r1, [pc, #464]	; (8014150 <NetCGIhandler+0x240>)
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7ec f926 	bl	80001d0 <strcmp>
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f040 80ce 	bne.w	8014128 <NetCGIhandler+0x218>
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	f040 80ca 	bne.w	8014128 <NetCGIhandler+0x218>
		if(iNumParams >= 12) {																	// NOT SURE IF NEDDED !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	2b0b      	cmp	r3, #11
 8013f98:	f340 80c3 	ble.w	8014122 <NetCGIhandler+0x212>
			print("---------------------------------------------------\n");
 8013f9c:	4868      	ldr	r0, [pc, #416]	; (8014140 <NetCGIhandler+0x230>)
 8013f9e:	f000 faad 	bl	80144fc <print>
			print(" -Got request to change network setting to:\n");
 8013fa2:	486c      	ldr	r0, [pc, #432]	; (8014154 <NetCGIhandler+0x244>)
 8013fa4:	f000 faaa 	bl	80144fc <print>

			for(int i = 0; i < iNumParams-offset; i++) {
 8013fa8:	2300      	movs	r3, #0
 8013faa:	613b      	str	r3, [r7, #16]
 8013fac:	e014      	b.n	8013fd8 <NetCGIhandler+0xc8>
				print("%s: %s\n", pcParam[i+offset], pcValue[i+offset]);
 8013fae:	693a      	ldr	r2, [r7, #16]
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	4413      	add	r3, r2
 8013fba:	6819      	ldr	r1, [r3, #0]
 8013fbc:	693a      	ldr	r2, [r7, #16]
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	4413      	add	r3, r2
 8013fc2:	009b      	lsls	r3, r3, #2
 8013fc4:	683a      	ldr	r2, [r7, #0]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	4862      	ldr	r0, [pc, #392]	; (8014158 <NetCGIhandler+0x248>)
 8013fce:	f000 fa95 	bl	80144fc <print>
			for(int i = 0; i < iNumParams-offset; i++) {
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	3301      	adds	r3, #1
 8013fd6:	613b      	str	r3, [r7, #16]
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	1ad3      	subs	r3, r2, r3
 8013fde:	693a      	ldr	r2, [r7, #16]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	dbe4      	blt.n	8013fae <NetCGIhandler+0x9e>
			}
			print("---------------------------------------------------\n");
 8013fe4:	4856      	ldr	r0, [pc, #344]	; (8014140 <NetCGIhandler+0x230>)
 8013fe6:	f000 fa89 	bl	80144fc <print>

			flash_data[1] = 1;
 8013fea:	4b57      	ldr	r3, [pc, #348]	; (8014148 <NetCGIhandler+0x238>)
 8013fec:	2201      	movs	r2, #1
 8013fee:	605a      	str	r2, [r3, #4]
			flash_data[2] = (uint32_t)(atoi(pcValue[0+offset])<<0) + (uint32_t)(atoi(pcValue[1+offset])<<8) + (uint32_t)(atoi(pcValue[2+offset])<<16) + (uint32_t)(atoi(pcValue[3+offset])<<24);
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f000 fe63 	bl	8014cc6 <atoi>
 8014000:	4603      	mov	r3, r0
 8014002:	461c      	mov	r4, r3
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	3301      	adds	r3, #1
 8014008:	009b      	lsls	r3, r3, #2
 801400a:	683a      	ldr	r2, [r7, #0]
 801400c:	4413      	add	r3, r2
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	4618      	mov	r0, r3
 8014012:	f000 fe58 	bl	8014cc6 <atoi>
 8014016:	4603      	mov	r3, r0
 8014018:	021b      	lsls	r3, r3, #8
 801401a:	441c      	add	r4, r3
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	3302      	adds	r3, #2
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	4413      	add	r3, r2
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4618      	mov	r0, r3
 801402a:	f000 fe4c 	bl	8014cc6 <atoi>
 801402e:	4603      	mov	r3, r0
 8014030:	041b      	lsls	r3, r3, #16
 8014032:	441c      	add	r4, r3
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	3303      	adds	r3, #3
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	683a      	ldr	r2, [r7, #0]
 801403c:	4413      	add	r3, r2
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4618      	mov	r0, r3
 8014042:	f000 fe40 	bl	8014cc6 <atoi>
 8014046:	4603      	mov	r3, r0
 8014048:	061b      	lsls	r3, r3, #24
 801404a:	4423      	add	r3, r4
 801404c:	4a3e      	ldr	r2, [pc, #248]	; (8014148 <NetCGIhandler+0x238>)
 801404e:	6093      	str	r3, [r2, #8]
			flash_data[3] = (uint32_t)(atoi(pcValue[4+offset])<<0) + (uint32_t)(atoi(pcValue[5+offset])<<8) + (uint32_t)(atoi(pcValue[6+offset])<<16) + (uint32_t)(atoi(pcValue[7+offset])<<24);
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	3304      	adds	r3, #4
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	4413      	add	r3, r2
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4618      	mov	r0, r3
 801405e:	f000 fe32 	bl	8014cc6 <atoi>
 8014062:	4603      	mov	r3, r0
 8014064:	461c      	mov	r4, r3
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	3305      	adds	r3, #5
 801406a:	009b      	lsls	r3, r3, #2
 801406c:	683a      	ldr	r2, [r7, #0]
 801406e:	4413      	add	r3, r2
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4618      	mov	r0, r3
 8014074:	f000 fe27 	bl	8014cc6 <atoi>
 8014078:	4603      	mov	r3, r0
 801407a:	021b      	lsls	r3, r3, #8
 801407c:	441c      	add	r4, r3
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	3306      	adds	r3, #6
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	683a      	ldr	r2, [r7, #0]
 8014086:	4413      	add	r3, r2
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	4618      	mov	r0, r3
 801408c:	f000 fe1b 	bl	8014cc6 <atoi>
 8014090:	4603      	mov	r3, r0
 8014092:	041b      	lsls	r3, r3, #16
 8014094:	441c      	add	r4, r3
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	3307      	adds	r3, #7
 801409a:	009b      	lsls	r3, r3, #2
 801409c:	683a      	ldr	r2, [r7, #0]
 801409e:	4413      	add	r3, r2
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f000 fe0f 	bl	8014cc6 <atoi>
 80140a8:	4603      	mov	r3, r0
 80140aa:	061b      	lsls	r3, r3, #24
 80140ac:	4423      	add	r3, r4
 80140ae:	4a26      	ldr	r2, [pc, #152]	; (8014148 <NetCGIhandler+0x238>)
 80140b0:	60d3      	str	r3, [r2, #12]
			flash_data[4] = (uint32_t)(atoi(pcValue[8+offset])<<0) + (uint32_t)(atoi(pcValue[9+offset])<<8) + (uint32_t)(atoi(pcValue[10+offset])<<16) + (uint32_t)(atoi(pcValue[11+offset])<<24);
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	3308      	adds	r3, #8
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	4413      	add	r3, r2
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	4618      	mov	r0, r3
 80140c0:	f000 fe01 	bl	8014cc6 <atoi>
 80140c4:	4603      	mov	r3, r0
 80140c6:	461c      	mov	r4, r3
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	3309      	adds	r3, #9
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	683a      	ldr	r2, [r7, #0]
 80140d0:	4413      	add	r3, r2
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f000 fdf6 	bl	8014cc6 <atoi>
 80140da:	4603      	mov	r3, r0
 80140dc:	021b      	lsls	r3, r3, #8
 80140de:	441c      	add	r4, r3
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	330a      	adds	r3, #10
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	683a      	ldr	r2, [r7, #0]
 80140e8:	4413      	add	r3, r2
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	4618      	mov	r0, r3
 80140ee:	f000 fdea 	bl	8014cc6 <atoi>
 80140f2:	4603      	mov	r3, r0
 80140f4:	041b      	lsls	r3, r3, #16
 80140f6:	441c      	add	r4, r3
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	330b      	adds	r3, #11
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	683a      	ldr	r2, [r7, #0]
 8014100:	4413      	add	r3, r2
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4618      	mov	r0, r3
 8014106:	f000 fdde 	bl	8014cc6 <atoi>
 801410a:	4603      	mov	r3, r0
 801410c:	061b      	lsls	r3, r3, #24
 801410e:	4423      	add	r3, r4
 8014110:	4a0d      	ldr	r2, [pc, #52]	; (8014148 <NetCGIhandler+0x238>)
 8014112:	6113      	str	r3, [r2, #16]
			Flash_Write_Data(START_F_ADDRESS_IP, flash_data, 5);
 8014114:	2205      	movs	r2, #5
 8014116:	490c      	ldr	r1, [pc, #48]	; (8014148 <NetCGIhandler+0x238>)
 8014118:	480c      	ldr	r0, [pc, #48]	; (801414c <NetCGIhandler+0x23c>)
 801411a:	f7fe fcf1 	bl	8012b00 <Flash_Write_Data>
			NVIC_SystemReset();
 801411e:	f7ff f923 	bl	8013368 <__NVIC_SystemReset>
		}
		else {
			print(" -Something went wrong with the parameters...they are less than 11\n");
 8014122:	480e      	ldr	r0, [pc, #56]	; (801415c <NetCGIhandler+0x24c>)
 8014124:	f000 f9ea 	bl	80144fc <print>
		}

	}
	return "/index.shtml";
 8014128:	4b0d      	ldr	r3, [pc, #52]	; (8014160 <NetCGIhandler+0x250>)
}
 801412a:	4618      	mov	r0, r3
 801412c:	371c      	adds	r7, #28
 801412e:	46bd      	mov	sp, r7
 8014130:	bd90      	pop	{r4, r7, pc}
 8014132:	bf00      	nop
 8014134:	08018758 	.word	0x08018758
 8014138:	08018760 	.word	0x08018760
 801413c:	20000018 	.word	0x20000018
 8014140:	08018764 	.word	0x08018764
 8014144:	0801879c 	.word	0x0801879c
 8014148:	20000894 	.word	0x20000894
 801414c:	08060000 	.word	0x08060000
 8014150:	080187bc 	.word	0x080187bc
 8014154:	080187c4 	.word	0x080187c4
 8014158:	080187f4 	.word	0x080187f4
 801415c:	080187fc 	.word	0x080187fc
 8014160:	08018840 	.word	0x08018840

08014164 <myCGIinit>:

void myCGIinit(void) {
 8014164:	b580      	push	{r7, lr}
 8014166:	af00      	add	r7, sp, #0
    //add LED control CGI to the table
    theCGItable[0] = NetCGI;
 8014168:	4b05      	ldr	r3, [pc, #20]	; (8014180 <myCGIinit+0x1c>)
 801416a:	4a06      	ldr	r2, [pc, #24]	; (8014184 <myCGIinit+0x20>)
 801416c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014170:	e883 0003 	stmia.w	r3, {r0, r1}
    //give the table to the HTTP server
    http_set_cgi_handlers(theCGItable, numCGIhandlers);
 8014174:	2101      	movs	r1, #1
 8014176:	4802      	ldr	r0, [pc, #8]	; (8014180 <myCGIinit+0x1c>)
 8014178:	f7f2 fe8a 	bl	8006e90 <http_set_cgi_handlers>
}
 801417c:	bf00      	nop
 801417e:	bd80      	pop	{r7, pc}
 8014180:	2000a600 	.word	0x2000a600
 8014184:	0801982c 	.word	0x0801982c

08014188 <mySSIHandler>:

u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 8014188:	b590      	push	{r4, r7, lr}
 801418a:	b095      	sub	sp, #84	; 0x54
 801418c:	af02      	add	r7, sp, #8
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
	char *tmp;
	tmp = "";
 8014194:	4b5a      	ldr	r3, [pc, #360]	; (8014300 <mySSIHandler+0x178>)
 8014196:	647b      	str	r3, [r7, #68]	; 0x44
	if (iIndex == 0) {// dhcp status
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10c      	bne.n	80141b8 <mySSIHandler+0x30>
		if(dhcp_en) {
 801419e:	4b59      	ldr	r3, [pc, #356]	; (8014304 <mySSIHandler+0x17c>)
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d002      	beq.n	80141ac <mySSIHandler+0x24>
			tmp = "ON";
 80141a6:	4b58      	ldr	r3, [pc, #352]	; (8014308 <mySSIHandler+0x180>)
 80141a8:	647b      	str	r3, [r7, #68]	; 0x44
 80141aa:	e09b      	b.n	80142e4 <mySSIHandler+0x15c>
		}
		else {
			tmp = "OFF";
 80141ac:	4b57      	ldr	r3, [pc, #348]	; (801430c <mySSIHandler+0x184>)
 80141ae:	647b      	str	r3, [r7, #68]	; 0x44
			request_static = 1;
 80141b0:	4b57      	ldr	r3, [pc, #348]	; (8014310 <mySSIHandler+0x188>)
 80141b2:	2201      	movs	r2, #1
 80141b4:	701a      	strb	r2, [r3, #0]
 80141b6:	e095      	b.n	80142e4 <mySSIHandler+0x15c>
		}
	}
	else if (iIndex == 1) {	// ip address
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d129      	bne.n	8014212 <mySSIHandler+0x8a>
		my_ip = get_my_ip();
 80141be:	f7ff f807 	bl	80131d0 <get_my_ip>
 80141c2:	4602      	mov	r2, r0
 80141c4:	4b53      	ldr	r3, [pc, #332]	; (8014314 <mySSIHandler+0x18c>)
 80141c6:	601a      	str	r2, [r3, #0]
		char tmp1[50];
		sprintf(tmp1, "%lu.%lu.%lu.%lu",(my_ip & 0xff), ((my_ip >> 8) & 0xff), ((my_ip >> 16) & 0xff), (my_ip >> 24));
 80141c8:	4b52      	ldr	r3, [pc, #328]	; (8014314 <mySSIHandler+0x18c>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	b2d9      	uxtb	r1, r3
 80141ce:	4b51      	ldr	r3, [pc, #324]	; (8014314 <mySSIHandler+0x18c>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	0a1b      	lsrs	r3, r3, #8
 80141d4:	b2dc      	uxtb	r4, r3
 80141d6:	4b4f      	ldr	r3, [pc, #316]	; (8014314 <mySSIHandler+0x18c>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	0c1b      	lsrs	r3, r3, #16
 80141dc:	b2db      	uxtb	r3, r3
 80141de:	4a4d      	ldr	r2, [pc, #308]	; (8014314 <mySSIHandler+0x18c>)
 80141e0:	6812      	ldr	r2, [r2, #0]
 80141e2:	0e12      	lsrs	r2, r2, #24
 80141e4:	f107 0010 	add.w	r0, r7, #16
 80141e8:	9201      	str	r2, [sp, #4]
 80141ea:	9300      	str	r3, [sp, #0]
 80141ec:	4623      	mov	r3, r4
 80141ee:	460a      	mov	r2, r1
 80141f0:	4949      	ldr	r1, [pc, #292]	; (8014318 <mySSIHandler+0x190>)
 80141f2:	f000 fdff 	bl	8014df4 <siprintf>
		strcpy(pcInsert, tmp1);
 80141f6:	f107 0310 	add.w	r3, r7, #16
 80141fa:	4619      	mov	r1, r3
 80141fc:	68b8      	ldr	r0, [r7, #8]
 80141fe:	f000 fe26 	bl	8014e4e <strcpy>
		return strlen(tmp1);
 8014202:	f107 0310 	add.w	r3, r7, #16
 8014206:	4618      	mov	r0, r3
 8014208:	f7eb ffec 	bl	80001e4 <strlen>
 801420c:	4603      	mov	r3, r0
 801420e:	b29b      	uxth	r3, r3
 8014210:	e071      	b.n	80142f6 <mySSIHandler+0x16e>
	}
	else if (iIndex == 2) {	// subnet mask
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2b02      	cmp	r3, #2
 8014216:	d129      	bne.n	801426c <mySSIHandler+0xe4>
		my_ip = get_my_netmask();
 8014218:	f7fe ffea 	bl	80131f0 <get_my_netmask>
 801421c:	4602      	mov	r2, r0
 801421e:	4b3d      	ldr	r3, [pc, #244]	; (8014314 <mySSIHandler+0x18c>)
 8014220:	601a      	str	r2, [r3, #0]
		char tmp1[50];
		sprintf(tmp1, "%lu.%lu.%lu.%lu",(my_net & 0xff), ((my_net >> 8) & 0xff), ((my_net >> 16) & 0xff), (my_net >> 24));
 8014222:	4b3e      	ldr	r3, [pc, #248]	; (801431c <mySSIHandler+0x194>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	b2d9      	uxtb	r1, r3
 8014228:	4b3c      	ldr	r3, [pc, #240]	; (801431c <mySSIHandler+0x194>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	0a1b      	lsrs	r3, r3, #8
 801422e:	b2dc      	uxtb	r4, r3
 8014230:	4b3a      	ldr	r3, [pc, #232]	; (801431c <mySSIHandler+0x194>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	0c1b      	lsrs	r3, r3, #16
 8014236:	b2db      	uxtb	r3, r3
 8014238:	4a38      	ldr	r2, [pc, #224]	; (801431c <mySSIHandler+0x194>)
 801423a:	6812      	ldr	r2, [r2, #0]
 801423c:	0e12      	lsrs	r2, r2, #24
 801423e:	f107 0010 	add.w	r0, r7, #16
 8014242:	9201      	str	r2, [sp, #4]
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	4623      	mov	r3, r4
 8014248:	460a      	mov	r2, r1
 801424a:	4933      	ldr	r1, [pc, #204]	; (8014318 <mySSIHandler+0x190>)
 801424c:	f000 fdd2 	bl	8014df4 <siprintf>
		strcpy(pcInsert, tmp1);
 8014250:	f107 0310 	add.w	r3, r7, #16
 8014254:	4619      	mov	r1, r3
 8014256:	68b8      	ldr	r0, [r7, #8]
 8014258:	f000 fdf9 	bl	8014e4e <strcpy>
		return strlen(tmp1);
 801425c:	f107 0310 	add.w	r3, r7, #16
 8014260:	4618      	mov	r0, r3
 8014262:	f7eb ffbf 	bl	80001e4 <strlen>
 8014266:	4603      	mov	r3, r0
 8014268:	b29b      	uxth	r3, r3
 801426a:	e044      	b.n	80142f6 <mySSIHandler+0x16e>
	}
	else if (iIndex == 3) {	// default gateway
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2b03      	cmp	r3, #3
 8014270:	d129      	bne.n	80142c6 <mySSIHandler+0x13e>
		my_ip = get_my_gateway();
 8014272:	f7fe ffcd 	bl	8013210 <get_my_gateway>
 8014276:	4602      	mov	r2, r0
 8014278:	4b26      	ldr	r3, [pc, #152]	; (8014314 <mySSIHandler+0x18c>)
 801427a:	601a      	str	r2, [r3, #0]
		char tmp1[50];
		sprintf(tmp1, "%lu.%lu.%lu.%lu",(my_gw & 0xff), ((my_gw >> 8) & 0xff), ((my_gw >> 16) & 0xff), (my_gw >> 24));
 801427c:	4b28      	ldr	r3, [pc, #160]	; (8014320 <mySSIHandler+0x198>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	b2d9      	uxtb	r1, r3
 8014282:	4b27      	ldr	r3, [pc, #156]	; (8014320 <mySSIHandler+0x198>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	0a1b      	lsrs	r3, r3, #8
 8014288:	b2dc      	uxtb	r4, r3
 801428a:	4b25      	ldr	r3, [pc, #148]	; (8014320 <mySSIHandler+0x198>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	0c1b      	lsrs	r3, r3, #16
 8014290:	b2db      	uxtb	r3, r3
 8014292:	4a23      	ldr	r2, [pc, #140]	; (8014320 <mySSIHandler+0x198>)
 8014294:	6812      	ldr	r2, [r2, #0]
 8014296:	0e12      	lsrs	r2, r2, #24
 8014298:	f107 0010 	add.w	r0, r7, #16
 801429c:	9201      	str	r2, [sp, #4]
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	4623      	mov	r3, r4
 80142a2:	460a      	mov	r2, r1
 80142a4:	491c      	ldr	r1, [pc, #112]	; (8014318 <mySSIHandler+0x190>)
 80142a6:	f000 fda5 	bl	8014df4 <siprintf>
		strcpy(pcInsert, tmp1);
 80142aa:	f107 0310 	add.w	r3, r7, #16
 80142ae:	4619      	mov	r1, r3
 80142b0:	68b8      	ldr	r0, [r7, #8]
 80142b2:	f000 fdcc 	bl	8014e4e <strcpy>
		return strlen(tmp1);
 80142b6:	f107 0310 	add.w	r3, r7, #16
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7eb ff92 	bl	80001e4 <strlen>
 80142c0:	4603      	mov	r3, r0
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	e017      	b.n	80142f6 <mySSIHandler+0x16e>
	}
	else if (iIndex == 4) {	// dhcp checkbox
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2b04      	cmp	r3, #4
 80142ca:	d109      	bne.n	80142e0 <mySSIHandler+0x158>
		if (dhcp_en) {
 80142cc:	4b0d      	ldr	r3, [pc, #52]	; (8014304 <mySSIHandler+0x17c>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d002      	beq.n	80142da <mySSIHandler+0x152>
			tmp = "<input value=\"1\" name=\"dhcp\" type=\"checkbox\" checked>";
 80142d4:	4b13      	ldr	r3, [pc, #76]	; (8014324 <mySSIHandler+0x19c>)
 80142d6:	647b      	str	r3, [r7, #68]	; 0x44
 80142d8:	e004      	b.n	80142e4 <mySSIHandler+0x15c>
		}
		else {
			tmp ="<input value=\"1\" name=\"dhcp\" type=\"checkbox\">";
 80142da:	4b13      	ldr	r3, [pc, #76]	; (8014328 <mySSIHandler+0x1a0>)
 80142dc:	647b      	str	r3, [r7, #68]	; 0x44
 80142de:	e001      	b.n	80142e4 <mySSIHandler+0x15c>
//		else {
//			tmp = "";
//		}
//	}
	else {
		tmp = "";
 80142e0:	4b07      	ldr	r3, [pc, #28]	; (8014300 <mySSIHandler+0x178>)
 80142e2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	strcpy(pcInsert, tmp);
 80142e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80142e6:	68b8      	ldr	r0, [r7, #8]
 80142e8:	f000 fdb1 	bl	8014e4e <strcpy>
	return strlen(tmp);
 80142ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80142ee:	f7eb ff79 	bl	80001e4 <strlen>
 80142f2:	4603      	mov	r3, r0
 80142f4:	b29b      	uxth	r3, r3
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	374c      	adds	r7, #76	; 0x4c
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd90      	pop	{r4, r7, pc}
 80142fe:	bf00      	nop
 8014300:	08018850 	.word	0x08018850
 8014304:	20000018 	.word	0x20000018
 8014308:	08018854 	.word	0x08018854
 801430c:	08018858 	.word	0x08018858
 8014310:	20000890 	.word	0x20000890
 8014314:	20000884 	.word	0x20000884
 8014318:	0801885c 	.word	0x0801885c
 801431c:	20000888 	.word	0x20000888
 8014320:	2000088c 	.word	0x2000088c
 8014324:	0801886c 	.word	0x0801886c
 8014328:	080188a4 	.word	0x080188a4

0801432c <mySSIinit>:

void mySSIinit(void) {
 801432c:	b580      	push	{r7, lr}
 801432e:	af00      	add	r7, sp, #0
	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,numSSItags);
 8014330:	2205      	movs	r2, #5
 8014332:	4903      	ldr	r1, [pc, #12]	; (8014340 <mySSIinit+0x14>)
 8014334:	4803      	ldr	r0, [pc, #12]	; (8014344 <mySSIinit+0x18>)
 8014336:	f7f2 fd69 	bl	8006e0c <http_set_ssi_handler>
}
 801433a:	bf00      	nop
 801433c:	bd80      	pop	{r7, pc}
 801433e:	bf00      	nop
 8014340:	2000001c 	.word	0x2000001c
 8014344:	08014189 	.word	0x08014189

08014348 <CAN1_Rx>:
	print("Sending Message to can 2\n");
	while(HAL_CAN_IsTxMessagePending(&hcan2, TxMailbox));
	print("Message Sent to can 2\n");
}

void CAN1_Rx() {
 8014348:	b580      	push	{r7, lr}
 801434a:	af00      	add	r7, sp, #0
	 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader1, r1);
 801434c:	4b05      	ldr	r3, [pc, #20]	; (8014364 <CAN1_Rx+0x1c>)
 801434e:	4a06      	ldr	r2, [pc, #24]	; (8014368 <CAN1_Rx+0x20>)
 8014350:	2100      	movs	r1, #0
 8014352:	4806      	ldr	r0, [pc, #24]	; (801436c <CAN1_Rx+0x24>)
 8014354:	f7ed fac5 	bl	80018e2 <HAL_CAN_GetRxMessage>

	 //dont forget to add and enable filters

	 switch(RxHeader1.StdId) {
 8014358:	4b03      	ldr	r3, [pc, #12]	; (8014368 <CAN1_Rx+0x20>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	2b00      	cmp	r3, #0

	 case 0x000 :

		 break;
 801435e:	bf00      	nop
	 }

}
 8014360:	bf00      	nop
 8014362:	bd80      	pop	{r7, pc}
 8014364:	2000a7a8 	.word	0x2000a7a8
 8014368:	2000a3f0 	.word	0x2000a3f0
 801436c:	2000a774 	.word	0x2000a774

08014370 <CAN2_Rx>:

void CAN2_Rx() {
 8014370:	b580      	push	{r7, lr}
 8014372:	af00      	add	r7, sp, #0
	 HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader2, r2);
 8014374:	4b05      	ldr	r3, [pc, #20]	; (801438c <CAN2_Rx+0x1c>)
 8014376:	4a06      	ldr	r2, [pc, #24]	; (8014390 <CAN2_Rx+0x20>)
 8014378:	2100      	movs	r1, #0
 801437a:	4806      	ldr	r0, [pc, #24]	; (8014394 <CAN2_Rx+0x24>)
 801437c:	f7ed fab1 	bl	80018e2 <HAL_CAN_GetRxMessage>

	 //dont forget to add and enable filters

	 switch(RxHeader2.StdId) {
 8014380:	4b03      	ldr	r3, [pc, #12]	; (8014390 <CAN2_Rx+0x20>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0

	 case 0x000 :

		 break;
 8014386:	bf00      	nop
	 }

}
 8014388:	bf00      	nop
 801438a:	bd80      	pop	{r7, pc}
 801438c:	2000a6ac 	.word	0x2000a6ac
 8014390:	2000a4d4 	.word	0x2000a4d4
 8014394:	2000a538 	.word	0x2000a538

08014398 <my_tcp_accept>:
err_t my_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	4613      	mov	r3, r2
 80143a4:	71fb      	strb	r3, [r7, #7]
    LWIP_UNUSED_ARG(arg);
    LWIP_UNUSED_ARG(err);

    tcp_setprio(newpcb, TCP_PRIO_NORMAL);
 80143a6:	2140      	movs	r1, #64	; 0x40
 80143a8:	68b8      	ldr	r0, [r7, #8]
 80143aa:	f7f5 fa36 	bl	800981a <tcp_setprio>
    tcp_recv(newpcb, NULL);
 80143ae:	2100      	movs	r1, #0
 80143b0:	68b8      	ldr	r0, [r7, #8]
 80143b2:	f7f5 fbe5 	bl	8009b80 <tcp_recv>
    tcp_err(newpcb, NULL);
 80143b6:	2100      	movs	r1, #0
 80143b8:	68b8      	ldr	r0, [r7, #8]
 80143ba:	f7f5 fc23 	bl	8009c04 <tcp_err>
    tcp_poll(newpcb, NULL, 4);
 80143be:	2204      	movs	r2, #4
 80143c0:	2100      	movs	r1, #0
 80143c2:	68b8      	ldr	r0, [r7, #8]
 80143c4:	f7f5 fc58 	bl	8009c78 <tcp_poll>
    uint16_t port = newpcb->local_port;
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	8adb      	ldrh	r3, [r3, #22]
 80143cc:	82bb      	strh	r3, [r7, #20]
    print("+++++ ACCEPTED  on port: %u", port);
 80143ce:	8abb      	ldrh	r3, [r7, #20]
 80143d0:	4619      	mov	r1, r3
 80143d2:	482b      	ldr	r0, [pc, #172]	; (8014480 <my_tcp_accept+0xe8>)
 80143d4:	f000 f892 	bl	80144fc <print>
#if ETH_TCP_DEBUG
    if(port == TCP_DEBUG_PORT && !debug_port_accepted) {
 80143d8:	8abb      	ldrh	r3, [r7, #20]
 80143da:	f241 7270 	movw	r2, #6000	; 0x1770
 80143de:	4293      	cmp	r3, r2
 80143e0:	d10b      	bne.n	80143fa <my_tcp_accept+0x62>
 80143e2:	4b28      	ldr	r3, [pc, #160]	; (8014484 <my_tcp_accept+0xec>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d107      	bne.n	80143fa <my_tcp_accept+0x62>
    	debug_port_accepted = 1;
 80143ea:	4b26      	ldr	r3, [pc, #152]	; (8014484 <my_tcp_accept+0xec>)
 80143ec:	2201      	movs	r2, #1
 80143ee:	701a      	strb	r2, [r3, #0]
    	debug_pcb = newpcb;
 80143f0:	4a25      	ldr	r2, [pc, #148]	; (8014488 <my_tcp_accept+0xf0>)
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	6013      	str	r3, [r2, #0]
    	return ERR_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	e03e      	b.n	8014478 <my_tcp_accept+0xe0>
    }
#endif

    uint16_t index = port % startport;
 80143fa:	8abb      	ldrh	r3, [r7, #20]
 80143fc:	4a23      	ldr	r2, [pc, #140]	; (801448c <my_tcp_accept+0xf4>)
 80143fe:	fba2 1203 	umull	r1, r2, r2, r3
 8014402:	0b12      	lsrs	r2, r2, #12
 8014404:	f241 3188 	movw	r1, #5000	; 0x1388
 8014408:	fb01 f202 	mul.w	r2, r1, r2
 801440c:	1a9b      	subs	r3, r3, r2
 801440e:	827b      	strh	r3, [r7, #18]
    for(uint8_t i=0; i<numofclients; i++) {
 8014410:	2300      	movs	r3, #0
 8014412:	75fb      	strb	r3, [r7, #23]
 8014414:	e024      	b.n	8014460 <my_tcp_accept+0xc8>
    	if(!accepted_pcb[index][i]) {
 8014416:	8a7a      	ldrh	r2, [r7, #18]
 8014418:	7df9      	ldrb	r1, [r7, #23]
 801441a:	481d      	ldr	r0, [pc, #116]	; (8014490 <my_tcp_accept+0xf8>)
 801441c:	4613      	mov	r3, r2
 801441e:	005b      	lsls	r3, r3, #1
 8014420:	4413      	add	r3, r2
 8014422:	4403      	add	r3, r0
 8014424:	440b      	add	r3, r1
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	b2db      	uxtb	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d115      	bne.n	801445a <my_tcp_accept+0xc2>
    		pcb[index][i] = newpcb;
 801442e:	8a7a      	ldrh	r2, [r7, #18]
 8014430:	7df9      	ldrb	r1, [r7, #23]
 8014432:	4818      	ldr	r0, [pc, #96]	; (8014494 <my_tcp_accept+0xfc>)
 8014434:	4613      	mov	r3, r2
 8014436:	005b      	lsls	r3, r3, #1
 8014438:	4413      	add	r3, r2
 801443a:	440b      	add	r3, r1
 801443c:	68ba      	ldr	r2, [r7, #8]
 801443e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    		accepted_pcb[index][i] = 1;
 8014442:	8a7a      	ldrh	r2, [r7, #18]
 8014444:	7df9      	ldrb	r1, [r7, #23]
 8014446:	4812      	ldr	r0, [pc, #72]	; (8014490 <my_tcp_accept+0xf8>)
 8014448:	4613      	mov	r3, r2
 801444a:	005b      	lsls	r3, r3, #1
 801444c:	4413      	add	r3, r2
 801444e:	4403      	add	r3, r0
 8014450:	440b      	add	r3, r1
 8014452:	2201      	movs	r2, #1
 8014454:	701a      	strb	r2, [r3, #0]
    		return ERR_OK;
 8014456:	2300      	movs	r3, #0
 8014458:	e00e      	b.n	8014478 <my_tcp_accept+0xe0>
    for(uint8_t i=0; i<numofclients; i++) {
 801445a:	7dfb      	ldrb	r3, [r7, #23]
 801445c:	3301      	adds	r3, #1
 801445e:	75fb      	strb	r3, [r7, #23]
 8014460:	7dfb      	ldrb	r3, [r7, #23]
 8014462:	2b02      	cmp	r3, #2
 8014464:	d9d7      	bls.n	8014416 <my_tcp_accept+0x7e>
    	}
    }
    print("Something went wrong while connecting on port: %u",  port);
 8014466:	8abb      	ldrh	r3, [r7, #20]
 8014468:	4619      	mov	r1, r3
 801446a:	480b      	ldr	r0, [pc, #44]	; (8014498 <my_tcp_accept+0x100>)
 801446c:	f000 f846 	bl	80144fc <print>
    print("Max 3 connections at a time per port are allowed..Ignoring request\n");
 8014470:	480a      	ldr	r0, [pc, #40]	; (801449c <my_tcp_accept+0x104>)
 8014472:	f000 f843 	bl	80144fc <print>
    return ERR_OK;
 8014476:	2300      	movs	r3, #0
}
 8014478:	4618      	mov	r0, r3
 801447a:	3718      	adds	r7, #24
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	0801897c 	.word	0x0801897c
 8014484:	200008cc 	.word	0x200008cc
 8014488:	2000a730 	.word	0x2000a730
 801448c:	d1b71759 	.word	0xd1b71759
 8014490:	2000a4b4 	.word	0x2000a4b4
 8014494:	2000a6b8 	.word	0x2000a6b8
 8014498:	08018998 	.word	0x08018998
 801449c:	080189cc 	.word	0x080189cc

080144a0 <my_tcp_init>:

void my_tcp_init(struct tcp_pcb *pcb, uint16_t port) {
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	460b      	mov	r3, r1
 80144aa:	807b      	strh	r3, [r7, #2]
/* create new tcp pcb */
	pcb = tcp_new();
 80144ac:	f7f5 fb40 	bl	8009b30 <tcp_new>
 80144b0:	6078      	str	r0, [r7, #4]
	if (pcb != NULL) {
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d019      	beq.n	80144ec <my_tcp_init+0x4c>
		err_t err;
		/* bind echo_pcb to port 7 (ECHO protocol) */
		err = tcp_bind(pcb, IP_ADDR_ANY, port);
 80144b8:	887b      	ldrh	r3, [r7, #2]
 80144ba:	461a      	mov	r2, r3
 80144bc:	490d      	ldr	r1, [pc, #52]	; (80144f4 <my_tcp_init+0x54>)
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f7f4 fbba 	bl	8008c38 <tcp_bind>
 80144c4:	4603      	mov	r3, r0
 80144c6:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK) {
 80144c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d109      	bne.n	80144e4 <my_tcp_init+0x44>
			/* start tcp listening for echo_pcb */
			pcb = tcp_listen(pcb);
 80144d0:	21ff      	movs	r1, #255	; 0xff
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f7f4 fc52 	bl	8008d7c <tcp_listen_with_backlog>
 80144d8:	6078      	str	r0, [r7, #4]
			/* initialize LwIP tcp_accept callback function */
			tcp_accept(pcb, my_tcp_accept);
 80144da:	4907      	ldr	r1, [pc, #28]	; (80144f8 <my_tcp_init+0x58>)
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f7f5 fbb3 	bl	8009c48 <tcp_accept>
		else {
			/* deallocate the pcb */
			memp_free(MEMP_TCP_PCB, pcb);
		}
	}
}
 80144e2:	e003      	b.n	80144ec <my_tcp_init+0x4c>
			memp_free(MEMP_TCP_PCB, pcb);
 80144e4:	6879      	ldr	r1, [r7, #4]
 80144e6:	2001      	movs	r0, #1
 80144e8:	f7f3 f966 	bl	80077b8 <memp_free>
}
 80144ec:	bf00      	nop
 80144ee:	3710      	adds	r7, #16
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	08019814 	.word	0x08019814
 80144f8:	08014399 	.word	0x08014399

080144fc <print>:
	print("CDCTRL1: "BYTE_TO_BIN_PAT" "BYTE_TO_BIN_PAT"      %#.4X\n", BYTE_TO_BIN(phyreg>>8), BYTE_TO_BIN(phyreg), phyreg);
	HAL_ETH_ReadPHYRegister(&heth, 0x1D, &phyreg);
	print("EDCR: "BYTE_TO_BIN_PAT" "BYTE_TO_BIN_PAT"      %#.4X\n", BYTE_TO_BIN(phyreg>>8), BYTE_TO_BIN(phyreg), phyreg);
	print("-----------------------------------------------------------\n");
}
void print(char *msg, ...) {
 80144fc:	b40f      	push	{r0, r1, r2, r3}
 80144fe:	b590      	push	{r4, r7, lr}
 8014500:	b09b      	sub	sp, #108	; 0x6c
 8014502:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8014504:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014508:	603b      	str	r3, [r7, #0]
	vsprintf(buff,msg,args);
 801450a:	1d3b      	adds	r3, r7, #4
 801450c:	683a      	ldr	r2, [r7, #0]
 801450e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014510:	4618      	mov	r0, r3
 8014512:	f000 fd5d 	bl	8014fd0 <vsiprintf>
#if USB_DEBUG
	HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 10);
 8014516:	1d3b      	adds	r3, r7, #4
 8014518:	4618      	mov	r0, r3
 801451a:	f7eb fe63 	bl	80001e4 <strlen>
 801451e:	4603      	mov	r3, r0
 8014520:	b29a      	uxth	r2, r3
 8014522:	1d39      	adds	r1, r7, #4
 8014524:	230a      	movs	r3, #10
 8014526:	481c      	ldr	r0, [pc, #112]	; (8014598 <print+0x9c>)
 8014528:	f7f0 fd43 	bl	8004fb2 <HAL_UART_Transmit>
#endif
#if ETH_TCP_DEBUG
	 if(debug_port_accepted) {
 801452c:	4b1b      	ldr	r3, [pc, #108]	; (801459c <print+0xa0>)
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d029      	beq.n	8014588 <print+0x8c>
		  if( debug_pcb != NULL && debug_pcb->state == ESTABLISHED) {
 8014534:	4b1a      	ldr	r3, [pc, #104]	; (80145a0 <print+0xa4>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d01c      	beq.n	8014576 <print+0x7a>
 801453c:	4b18      	ldr	r3, [pc, #96]	; (80145a0 <print+0xa4>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	7d1b      	ldrb	r3, [r3, #20]
 8014542:	2b04      	cmp	r3, #4
 8014544:	d117      	bne.n	8014576 <print+0x7a>
			  if(tcp_write(debug_pcb, &buff, strlen(buff)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8014546:	4b16      	ldr	r3, [pc, #88]	; (80145a0 <print+0xa4>)
 8014548:	681c      	ldr	r4, [r3, #0]
 801454a:	1d3b      	adds	r3, r7, #4
 801454c:	4618      	mov	r0, r3
 801454e:	f7eb fe49 	bl	80001e4 <strlen>
 8014552:	4603      	mov	r3, r0
 8014554:	b29b      	uxth	r3, r3
 8014556:	3301      	adds	r3, #1
 8014558:	b29a      	uxth	r2, r3
 801455a:	1d39      	adds	r1, r7, #4
 801455c:	2301      	movs	r3, #1
 801455e:	4620      	mov	r0, r4
 8014560:	f7f8 f93e 	bl	800c7e0 <tcp_write>
 8014564:	4603      	mov	r3, r0
 8014566:	2b00      	cmp	r3, #0
 8014568:	d10e      	bne.n	8014588 <print+0x8c>
				  // something went wrong...
			  }
			  else {
				  tcp_output(debug_pcb);
 801456a:	4b0d      	ldr	r3, [pc, #52]	; (80145a0 <print+0xa4>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	4618      	mov	r0, r3
 8014570:	f7f8 fde8 	bl	800d144 <tcp_output>
			  if(tcp_write(debug_pcb, &buff, strlen(buff)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8014574:	e008      	b.n	8014588 <print+0x8c>
			  }
		  }
		  else {
			  tcp_close(debug_pcb);
 8014576:	4b0a      	ldr	r3, [pc, #40]	; (80145a0 <print+0xa4>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	4618      	mov	r0, r3
 801457c:	f7f4 fa86 	bl	8008a8c <tcp_close>
			  debug_port_accepted = 0;
 8014580:	4b06      	ldr	r3, [pc, #24]	; (801459c <print+0xa0>)
 8014582:	2200      	movs	r2, #0
 8014584:	701a      	strb	r2, [r3, #0]
		  }
	 }
#endif
}
 8014586:	e7ff      	b.n	8014588 <print+0x8c>
 8014588:	bf00      	nop
 801458a:	376c      	adds	r7, #108	; 0x6c
 801458c:	46bd      	mov	sp, r7
 801458e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014592:	b004      	add	sp, #16
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop
 8014598:	2000a734 	.word	0x2000a734
 801459c:	200008cc 	.word	0x200008cc
 80145a0:	2000a730 	.word	0x2000a730

080145a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80145a4:	b480      	push	{r7}
 80145a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80145a8:	bf00      	nop
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr
	...

080145b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b083      	sub	sp, #12
 80145b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80145ba:	2300      	movs	r3, #0
 80145bc:	607b      	str	r3, [r7, #4]
 80145be:	4b10      	ldr	r3, [pc, #64]	; (8014600 <HAL_MspInit+0x4c>)
 80145c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145c2:	4a0f      	ldr	r2, [pc, #60]	; (8014600 <HAL_MspInit+0x4c>)
 80145c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80145c8:	6453      	str	r3, [r2, #68]	; 0x44
 80145ca:	4b0d      	ldr	r3, [pc, #52]	; (8014600 <HAL_MspInit+0x4c>)
 80145cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80145d2:	607b      	str	r3, [r7, #4]
 80145d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80145d6:	2300      	movs	r3, #0
 80145d8:	603b      	str	r3, [r7, #0]
 80145da:	4b09      	ldr	r3, [pc, #36]	; (8014600 <HAL_MspInit+0x4c>)
 80145dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145de:	4a08      	ldr	r2, [pc, #32]	; (8014600 <HAL_MspInit+0x4c>)
 80145e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145e4:	6413      	str	r3, [r2, #64]	; 0x40
 80145e6:	4b06      	ldr	r3, [pc, #24]	; (8014600 <HAL_MspInit+0x4c>)
 80145e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80145ee:	603b      	str	r3, [r7, #0]
 80145f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80145f2:	bf00      	nop
 80145f4:	370c      	adds	r7, #12
 80145f6:	46bd      	mov	sp, r7
 80145f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fc:	4770      	bx	lr
 80145fe:	bf00      	nop
 8014600:	40023800 	.word	0x40023800

08014604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a22      	ldr	r2, [pc, #136]	; (801469c <HAL_ADC_MspInit+0x98>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d13d      	bne.n	8014692 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014616:	2300      	movs	r3, #0
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	4b21      	ldr	r3, [pc, #132]	; (80146a0 <HAL_ADC_MspInit+0x9c>)
 801461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801461e:	4a20      	ldr	r2, [pc, #128]	; (80146a0 <HAL_ADC_MspInit+0x9c>)
 8014620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014624:	6453      	str	r3, [r2, #68]	; 0x44
 8014626:	4b1e      	ldr	r3, [pc, #120]	; (80146a0 <HAL_ADC_MspInit+0x9c>)
 8014628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801462e:	60fb      	str	r3, [r7, #12]
 8014630:	68fb      	ldr	r3, [r7, #12]
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014632:	4b1c      	ldr	r3, [pc, #112]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014634:	4a1c      	ldr	r2, [pc, #112]	; (80146a8 <HAL_ADC_MspInit+0xa4>)
 8014636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014638:	4b1a      	ldr	r3, [pc, #104]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 801463a:	2200      	movs	r2, #0
 801463c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801463e:	4b19      	ldr	r3, [pc, #100]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014640:	2200      	movs	r2, #0
 8014642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014644:	4b17      	ldr	r3, [pc, #92]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014646:	2200      	movs	r2, #0
 8014648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801464a:	4b16      	ldr	r3, [pc, #88]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 801464c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014652:	4b14      	ldr	r3, [pc, #80]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801465a:	4b12      	ldr	r3, [pc, #72]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 801465c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014662:	4b10      	ldr	r3, [pc, #64]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801466a:	4b0e      	ldr	r3, [pc, #56]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 801466c:	2200      	movs	r2, #0
 801466e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014670:	4b0c      	ldr	r3, [pc, #48]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014672:	2200      	movs	r2, #0
 8014674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014676:	480b      	ldr	r0, [pc, #44]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 8014678:	f7ed fd8a 	bl	8002190 <HAL_DMA_Init>
 801467c:	4603      	mov	r3, r0
 801467e:	2b00      	cmp	r3, #0
 8014680:	d001      	beq.n	8014686 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8014682:	f7ff ff8f 	bl	80145a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	4a06      	ldr	r2, [pc, #24]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 801468a:	639a      	str	r2, [r3, #56]	; 0x38
 801468c:	4a05      	ldr	r2, [pc, #20]	; (80146a4 <HAL_ADC_MspInit+0xa0>)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014692:	bf00      	nop
 8014694:	3710      	adds	r7, #16
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}
 801469a:	bf00      	nop
 801469c:	40012000 	.word	0x40012000
 80146a0:	40023800 	.word	0x40023800
 80146a4:	2000a5a0 	.word	0x2000a5a0
 80146a8:	40026410 	.word	0x40026410

080146ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b08c      	sub	sp, #48	; 0x30
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146b4:	f107 031c 	add.w	r3, r7, #28
 80146b8:	2200      	movs	r2, #0
 80146ba:	601a      	str	r2, [r3, #0]
 80146bc:	605a      	str	r2, [r3, #4]
 80146be:	609a      	str	r2, [r3, #8]
 80146c0:	60da      	str	r2, [r3, #12]
 80146c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	4a4a      	ldr	r2, [pc, #296]	; (80147f4 <HAL_CAN_MspInit+0x148>)
 80146ca:	4293      	cmp	r3, r2
 80146cc:	d13e      	bne.n	801474c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80146ce:	4b4a      	ldr	r3, [pc, #296]	; (80147f8 <HAL_CAN_MspInit+0x14c>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	3301      	adds	r3, #1
 80146d4:	4a48      	ldr	r2, [pc, #288]	; (80147f8 <HAL_CAN_MspInit+0x14c>)
 80146d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80146d8:	4b47      	ldr	r3, [pc, #284]	; (80147f8 <HAL_CAN_MspInit+0x14c>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d10d      	bne.n	80146fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80146e0:	2300      	movs	r3, #0
 80146e2:	61bb      	str	r3, [r7, #24]
 80146e4:	4b45      	ldr	r3, [pc, #276]	; (80147fc <HAL_CAN_MspInit+0x150>)
 80146e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146e8:	4a44      	ldr	r2, [pc, #272]	; (80147fc <HAL_CAN_MspInit+0x150>)
 80146ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80146ee:	6413      	str	r3, [r2, #64]	; 0x40
 80146f0:	4b42      	ldr	r3, [pc, #264]	; (80147fc <HAL_CAN_MspInit+0x150>)
 80146f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80146f8:	61bb      	str	r3, [r7, #24]
 80146fa:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80146fc:	2300      	movs	r3, #0
 80146fe:	617b      	str	r3, [r7, #20]
 8014700:	4b3e      	ldr	r3, [pc, #248]	; (80147fc <HAL_CAN_MspInit+0x150>)
 8014702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014704:	4a3d      	ldr	r2, [pc, #244]	; (80147fc <HAL_CAN_MspInit+0x150>)
 8014706:	f043 0301 	orr.w	r3, r3, #1
 801470a:	6313      	str	r3, [r2, #48]	; 0x30
 801470c:	4b3b      	ldr	r3, [pc, #236]	; (80147fc <HAL_CAN_MspInit+0x150>)
 801470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014710:	f003 0301 	and.w	r3, r3, #1
 8014714:	617b      	str	r3, [r7, #20]
 8014716:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014718:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801471c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801471e:	2302      	movs	r3, #2
 8014720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014722:	2300      	movs	r3, #0
 8014724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014726:	2303      	movs	r3, #3
 8014728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 801472a:	2309      	movs	r3, #9
 801472c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801472e:	f107 031c 	add.w	r3, r7, #28
 8014732:	4619      	mov	r1, r3
 8014734:	4832      	ldr	r0, [pc, #200]	; (8014800 <HAL_CAN_MspInit+0x154>)
 8014736:	f7ef fb0f 	bl	8003d58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 801473a:	2200      	movs	r2, #0
 801473c:	2100      	movs	r1, #0
 801473e:	2014      	movs	r0, #20
 8014740:	f7ed fcef 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8014744:	2014      	movs	r0, #20
 8014746:	f7ed fd08 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 801474a:	e04f      	b.n	80147ec <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	4a2c      	ldr	r2, [pc, #176]	; (8014804 <HAL_CAN_MspInit+0x158>)
 8014752:	4293      	cmp	r3, r2
 8014754:	d14a      	bne.n	80147ec <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8014756:	2300      	movs	r3, #0
 8014758:	613b      	str	r3, [r7, #16]
 801475a:	4b28      	ldr	r3, [pc, #160]	; (80147fc <HAL_CAN_MspInit+0x150>)
 801475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801475e:	4a27      	ldr	r2, [pc, #156]	; (80147fc <HAL_CAN_MspInit+0x150>)
 8014760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014764:	6413      	str	r3, [r2, #64]	; 0x40
 8014766:	4b25      	ldr	r3, [pc, #148]	; (80147fc <HAL_CAN_MspInit+0x150>)
 8014768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801476a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801476e:	613b      	str	r3, [r7, #16]
 8014770:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8014772:	4b21      	ldr	r3, [pc, #132]	; (80147f8 <HAL_CAN_MspInit+0x14c>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	3301      	adds	r3, #1
 8014778:	4a1f      	ldr	r2, [pc, #124]	; (80147f8 <HAL_CAN_MspInit+0x14c>)
 801477a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 801477c:	4b1e      	ldr	r3, [pc, #120]	; (80147f8 <HAL_CAN_MspInit+0x14c>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d10d      	bne.n	80147a0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8014784:	2300      	movs	r3, #0
 8014786:	60fb      	str	r3, [r7, #12]
 8014788:	4b1c      	ldr	r3, [pc, #112]	; (80147fc <HAL_CAN_MspInit+0x150>)
 801478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801478c:	4a1b      	ldr	r2, [pc, #108]	; (80147fc <HAL_CAN_MspInit+0x150>)
 801478e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014792:	6413      	str	r3, [r2, #64]	; 0x40
 8014794:	4b19      	ldr	r3, [pc, #100]	; (80147fc <HAL_CAN_MspInit+0x150>)
 8014796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801479c:	60fb      	str	r3, [r7, #12]
 801479e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80147a0:	2300      	movs	r3, #0
 80147a2:	60bb      	str	r3, [r7, #8]
 80147a4:	4b15      	ldr	r3, [pc, #84]	; (80147fc <HAL_CAN_MspInit+0x150>)
 80147a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147a8:	4a14      	ldr	r2, [pc, #80]	; (80147fc <HAL_CAN_MspInit+0x150>)
 80147aa:	f043 0302 	orr.w	r3, r3, #2
 80147ae:	6313      	str	r3, [r2, #48]	; 0x30
 80147b0:	4b12      	ldr	r3, [pc, #72]	; (80147fc <HAL_CAN_MspInit+0x150>)
 80147b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147b4:	f003 0302 	and.w	r3, r3, #2
 80147b8:	60bb      	str	r3, [r7, #8]
 80147ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80147bc:	2360      	movs	r3, #96	; 0x60
 80147be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147c0:	2302      	movs	r3, #2
 80147c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147c4:	2300      	movs	r3, #0
 80147c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147c8:	2303      	movs	r3, #3
 80147ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80147cc:	2309      	movs	r3, #9
 80147ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80147d0:	f107 031c 	add.w	r3, r7, #28
 80147d4:	4619      	mov	r1, r3
 80147d6:	480c      	ldr	r0, [pc, #48]	; (8014808 <HAL_CAN_MspInit+0x15c>)
 80147d8:	f7ef fabe 	bl	8003d58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80147dc:	2200      	movs	r2, #0
 80147de:	2100      	movs	r1, #0
 80147e0:	2040      	movs	r0, #64	; 0x40
 80147e2:	f7ed fc9e 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80147e6:	2040      	movs	r0, #64	; 0x40
 80147e8:	f7ed fcb7 	bl	800215a <HAL_NVIC_EnableIRQ>
}
 80147ec:	bf00      	nop
 80147ee:	3730      	adds	r7, #48	; 0x30
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	40006400 	.word	0x40006400
 80147f8:	200008d0 	.word	0x200008d0
 80147fc:	40023800 	.word	0x40023800
 8014800:	40020000 	.word	0x40020000
 8014804:	40006800 	.word	0x40006800
 8014808:	40020400 	.word	0x40020400

0801480c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08a      	sub	sp, #40	; 0x28
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014814:	f107 0314 	add.w	r3, r7, #20
 8014818:	2200      	movs	r2, #0
 801481a:	601a      	str	r2, [r3, #0]
 801481c:	605a      	str	r2, [r3, #4]
 801481e:	609a      	str	r2, [r3, #8]
 8014820:	60da      	str	r2, [r3, #12]
 8014822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	4a19      	ldr	r2, [pc, #100]	; (8014890 <HAL_SPI_MspInit+0x84>)
 801482a:	4293      	cmp	r3, r2
 801482c:	d12c      	bne.n	8014888 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 801482e:	2300      	movs	r3, #0
 8014830:	613b      	str	r3, [r7, #16]
 8014832:	4b18      	ldr	r3, [pc, #96]	; (8014894 <HAL_SPI_MspInit+0x88>)
 8014834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014836:	4a17      	ldr	r2, [pc, #92]	; (8014894 <HAL_SPI_MspInit+0x88>)
 8014838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801483c:	6413      	str	r3, [r2, #64]	; 0x40
 801483e:	4b15      	ldr	r3, [pc, #84]	; (8014894 <HAL_SPI_MspInit+0x88>)
 8014840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014846:	613b      	str	r3, [r7, #16]
 8014848:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801484a:	2300      	movs	r3, #0
 801484c:	60fb      	str	r3, [r7, #12]
 801484e:	4b11      	ldr	r3, [pc, #68]	; (8014894 <HAL_SPI_MspInit+0x88>)
 8014850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014852:	4a10      	ldr	r2, [pc, #64]	; (8014894 <HAL_SPI_MspInit+0x88>)
 8014854:	f043 0304 	orr.w	r3, r3, #4
 8014858:	6313      	str	r3, [r2, #48]	; 0x30
 801485a:	4b0e      	ldr	r3, [pc, #56]	; (8014894 <HAL_SPI_MspInit+0x88>)
 801485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801485e:	f003 0304 	and.w	r3, r3, #4
 8014862:	60fb      	str	r3, [r7, #12]
 8014864:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8014866:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801486a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801486c:	2302      	movs	r3, #2
 801486e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014870:	2300      	movs	r3, #0
 8014872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014874:	2303      	movs	r3, #3
 8014876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8014878:	2306      	movs	r3, #6
 801487a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801487c:	f107 0314 	add.w	r3, r7, #20
 8014880:	4619      	mov	r1, r3
 8014882:	4805      	ldr	r0, [pc, #20]	; (8014898 <HAL_SPI_MspInit+0x8c>)
 8014884:	f7ef fa68 	bl	8003d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8014888:	bf00      	nop
 801488a:	3728      	adds	r7, #40	; 0x28
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	40003c00 	.word	0x40003c00
 8014894:	40023800 	.word	0x40023800
 8014898:	40020800 	.word	0x40020800

0801489c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b090      	sub	sp, #64	; 0x40
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80148a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80148a8:	2200      	movs	r2, #0
 80148aa:	601a      	str	r2, [r3, #0]
 80148ac:	605a      	str	r2, [r3, #4]
 80148ae:	609a      	str	r2, [r3, #8]
 80148b0:	60da      	str	r2, [r3, #12]
 80148b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	4a65      	ldr	r2, [pc, #404]	; (8014a50 <HAL_UART_MspInit+0x1b4>)
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d12d      	bne.n	801491a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80148be:	2300      	movs	r3, #0
 80148c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80148c2:	4b64      	ldr	r3, [pc, #400]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80148c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148c6:	4a63      	ldr	r2, [pc, #396]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80148c8:	f043 0310 	orr.w	r3, r3, #16
 80148cc:	6453      	str	r3, [r2, #68]	; 0x44
 80148ce:	4b61      	ldr	r3, [pc, #388]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80148d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148d2:	f003 0310 	and.w	r3, r3, #16
 80148d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80148d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80148da:	2300      	movs	r3, #0
 80148dc:	627b      	str	r3, [r7, #36]	; 0x24
 80148de:	4b5d      	ldr	r3, [pc, #372]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80148e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e2:	4a5c      	ldr	r2, [pc, #368]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80148e4:	f043 0301 	orr.w	r3, r3, #1
 80148e8:	6313      	str	r3, [r2, #48]	; 0x30
 80148ea:	4b5a      	ldr	r3, [pc, #360]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80148ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ee:	f003 0301 	and.w	r3, r3, #1
 80148f2:	627b      	str	r3, [r7, #36]	; 0x24
 80148f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80148f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80148fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148fc:	2302      	movs	r3, #2
 80148fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014900:	2301      	movs	r3, #1
 8014902:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014904:	2303      	movs	r3, #3
 8014906:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014908:	2307      	movs	r3, #7
 801490a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801490c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014910:	4619      	mov	r1, r3
 8014912:	4851      	ldr	r0, [pc, #324]	; (8014a58 <HAL_UART_MspInit+0x1bc>)
 8014914:	f7ef fa20 	bl	8003d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8014918:	e095      	b.n	8014a46 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	4a4f      	ldr	r2, [pc, #316]	; (8014a5c <HAL_UART_MspInit+0x1c0>)
 8014920:	4293      	cmp	r3, r2
 8014922:	d12c      	bne.n	801497e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8014924:	2300      	movs	r3, #0
 8014926:	623b      	str	r3, [r7, #32]
 8014928:	4b4a      	ldr	r3, [pc, #296]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 801492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801492c:	4a49      	ldr	r2, [pc, #292]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 801492e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014932:	6413      	str	r3, [r2, #64]	; 0x40
 8014934:	4b47      	ldr	r3, [pc, #284]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801493c:	623b      	str	r3, [r7, #32]
 801493e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014940:	2300      	movs	r3, #0
 8014942:	61fb      	str	r3, [r7, #28]
 8014944:	4b43      	ldr	r3, [pc, #268]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014948:	4a42      	ldr	r2, [pc, #264]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 801494a:	f043 0308 	orr.w	r3, r3, #8
 801494e:	6313      	str	r3, [r2, #48]	; 0x30
 8014950:	4b40      	ldr	r3, [pc, #256]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014954:	f003 0308 	and.w	r3, r3, #8
 8014958:	61fb      	str	r3, [r7, #28]
 801495a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 801495c:	2360      	movs	r3, #96	; 0x60
 801495e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014960:	2302      	movs	r3, #2
 8014962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014964:	2301      	movs	r3, #1
 8014966:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014968:	2303      	movs	r3, #3
 801496a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801496c:	2307      	movs	r3, #7
 801496e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014974:	4619      	mov	r1, r3
 8014976:	483a      	ldr	r0, [pc, #232]	; (8014a60 <HAL_UART_MspInit+0x1c4>)
 8014978:	f7ef f9ee 	bl	8003d58 <HAL_GPIO_Init>
}
 801497c:	e063      	b.n	8014a46 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4a38      	ldr	r2, [pc, #224]	; (8014a64 <HAL_UART_MspInit+0x1c8>)
 8014984:	4293      	cmp	r3, r2
 8014986:	d12d      	bne.n	80149e4 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8014988:	2300      	movs	r3, #0
 801498a:	61bb      	str	r3, [r7, #24]
 801498c:	4b31      	ldr	r3, [pc, #196]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 801498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014990:	4a30      	ldr	r2, [pc, #192]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014996:	6413      	str	r3, [r2, #64]	; 0x40
 8014998:	4b2e      	ldr	r3, [pc, #184]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 801499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801499c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80149a0:	61bb      	str	r3, [r7, #24]
 80149a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80149a4:	2300      	movs	r3, #0
 80149a6:	617b      	str	r3, [r7, #20]
 80149a8:	4b2a      	ldr	r3, [pc, #168]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80149aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ac:	4a29      	ldr	r2, [pc, #164]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80149ae:	f043 0308 	orr.w	r3, r3, #8
 80149b2:	6313      	str	r3, [r2, #48]	; 0x30
 80149b4:	4b27      	ldr	r3, [pc, #156]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80149b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149b8:	f003 0308 	and.w	r3, r3, #8
 80149bc:	617b      	str	r3, [r7, #20]
 80149be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80149c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80149c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149c6:	2302      	movs	r3, #2
 80149c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80149ca:	2301      	movs	r3, #1
 80149cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149ce:	2303      	movs	r3, #3
 80149d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80149d2:	2307      	movs	r3, #7
 80149d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80149d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149da:	4619      	mov	r1, r3
 80149dc:	4820      	ldr	r0, [pc, #128]	; (8014a60 <HAL_UART_MspInit+0x1c4>)
 80149de:	f7ef f9bb 	bl	8003d58 <HAL_GPIO_Init>
}
 80149e2:	e030      	b.n	8014a46 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	4a1f      	ldr	r2, [pc, #124]	; (8014a68 <HAL_UART_MspInit+0x1cc>)
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d12b      	bne.n	8014a46 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80149ee:	2300      	movs	r3, #0
 80149f0:	613b      	str	r3, [r7, #16]
 80149f2:	4b18      	ldr	r3, [pc, #96]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80149f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149f6:	4a17      	ldr	r2, [pc, #92]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 80149f8:	f043 0320 	orr.w	r3, r3, #32
 80149fc:	6453      	str	r3, [r2, #68]	; 0x44
 80149fe:	4b15      	ldr	r3, [pc, #84]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a02:	f003 0320 	and.w	r3, r3, #32
 8014a06:	613b      	str	r3, [r7, #16]
 8014a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	60fb      	str	r3, [r7, #12]
 8014a0e:	4b11      	ldr	r3, [pc, #68]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a12:	4a10      	ldr	r2, [pc, #64]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014a14:	f043 0304 	orr.w	r3, r3, #4
 8014a18:	6313      	str	r3, [r2, #48]	; 0x30
 8014a1a:	4b0e      	ldr	r3, [pc, #56]	; (8014a54 <HAL_UART_MspInit+0x1b8>)
 8014a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a1e:	f003 0304 	and.w	r3, r3, #4
 8014a22:	60fb      	str	r3, [r7, #12]
 8014a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8014a26:	23c0      	movs	r3, #192	; 0xc0
 8014a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a2a:	2302      	movs	r3, #2
 8014a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a2e:	2301      	movs	r3, #1
 8014a30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a32:	2303      	movs	r3, #3
 8014a34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8014a36:	2308      	movs	r3, #8
 8014a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014a3e:	4619      	mov	r1, r3
 8014a40:	480a      	ldr	r0, [pc, #40]	; (8014a6c <HAL_UART_MspInit+0x1d0>)
 8014a42:	f7ef f989 	bl	8003d58 <HAL_GPIO_Init>
}
 8014a46:	bf00      	nop
 8014a48:	3740      	adds	r7, #64	; 0x40
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	40011000 	.word	0x40011000
 8014a54:	40023800 	.word	0x40023800
 8014a58:	40020000 	.word	0x40020000
 8014a5c:	40004400 	.word	0x40004400
 8014a60:	40020c00 	.word	0x40020c00
 8014a64:	40004800 	.word	0x40004800
 8014a68:	40011400 	.word	0x40011400
 8014a6c:	40020800 	.word	0x40020800

08014a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014a70:	b480      	push	{r7}
 8014a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014a74:	bf00      	nop
 8014a76:	46bd      	mov	sp, r7
 8014a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7c:	4770      	bx	lr

08014a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014a7e:	b480      	push	{r7}
 8014a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014a82:	e7fe      	b.n	8014a82 <HardFault_Handler+0x4>

08014a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014a84:	b480      	push	{r7}
 8014a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014a88:	e7fe      	b.n	8014a88 <MemManage_Handler+0x4>

08014a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014a8a:	b480      	push	{r7}
 8014a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014a8e:	e7fe      	b.n	8014a8e <BusFault_Handler+0x4>

08014a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014a90:	b480      	push	{r7}
 8014a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014a94:	e7fe      	b.n	8014a94 <UsageFault_Handler+0x4>

08014a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014a96:	b480      	push	{r7}
 8014a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014a9a:	bf00      	nop
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014aa8:	bf00      	nop
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr

08014ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014ab2:	b480      	push	{r7}
 8014ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014ab6:	bf00      	nop
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014ac4:	f7ec f9dc 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014ac8:	bf00      	nop
 8014aca:	bd80      	pop	{r7, pc}

08014acc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	CAN1_Rx();
 8014ad0:	f7ff fc3a 	bl	8014348 <CAN1_Rx>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8014ad4:	4802      	ldr	r0, [pc, #8]	; (8014ae0 <CAN1_RX0_IRQHandler+0x14>)
 8014ad6:	f7ed f816 	bl	8001b06 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8014ada:	bf00      	nop
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	2000a774 	.word	0x2000a774

08014ae4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014ae8:	4802      	ldr	r0, [pc, #8]	; (8014af4 <DMA2_Stream0_IRQHandler+0x10>)
 8014aea:	f7ed fc57 	bl	800239c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8014aee:	bf00      	nop
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	2000a5a0 	.word	0x2000a5a0

08014af8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	CAN2_Rx();
 8014afc:	f7ff fc38 	bl	8014370 <CAN2_Rx>
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014b00:	4802      	ldr	r0, [pc, #8]	; (8014b0c <CAN2_RX0_IRQHandler+0x14>)
 8014b02:	f7ed f800 	bl	8001b06 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8014b06:	bf00      	nop
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	2000a538 	.word	0x2000a538

08014b10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	617b      	str	r3, [r7, #20]
 8014b20:	e00a      	b.n	8014b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8014b22:	f3af 8000 	nop.w
 8014b26:	4601      	mov	r1, r0
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	1c5a      	adds	r2, r3, #1
 8014b2c:	60ba      	str	r2, [r7, #8]
 8014b2e:	b2ca      	uxtb	r2, r1
 8014b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	3301      	adds	r3, #1
 8014b36:	617b      	str	r3, [r7, #20]
 8014b38:	697a      	ldr	r2, [r7, #20]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	dbf0      	blt.n	8014b22 <_read+0x12>
	}

return len;
 8014b40:	687b      	ldr	r3, [r7, #4]
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3718      	adds	r7, #24
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}

08014b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014b4a:	b580      	push	{r7, lr}
 8014b4c:	b086      	sub	sp, #24
 8014b4e:	af00      	add	r7, sp, #0
 8014b50:	60f8      	str	r0, [r7, #12]
 8014b52:	60b9      	str	r1, [r7, #8]
 8014b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b56:	2300      	movs	r3, #0
 8014b58:	617b      	str	r3, [r7, #20]
 8014b5a:	e009      	b.n	8014b70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	1c5a      	adds	r2, r3, #1
 8014b60:	60ba      	str	r2, [r7, #8]
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	617b      	str	r3, [r7, #20]
 8014b70:	697a      	ldr	r2, [r7, #20]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	dbf1      	blt.n	8014b5c <_write+0x12>
	}
	return len;
 8014b78:	687b      	ldr	r3, [r7, #4]
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3718      	adds	r7, #24
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}

08014b82 <_close>:

int _close(int file)
{
 8014b82:	b480      	push	{r7}
 8014b84:	b083      	sub	sp, #12
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	6078      	str	r0, [r7, #4]
	return -1;
 8014b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	370c      	adds	r7, #12
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr

08014b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014b9a:	b480      	push	{r7}
 8014b9c:	b083      	sub	sp, #12
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	6078      	str	r0, [r7, #4]
 8014ba2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014baa:	605a      	str	r2, [r3, #4]
	return 0;
 8014bac:	2300      	movs	r3, #0
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	370c      	adds	r7, #12
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <_isatty>:

int _isatty(int file)
{
 8014bba:	b480      	push	{r7}
 8014bbc:	b083      	sub	sp, #12
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8014bc2:	2301      	movs	r3, #1
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	370c      	adds	r7, #12
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr

08014bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b085      	sub	sp, #20
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	607a      	str	r2, [r7, #4]
	return 0;
 8014bdc:	2300      	movs	r3, #0
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3714      	adds	r7, #20
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr
	...

08014bec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b085      	sub	sp, #20
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8014bf4:	4b11      	ldr	r3, [pc, #68]	; (8014c3c <_sbrk+0x50>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d102      	bne.n	8014c02 <_sbrk+0x16>
		heap_end = &end;
 8014bfc:	4b0f      	ldr	r3, [pc, #60]	; (8014c3c <_sbrk+0x50>)
 8014bfe:	4a10      	ldr	r2, [pc, #64]	; (8014c40 <_sbrk+0x54>)
 8014c00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014c02:	4b0e      	ldr	r3, [pc, #56]	; (8014c3c <_sbrk+0x50>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014c08:	4b0c      	ldr	r3, [pc, #48]	; (8014c3c <_sbrk+0x50>)
 8014c0a:	681a      	ldr	r2, [r3, #0]
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	4413      	add	r3, r2
 8014c10:	466a      	mov	r2, sp
 8014c12:	4293      	cmp	r3, r2
 8014c14:	d905      	bls.n	8014c22 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8014c16:	4b0b      	ldr	r3, [pc, #44]	; (8014c44 <_sbrk+0x58>)
 8014c18:	220c      	movs	r2, #12
 8014c1a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c20:	e006      	b.n	8014c30 <_sbrk+0x44>
	}

	heap_end += incr;
 8014c22:	4b06      	ldr	r3, [pc, #24]	; (8014c3c <_sbrk+0x50>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	4413      	add	r3, r2
 8014c2a:	4a04      	ldr	r2, [pc, #16]	; (8014c3c <_sbrk+0x50>)
 8014c2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3714      	adds	r7, #20
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr
 8014c3c:	200008d4 	.word	0x200008d4
 8014c40:	2000a7b8 	.word	0x2000a7b8
 8014c44:	2000a7b0 	.word	0x2000a7b0

08014c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014c4c:	4b08      	ldr	r3, [pc, #32]	; (8014c70 <SystemInit+0x28>)
 8014c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c52:	4a07      	ldr	r2, [pc, #28]	; (8014c70 <SystemInit+0x28>)
 8014c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014c5c:	4b04      	ldr	r3, [pc, #16]	; (8014c70 <SystemInit+0x28>)
 8014c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014c62:	609a      	str	r2, [r3, #8]
#endif
}
 8014c64:	bf00      	nop
 8014c66:	46bd      	mov	sp, r7
 8014c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6c:	4770      	bx	lr
 8014c6e:	bf00      	nop
 8014c70:	e000ed00 	.word	0xe000ed00

08014c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8014c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014c7a:	e003      	b.n	8014c84 <LoopCopyDataInit>

08014c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014c7c:	4b0c      	ldr	r3, [pc, #48]	; (8014cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014c82:	3104      	adds	r1, #4

08014c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014c84:	480b      	ldr	r0, [pc, #44]	; (8014cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014c86:	4b0c      	ldr	r3, [pc, #48]	; (8014cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014c8c:	d3f6      	bcc.n	8014c7c <CopyDataInit>
  ldr  r2, =_sbss
 8014c8e:	4a0b      	ldr	r2, [pc, #44]	; (8014cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014c90:	e002      	b.n	8014c98 <LoopFillZerobss>

08014c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014c94:	f842 3b04 	str.w	r3, [r2], #4

08014c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014c98:	4b09      	ldr	r3, [pc, #36]	; (8014cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014c9c:	d3f9      	bcc.n	8014c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014c9e:	f7ff ffd3 	bl	8014c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014ca2:	f000 f815 	bl	8014cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014ca6:	f7fe fb73 	bl	8013390 <main>
  bx  lr    
 8014caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8014cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8014cb0:	08019a00 	.word	0x08019a00
  ldr  r0, =_sdata
 8014cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014cb8:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8014cbc:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8014cc0:	2000a7b4 	.word	0x2000a7b4

08014cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014cc4:	e7fe      	b.n	8014cc4 <ADC_IRQHandler>

08014cc6 <atoi>:
 8014cc6:	220a      	movs	r2, #10
 8014cc8:	2100      	movs	r1, #0
 8014cca:	f000 b955 	b.w	8014f78 <strtol>
	...

08014cd0 <__libc_init_array>:
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	4e0d      	ldr	r6, [pc, #52]	; (8014d08 <__libc_init_array+0x38>)
 8014cd4:	4c0d      	ldr	r4, [pc, #52]	; (8014d0c <__libc_init_array+0x3c>)
 8014cd6:	1ba4      	subs	r4, r4, r6
 8014cd8:	10a4      	asrs	r4, r4, #2
 8014cda:	2500      	movs	r5, #0
 8014cdc:	42a5      	cmp	r5, r4
 8014cde:	d109      	bne.n	8014cf4 <__libc_init_array+0x24>
 8014ce0:	4e0b      	ldr	r6, [pc, #44]	; (8014d10 <__libc_init_array+0x40>)
 8014ce2:	4c0c      	ldr	r4, [pc, #48]	; (8014d14 <__libc_init_array+0x44>)
 8014ce4:	f001 fa10 	bl	8016108 <_init>
 8014ce8:	1ba4      	subs	r4, r4, r6
 8014cea:	10a4      	asrs	r4, r4, #2
 8014cec:	2500      	movs	r5, #0
 8014cee:	42a5      	cmp	r5, r4
 8014cf0:	d105      	bne.n	8014cfe <__libc_init_array+0x2e>
 8014cf2:	bd70      	pop	{r4, r5, r6, pc}
 8014cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014cf8:	4798      	blx	r3
 8014cfa:	3501      	adds	r5, #1
 8014cfc:	e7ee      	b.n	8014cdc <__libc_init_array+0xc>
 8014cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d02:	4798      	blx	r3
 8014d04:	3501      	adds	r5, #1
 8014d06:	e7f2      	b.n	8014cee <__libc_init_array+0x1e>
 8014d08:	080199f8 	.word	0x080199f8
 8014d0c:	080199f8 	.word	0x080199f8
 8014d10:	080199f8 	.word	0x080199f8
 8014d14:	080199fc 	.word	0x080199fc

08014d18 <memcmp>:
 8014d18:	b530      	push	{r4, r5, lr}
 8014d1a:	2400      	movs	r4, #0
 8014d1c:	42a2      	cmp	r2, r4
 8014d1e:	d101      	bne.n	8014d24 <memcmp+0xc>
 8014d20:	2000      	movs	r0, #0
 8014d22:	e007      	b.n	8014d34 <memcmp+0x1c>
 8014d24:	5d03      	ldrb	r3, [r0, r4]
 8014d26:	3401      	adds	r4, #1
 8014d28:	190d      	adds	r5, r1, r4
 8014d2a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014d2e:	42ab      	cmp	r3, r5
 8014d30:	d0f4      	beq.n	8014d1c <memcmp+0x4>
 8014d32:	1b58      	subs	r0, r3, r5
 8014d34:	bd30      	pop	{r4, r5, pc}

08014d36 <memcpy>:
 8014d36:	b510      	push	{r4, lr}
 8014d38:	1e43      	subs	r3, r0, #1
 8014d3a:	440a      	add	r2, r1
 8014d3c:	4291      	cmp	r1, r2
 8014d3e:	d100      	bne.n	8014d42 <memcpy+0xc>
 8014d40:	bd10      	pop	{r4, pc}
 8014d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d4a:	e7f7      	b.n	8014d3c <memcpy+0x6>

08014d4c <memset>:
 8014d4c:	4402      	add	r2, r0
 8014d4e:	4603      	mov	r3, r0
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d100      	bne.n	8014d56 <memset+0xa>
 8014d54:	4770      	bx	lr
 8014d56:	f803 1b01 	strb.w	r1, [r3], #1
 8014d5a:	e7f9      	b.n	8014d50 <memset+0x4>

08014d5c <iprintf>:
 8014d5c:	b40f      	push	{r0, r1, r2, r3}
 8014d5e:	4b0a      	ldr	r3, [pc, #40]	; (8014d88 <iprintf+0x2c>)
 8014d60:	b513      	push	{r0, r1, r4, lr}
 8014d62:	681c      	ldr	r4, [r3, #0]
 8014d64:	b124      	cbz	r4, 8014d70 <iprintf+0x14>
 8014d66:	69a3      	ldr	r3, [r4, #24]
 8014d68:	b913      	cbnz	r3, 8014d70 <iprintf+0x14>
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	f000 f97a 	bl	8015064 <__sinit>
 8014d70:	ab05      	add	r3, sp, #20
 8014d72:	9a04      	ldr	r2, [sp, #16]
 8014d74:	68a1      	ldr	r1, [r4, #8]
 8014d76:	9301      	str	r3, [sp, #4]
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f000 fc3f 	bl	80155fc <_vfiprintf_r>
 8014d7e:	b002      	add	sp, #8
 8014d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d84:	b004      	add	sp, #16
 8014d86:	4770      	bx	lr
 8014d88:	20000034 	.word	0x20000034

08014d8c <rand>:
 8014d8c:	b538      	push	{r3, r4, r5, lr}
 8014d8e:	4b13      	ldr	r3, [pc, #76]	; (8014ddc <rand+0x50>)
 8014d90:	681c      	ldr	r4, [r3, #0]
 8014d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014d94:	b97b      	cbnz	r3, 8014db6 <rand+0x2a>
 8014d96:	2018      	movs	r0, #24
 8014d98:	f000 f9f2 	bl	8015180 <malloc>
 8014d9c:	4a10      	ldr	r2, [pc, #64]	; (8014de0 <rand+0x54>)
 8014d9e:	4b11      	ldr	r3, [pc, #68]	; (8014de4 <rand+0x58>)
 8014da0:	63a0      	str	r0, [r4, #56]	; 0x38
 8014da2:	e9c0 2300 	strd	r2, r3, [r0]
 8014da6:	4b10      	ldr	r3, [pc, #64]	; (8014de8 <rand+0x5c>)
 8014da8:	6083      	str	r3, [r0, #8]
 8014daa:	230b      	movs	r3, #11
 8014dac:	8183      	strh	r3, [r0, #12]
 8014dae:	2201      	movs	r2, #1
 8014db0:	2300      	movs	r3, #0
 8014db2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014db6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014db8:	480c      	ldr	r0, [pc, #48]	; (8014dec <rand+0x60>)
 8014dba:	690a      	ldr	r2, [r1, #16]
 8014dbc:	694b      	ldr	r3, [r1, #20]
 8014dbe:	4c0c      	ldr	r4, [pc, #48]	; (8014df0 <rand+0x64>)
 8014dc0:	4350      	muls	r0, r2
 8014dc2:	fb04 0003 	mla	r0, r4, r3, r0
 8014dc6:	fba2 2304 	umull	r2, r3, r2, r4
 8014dca:	4403      	add	r3, r0
 8014dcc:	1c54      	adds	r4, r2, #1
 8014dce:	f143 0500 	adc.w	r5, r3, #0
 8014dd2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8014dd6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8014dda:	bd38      	pop	{r3, r4, r5, pc}
 8014ddc:	20000034 	.word	0x20000034
 8014de0:	abcd330e 	.word	0xabcd330e
 8014de4:	e66d1234 	.word	0xe66d1234
 8014de8:	0005deec 	.word	0x0005deec
 8014dec:	5851f42d 	.word	0x5851f42d
 8014df0:	4c957f2d 	.word	0x4c957f2d

08014df4 <siprintf>:
 8014df4:	b40e      	push	{r1, r2, r3}
 8014df6:	b500      	push	{lr}
 8014df8:	b09c      	sub	sp, #112	; 0x70
 8014dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8014dfc:	9002      	str	r0, [sp, #8]
 8014dfe:	9006      	str	r0, [sp, #24]
 8014e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e04:	4809      	ldr	r0, [pc, #36]	; (8014e2c <siprintf+0x38>)
 8014e06:	9107      	str	r1, [sp, #28]
 8014e08:	9104      	str	r1, [sp, #16]
 8014e0a:	4909      	ldr	r1, [pc, #36]	; (8014e30 <siprintf+0x3c>)
 8014e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e10:	9105      	str	r1, [sp, #20]
 8014e12:	6800      	ldr	r0, [r0, #0]
 8014e14:	9301      	str	r3, [sp, #4]
 8014e16:	a902      	add	r1, sp, #8
 8014e18:	f000 face 	bl	80153b8 <_svfiprintf_r>
 8014e1c:	9b02      	ldr	r3, [sp, #8]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	701a      	strb	r2, [r3, #0]
 8014e22:	b01c      	add	sp, #112	; 0x70
 8014e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e28:	b003      	add	sp, #12
 8014e2a:	4770      	bx	lr
 8014e2c:	20000034 	.word	0x20000034
 8014e30:	ffff0208 	.word	0xffff0208

08014e34 <strchr>:
 8014e34:	b2c9      	uxtb	r1, r1
 8014e36:	4603      	mov	r3, r0
 8014e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e3c:	b11a      	cbz	r2, 8014e46 <strchr+0x12>
 8014e3e:	428a      	cmp	r2, r1
 8014e40:	d1f9      	bne.n	8014e36 <strchr+0x2>
 8014e42:	4618      	mov	r0, r3
 8014e44:	4770      	bx	lr
 8014e46:	2900      	cmp	r1, #0
 8014e48:	bf18      	it	ne
 8014e4a:	2300      	movne	r3, #0
 8014e4c:	e7f9      	b.n	8014e42 <strchr+0xe>

08014e4e <strcpy>:
 8014e4e:	4603      	mov	r3, r0
 8014e50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e54:	f803 2b01 	strb.w	r2, [r3], #1
 8014e58:	2a00      	cmp	r2, #0
 8014e5a:	d1f9      	bne.n	8014e50 <strcpy+0x2>
 8014e5c:	4770      	bx	lr

08014e5e <strncmp>:
 8014e5e:	b510      	push	{r4, lr}
 8014e60:	b16a      	cbz	r2, 8014e7e <strncmp+0x20>
 8014e62:	3901      	subs	r1, #1
 8014e64:	1884      	adds	r4, r0, r2
 8014e66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014e6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d103      	bne.n	8014e7a <strncmp+0x1c>
 8014e72:	42a0      	cmp	r0, r4
 8014e74:	d001      	beq.n	8014e7a <strncmp+0x1c>
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d1f5      	bne.n	8014e66 <strncmp+0x8>
 8014e7a:	1a98      	subs	r0, r3, r2
 8014e7c:	bd10      	pop	{r4, pc}
 8014e7e:	4610      	mov	r0, r2
 8014e80:	e7fc      	b.n	8014e7c <strncmp+0x1e>

08014e82 <_strtol_l.isra.0>:
 8014e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e86:	4680      	mov	r8, r0
 8014e88:	4689      	mov	r9, r1
 8014e8a:	4692      	mov	sl, r2
 8014e8c:	461e      	mov	r6, r3
 8014e8e:	460f      	mov	r7, r1
 8014e90:	463d      	mov	r5, r7
 8014e92:	9808      	ldr	r0, [sp, #32]
 8014e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e98:	f000 f96e 	bl	8015178 <__locale_ctype_ptr_l>
 8014e9c:	4420      	add	r0, r4
 8014e9e:	7843      	ldrb	r3, [r0, #1]
 8014ea0:	f013 0308 	ands.w	r3, r3, #8
 8014ea4:	d132      	bne.n	8014f0c <_strtol_l.isra.0+0x8a>
 8014ea6:	2c2d      	cmp	r4, #45	; 0x2d
 8014ea8:	d132      	bne.n	8014f10 <_strtol_l.isra.0+0x8e>
 8014eaa:	787c      	ldrb	r4, [r7, #1]
 8014eac:	1cbd      	adds	r5, r7, #2
 8014eae:	2201      	movs	r2, #1
 8014eb0:	2e00      	cmp	r6, #0
 8014eb2:	d05d      	beq.n	8014f70 <_strtol_l.isra.0+0xee>
 8014eb4:	2e10      	cmp	r6, #16
 8014eb6:	d109      	bne.n	8014ecc <_strtol_l.isra.0+0x4a>
 8014eb8:	2c30      	cmp	r4, #48	; 0x30
 8014eba:	d107      	bne.n	8014ecc <_strtol_l.isra.0+0x4a>
 8014ebc:	782b      	ldrb	r3, [r5, #0]
 8014ebe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ec2:	2b58      	cmp	r3, #88	; 0x58
 8014ec4:	d14f      	bne.n	8014f66 <_strtol_l.isra.0+0xe4>
 8014ec6:	786c      	ldrb	r4, [r5, #1]
 8014ec8:	2610      	movs	r6, #16
 8014eca:	3502      	adds	r5, #2
 8014ecc:	2a00      	cmp	r2, #0
 8014ece:	bf14      	ite	ne
 8014ed0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014ed4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014ed8:	2700      	movs	r7, #0
 8014eda:	fbb1 fcf6 	udiv	ip, r1, r6
 8014ede:	4638      	mov	r0, r7
 8014ee0:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014ee4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014ee8:	2b09      	cmp	r3, #9
 8014eea:	d817      	bhi.n	8014f1c <_strtol_l.isra.0+0x9a>
 8014eec:	461c      	mov	r4, r3
 8014eee:	42a6      	cmp	r6, r4
 8014ef0:	dd23      	ble.n	8014f3a <_strtol_l.isra.0+0xb8>
 8014ef2:	1c7b      	adds	r3, r7, #1
 8014ef4:	d007      	beq.n	8014f06 <_strtol_l.isra.0+0x84>
 8014ef6:	4584      	cmp	ip, r0
 8014ef8:	d31c      	bcc.n	8014f34 <_strtol_l.isra.0+0xb2>
 8014efa:	d101      	bne.n	8014f00 <_strtol_l.isra.0+0x7e>
 8014efc:	45a6      	cmp	lr, r4
 8014efe:	db19      	blt.n	8014f34 <_strtol_l.isra.0+0xb2>
 8014f00:	fb00 4006 	mla	r0, r0, r6, r4
 8014f04:	2701      	movs	r7, #1
 8014f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f0a:	e7eb      	b.n	8014ee4 <_strtol_l.isra.0+0x62>
 8014f0c:	462f      	mov	r7, r5
 8014f0e:	e7bf      	b.n	8014e90 <_strtol_l.isra.0+0xe>
 8014f10:	2c2b      	cmp	r4, #43	; 0x2b
 8014f12:	bf04      	itt	eq
 8014f14:	1cbd      	addeq	r5, r7, #2
 8014f16:	787c      	ldrbeq	r4, [r7, #1]
 8014f18:	461a      	mov	r2, r3
 8014f1a:	e7c9      	b.n	8014eb0 <_strtol_l.isra.0+0x2e>
 8014f1c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014f20:	2b19      	cmp	r3, #25
 8014f22:	d801      	bhi.n	8014f28 <_strtol_l.isra.0+0xa6>
 8014f24:	3c37      	subs	r4, #55	; 0x37
 8014f26:	e7e2      	b.n	8014eee <_strtol_l.isra.0+0x6c>
 8014f28:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014f2c:	2b19      	cmp	r3, #25
 8014f2e:	d804      	bhi.n	8014f3a <_strtol_l.isra.0+0xb8>
 8014f30:	3c57      	subs	r4, #87	; 0x57
 8014f32:	e7dc      	b.n	8014eee <_strtol_l.isra.0+0x6c>
 8014f34:	f04f 37ff 	mov.w	r7, #4294967295
 8014f38:	e7e5      	b.n	8014f06 <_strtol_l.isra.0+0x84>
 8014f3a:	1c7b      	adds	r3, r7, #1
 8014f3c:	d108      	bne.n	8014f50 <_strtol_l.isra.0+0xce>
 8014f3e:	2322      	movs	r3, #34	; 0x22
 8014f40:	f8c8 3000 	str.w	r3, [r8]
 8014f44:	4608      	mov	r0, r1
 8014f46:	f1ba 0f00 	cmp.w	sl, #0
 8014f4a:	d107      	bne.n	8014f5c <_strtol_l.isra.0+0xda>
 8014f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f50:	b102      	cbz	r2, 8014f54 <_strtol_l.isra.0+0xd2>
 8014f52:	4240      	negs	r0, r0
 8014f54:	f1ba 0f00 	cmp.w	sl, #0
 8014f58:	d0f8      	beq.n	8014f4c <_strtol_l.isra.0+0xca>
 8014f5a:	b10f      	cbz	r7, 8014f60 <_strtol_l.isra.0+0xde>
 8014f5c:	f105 39ff 	add.w	r9, r5, #4294967295
 8014f60:	f8ca 9000 	str.w	r9, [sl]
 8014f64:	e7f2      	b.n	8014f4c <_strtol_l.isra.0+0xca>
 8014f66:	2430      	movs	r4, #48	; 0x30
 8014f68:	2e00      	cmp	r6, #0
 8014f6a:	d1af      	bne.n	8014ecc <_strtol_l.isra.0+0x4a>
 8014f6c:	2608      	movs	r6, #8
 8014f6e:	e7ad      	b.n	8014ecc <_strtol_l.isra.0+0x4a>
 8014f70:	2c30      	cmp	r4, #48	; 0x30
 8014f72:	d0a3      	beq.n	8014ebc <_strtol_l.isra.0+0x3a>
 8014f74:	260a      	movs	r6, #10
 8014f76:	e7a9      	b.n	8014ecc <_strtol_l.isra.0+0x4a>

08014f78 <strtol>:
 8014f78:	4b08      	ldr	r3, [pc, #32]	; (8014f9c <strtol+0x24>)
 8014f7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f7c:	681c      	ldr	r4, [r3, #0]
 8014f7e:	4d08      	ldr	r5, [pc, #32]	; (8014fa0 <strtol+0x28>)
 8014f80:	6a23      	ldr	r3, [r4, #32]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	bf08      	it	eq
 8014f86:	462b      	moveq	r3, r5
 8014f88:	9300      	str	r3, [sp, #0]
 8014f8a:	4613      	mov	r3, r2
 8014f8c:	460a      	mov	r2, r1
 8014f8e:	4601      	mov	r1, r0
 8014f90:	4620      	mov	r0, r4
 8014f92:	f7ff ff76 	bl	8014e82 <_strtol_l.isra.0>
 8014f96:	b003      	add	sp, #12
 8014f98:	bd30      	pop	{r4, r5, pc}
 8014f9a:	bf00      	nop
 8014f9c:	20000034 	.word	0x20000034
 8014fa0:	20000098 	.word	0x20000098

08014fa4 <_vsiprintf_r>:
 8014fa4:	b500      	push	{lr}
 8014fa6:	b09b      	sub	sp, #108	; 0x6c
 8014fa8:	9100      	str	r1, [sp, #0]
 8014faa:	9104      	str	r1, [sp, #16]
 8014fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014fb0:	9105      	str	r1, [sp, #20]
 8014fb2:	9102      	str	r1, [sp, #8]
 8014fb4:	4905      	ldr	r1, [pc, #20]	; (8014fcc <_vsiprintf_r+0x28>)
 8014fb6:	9103      	str	r1, [sp, #12]
 8014fb8:	4669      	mov	r1, sp
 8014fba:	f000 f9fd 	bl	80153b8 <_svfiprintf_r>
 8014fbe:	9b00      	ldr	r3, [sp, #0]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	701a      	strb	r2, [r3, #0]
 8014fc4:	b01b      	add	sp, #108	; 0x6c
 8014fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fca:	bf00      	nop
 8014fcc:	ffff0208 	.word	0xffff0208

08014fd0 <vsiprintf>:
 8014fd0:	4613      	mov	r3, r2
 8014fd2:	460a      	mov	r2, r1
 8014fd4:	4601      	mov	r1, r0
 8014fd6:	4802      	ldr	r0, [pc, #8]	; (8014fe0 <vsiprintf+0x10>)
 8014fd8:	6800      	ldr	r0, [r0, #0]
 8014fda:	f7ff bfe3 	b.w	8014fa4 <_vsiprintf_r>
 8014fde:	bf00      	nop
 8014fe0:	20000034 	.word	0x20000034

08014fe4 <std>:
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	b510      	push	{r4, lr}
 8014fe8:	4604      	mov	r4, r0
 8014fea:	e9c0 3300 	strd	r3, r3, [r0]
 8014fee:	6083      	str	r3, [r0, #8]
 8014ff0:	8181      	strh	r1, [r0, #12]
 8014ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8014ff4:	81c2      	strh	r2, [r0, #14]
 8014ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ffa:	6183      	str	r3, [r0, #24]
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	2208      	movs	r2, #8
 8015000:	305c      	adds	r0, #92	; 0x5c
 8015002:	f7ff fea3 	bl	8014d4c <memset>
 8015006:	4b05      	ldr	r3, [pc, #20]	; (801501c <std+0x38>)
 8015008:	6263      	str	r3, [r4, #36]	; 0x24
 801500a:	4b05      	ldr	r3, [pc, #20]	; (8015020 <std+0x3c>)
 801500c:	62a3      	str	r3, [r4, #40]	; 0x28
 801500e:	4b05      	ldr	r3, [pc, #20]	; (8015024 <std+0x40>)
 8015010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015012:	4b05      	ldr	r3, [pc, #20]	; (8015028 <std+0x44>)
 8015014:	6224      	str	r4, [r4, #32]
 8015016:	6323      	str	r3, [r4, #48]	; 0x30
 8015018:	bd10      	pop	{r4, pc}
 801501a:	bf00      	nop
 801501c:	08015b59 	.word	0x08015b59
 8015020:	08015b7b 	.word	0x08015b7b
 8015024:	08015bb3 	.word	0x08015bb3
 8015028:	08015bd7 	.word	0x08015bd7

0801502c <_cleanup_r>:
 801502c:	4901      	ldr	r1, [pc, #4]	; (8015034 <_cleanup_r+0x8>)
 801502e:	f000 b885 	b.w	801513c <_fwalk_reent>
 8015032:	bf00      	nop
 8015034:	08015ecd 	.word	0x08015ecd

08015038 <__sfmoreglue>:
 8015038:	b570      	push	{r4, r5, r6, lr}
 801503a:	1e4a      	subs	r2, r1, #1
 801503c:	2568      	movs	r5, #104	; 0x68
 801503e:	4355      	muls	r5, r2
 8015040:	460e      	mov	r6, r1
 8015042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015046:	f000 f903 	bl	8015250 <_malloc_r>
 801504a:	4604      	mov	r4, r0
 801504c:	b140      	cbz	r0, 8015060 <__sfmoreglue+0x28>
 801504e:	2100      	movs	r1, #0
 8015050:	e9c0 1600 	strd	r1, r6, [r0]
 8015054:	300c      	adds	r0, #12
 8015056:	60a0      	str	r0, [r4, #8]
 8015058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801505c:	f7ff fe76 	bl	8014d4c <memset>
 8015060:	4620      	mov	r0, r4
 8015062:	bd70      	pop	{r4, r5, r6, pc}

08015064 <__sinit>:
 8015064:	6983      	ldr	r3, [r0, #24]
 8015066:	b510      	push	{r4, lr}
 8015068:	4604      	mov	r4, r0
 801506a:	bb33      	cbnz	r3, 80150ba <__sinit+0x56>
 801506c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015070:	6503      	str	r3, [r0, #80]	; 0x50
 8015072:	4b12      	ldr	r3, [pc, #72]	; (80150bc <__sinit+0x58>)
 8015074:	4a12      	ldr	r2, [pc, #72]	; (80150c0 <__sinit+0x5c>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	6282      	str	r2, [r0, #40]	; 0x28
 801507a:	4298      	cmp	r0, r3
 801507c:	bf04      	itt	eq
 801507e:	2301      	moveq	r3, #1
 8015080:	6183      	streq	r3, [r0, #24]
 8015082:	f000 f81f 	bl	80150c4 <__sfp>
 8015086:	6060      	str	r0, [r4, #4]
 8015088:	4620      	mov	r0, r4
 801508a:	f000 f81b 	bl	80150c4 <__sfp>
 801508e:	60a0      	str	r0, [r4, #8]
 8015090:	4620      	mov	r0, r4
 8015092:	f000 f817 	bl	80150c4 <__sfp>
 8015096:	2200      	movs	r2, #0
 8015098:	60e0      	str	r0, [r4, #12]
 801509a:	2104      	movs	r1, #4
 801509c:	6860      	ldr	r0, [r4, #4]
 801509e:	f7ff ffa1 	bl	8014fe4 <std>
 80150a2:	2201      	movs	r2, #1
 80150a4:	2109      	movs	r1, #9
 80150a6:	68a0      	ldr	r0, [r4, #8]
 80150a8:	f7ff ff9c 	bl	8014fe4 <std>
 80150ac:	2202      	movs	r2, #2
 80150ae:	2112      	movs	r1, #18
 80150b0:	68e0      	ldr	r0, [r4, #12]
 80150b2:	f7ff ff97 	bl	8014fe4 <std>
 80150b6:	2301      	movs	r3, #1
 80150b8:	61a3      	str	r3, [r4, #24]
 80150ba:	bd10      	pop	{r4, pc}
 80150bc:	0801984c 	.word	0x0801984c
 80150c0:	0801502d 	.word	0x0801502d

080150c4 <__sfp>:
 80150c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c6:	4b1b      	ldr	r3, [pc, #108]	; (8015134 <__sfp+0x70>)
 80150c8:	681e      	ldr	r6, [r3, #0]
 80150ca:	69b3      	ldr	r3, [r6, #24]
 80150cc:	4607      	mov	r7, r0
 80150ce:	b913      	cbnz	r3, 80150d6 <__sfp+0x12>
 80150d0:	4630      	mov	r0, r6
 80150d2:	f7ff ffc7 	bl	8015064 <__sinit>
 80150d6:	3648      	adds	r6, #72	; 0x48
 80150d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150dc:	3b01      	subs	r3, #1
 80150de:	d503      	bpl.n	80150e8 <__sfp+0x24>
 80150e0:	6833      	ldr	r3, [r6, #0]
 80150e2:	b133      	cbz	r3, 80150f2 <__sfp+0x2e>
 80150e4:	6836      	ldr	r6, [r6, #0]
 80150e6:	e7f7      	b.n	80150d8 <__sfp+0x14>
 80150e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80150ec:	b16d      	cbz	r5, 801510a <__sfp+0x46>
 80150ee:	3468      	adds	r4, #104	; 0x68
 80150f0:	e7f4      	b.n	80150dc <__sfp+0x18>
 80150f2:	2104      	movs	r1, #4
 80150f4:	4638      	mov	r0, r7
 80150f6:	f7ff ff9f 	bl	8015038 <__sfmoreglue>
 80150fa:	6030      	str	r0, [r6, #0]
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d1f1      	bne.n	80150e4 <__sfp+0x20>
 8015100:	230c      	movs	r3, #12
 8015102:	603b      	str	r3, [r7, #0]
 8015104:	4604      	mov	r4, r0
 8015106:	4620      	mov	r0, r4
 8015108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801510a:	4b0b      	ldr	r3, [pc, #44]	; (8015138 <__sfp+0x74>)
 801510c:	6665      	str	r5, [r4, #100]	; 0x64
 801510e:	e9c4 5500 	strd	r5, r5, [r4]
 8015112:	60a5      	str	r5, [r4, #8]
 8015114:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015118:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801511c:	2208      	movs	r2, #8
 801511e:	4629      	mov	r1, r5
 8015120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015124:	f7ff fe12 	bl	8014d4c <memset>
 8015128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801512c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015130:	e7e9      	b.n	8015106 <__sfp+0x42>
 8015132:	bf00      	nop
 8015134:	0801984c 	.word	0x0801984c
 8015138:	ffff0001 	.word	0xffff0001

0801513c <_fwalk_reent>:
 801513c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015140:	4680      	mov	r8, r0
 8015142:	4689      	mov	r9, r1
 8015144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015148:	2600      	movs	r6, #0
 801514a:	b914      	cbnz	r4, 8015152 <_fwalk_reent+0x16>
 801514c:	4630      	mov	r0, r6
 801514e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015152:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015156:	3f01      	subs	r7, #1
 8015158:	d501      	bpl.n	801515e <_fwalk_reent+0x22>
 801515a:	6824      	ldr	r4, [r4, #0]
 801515c:	e7f5      	b.n	801514a <_fwalk_reent+0xe>
 801515e:	89ab      	ldrh	r3, [r5, #12]
 8015160:	2b01      	cmp	r3, #1
 8015162:	d907      	bls.n	8015174 <_fwalk_reent+0x38>
 8015164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015168:	3301      	adds	r3, #1
 801516a:	d003      	beq.n	8015174 <_fwalk_reent+0x38>
 801516c:	4629      	mov	r1, r5
 801516e:	4640      	mov	r0, r8
 8015170:	47c8      	blx	r9
 8015172:	4306      	orrs	r6, r0
 8015174:	3568      	adds	r5, #104	; 0x68
 8015176:	e7ee      	b.n	8015156 <_fwalk_reent+0x1a>

08015178 <__locale_ctype_ptr_l>:
 8015178:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801517c:	4770      	bx	lr
	...

08015180 <malloc>:
 8015180:	4b02      	ldr	r3, [pc, #8]	; (801518c <malloc+0xc>)
 8015182:	4601      	mov	r1, r0
 8015184:	6818      	ldr	r0, [r3, #0]
 8015186:	f000 b863 	b.w	8015250 <_malloc_r>
 801518a:	bf00      	nop
 801518c:	20000034 	.word	0x20000034

08015190 <__ascii_mbtowc>:
 8015190:	b082      	sub	sp, #8
 8015192:	b901      	cbnz	r1, 8015196 <__ascii_mbtowc+0x6>
 8015194:	a901      	add	r1, sp, #4
 8015196:	b142      	cbz	r2, 80151aa <__ascii_mbtowc+0x1a>
 8015198:	b14b      	cbz	r3, 80151ae <__ascii_mbtowc+0x1e>
 801519a:	7813      	ldrb	r3, [r2, #0]
 801519c:	600b      	str	r3, [r1, #0]
 801519e:	7812      	ldrb	r2, [r2, #0]
 80151a0:	1c10      	adds	r0, r2, #0
 80151a2:	bf18      	it	ne
 80151a4:	2001      	movne	r0, #1
 80151a6:	b002      	add	sp, #8
 80151a8:	4770      	bx	lr
 80151aa:	4610      	mov	r0, r2
 80151ac:	e7fb      	b.n	80151a6 <__ascii_mbtowc+0x16>
 80151ae:	f06f 0001 	mvn.w	r0, #1
 80151b2:	e7f8      	b.n	80151a6 <__ascii_mbtowc+0x16>

080151b4 <_free_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	4605      	mov	r5, r0
 80151b8:	2900      	cmp	r1, #0
 80151ba:	d045      	beq.n	8015248 <_free_r+0x94>
 80151bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151c0:	1f0c      	subs	r4, r1, #4
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	bfb8      	it	lt
 80151c6:	18e4      	addlt	r4, r4, r3
 80151c8:	f000 ff39 	bl	801603e <__malloc_lock>
 80151cc:	4a1f      	ldr	r2, [pc, #124]	; (801524c <_free_r+0x98>)
 80151ce:	6813      	ldr	r3, [r2, #0]
 80151d0:	4610      	mov	r0, r2
 80151d2:	b933      	cbnz	r3, 80151e2 <_free_r+0x2e>
 80151d4:	6063      	str	r3, [r4, #4]
 80151d6:	6014      	str	r4, [r2, #0]
 80151d8:	4628      	mov	r0, r5
 80151da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151de:	f000 bf2f 	b.w	8016040 <__malloc_unlock>
 80151e2:	42a3      	cmp	r3, r4
 80151e4:	d90c      	bls.n	8015200 <_free_r+0x4c>
 80151e6:	6821      	ldr	r1, [r4, #0]
 80151e8:	1862      	adds	r2, r4, r1
 80151ea:	4293      	cmp	r3, r2
 80151ec:	bf04      	itt	eq
 80151ee:	681a      	ldreq	r2, [r3, #0]
 80151f0:	685b      	ldreq	r3, [r3, #4]
 80151f2:	6063      	str	r3, [r4, #4]
 80151f4:	bf04      	itt	eq
 80151f6:	1852      	addeq	r2, r2, r1
 80151f8:	6022      	streq	r2, [r4, #0]
 80151fa:	6004      	str	r4, [r0, #0]
 80151fc:	e7ec      	b.n	80151d8 <_free_r+0x24>
 80151fe:	4613      	mov	r3, r2
 8015200:	685a      	ldr	r2, [r3, #4]
 8015202:	b10a      	cbz	r2, 8015208 <_free_r+0x54>
 8015204:	42a2      	cmp	r2, r4
 8015206:	d9fa      	bls.n	80151fe <_free_r+0x4a>
 8015208:	6819      	ldr	r1, [r3, #0]
 801520a:	1858      	adds	r0, r3, r1
 801520c:	42a0      	cmp	r0, r4
 801520e:	d10b      	bne.n	8015228 <_free_r+0x74>
 8015210:	6820      	ldr	r0, [r4, #0]
 8015212:	4401      	add	r1, r0
 8015214:	1858      	adds	r0, r3, r1
 8015216:	4282      	cmp	r2, r0
 8015218:	6019      	str	r1, [r3, #0]
 801521a:	d1dd      	bne.n	80151d8 <_free_r+0x24>
 801521c:	6810      	ldr	r0, [r2, #0]
 801521e:	6852      	ldr	r2, [r2, #4]
 8015220:	605a      	str	r2, [r3, #4]
 8015222:	4401      	add	r1, r0
 8015224:	6019      	str	r1, [r3, #0]
 8015226:	e7d7      	b.n	80151d8 <_free_r+0x24>
 8015228:	d902      	bls.n	8015230 <_free_r+0x7c>
 801522a:	230c      	movs	r3, #12
 801522c:	602b      	str	r3, [r5, #0]
 801522e:	e7d3      	b.n	80151d8 <_free_r+0x24>
 8015230:	6820      	ldr	r0, [r4, #0]
 8015232:	1821      	adds	r1, r4, r0
 8015234:	428a      	cmp	r2, r1
 8015236:	bf04      	itt	eq
 8015238:	6811      	ldreq	r1, [r2, #0]
 801523a:	6852      	ldreq	r2, [r2, #4]
 801523c:	6062      	str	r2, [r4, #4]
 801523e:	bf04      	itt	eq
 8015240:	1809      	addeq	r1, r1, r0
 8015242:	6021      	streq	r1, [r4, #0]
 8015244:	605c      	str	r4, [r3, #4]
 8015246:	e7c7      	b.n	80151d8 <_free_r+0x24>
 8015248:	bd38      	pop	{r3, r4, r5, pc}
 801524a:	bf00      	nop
 801524c:	200008d8 	.word	0x200008d8

08015250 <_malloc_r>:
 8015250:	b570      	push	{r4, r5, r6, lr}
 8015252:	1ccd      	adds	r5, r1, #3
 8015254:	f025 0503 	bic.w	r5, r5, #3
 8015258:	3508      	adds	r5, #8
 801525a:	2d0c      	cmp	r5, #12
 801525c:	bf38      	it	cc
 801525e:	250c      	movcc	r5, #12
 8015260:	2d00      	cmp	r5, #0
 8015262:	4606      	mov	r6, r0
 8015264:	db01      	blt.n	801526a <_malloc_r+0x1a>
 8015266:	42a9      	cmp	r1, r5
 8015268:	d903      	bls.n	8015272 <_malloc_r+0x22>
 801526a:	230c      	movs	r3, #12
 801526c:	6033      	str	r3, [r6, #0]
 801526e:	2000      	movs	r0, #0
 8015270:	bd70      	pop	{r4, r5, r6, pc}
 8015272:	f000 fee4 	bl	801603e <__malloc_lock>
 8015276:	4a21      	ldr	r2, [pc, #132]	; (80152fc <_malloc_r+0xac>)
 8015278:	6814      	ldr	r4, [r2, #0]
 801527a:	4621      	mov	r1, r4
 801527c:	b991      	cbnz	r1, 80152a4 <_malloc_r+0x54>
 801527e:	4c20      	ldr	r4, [pc, #128]	; (8015300 <_malloc_r+0xb0>)
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	b91b      	cbnz	r3, 801528c <_malloc_r+0x3c>
 8015284:	4630      	mov	r0, r6
 8015286:	f000 fc57 	bl	8015b38 <_sbrk_r>
 801528a:	6020      	str	r0, [r4, #0]
 801528c:	4629      	mov	r1, r5
 801528e:	4630      	mov	r0, r6
 8015290:	f000 fc52 	bl	8015b38 <_sbrk_r>
 8015294:	1c43      	adds	r3, r0, #1
 8015296:	d124      	bne.n	80152e2 <_malloc_r+0x92>
 8015298:	230c      	movs	r3, #12
 801529a:	6033      	str	r3, [r6, #0]
 801529c:	4630      	mov	r0, r6
 801529e:	f000 fecf 	bl	8016040 <__malloc_unlock>
 80152a2:	e7e4      	b.n	801526e <_malloc_r+0x1e>
 80152a4:	680b      	ldr	r3, [r1, #0]
 80152a6:	1b5b      	subs	r3, r3, r5
 80152a8:	d418      	bmi.n	80152dc <_malloc_r+0x8c>
 80152aa:	2b0b      	cmp	r3, #11
 80152ac:	d90f      	bls.n	80152ce <_malloc_r+0x7e>
 80152ae:	600b      	str	r3, [r1, #0]
 80152b0:	50cd      	str	r5, [r1, r3]
 80152b2:	18cc      	adds	r4, r1, r3
 80152b4:	4630      	mov	r0, r6
 80152b6:	f000 fec3 	bl	8016040 <__malloc_unlock>
 80152ba:	f104 000b 	add.w	r0, r4, #11
 80152be:	1d23      	adds	r3, r4, #4
 80152c0:	f020 0007 	bic.w	r0, r0, #7
 80152c4:	1ac3      	subs	r3, r0, r3
 80152c6:	d0d3      	beq.n	8015270 <_malloc_r+0x20>
 80152c8:	425a      	negs	r2, r3
 80152ca:	50e2      	str	r2, [r4, r3]
 80152cc:	e7d0      	b.n	8015270 <_malloc_r+0x20>
 80152ce:	428c      	cmp	r4, r1
 80152d0:	684b      	ldr	r3, [r1, #4]
 80152d2:	bf16      	itet	ne
 80152d4:	6063      	strne	r3, [r4, #4]
 80152d6:	6013      	streq	r3, [r2, #0]
 80152d8:	460c      	movne	r4, r1
 80152da:	e7eb      	b.n	80152b4 <_malloc_r+0x64>
 80152dc:	460c      	mov	r4, r1
 80152de:	6849      	ldr	r1, [r1, #4]
 80152e0:	e7cc      	b.n	801527c <_malloc_r+0x2c>
 80152e2:	1cc4      	adds	r4, r0, #3
 80152e4:	f024 0403 	bic.w	r4, r4, #3
 80152e8:	42a0      	cmp	r0, r4
 80152ea:	d005      	beq.n	80152f8 <_malloc_r+0xa8>
 80152ec:	1a21      	subs	r1, r4, r0
 80152ee:	4630      	mov	r0, r6
 80152f0:	f000 fc22 	bl	8015b38 <_sbrk_r>
 80152f4:	3001      	adds	r0, #1
 80152f6:	d0cf      	beq.n	8015298 <_malloc_r+0x48>
 80152f8:	6025      	str	r5, [r4, #0]
 80152fa:	e7db      	b.n	80152b4 <_malloc_r+0x64>
 80152fc:	200008d8 	.word	0x200008d8
 8015300:	200008dc 	.word	0x200008dc

08015304 <__ssputs_r>:
 8015304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015308:	688e      	ldr	r6, [r1, #8]
 801530a:	429e      	cmp	r6, r3
 801530c:	4682      	mov	sl, r0
 801530e:	460c      	mov	r4, r1
 8015310:	4690      	mov	r8, r2
 8015312:	4699      	mov	r9, r3
 8015314:	d837      	bhi.n	8015386 <__ssputs_r+0x82>
 8015316:	898a      	ldrh	r2, [r1, #12]
 8015318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801531c:	d031      	beq.n	8015382 <__ssputs_r+0x7e>
 801531e:	6825      	ldr	r5, [r4, #0]
 8015320:	6909      	ldr	r1, [r1, #16]
 8015322:	1a6f      	subs	r7, r5, r1
 8015324:	6965      	ldr	r5, [r4, #20]
 8015326:	2302      	movs	r3, #2
 8015328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801532c:	fb95 f5f3 	sdiv	r5, r5, r3
 8015330:	f109 0301 	add.w	r3, r9, #1
 8015334:	443b      	add	r3, r7
 8015336:	429d      	cmp	r5, r3
 8015338:	bf38      	it	cc
 801533a:	461d      	movcc	r5, r3
 801533c:	0553      	lsls	r3, r2, #21
 801533e:	d530      	bpl.n	80153a2 <__ssputs_r+0x9e>
 8015340:	4629      	mov	r1, r5
 8015342:	f7ff ff85 	bl	8015250 <_malloc_r>
 8015346:	4606      	mov	r6, r0
 8015348:	b950      	cbnz	r0, 8015360 <__ssputs_r+0x5c>
 801534a:	230c      	movs	r3, #12
 801534c:	f8ca 3000 	str.w	r3, [sl]
 8015350:	89a3      	ldrh	r3, [r4, #12]
 8015352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015356:	81a3      	strh	r3, [r4, #12]
 8015358:	f04f 30ff 	mov.w	r0, #4294967295
 801535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015360:	463a      	mov	r2, r7
 8015362:	6921      	ldr	r1, [r4, #16]
 8015364:	f7ff fce7 	bl	8014d36 <memcpy>
 8015368:	89a3      	ldrh	r3, [r4, #12]
 801536a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801536e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015372:	81a3      	strh	r3, [r4, #12]
 8015374:	6126      	str	r6, [r4, #16]
 8015376:	6165      	str	r5, [r4, #20]
 8015378:	443e      	add	r6, r7
 801537a:	1bed      	subs	r5, r5, r7
 801537c:	6026      	str	r6, [r4, #0]
 801537e:	60a5      	str	r5, [r4, #8]
 8015380:	464e      	mov	r6, r9
 8015382:	454e      	cmp	r6, r9
 8015384:	d900      	bls.n	8015388 <__ssputs_r+0x84>
 8015386:	464e      	mov	r6, r9
 8015388:	4632      	mov	r2, r6
 801538a:	4641      	mov	r1, r8
 801538c:	6820      	ldr	r0, [r4, #0]
 801538e:	f000 fe3d 	bl	801600c <memmove>
 8015392:	68a3      	ldr	r3, [r4, #8]
 8015394:	1b9b      	subs	r3, r3, r6
 8015396:	60a3      	str	r3, [r4, #8]
 8015398:	6823      	ldr	r3, [r4, #0]
 801539a:	441e      	add	r6, r3
 801539c:	6026      	str	r6, [r4, #0]
 801539e:	2000      	movs	r0, #0
 80153a0:	e7dc      	b.n	801535c <__ssputs_r+0x58>
 80153a2:	462a      	mov	r2, r5
 80153a4:	f000 fe4d 	bl	8016042 <_realloc_r>
 80153a8:	4606      	mov	r6, r0
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d1e2      	bne.n	8015374 <__ssputs_r+0x70>
 80153ae:	6921      	ldr	r1, [r4, #16]
 80153b0:	4650      	mov	r0, sl
 80153b2:	f7ff feff 	bl	80151b4 <_free_r>
 80153b6:	e7c8      	b.n	801534a <__ssputs_r+0x46>

080153b8 <_svfiprintf_r>:
 80153b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153bc:	461d      	mov	r5, r3
 80153be:	898b      	ldrh	r3, [r1, #12]
 80153c0:	061f      	lsls	r7, r3, #24
 80153c2:	b09d      	sub	sp, #116	; 0x74
 80153c4:	4680      	mov	r8, r0
 80153c6:	460c      	mov	r4, r1
 80153c8:	4616      	mov	r6, r2
 80153ca:	d50f      	bpl.n	80153ec <_svfiprintf_r+0x34>
 80153cc:	690b      	ldr	r3, [r1, #16]
 80153ce:	b96b      	cbnz	r3, 80153ec <_svfiprintf_r+0x34>
 80153d0:	2140      	movs	r1, #64	; 0x40
 80153d2:	f7ff ff3d 	bl	8015250 <_malloc_r>
 80153d6:	6020      	str	r0, [r4, #0]
 80153d8:	6120      	str	r0, [r4, #16]
 80153da:	b928      	cbnz	r0, 80153e8 <_svfiprintf_r+0x30>
 80153dc:	230c      	movs	r3, #12
 80153de:	f8c8 3000 	str.w	r3, [r8]
 80153e2:	f04f 30ff 	mov.w	r0, #4294967295
 80153e6:	e0c8      	b.n	801557a <_svfiprintf_r+0x1c2>
 80153e8:	2340      	movs	r3, #64	; 0x40
 80153ea:	6163      	str	r3, [r4, #20]
 80153ec:	2300      	movs	r3, #0
 80153ee:	9309      	str	r3, [sp, #36]	; 0x24
 80153f0:	2320      	movs	r3, #32
 80153f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153f6:	2330      	movs	r3, #48	; 0x30
 80153f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80153fc:	9503      	str	r5, [sp, #12]
 80153fe:	f04f 0b01 	mov.w	fp, #1
 8015402:	4637      	mov	r7, r6
 8015404:	463d      	mov	r5, r7
 8015406:	f815 3b01 	ldrb.w	r3, [r5], #1
 801540a:	b10b      	cbz	r3, 8015410 <_svfiprintf_r+0x58>
 801540c:	2b25      	cmp	r3, #37	; 0x25
 801540e:	d13e      	bne.n	801548e <_svfiprintf_r+0xd6>
 8015410:	ebb7 0a06 	subs.w	sl, r7, r6
 8015414:	d00b      	beq.n	801542e <_svfiprintf_r+0x76>
 8015416:	4653      	mov	r3, sl
 8015418:	4632      	mov	r2, r6
 801541a:	4621      	mov	r1, r4
 801541c:	4640      	mov	r0, r8
 801541e:	f7ff ff71 	bl	8015304 <__ssputs_r>
 8015422:	3001      	adds	r0, #1
 8015424:	f000 80a4 	beq.w	8015570 <_svfiprintf_r+0x1b8>
 8015428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801542a:	4453      	add	r3, sl
 801542c:	9309      	str	r3, [sp, #36]	; 0x24
 801542e:	783b      	ldrb	r3, [r7, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	f000 809d 	beq.w	8015570 <_svfiprintf_r+0x1b8>
 8015436:	2300      	movs	r3, #0
 8015438:	f04f 32ff 	mov.w	r2, #4294967295
 801543c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015440:	9304      	str	r3, [sp, #16]
 8015442:	9307      	str	r3, [sp, #28]
 8015444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015448:	931a      	str	r3, [sp, #104]	; 0x68
 801544a:	462f      	mov	r7, r5
 801544c:	2205      	movs	r2, #5
 801544e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015452:	4850      	ldr	r0, [pc, #320]	; (8015594 <_svfiprintf_r+0x1dc>)
 8015454:	f7ea fed4 	bl	8000200 <memchr>
 8015458:	9b04      	ldr	r3, [sp, #16]
 801545a:	b9d0      	cbnz	r0, 8015492 <_svfiprintf_r+0xda>
 801545c:	06d9      	lsls	r1, r3, #27
 801545e:	bf44      	itt	mi
 8015460:	2220      	movmi	r2, #32
 8015462:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015466:	071a      	lsls	r2, r3, #28
 8015468:	bf44      	itt	mi
 801546a:	222b      	movmi	r2, #43	; 0x2b
 801546c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015470:	782a      	ldrb	r2, [r5, #0]
 8015472:	2a2a      	cmp	r2, #42	; 0x2a
 8015474:	d015      	beq.n	80154a2 <_svfiprintf_r+0xea>
 8015476:	9a07      	ldr	r2, [sp, #28]
 8015478:	462f      	mov	r7, r5
 801547a:	2000      	movs	r0, #0
 801547c:	250a      	movs	r5, #10
 801547e:	4639      	mov	r1, r7
 8015480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015484:	3b30      	subs	r3, #48	; 0x30
 8015486:	2b09      	cmp	r3, #9
 8015488:	d94d      	bls.n	8015526 <_svfiprintf_r+0x16e>
 801548a:	b1b8      	cbz	r0, 80154bc <_svfiprintf_r+0x104>
 801548c:	e00f      	b.n	80154ae <_svfiprintf_r+0xf6>
 801548e:	462f      	mov	r7, r5
 8015490:	e7b8      	b.n	8015404 <_svfiprintf_r+0x4c>
 8015492:	4a40      	ldr	r2, [pc, #256]	; (8015594 <_svfiprintf_r+0x1dc>)
 8015494:	1a80      	subs	r0, r0, r2
 8015496:	fa0b f000 	lsl.w	r0, fp, r0
 801549a:	4318      	orrs	r0, r3
 801549c:	9004      	str	r0, [sp, #16]
 801549e:	463d      	mov	r5, r7
 80154a0:	e7d3      	b.n	801544a <_svfiprintf_r+0x92>
 80154a2:	9a03      	ldr	r2, [sp, #12]
 80154a4:	1d11      	adds	r1, r2, #4
 80154a6:	6812      	ldr	r2, [r2, #0]
 80154a8:	9103      	str	r1, [sp, #12]
 80154aa:	2a00      	cmp	r2, #0
 80154ac:	db01      	blt.n	80154b2 <_svfiprintf_r+0xfa>
 80154ae:	9207      	str	r2, [sp, #28]
 80154b0:	e004      	b.n	80154bc <_svfiprintf_r+0x104>
 80154b2:	4252      	negs	r2, r2
 80154b4:	f043 0302 	orr.w	r3, r3, #2
 80154b8:	9207      	str	r2, [sp, #28]
 80154ba:	9304      	str	r3, [sp, #16]
 80154bc:	783b      	ldrb	r3, [r7, #0]
 80154be:	2b2e      	cmp	r3, #46	; 0x2e
 80154c0:	d10c      	bne.n	80154dc <_svfiprintf_r+0x124>
 80154c2:	787b      	ldrb	r3, [r7, #1]
 80154c4:	2b2a      	cmp	r3, #42	; 0x2a
 80154c6:	d133      	bne.n	8015530 <_svfiprintf_r+0x178>
 80154c8:	9b03      	ldr	r3, [sp, #12]
 80154ca:	1d1a      	adds	r2, r3, #4
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	9203      	str	r2, [sp, #12]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	bfb8      	it	lt
 80154d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80154d8:	3702      	adds	r7, #2
 80154da:	9305      	str	r3, [sp, #20]
 80154dc:	4d2e      	ldr	r5, [pc, #184]	; (8015598 <_svfiprintf_r+0x1e0>)
 80154de:	7839      	ldrb	r1, [r7, #0]
 80154e0:	2203      	movs	r2, #3
 80154e2:	4628      	mov	r0, r5
 80154e4:	f7ea fe8c 	bl	8000200 <memchr>
 80154e8:	b138      	cbz	r0, 80154fa <_svfiprintf_r+0x142>
 80154ea:	2340      	movs	r3, #64	; 0x40
 80154ec:	1b40      	subs	r0, r0, r5
 80154ee:	fa03 f000 	lsl.w	r0, r3, r0
 80154f2:	9b04      	ldr	r3, [sp, #16]
 80154f4:	4303      	orrs	r3, r0
 80154f6:	3701      	adds	r7, #1
 80154f8:	9304      	str	r3, [sp, #16]
 80154fa:	7839      	ldrb	r1, [r7, #0]
 80154fc:	4827      	ldr	r0, [pc, #156]	; (801559c <_svfiprintf_r+0x1e4>)
 80154fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015502:	2206      	movs	r2, #6
 8015504:	1c7e      	adds	r6, r7, #1
 8015506:	f7ea fe7b 	bl	8000200 <memchr>
 801550a:	2800      	cmp	r0, #0
 801550c:	d038      	beq.n	8015580 <_svfiprintf_r+0x1c8>
 801550e:	4b24      	ldr	r3, [pc, #144]	; (80155a0 <_svfiprintf_r+0x1e8>)
 8015510:	bb13      	cbnz	r3, 8015558 <_svfiprintf_r+0x1a0>
 8015512:	9b03      	ldr	r3, [sp, #12]
 8015514:	3307      	adds	r3, #7
 8015516:	f023 0307 	bic.w	r3, r3, #7
 801551a:	3308      	adds	r3, #8
 801551c:	9303      	str	r3, [sp, #12]
 801551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015520:	444b      	add	r3, r9
 8015522:	9309      	str	r3, [sp, #36]	; 0x24
 8015524:	e76d      	b.n	8015402 <_svfiprintf_r+0x4a>
 8015526:	fb05 3202 	mla	r2, r5, r2, r3
 801552a:	2001      	movs	r0, #1
 801552c:	460f      	mov	r7, r1
 801552e:	e7a6      	b.n	801547e <_svfiprintf_r+0xc6>
 8015530:	2300      	movs	r3, #0
 8015532:	3701      	adds	r7, #1
 8015534:	9305      	str	r3, [sp, #20]
 8015536:	4619      	mov	r1, r3
 8015538:	250a      	movs	r5, #10
 801553a:	4638      	mov	r0, r7
 801553c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015540:	3a30      	subs	r2, #48	; 0x30
 8015542:	2a09      	cmp	r2, #9
 8015544:	d903      	bls.n	801554e <_svfiprintf_r+0x196>
 8015546:	2b00      	cmp	r3, #0
 8015548:	d0c8      	beq.n	80154dc <_svfiprintf_r+0x124>
 801554a:	9105      	str	r1, [sp, #20]
 801554c:	e7c6      	b.n	80154dc <_svfiprintf_r+0x124>
 801554e:	fb05 2101 	mla	r1, r5, r1, r2
 8015552:	2301      	movs	r3, #1
 8015554:	4607      	mov	r7, r0
 8015556:	e7f0      	b.n	801553a <_svfiprintf_r+0x182>
 8015558:	ab03      	add	r3, sp, #12
 801555a:	9300      	str	r3, [sp, #0]
 801555c:	4622      	mov	r2, r4
 801555e:	4b11      	ldr	r3, [pc, #68]	; (80155a4 <_svfiprintf_r+0x1ec>)
 8015560:	a904      	add	r1, sp, #16
 8015562:	4640      	mov	r0, r8
 8015564:	f3af 8000 	nop.w
 8015568:	f1b0 3fff 	cmp.w	r0, #4294967295
 801556c:	4681      	mov	r9, r0
 801556e:	d1d6      	bne.n	801551e <_svfiprintf_r+0x166>
 8015570:	89a3      	ldrh	r3, [r4, #12]
 8015572:	065b      	lsls	r3, r3, #25
 8015574:	f53f af35 	bmi.w	80153e2 <_svfiprintf_r+0x2a>
 8015578:	9809      	ldr	r0, [sp, #36]	; 0x24
 801557a:	b01d      	add	sp, #116	; 0x74
 801557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015580:	ab03      	add	r3, sp, #12
 8015582:	9300      	str	r3, [sp, #0]
 8015584:	4622      	mov	r2, r4
 8015586:	4b07      	ldr	r3, [pc, #28]	; (80155a4 <_svfiprintf_r+0x1ec>)
 8015588:	a904      	add	r1, sp, #16
 801558a:	4640      	mov	r0, r8
 801558c:	f000 f9c2 	bl	8015914 <_printf_i>
 8015590:	e7ea      	b.n	8015568 <_svfiprintf_r+0x1b0>
 8015592:	bf00      	nop
 8015594:	080198ba 	.word	0x080198ba
 8015598:	080198c0 	.word	0x080198c0
 801559c:	080198c4 	.word	0x080198c4
 80155a0:	00000000 	.word	0x00000000
 80155a4:	08015305 	.word	0x08015305

080155a8 <__sfputc_r>:
 80155a8:	6893      	ldr	r3, [r2, #8]
 80155aa:	3b01      	subs	r3, #1
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	b410      	push	{r4}
 80155b0:	6093      	str	r3, [r2, #8]
 80155b2:	da08      	bge.n	80155c6 <__sfputc_r+0x1e>
 80155b4:	6994      	ldr	r4, [r2, #24]
 80155b6:	42a3      	cmp	r3, r4
 80155b8:	db01      	blt.n	80155be <__sfputc_r+0x16>
 80155ba:	290a      	cmp	r1, #10
 80155bc:	d103      	bne.n	80155c6 <__sfputc_r+0x1e>
 80155be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155c2:	f000 bb0d 	b.w	8015be0 <__swbuf_r>
 80155c6:	6813      	ldr	r3, [r2, #0]
 80155c8:	1c58      	adds	r0, r3, #1
 80155ca:	6010      	str	r0, [r2, #0]
 80155cc:	7019      	strb	r1, [r3, #0]
 80155ce:	4608      	mov	r0, r1
 80155d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155d4:	4770      	bx	lr

080155d6 <__sfputs_r>:
 80155d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155d8:	4606      	mov	r6, r0
 80155da:	460f      	mov	r7, r1
 80155dc:	4614      	mov	r4, r2
 80155de:	18d5      	adds	r5, r2, r3
 80155e0:	42ac      	cmp	r4, r5
 80155e2:	d101      	bne.n	80155e8 <__sfputs_r+0x12>
 80155e4:	2000      	movs	r0, #0
 80155e6:	e007      	b.n	80155f8 <__sfputs_r+0x22>
 80155e8:	463a      	mov	r2, r7
 80155ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155ee:	4630      	mov	r0, r6
 80155f0:	f7ff ffda 	bl	80155a8 <__sfputc_r>
 80155f4:	1c43      	adds	r3, r0, #1
 80155f6:	d1f3      	bne.n	80155e0 <__sfputs_r+0xa>
 80155f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080155fc <_vfiprintf_r>:
 80155fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015600:	460c      	mov	r4, r1
 8015602:	b09d      	sub	sp, #116	; 0x74
 8015604:	4617      	mov	r7, r2
 8015606:	461d      	mov	r5, r3
 8015608:	4606      	mov	r6, r0
 801560a:	b118      	cbz	r0, 8015614 <_vfiprintf_r+0x18>
 801560c:	6983      	ldr	r3, [r0, #24]
 801560e:	b90b      	cbnz	r3, 8015614 <_vfiprintf_r+0x18>
 8015610:	f7ff fd28 	bl	8015064 <__sinit>
 8015614:	4b7c      	ldr	r3, [pc, #496]	; (8015808 <_vfiprintf_r+0x20c>)
 8015616:	429c      	cmp	r4, r3
 8015618:	d158      	bne.n	80156cc <_vfiprintf_r+0xd0>
 801561a:	6874      	ldr	r4, [r6, #4]
 801561c:	89a3      	ldrh	r3, [r4, #12]
 801561e:	0718      	lsls	r0, r3, #28
 8015620:	d55e      	bpl.n	80156e0 <_vfiprintf_r+0xe4>
 8015622:	6923      	ldr	r3, [r4, #16]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d05b      	beq.n	80156e0 <_vfiprintf_r+0xe4>
 8015628:	2300      	movs	r3, #0
 801562a:	9309      	str	r3, [sp, #36]	; 0x24
 801562c:	2320      	movs	r3, #32
 801562e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015632:	2330      	movs	r3, #48	; 0x30
 8015634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015638:	9503      	str	r5, [sp, #12]
 801563a:	f04f 0b01 	mov.w	fp, #1
 801563e:	46b8      	mov	r8, r7
 8015640:	4645      	mov	r5, r8
 8015642:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015646:	b10b      	cbz	r3, 801564c <_vfiprintf_r+0x50>
 8015648:	2b25      	cmp	r3, #37	; 0x25
 801564a:	d154      	bne.n	80156f6 <_vfiprintf_r+0xfa>
 801564c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015650:	d00b      	beq.n	801566a <_vfiprintf_r+0x6e>
 8015652:	4653      	mov	r3, sl
 8015654:	463a      	mov	r2, r7
 8015656:	4621      	mov	r1, r4
 8015658:	4630      	mov	r0, r6
 801565a:	f7ff ffbc 	bl	80155d6 <__sfputs_r>
 801565e:	3001      	adds	r0, #1
 8015660:	f000 80c2 	beq.w	80157e8 <_vfiprintf_r+0x1ec>
 8015664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015666:	4453      	add	r3, sl
 8015668:	9309      	str	r3, [sp, #36]	; 0x24
 801566a:	f898 3000 	ldrb.w	r3, [r8]
 801566e:	2b00      	cmp	r3, #0
 8015670:	f000 80ba 	beq.w	80157e8 <_vfiprintf_r+0x1ec>
 8015674:	2300      	movs	r3, #0
 8015676:	f04f 32ff 	mov.w	r2, #4294967295
 801567a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801567e:	9304      	str	r3, [sp, #16]
 8015680:	9307      	str	r3, [sp, #28]
 8015682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015686:	931a      	str	r3, [sp, #104]	; 0x68
 8015688:	46a8      	mov	r8, r5
 801568a:	2205      	movs	r2, #5
 801568c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015690:	485e      	ldr	r0, [pc, #376]	; (801580c <_vfiprintf_r+0x210>)
 8015692:	f7ea fdb5 	bl	8000200 <memchr>
 8015696:	9b04      	ldr	r3, [sp, #16]
 8015698:	bb78      	cbnz	r0, 80156fa <_vfiprintf_r+0xfe>
 801569a:	06d9      	lsls	r1, r3, #27
 801569c:	bf44      	itt	mi
 801569e:	2220      	movmi	r2, #32
 80156a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156a4:	071a      	lsls	r2, r3, #28
 80156a6:	bf44      	itt	mi
 80156a8:	222b      	movmi	r2, #43	; 0x2b
 80156aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80156ae:	782a      	ldrb	r2, [r5, #0]
 80156b0:	2a2a      	cmp	r2, #42	; 0x2a
 80156b2:	d02a      	beq.n	801570a <_vfiprintf_r+0x10e>
 80156b4:	9a07      	ldr	r2, [sp, #28]
 80156b6:	46a8      	mov	r8, r5
 80156b8:	2000      	movs	r0, #0
 80156ba:	250a      	movs	r5, #10
 80156bc:	4641      	mov	r1, r8
 80156be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156c2:	3b30      	subs	r3, #48	; 0x30
 80156c4:	2b09      	cmp	r3, #9
 80156c6:	d969      	bls.n	801579c <_vfiprintf_r+0x1a0>
 80156c8:	b360      	cbz	r0, 8015724 <_vfiprintf_r+0x128>
 80156ca:	e024      	b.n	8015716 <_vfiprintf_r+0x11a>
 80156cc:	4b50      	ldr	r3, [pc, #320]	; (8015810 <_vfiprintf_r+0x214>)
 80156ce:	429c      	cmp	r4, r3
 80156d0:	d101      	bne.n	80156d6 <_vfiprintf_r+0xda>
 80156d2:	68b4      	ldr	r4, [r6, #8]
 80156d4:	e7a2      	b.n	801561c <_vfiprintf_r+0x20>
 80156d6:	4b4f      	ldr	r3, [pc, #316]	; (8015814 <_vfiprintf_r+0x218>)
 80156d8:	429c      	cmp	r4, r3
 80156da:	bf08      	it	eq
 80156dc:	68f4      	ldreq	r4, [r6, #12]
 80156de:	e79d      	b.n	801561c <_vfiprintf_r+0x20>
 80156e0:	4621      	mov	r1, r4
 80156e2:	4630      	mov	r0, r6
 80156e4:	f000 faee 	bl	8015cc4 <__swsetup_r>
 80156e8:	2800      	cmp	r0, #0
 80156ea:	d09d      	beq.n	8015628 <_vfiprintf_r+0x2c>
 80156ec:	f04f 30ff 	mov.w	r0, #4294967295
 80156f0:	b01d      	add	sp, #116	; 0x74
 80156f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156f6:	46a8      	mov	r8, r5
 80156f8:	e7a2      	b.n	8015640 <_vfiprintf_r+0x44>
 80156fa:	4a44      	ldr	r2, [pc, #272]	; (801580c <_vfiprintf_r+0x210>)
 80156fc:	1a80      	subs	r0, r0, r2
 80156fe:	fa0b f000 	lsl.w	r0, fp, r0
 8015702:	4318      	orrs	r0, r3
 8015704:	9004      	str	r0, [sp, #16]
 8015706:	4645      	mov	r5, r8
 8015708:	e7be      	b.n	8015688 <_vfiprintf_r+0x8c>
 801570a:	9a03      	ldr	r2, [sp, #12]
 801570c:	1d11      	adds	r1, r2, #4
 801570e:	6812      	ldr	r2, [r2, #0]
 8015710:	9103      	str	r1, [sp, #12]
 8015712:	2a00      	cmp	r2, #0
 8015714:	db01      	blt.n	801571a <_vfiprintf_r+0x11e>
 8015716:	9207      	str	r2, [sp, #28]
 8015718:	e004      	b.n	8015724 <_vfiprintf_r+0x128>
 801571a:	4252      	negs	r2, r2
 801571c:	f043 0302 	orr.w	r3, r3, #2
 8015720:	9207      	str	r2, [sp, #28]
 8015722:	9304      	str	r3, [sp, #16]
 8015724:	f898 3000 	ldrb.w	r3, [r8]
 8015728:	2b2e      	cmp	r3, #46	; 0x2e
 801572a:	d10e      	bne.n	801574a <_vfiprintf_r+0x14e>
 801572c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015730:	2b2a      	cmp	r3, #42	; 0x2a
 8015732:	d138      	bne.n	80157a6 <_vfiprintf_r+0x1aa>
 8015734:	9b03      	ldr	r3, [sp, #12]
 8015736:	1d1a      	adds	r2, r3, #4
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	9203      	str	r2, [sp, #12]
 801573c:	2b00      	cmp	r3, #0
 801573e:	bfb8      	it	lt
 8015740:	f04f 33ff 	movlt.w	r3, #4294967295
 8015744:	f108 0802 	add.w	r8, r8, #2
 8015748:	9305      	str	r3, [sp, #20]
 801574a:	4d33      	ldr	r5, [pc, #204]	; (8015818 <_vfiprintf_r+0x21c>)
 801574c:	f898 1000 	ldrb.w	r1, [r8]
 8015750:	2203      	movs	r2, #3
 8015752:	4628      	mov	r0, r5
 8015754:	f7ea fd54 	bl	8000200 <memchr>
 8015758:	b140      	cbz	r0, 801576c <_vfiprintf_r+0x170>
 801575a:	2340      	movs	r3, #64	; 0x40
 801575c:	1b40      	subs	r0, r0, r5
 801575e:	fa03 f000 	lsl.w	r0, r3, r0
 8015762:	9b04      	ldr	r3, [sp, #16]
 8015764:	4303      	orrs	r3, r0
 8015766:	f108 0801 	add.w	r8, r8, #1
 801576a:	9304      	str	r3, [sp, #16]
 801576c:	f898 1000 	ldrb.w	r1, [r8]
 8015770:	482a      	ldr	r0, [pc, #168]	; (801581c <_vfiprintf_r+0x220>)
 8015772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015776:	2206      	movs	r2, #6
 8015778:	f108 0701 	add.w	r7, r8, #1
 801577c:	f7ea fd40 	bl	8000200 <memchr>
 8015780:	2800      	cmp	r0, #0
 8015782:	d037      	beq.n	80157f4 <_vfiprintf_r+0x1f8>
 8015784:	4b26      	ldr	r3, [pc, #152]	; (8015820 <_vfiprintf_r+0x224>)
 8015786:	bb1b      	cbnz	r3, 80157d0 <_vfiprintf_r+0x1d4>
 8015788:	9b03      	ldr	r3, [sp, #12]
 801578a:	3307      	adds	r3, #7
 801578c:	f023 0307 	bic.w	r3, r3, #7
 8015790:	3308      	adds	r3, #8
 8015792:	9303      	str	r3, [sp, #12]
 8015794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015796:	444b      	add	r3, r9
 8015798:	9309      	str	r3, [sp, #36]	; 0x24
 801579a:	e750      	b.n	801563e <_vfiprintf_r+0x42>
 801579c:	fb05 3202 	mla	r2, r5, r2, r3
 80157a0:	2001      	movs	r0, #1
 80157a2:	4688      	mov	r8, r1
 80157a4:	e78a      	b.n	80156bc <_vfiprintf_r+0xc0>
 80157a6:	2300      	movs	r3, #0
 80157a8:	f108 0801 	add.w	r8, r8, #1
 80157ac:	9305      	str	r3, [sp, #20]
 80157ae:	4619      	mov	r1, r3
 80157b0:	250a      	movs	r5, #10
 80157b2:	4640      	mov	r0, r8
 80157b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157b8:	3a30      	subs	r2, #48	; 0x30
 80157ba:	2a09      	cmp	r2, #9
 80157bc:	d903      	bls.n	80157c6 <_vfiprintf_r+0x1ca>
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d0c3      	beq.n	801574a <_vfiprintf_r+0x14e>
 80157c2:	9105      	str	r1, [sp, #20]
 80157c4:	e7c1      	b.n	801574a <_vfiprintf_r+0x14e>
 80157c6:	fb05 2101 	mla	r1, r5, r1, r2
 80157ca:	2301      	movs	r3, #1
 80157cc:	4680      	mov	r8, r0
 80157ce:	e7f0      	b.n	80157b2 <_vfiprintf_r+0x1b6>
 80157d0:	ab03      	add	r3, sp, #12
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	4622      	mov	r2, r4
 80157d6:	4b13      	ldr	r3, [pc, #76]	; (8015824 <_vfiprintf_r+0x228>)
 80157d8:	a904      	add	r1, sp, #16
 80157da:	4630      	mov	r0, r6
 80157dc:	f3af 8000 	nop.w
 80157e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80157e4:	4681      	mov	r9, r0
 80157e6:	d1d5      	bne.n	8015794 <_vfiprintf_r+0x198>
 80157e8:	89a3      	ldrh	r3, [r4, #12]
 80157ea:	065b      	lsls	r3, r3, #25
 80157ec:	f53f af7e 	bmi.w	80156ec <_vfiprintf_r+0xf0>
 80157f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157f2:	e77d      	b.n	80156f0 <_vfiprintf_r+0xf4>
 80157f4:	ab03      	add	r3, sp, #12
 80157f6:	9300      	str	r3, [sp, #0]
 80157f8:	4622      	mov	r2, r4
 80157fa:	4b0a      	ldr	r3, [pc, #40]	; (8015824 <_vfiprintf_r+0x228>)
 80157fc:	a904      	add	r1, sp, #16
 80157fe:	4630      	mov	r0, r6
 8015800:	f000 f888 	bl	8015914 <_printf_i>
 8015804:	e7ec      	b.n	80157e0 <_vfiprintf_r+0x1e4>
 8015806:	bf00      	nop
 8015808:	08019870 	.word	0x08019870
 801580c:	080198ba 	.word	0x080198ba
 8015810:	08019890 	.word	0x08019890
 8015814:	08019850 	.word	0x08019850
 8015818:	080198c0 	.word	0x080198c0
 801581c:	080198c4 	.word	0x080198c4
 8015820:	00000000 	.word	0x00000000
 8015824:	080155d7 	.word	0x080155d7

08015828 <_printf_common>:
 8015828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801582c:	4691      	mov	r9, r2
 801582e:	461f      	mov	r7, r3
 8015830:	688a      	ldr	r2, [r1, #8]
 8015832:	690b      	ldr	r3, [r1, #16]
 8015834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015838:	4293      	cmp	r3, r2
 801583a:	bfb8      	it	lt
 801583c:	4613      	movlt	r3, r2
 801583e:	f8c9 3000 	str.w	r3, [r9]
 8015842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015846:	4606      	mov	r6, r0
 8015848:	460c      	mov	r4, r1
 801584a:	b112      	cbz	r2, 8015852 <_printf_common+0x2a>
 801584c:	3301      	adds	r3, #1
 801584e:	f8c9 3000 	str.w	r3, [r9]
 8015852:	6823      	ldr	r3, [r4, #0]
 8015854:	0699      	lsls	r1, r3, #26
 8015856:	bf42      	ittt	mi
 8015858:	f8d9 3000 	ldrmi.w	r3, [r9]
 801585c:	3302      	addmi	r3, #2
 801585e:	f8c9 3000 	strmi.w	r3, [r9]
 8015862:	6825      	ldr	r5, [r4, #0]
 8015864:	f015 0506 	ands.w	r5, r5, #6
 8015868:	d107      	bne.n	801587a <_printf_common+0x52>
 801586a:	f104 0a19 	add.w	sl, r4, #25
 801586e:	68e3      	ldr	r3, [r4, #12]
 8015870:	f8d9 2000 	ldr.w	r2, [r9]
 8015874:	1a9b      	subs	r3, r3, r2
 8015876:	42ab      	cmp	r3, r5
 8015878:	dc28      	bgt.n	80158cc <_printf_common+0xa4>
 801587a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801587e:	6822      	ldr	r2, [r4, #0]
 8015880:	3300      	adds	r3, #0
 8015882:	bf18      	it	ne
 8015884:	2301      	movne	r3, #1
 8015886:	0692      	lsls	r2, r2, #26
 8015888:	d42d      	bmi.n	80158e6 <_printf_common+0xbe>
 801588a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801588e:	4639      	mov	r1, r7
 8015890:	4630      	mov	r0, r6
 8015892:	47c0      	blx	r8
 8015894:	3001      	adds	r0, #1
 8015896:	d020      	beq.n	80158da <_printf_common+0xb2>
 8015898:	6823      	ldr	r3, [r4, #0]
 801589a:	68e5      	ldr	r5, [r4, #12]
 801589c:	f8d9 2000 	ldr.w	r2, [r9]
 80158a0:	f003 0306 	and.w	r3, r3, #6
 80158a4:	2b04      	cmp	r3, #4
 80158a6:	bf08      	it	eq
 80158a8:	1aad      	subeq	r5, r5, r2
 80158aa:	68a3      	ldr	r3, [r4, #8]
 80158ac:	6922      	ldr	r2, [r4, #16]
 80158ae:	bf0c      	ite	eq
 80158b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158b4:	2500      	movne	r5, #0
 80158b6:	4293      	cmp	r3, r2
 80158b8:	bfc4      	itt	gt
 80158ba:	1a9b      	subgt	r3, r3, r2
 80158bc:	18ed      	addgt	r5, r5, r3
 80158be:	f04f 0900 	mov.w	r9, #0
 80158c2:	341a      	adds	r4, #26
 80158c4:	454d      	cmp	r5, r9
 80158c6:	d11a      	bne.n	80158fe <_printf_common+0xd6>
 80158c8:	2000      	movs	r0, #0
 80158ca:	e008      	b.n	80158de <_printf_common+0xb6>
 80158cc:	2301      	movs	r3, #1
 80158ce:	4652      	mov	r2, sl
 80158d0:	4639      	mov	r1, r7
 80158d2:	4630      	mov	r0, r6
 80158d4:	47c0      	blx	r8
 80158d6:	3001      	adds	r0, #1
 80158d8:	d103      	bne.n	80158e2 <_printf_common+0xba>
 80158da:	f04f 30ff 	mov.w	r0, #4294967295
 80158de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158e2:	3501      	adds	r5, #1
 80158e4:	e7c3      	b.n	801586e <_printf_common+0x46>
 80158e6:	18e1      	adds	r1, r4, r3
 80158e8:	1c5a      	adds	r2, r3, #1
 80158ea:	2030      	movs	r0, #48	; 0x30
 80158ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80158f0:	4422      	add	r2, r4
 80158f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80158f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80158fa:	3302      	adds	r3, #2
 80158fc:	e7c5      	b.n	801588a <_printf_common+0x62>
 80158fe:	2301      	movs	r3, #1
 8015900:	4622      	mov	r2, r4
 8015902:	4639      	mov	r1, r7
 8015904:	4630      	mov	r0, r6
 8015906:	47c0      	blx	r8
 8015908:	3001      	adds	r0, #1
 801590a:	d0e6      	beq.n	80158da <_printf_common+0xb2>
 801590c:	f109 0901 	add.w	r9, r9, #1
 8015910:	e7d8      	b.n	80158c4 <_printf_common+0x9c>
	...

08015914 <_printf_i>:
 8015914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801591c:	460c      	mov	r4, r1
 801591e:	7e09      	ldrb	r1, [r1, #24]
 8015920:	b085      	sub	sp, #20
 8015922:	296e      	cmp	r1, #110	; 0x6e
 8015924:	4617      	mov	r7, r2
 8015926:	4606      	mov	r6, r0
 8015928:	4698      	mov	r8, r3
 801592a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801592c:	f000 80b3 	beq.w	8015a96 <_printf_i+0x182>
 8015930:	d822      	bhi.n	8015978 <_printf_i+0x64>
 8015932:	2963      	cmp	r1, #99	; 0x63
 8015934:	d036      	beq.n	80159a4 <_printf_i+0x90>
 8015936:	d80a      	bhi.n	801594e <_printf_i+0x3a>
 8015938:	2900      	cmp	r1, #0
 801593a:	f000 80b9 	beq.w	8015ab0 <_printf_i+0x19c>
 801593e:	2958      	cmp	r1, #88	; 0x58
 8015940:	f000 8083 	beq.w	8015a4a <_printf_i+0x136>
 8015944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801594c:	e032      	b.n	80159b4 <_printf_i+0xa0>
 801594e:	2964      	cmp	r1, #100	; 0x64
 8015950:	d001      	beq.n	8015956 <_printf_i+0x42>
 8015952:	2969      	cmp	r1, #105	; 0x69
 8015954:	d1f6      	bne.n	8015944 <_printf_i+0x30>
 8015956:	6820      	ldr	r0, [r4, #0]
 8015958:	6813      	ldr	r3, [r2, #0]
 801595a:	0605      	lsls	r5, r0, #24
 801595c:	f103 0104 	add.w	r1, r3, #4
 8015960:	d52a      	bpl.n	80159b8 <_printf_i+0xa4>
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	6011      	str	r1, [r2, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	da03      	bge.n	8015972 <_printf_i+0x5e>
 801596a:	222d      	movs	r2, #45	; 0x2d
 801596c:	425b      	negs	r3, r3
 801596e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015972:	486f      	ldr	r0, [pc, #444]	; (8015b30 <_printf_i+0x21c>)
 8015974:	220a      	movs	r2, #10
 8015976:	e039      	b.n	80159ec <_printf_i+0xd8>
 8015978:	2973      	cmp	r1, #115	; 0x73
 801597a:	f000 809d 	beq.w	8015ab8 <_printf_i+0x1a4>
 801597e:	d808      	bhi.n	8015992 <_printf_i+0x7e>
 8015980:	296f      	cmp	r1, #111	; 0x6f
 8015982:	d020      	beq.n	80159c6 <_printf_i+0xb2>
 8015984:	2970      	cmp	r1, #112	; 0x70
 8015986:	d1dd      	bne.n	8015944 <_printf_i+0x30>
 8015988:	6823      	ldr	r3, [r4, #0]
 801598a:	f043 0320 	orr.w	r3, r3, #32
 801598e:	6023      	str	r3, [r4, #0]
 8015990:	e003      	b.n	801599a <_printf_i+0x86>
 8015992:	2975      	cmp	r1, #117	; 0x75
 8015994:	d017      	beq.n	80159c6 <_printf_i+0xb2>
 8015996:	2978      	cmp	r1, #120	; 0x78
 8015998:	d1d4      	bne.n	8015944 <_printf_i+0x30>
 801599a:	2378      	movs	r3, #120	; 0x78
 801599c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80159a0:	4864      	ldr	r0, [pc, #400]	; (8015b34 <_printf_i+0x220>)
 80159a2:	e055      	b.n	8015a50 <_printf_i+0x13c>
 80159a4:	6813      	ldr	r3, [r2, #0]
 80159a6:	1d19      	adds	r1, r3, #4
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	6011      	str	r1, [r2, #0]
 80159ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159b4:	2301      	movs	r3, #1
 80159b6:	e08c      	b.n	8015ad2 <_printf_i+0x1be>
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	6011      	str	r1, [r2, #0]
 80159bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80159c0:	bf18      	it	ne
 80159c2:	b21b      	sxthne	r3, r3
 80159c4:	e7cf      	b.n	8015966 <_printf_i+0x52>
 80159c6:	6813      	ldr	r3, [r2, #0]
 80159c8:	6825      	ldr	r5, [r4, #0]
 80159ca:	1d18      	adds	r0, r3, #4
 80159cc:	6010      	str	r0, [r2, #0]
 80159ce:	0628      	lsls	r0, r5, #24
 80159d0:	d501      	bpl.n	80159d6 <_printf_i+0xc2>
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	e002      	b.n	80159dc <_printf_i+0xc8>
 80159d6:	0668      	lsls	r0, r5, #25
 80159d8:	d5fb      	bpl.n	80159d2 <_printf_i+0xbe>
 80159da:	881b      	ldrh	r3, [r3, #0]
 80159dc:	4854      	ldr	r0, [pc, #336]	; (8015b30 <_printf_i+0x21c>)
 80159de:	296f      	cmp	r1, #111	; 0x6f
 80159e0:	bf14      	ite	ne
 80159e2:	220a      	movne	r2, #10
 80159e4:	2208      	moveq	r2, #8
 80159e6:	2100      	movs	r1, #0
 80159e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159ec:	6865      	ldr	r5, [r4, #4]
 80159ee:	60a5      	str	r5, [r4, #8]
 80159f0:	2d00      	cmp	r5, #0
 80159f2:	f2c0 8095 	blt.w	8015b20 <_printf_i+0x20c>
 80159f6:	6821      	ldr	r1, [r4, #0]
 80159f8:	f021 0104 	bic.w	r1, r1, #4
 80159fc:	6021      	str	r1, [r4, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d13d      	bne.n	8015a7e <_printf_i+0x16a>
 8015a02:	2d00      	cmp	r5, #0
 8015a04:	f040 808e 	bne.w	8015b24 <_printf_i+0x210>
 8015a08:	4665      	mov	r5, ip
 8015a0a:	2a08      	cmp	r2, #8
 8015a0c:	d10b      	bne.n	8015a26 <_printf_i+0x112>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	07db      	lsls	r3, r3, #31
 8015a12:	d508      	bpl.n	8015a26 <_printf_i+0x112>
 8015a14:	6923      	ldr	r3, [r4, #16]
 8015a16:	6862      	ldr	r2, [r4, #4]
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	bfde      	ittt	le
 8015a1c:	2330      	movle	r3, #48	; 0x30
 8015a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a26:	ebac 0305 	sub.w	r3, ip, r5
 8015a2a:	6123      	str	r3, [r4, #16]
 8015a2c:	f8cd 8000 	str.w	r8, [sp]
 8015a30:	463b      	mov	r3, r7
 8015a32:	aa03      	add	r2, sp, #12
 8015a34:	4621      	mov	r1, r4
 8015a36:	4630      	mov	r0, r6
 8015a38:	f7ff fef6 	bl	8015828 <_printf_common>
 8015a3c:	3001      	adds	r0, #1
 8015a3e:	d14d      	bne.n	8015adc <_printf_i+0x1c8>
 8015a40:	f04f 30ff 	mov.w	r0, #4294967295
 8015a44:	b005      	add	sp, #20
 8015a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a4a:	4839      	ldr	r0, [pc, #228]	; (8015b30 <_printf_i+0x21c>)
 8015a4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015a50:	6813      	ldr	r3, [r2, #0]
 8015a52:	6821      	ldr	r1, [r4, #0]
 8015a54:	1d1d      	adds	r5, r3, #4
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	6015      	str	r5, [r2, #0]
 8015a5a:	060a      	lsls	r2, r1, #24
 8015a5c:	d50b      	bpl.n	8015a76 <_printf_i+0x162>
 8015a5e:	07ca      	lsls	r2, r1, #31
 8015a60:	bf44      	itt	mi
 8015a62:	f041 0120 	orrmi.w	r1, r1, #32
 8015a66:	6021      	strmi	r1, [r4, #0]
 8015a68:	b91b      	cbnz	r3, 8015a72 <_printf_i+0x15e>
 8015a6a:	6822      	ldr	r2, [r4, #0]
 8015a6c:	f022 0220 	bic.w	r2, r2, #32
 8015a70:	6022      	str	r2, [r4, #0]
 8015a72:	2210      	movs	r2, #16
 8015a74:	e7b7      	b.n	80159e6 <_printf_i+0xd2>
 8015a76:	064d      	lsls	r5, r1, #25
 8015a78:	bf48      	it	mi
 8015a7a:	b29b      	uxthmi	r3, r3
 8015a7c:	e7ef      	b.n	8015a5e <_printf_i+0x14a>
 8015a7e:	4665      	mov	r5, ip
 8015a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a84:	fb02 3311 	mls	r3, r2, r1, r3
 8015a88:	5cc3      	ldrb	r3, [r0, r3]
 8015a8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015a8e:	460b      	mov	r3, r1
 8015a90:	2900      	cmp	r1, #0
 8015a92:	d1f5      	bne.n	8015a80 <_printf_i+0x16c>
 8015a94:	e7b9      	b.n	8015a0a <_printf_i+0xf6>
 8015a96:	6813      	ldr	r3, [r2, #0]
 8015a98:	6825      	ldr	r5, [r4, #0]
 8015a9a:	6961      	ldr	r1, [r4, #20]
 8015a9c:	1d18      	adds	r0, r3, #4
 8015a9e:	6010      	str	r0, [r2, #0]
 8015aa0:	0628      	lsls	r0, r5, #24
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	d501      	bpl.n	8015aaa <_printf_i+0x196>
 8015aa6:	6019      	str	r1, [r3, #0]
 8015aa8:	e002      	b.n	8015ab0 <_printf_i+0x19c>
 8015aaa:	066a      	lsls	r2, r5, #25
 8015aac:	d5fb      	bpl.n	8015aa6 <_printf_i+0x192>
 8015aae:	8019      	strh	r1, [r3, #0]
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	6123      	str	r3, [r4, #16]
 8015ab4:	4665      	mov	r5, ip
 8015ab6:	e7b9      	b.n	8015a2c <_printf_i+0x118>
 8015ab8:	6813      	ldr	r3, [r2, #0]
 8015aba:	1d19      	adds	r1, r3, #4
 8015abc:	6011      	str	r1, [r2, #0]
 8015abe:	681d      	ldr	r5, [r3, #0]
 8015ac0:	6862      	ldr	r2, [r4, #4]
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	f7ea fb9b 	bl	8000200 <memchr>
 8015aca:	b108      	cbz	r0, 8015ad0 <_printf_i+0x1bc>
 8015acc:	1b40      	subs	r0, r0, r5
 8015ace:	6060      	str	r0, [r4, #4]
 8015ad0:	6863      	ldr	r3, [r4, #4]
 8015ad2:	6123      	str	r3, [r4, #16]
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ada:	e7a7      	b.n	8015a2c <_printf_i+0x118>
 8015adc:	6923      	ldr	r3, [r4, #16]
 8015ade:	462a      	mov	r2, r5
 8015ae0:	4639      	mov	r1, r7
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	47c0      	blx	r8
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	d0aa      	beq.n	8015a40 <_printf_i+0x12c>
 8015aea:	6823      	ldr	r3, [r4, #0]
 8015aec:	079b      	lsls	r3, r3, #30
 8015aee:	d413      	bmi.n	8015b18 <_printf_i+0x204>
 8015af0:	68e0      	ldr	r0, [r4, #12]
 8015af2:	9b03      	ldr	r3, [sp, #12]
 8015af4:	4298      	cmp	r0, r3
 8015af6:	bfb8      	it	lt
 8015af8:	4618      	movlt	r0, r3
 8015afa:	e7a3      	b.n	8015a44 <_printf_i+0x130>
 8015afc:	2301      	movs	r3, #1
 8015afe:	464a      	mov	r2, r9
 8015b00:	4639      	mov	r1, r7
 8015b02:	4630      	mov	r0, r6
 8015b04:	47c0      	blx	r8
 8015b06:	3001      	adds	r0, #1
 8015b08:	d09a      	beq.n	8015a40 <_printf_i+0x12c>
 8015b0a:	3501      	adds	r5, #1
 8015b0c:	68e3      	ldr	r3, [r4, #12]
 8015b0e:	9a03      	ldr	r2, [sp, #12]
 8015b10:	1a9b      	subs	r3, r3, r2
 8015b12:	42ab      	cmp	r3, r5
 8015b14:	dcf2      	bgt.n	8015afc <_printf_i+0x1e8>
 8015b16:	e7eb      	b.n	8015af0 <_printf_i+0x1dc>
 8015b18:	2500      	movs	r5, #0
 8015b1a:	f104 0919 	add.w	r9, r4, #25
 8015b1e:	e7f5      	b.n	8015b0c <_printf_i+0x1f8>
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d1ac      	bne.n	8015a7e <_printf_i+0x16a>
 8015b24:	7803      	ldrb	r3, [r0, #0]
 8015b26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b2e:	e76c      	b.n	8015a0a <_printf_i+0xf6>
 8015b30:	080198cb 	.word	0x080198cb
 8015b34:	080198dc 	.word	0x080198dc

08015b38 <_sbrk_r>:
 8015b38:	b538      	push	{r3, r4, r5, lr}
 8015b3a:	4c06      	ldr	r4, [pc, #24]	; (8015b54 <_sbrk_r+0x1c>)
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	4605      	mov	r5, r0
 8015b40:	4608      	mov	r0, r1
 8015b42:	6023      	str	r3, [r4, #0]
 8015b44:	f7ff f852 	bl	8014bec <_sbrk>
 8015b48:	1c43      	adds	r3, r0, #1
 8015b4a:	d102      	bne.n	8015b52 <_sbrk_r+0x1a>
 8015b4c:	6823      	ldr	r3, [r4, #0]
 8015b4e:	b103      	cbz	r3, 8015b52 <_sbrk_r+0x1a>
 8015b50:	602b      	str	r3, [r5, #0]
 8015b52:	bd38      	pop	{r3, r4, r5, pc}
 8015b54:	2000a7b0 	.word	0x2000a7b0

08015b58 <__sread>:
 8015b58:	b510      	push	{r4, lr}
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b60:	f000 fa96 	bl	8016090 <_read_r>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	bfab      	itete	ge
 8015b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8015b6c:	181b      	addge	r3, r3, r0
 8015b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015b72:	bfac      	ite	ge
 8015b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8015b76:	81a3      	strhlt	r3, [r4, #12]
 8015b78:	bd10      	pop	{r4, pc}

08015b7a <__swrite>:
 8015b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b7e:	461f      	mov	r7, r3
 8015b80:	898b      	ldrh	r3, [r1, #12]
 8015b82:	05db      	lsls	r3, r3, #23
 8015b84:	4605      	mov	r5, r0
 8015b86:	460c      	mov	r4, r1
 8015b88:	4616      	mov	r6, r2
 8015b8a:	d505      	bpl.n	8015b98 <__swrite+0x1e>
 8015b8c:	2302      	movs	r3, #2
 8015b8e:	2200      	movs	r2, #0
 8015b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b94:	f000 f9c4 	bl	8015f20 <_lseek_r>
 8015b98:	89a3      	ldrh	r3, [r4, #12]
 8015b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ba2:	81a3      	strh	r3, [r4, #12]
 8015ba4:	4632      	mov	r2, r6
 8015ba6:	463b      	mov	r3, r7
 8015ba8:	4628      	mov	r0, r5
 8015baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bae:	f000 b877 	b.w	8015ca0 <_write_r>

08015bb2 <__sseek>:
 8015bb2:	b510      	push	{r4, lr}
 8015bb4:	460c      	mov	r4, r1
 8015bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bba:	f000 f9b1 	bl	8015f20 <_lseek_r>
 8015bbe:	1c43      	adds	r3, r0, #1
 8015bc0:	89a3      	ldrh	r3, [r4, #12]
 8015bc2:	bf15      	itete	ne
 8015bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015bce:	81a3      	strheq	r3, [r4, #12]
 8015bd0:	bf18      	it	ne
 8015bd2:	81a3      	strhne	r3, [r4, #12]
 8015bd4:	bd10      	pop	{r4, pc}

08015bd6 <__sclose>:
 8015bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bda:	f000 b8e1 	b.w	8015da0 <_close_r>
	...

08015be0 <__swbuf_r>:
 8015be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015be2:	460e      	mov	r6, r1
 8015be4:	4614      	mov	r4, r2
 8015be6:	4605      	mov	r5, r0
 8015be8:	b118      	cbz	r0, 8015bf2 <__swbuf_r+0x12>
 8015bea:	6983      	ldr	r3, [r0, #24]
 8015bec:	b90b      	cbnz	r3, 8015bf2 <__swbuf_r+0x12>
 8015bee:	f7ff fa39 	bl	8015064 <__sinit>
 8015bf2:	4b21      	ldr	r3, [pc, #132]	; (8015c78 <__swbuf_r+0x98>)
 8015bf4:	429c      	cmp	r4, r3
 8015bf6:	d12a      	bne.n	8015c4e <__swbuf_r+0x6e>
 8015bf8:	686c      	ldr	r4, [r5, #4]
 8015bfa:	69a3      	ldr	r3, [r4, #24]
 8015bfc:	60a3      	str	r3, [r4, #8]
 8015bfe:	89a3      	ldrh	r3, [r4, #12]
 8015c00:	071a      	lsls	r2, r3, #28
 8015c02:	d52e      	bpl.n	8015c62 <__swbuf_r+0x82>
 8015c04:	6923      	ldr	r3, [r4, #16]
 8015c06:	b363      	cbz	r3, 8015c62 <__swbuf_r+0x82>
 8015c08:	6923      	ldr	r3, [r4, #16]
 8015c0a:	6820      	ldr	r0, [r4, #0]
 8015c0c:	1ac0      	subs	r0, r0, r3
 8015c0e:	6963      	ldr	r3, [r4, #20]
 8015c10:	b2f6      	uxtb	r6, r6
 8015c12:	4283      	cmp	r3, r0
 8015c14:	4637      	mov	r7, r6
 8015c16:	dc04      	bgt.n	8015c22 <__swbuf_r+0x42>
 8015c18:	4621      	mov	r1, r4
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	f000 f956 	bl	8015ecc <_fflush_r>
 8015c20:	bb28      	cbnz	r0, 8015c6e <__swbuf_r+0x8e>
 8015c22:	68a3      	ldr	r3, [r4, #8]
 8015c24:	3b01      	subs	r3, #1
 8015c26:	60a3      	str	r3, [r4, #8]
 8015c28:	6823      	ldr	r3, [r4, #0]
 8015c2a:	1c5a      	adds	r2, r3, #1
 8015c2c:	6022      	str	r2, [r4, #0]
 8015c2e:	701e      	strb	r6, [r3, #0]
 8015c30:	6963      	ldr	r3, [r4, #20]
 8015c32:	3001      	adds	r0, #1
 8015c34:	4283      	cmp	r3, r0
 8015c36:	d004      	beq.n	8015c42 <__swbuf_r+0x62>
 8015c38:	89a3      	ldrh	r3, [r4, #12]
 8015c3a:	07db      	lsls	r3, r3, #31
 8015c3c:	d519      	bpl.n	8015c72 <__swbuf_r+0x92>
 8015c3e:	2e0a      	cmp	r6, #10
 8015c40:	d117      	bne.n	8015c72 <__swbuf_r+0x92>
 8015c42:	4621      	mov	r1, r4
 8015c44:	4628      	mov	r0, r5
 8015c46:	f000 f941 	bl	8015ecc <_fflush_r>
 8015c4a:	b190      	cbz	r0, 8015c72 <__swbuf_r+0x92>
 8015c4c:	e00f      	b.n	8015c6e <__swbuf_r+0x8e>
 8015c4e:	4b0b      	ldr	r3, [pc, #44]	; (8015c7c <__swbuf_r+0x9c>)
 8015c50:	429c      	cmp	r4, r3
 8015c52:	d101      	bne.n	8015c58 <__swbuf_r+0x78>
 8015c54:	68ac      	ldr	r4, [r5, #8]
 8015c56:	e7d0      	b.n	8015bfa <__swbuf_r+0x1a>
 8015c58:	4b09      	ldr	r3, [pc, #36]	; (8015c80 <__swbuf_r+0xa0>)
 8015c5a:	429c      	cmp	r4, r3
 8015c5c:	bf08      	it	eq
 8015c5e:	68ec      	ldreq	r4, [r5, #12]
 8015c60:	e7cb      	b.n	8015bfa <__swbuf_r+0x1a>
 8015c62:	4621      	mov	r1, r4
 8015c64:	4628      	mov	r0, r5
 8015c66:	f000 f82d 	bl	8015cc4 <__swsetup_r>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d0cc      	beq.n	8015c08 <__swbuf_r+0x28>
 8015c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8015c72:	4638      	mov	r0, r7
 8015c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c76:	bf00      	nop
 8015c78:	08019870 	.word	0x08019870
 8015c7c:	08019890 	.word	0x08019890
 8015c80:	08019850 	.word	0x08019850

08015c84 <__ascii_wctomb>:
 8015c84:	b149      	cbz	r1, 8015c9a <__ascii_wctomb+0x16>
 8015c86:	2aff      	cmp	r2, #255	; 0xff
 8015c88:	bf85      	ittet	hi
 8015c8a:	238a      	movhi	r3, #138	; 0x8a
 8015c8c:	6003      	strhi	r3, [r0, #0]
 8015c8e:	700a      	strbls	r2, [r1, #0]
 8015c90:	f04f 30ff 	movhi.w	r0, #4294967295
 8015c94:	bf98      	it	ls
 8015c96:	2001      	movls	r0, #1
 8015c98:	4770      	bx	lr
 8015c9a:	4608      	mov	r0, r1
 8015c9c:	4770      	bx	lr
	...

08015ca0 <_write_r>:
 8015ca0:	b538      	push	{r3, r4, r5, lr}
 8015ca2:	4c07      	ldr	r4, [pc, #28]	; (8015cc0 <_write_r+0x20>)
 8015ca4:	4605      	mov	r5, r0
 8015ca6:	4608      	mov	r0, r1
 8015ca8:	4611      	mov	r1, r2
 8015caa:	2200      	movs	r2, #0
 8015cac:	6022      	str	r2, [r4, #0]
 8015cae:	461a      	mov	r2, r3
 8015cb0:	f7fe ff4b 	bl	8014b4a <_write>
 8015cb4:	1c43      	adds	r3, r0, #1
 8015cb6:	d102      	bne.n	8015cbe <_write_r+0x1e>
 8015cb8:	6823      	ldr	r3, [r4, #0]
 8015cba:	b103      	cbz	r3, 8015cbe <_write_r+0x1e>
 8015cbc:	602b      	str	r3, [r5, #0]
 8015cbe:	bd38      	pop	{r3, r4, r5, pc}
 8015cc0:	2000a7b0 	.word	0x2000a7b0

08015cc4 <__swsetup_r>:
 8015cc4:	4b32      	ldr	r3, [pc, #200]	; (8015d90 <__swsetup_r+0xcc>)
 8015cc6:	b570      	push	{r4, r5, r6, lr}
 8015cc8:	681d      	ldr	r5, [r3, #0]
 8015cca:	4606      	mov	r6, r0
 8015ccc:	460c      	mov	r4, r1
 8015cce:	b125      	cbz	r5, 8015cda <__swsetup_r+0x16>
 8015cd0:	69ab      	ldr	r3, [r5, #24]
 8015cd2:	b913      	cbnz	r3, 8015cda <__swsetup_r+0x16>
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	f7ff f9c5 	bl	8015064 <__sinit>
 8015cda:	4b2e      	ldr	r3, [pc, #184]	; (8015d94 <__swsetup_r+0xd0>)
 8015cdc:	429c      	cmp	r4, r3
 8015cde:	d10f      	bne.n	8015d00 <__swsetup_r+0x3c>
 8015ce0:	686c      	ldr	r4, [r5, #4]
 8015ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ce6:	b29a      	uxth	r2, r3
 8015ce8:	0715      	lsls	r5, r2, #28
 8015cea:	d42c      	bmi.n	8015d46 <__swsetup_r+0x82>
 8015cec:	06d0      	lsls	r0, r2, #27
 8015cee:	d411      	bmi.n	8015d14 <__swsetup_r+0x50>
 8015cf0:	2209      	movs	r2, #9
 8015cf2:	6032      	str	r2, [r6, #0]
 8015cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cf8:	81a3      	strh	r3, [r4, #12]
 8015cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8015cfe:	e03e      	b.n	8015d7e <__swsetup_r+0xba>
 8015d00:	4b25      	ldr	r3, [pc, #148]	; (8015d98 <__swsetup_r+0xd4>)
 8015d02:	429c      	cmp	r4, r3
 8015d04:	d101      	bne.n	8015d0a <__swsetup_r+0x46>
 8015d06:	68ac      	ldr	r4, [r5, #8]
 8015d08:	e7eb      	b.n	8015ce2 <__swsetup_r+0x1e>
 8015d0a:	4b24      	ldr	r3, [pc, #144]	; (8015d9c <__swsetup_r+0xd8>)
 8015d0c:	429c      	cmp	r4, r3
 8015d0e:	bf08      	it	eq
 8015d10:	68ec      	ldreq	r4, [r5, #12]
 8015d12:	e7e6      	b.n	8015ce2 <__swsetup_r+0x1e>
 8015d14:	0751      	lsls	r1, r2, #29
 8015d16:	d512      	bpl.n	8015d3e <__swsetup_r+0x7a>
 8015d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d1a:	b141      	cbz	r1, 8015d2e <__swsetup_r+0x6a>
 8015d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d20:	4299      	cmp	r1, r3
 8015d22:	d002      	beq.n	8015d2a <__swsetup_r+0x66>
 8015d24:	4630      	mov	r0, r6
 8015d26:	f7ff fa45 	bl	80151b4 <_free_r>
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8015d2e:	89a3      	ldrh	r3, [r4, #12]
 8015d30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d34:	81a3      	strh	r3, [r4, #12]
 8015d36:	2300      	movs	r3, #0
 8015d38:	6063      	str	r3, [r4, #4]
 8015d3a:	6923      	ldr	r3, [r4, #16]
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	89a3      	ldrh	r3, [r4, #12]
 8015d40:	f043 0308 	orr.w	r3, r3, #8
 8015d44:	81a3      	strh	r3, [r4, #12]
 8015d46:	6923      	ldr	r3, [r4, #16]
 8015d48:	b94b      	cbnz	r3, 8015d5e <__swsetup_r+0x9a>
 8015d4a:	89a3      	ldrh	r3, [r4, #12]
 8015d4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d54:	d003      	beq.n	8015d5e <__swsetup_r+0x9a>
 8015d56:	4621      	mov	r1, r4
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f000 f917 	bl	8015f8c <__smakebuf_r>
 8015d5e:	89a2      	ldrh	r2, [r4, #12]
 8015d60:	f012 0301 	ands.w	r3, r2, #1
 8015d64:	d00c      	beq.n	8015d80 <__swsetup_r+0xbc>
 8015d66:	2300      	movs	r3, #0
 8015d68:	60a3      	str	r3, [r4, #8]
 8015d6a:	6963      	ldr	r3, [r4, #20]
 8015d6c:	425b      	negs	r3, r3
 8015d6e:	61a3      	str	r3, [r4, #24]
 8015d70:	6923      	ldr	r3, [r4, #16]
 8015d72:	b953      	cbnz	r3, 8015d8a <__swsetup_r+0xc6>
 8015d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015d7c:	d1ba      	bne.n	8015cf4 <__swsetup_r+0x30>
 8015d7e:	bd70      	pop	{r4, r5, r6, pc}
 8015d80:	0792      	lsls	r2, r2, #30
 8015d82:	bf58      	it	pl
 8015d84:	6963      	ldrpl	r3, [r4, #20]
 8015d86:	60a3      	str	r3, [r4, #8]
 8015d88:	e7f2      	b.n	8015d70 <__swsetup_r+0xac>
 8015d8a:	2000      	movs	r0, #0
 8015d8c:	e7f7      	b.n	8015d7e <__swsetup_r+0xba>
 8015d8e:	bf00      	nop
 8015d90:	20000034 	.word	0x20000034
 8015d94:	08019870 	.word	0x08019870
 8015d98:	08019890 	.word	0x08019890
 8015d9c:	08019850 	.word	0x08019850

08015da0 <_close_r>:
 8015da0:	b538      	push	{r3, r4, r5, lr}
 8015da2:	4c06      	ldr	r4, [pc, #24]	; (8015dbc <_close_r+0x1c>)
 8015da4:	2300      	movs	r3, #0
 8015da6:	4605      	mov	r5, r0
 8015da8:	4608      	mov	r0, r1
 8015daa:	6023      	str	r3, [r4, #0]
 8015dac:	f7fe fee9 	bl	8014b82 <_close>
 8015db0:	1c43      	adds	r3, r0, #1
 8015db2:	d102      	bne.n	8015dba <_close_r+0x1a>
 8015db4:	6823      	ldr	r3, [r4, #0]
 8015db6:	b103      	cbz	r3, 8015dba <_close_r+0x1a>
 8015db8:	602b      	str	r3, [r5, #0]
 8015dba:	bd38      	pop	{r3, r4, r5, pc}
 8015dbc:	2000a7b0 	.word	0x2000a7b0

08015dc0 <__sflush_r>:
 8015dc0:	898a      	ldrh	r2, [r1, #12]
 8015dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc6:	4605      	mov	r5, r0
 8015dc8:	0710      	lsls	r0, r2, #28
 8015dca:	460c      	mov	r4, r1
 8015dcc:	d458      	bmi.n	8015e80 <__sflush_r+0xc0>
 8015dce:	684b      	ldr	r3, [r1, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	dc05      	bgt.n	8015de0 <__sflush_r+0x20>
 8015dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	dc02      	bgt.n	8015de0 <__sflush_r+0x20>
 8015dda:	2000      	movs	r0, #0
 8015ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015de2:	2e00      	cmp	r6, #0
 8015de4:	d0f9      	beq.n	8015dda <__sflush_r+0x1a>
 8015de6:	2300      	movs	r3, #0
 8015de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015dec:	682f      	ldr	r7, [r5, #0]
 8015dee:	6a21      	ldr	r1, [r4, #32]
 8015df0:	602b      	str	r3, [r5, #0]
 8015df2:	d032      	beq.n	8015e5a <__sflush_r+0x9a>
 8015df4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015df6:	89a3      	ldrh	r3, [r4, #12]
 8015df8:	075a      	lsls	r2, r3, #29
 8015dfa:	d505      	bpl.n	8015e08 <__sflush_r+0x48>
 8015dfc:	6863      	ldr	r3, [r4, #4]
 8015dfe:	1ac0      	subs	r0, r0, r3
 8015e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e02:	b10b      	cbz	r3, 8015e08 <__sflush_r+0x48>
 8015e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e06:	1ac0      	subs	r0, r0, r3
 8015e08:	2300      	movs	r3, #0
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e0e:	6a21      	ldr	r1, [r4, #32]
 8015e10:	4628      	mov	r0, r5
 8015e12:	47b0      	blx	r6
 8015e14:	1c43      	adds	r3, r0, #1
 8015e16:	89a3      	ldrh	r3, [r4, #12]
 8015e18:	d106      	bne.n	8015e28 <__sflush_r+0x68>
 8015e1a:	6829      	ldr	r1, [r5, #0]
 8015e1c:	291d      	cmp	r1, #29
 8015e1e:	d848      	bhi.n	8015eb2 <__sflush_r+0xf2>
 8015e20:	4a29      	ldr	r2, [pc, #164]	; (8015ec8 <__sflush_r+0x108>)
 8015e22:	40ca      	lsrs	r2, r1
 8015e24:	07d6      	lsls	r6, r2, #31
 8015e26:	d544      	bpl.n	8015eb2 <__sflush_r+0xf2>
 8015e28:	2200      	movs	r2, #0
 8015e2a:	6062      	str	r2, [r4, #4]
 8015e2c:	04d9      	lsls	r1, r3, #19
 8015e2e:	6922      	ldr	r2, [r4, #16]
 8015e30:	6022      	str	r2, [r4, #0]
 8015e32:	d504      	bpl.n	8015e3e <__sflush_r+0x7e>
 8015e34:	1c42      	adds	r2, r0, #1
 8015e36:	d101      	bne.n	8015e3c <__sflush_r+0x7c>
 8015e38:	682b      	ldr	r3, [r5, #0]
 8015e3a:	b903      	cbnz	r3, 8015e3e <__sflush_r+0x7e>
 8015e3c:	6560      	str	r0, [r4, #84]	; 0x54
 8015e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e40:	602f      	str	r7, [r5, #0]
 8015e42:	2900      	cmp	r1, #0
 8015e44:	d0c9      	beq.n	8015dda <__sflush_r+0x1a>
 8015e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e4a:	4299      	cmp	r1, r3
 8015e4c:	d002      	beq.n	8015e54 <__sflush_r+0x94>
 8015e4e:	4628      	mov	r0, r5
 8015e50:	f7ff f9b0 	bl	80151b4 <_free_r>
 8015e54:	2000      	movs	r0, #0
 8015e56:	6360      	str	r0, [r4, #52]	; 0x34
 8015e58:	e7c0      	b.n	8015ddc <__sflush_r+0x1c>
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	4628      	mov	r0, r5
 8015e5e:	47b0      	blx	r6
 8015e60:	1c41      	adds	r1, r0, #1
 8015e62:	d1c8      	bne.n	8015df6 <__sflush_r+0x36>
 8015e64:	682b      	ldr	r3, [r5, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d0c5      	beq.n	8015df6 <__sflush_r+0x36>
 8015e6a:	2b1d      	cmp	r3, #29
 8015e6c:	d001      	beq.n	8015e72 <__sflush_r+0xb2>
 8015e6e:	2b16      	cmp	r3, #22
 8015e70:	d101      	bne.n	8015e76 <__sflush_r+0xb6>
 8015e72:	602f      	str	r7, [r5, #0]
 8015e74:	e7b1      	b.n	8015dda <__sflush_r+0x1a>
 8015e76:	89a3      	ldrh	r3, [r4, #12]
 8015e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e7c:	81a3      	strh	r3, [r4, #12]
 8015e7e:	e7ad      	b.n	8015ddc <__sflush_r+0x1c>
 8015e80:	690f      	ldr	r7, [r1, #16]
 8015e82:	2f00      	cmp	r7, #0
 8015e84:	d0a9      	beq.n	8015dda <__sflush_r+0x1a>
 8015e86:	0793      	lsls	r3, r2, #30
 8015e88:	680e      	ldr	r6, [r1, #0]
 8015e8a:	bf08      	it	eq
 8015e8c:	694b      	ldreq	r3, [r1, #20]
 8015e8e:	600f      	str	r7, [r1, #0]
 8015e90:	bf18      	it	ne
 8015e92:	2300      	movne	r3, #0
 8015e94:	eba6 0807 	sub.w	r8, r6, r7
 8015e98:	608b      	str	r3, [r1, #8]
 8015e9a:	f1b8 0f00 	cmp.w	r8, #0
 8015e9e:	dd9c      	ble.n	8015dda <__sflush_r+0x1a>
 8015ea0:	4643      	mov	r3, r8
 8015ea2:	463a      	mov	r2, r7
 8015ea4:	6a21      	ldr	r1, [r4, #32]
 8015ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	47b0      	blx	r6
 8015eac:	2800      	cmp	r0, #0
 8015eae:	dc06      	bgt.n	8015ebe <__sflush_r+0xfe>
 8015eb0:	89a3      	ldrh	r3, [r4, #12]
 8015eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eb6:	81a3      	strh	r3, [r4, #12]
 8015eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ebc:	e78e      	b.n	8015ddc <__sflush_r+0x1c>
 8015ebe:	4407      	add	r7, r0
 8015ec0:	eba8 0800 	sub.w	r8, r8, r0
 8015ec4:	e7e9      	b.n	8015e9a <__sflush_r+0xda>
 8015ec6:	bf00      	nop
 8015ec8:	20400001 	.word	0x20400001

08015ecc <_fflush_r>:
 8015ecc:	b538      	push	{r3, r4, r5, lr}
 8015ece:	690b      	ldr	r3, [r1, #16]
 8015ed0:	4605      	mov	r5, r0
 8015ed2:	460c      	mov	r4, r1
 8015ed4:	b1db      	cbz	r3, 8015f0e <_fflush_r+0x42>
 8015ed6:	b118      	cbz	r0, 8015ee0 <_fflush_r+0x14>
 8015ed8:	6983      	ldr	r3, [r0, #24]
 8015eda:	b90b      	cbnz	r3, 8015ee0 <_fflush_r+0x14>
 8015edc:	f7ff f8c2 	bl	8015064 <__sinit>
 8015ee0:	4b0c      	ldr	r3, [pc, #48]	; (8015f14 <_fflush_r+0x48>)
 8015ee2:	429c      	cmp	r4, r3
 8015ee4:	d109      	bne.n	8015efa <_fflush_r+0x2e>
 8015ee6:	686c      	ldr	r4, [r5, #4]
 8015ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eec:	b17b      	cbz	r3, 8015f0e <_fflush_r+0x42>
 8015eee:	4621      	mov	r1, r4
 8015ef0:	4628      	mov	r0, r5
 8015ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ef6:	f7ff bf63 	b.w	8015dc0 <__sflush_r>
 8015efa:	4b07      	ldr	r3, [pc, #28]	; (8015f18 <_fflush_r+0x4c>)
 8015efc:	429c      	cmp	r4, r3
 8015efe:	d101      	bne.n	8015f04 <_fflush_r+0x38>
 8015f00:	68ac      	ldr	r4, [r5, #8]
 8015f02:	e7f1      	b.n	8015ee8 <_fflush_r+0x1c>
 8015f04:	4b05      	ldr	r3, [pc, #20]	; (8015f1c <_fflush_r+0x50>)
 8015f06:	429c      	cmp	r4, r3
 8015f08:	bf08      	it	eq
 8015f0a:	68ec      	ldreq	r4, [r5, #12]
 8015f0c:	e7ec      	b.n	8015ee8 <_fflush_r+0x1c>
 8015f0e:	2000      	movs	r0, #0
 8015f10:	bd38      	pop	{r3, r4, r5, pc}
 8015f12:	bf00      	nop
 8015f14:	08019870 	.word	0x08019870
 8015f18:	08019890 	.word	0x08019890
 8015f1c:	08019850 	.word	0x08019850

08015f20 <_lseek_r>:
 8015f20:	b538      	push	{r3, r4, r5, lr}
 8015f22:	4c07      	ldr	r4, [pc, #28]	; (8015f40 <_lseek_r+0x20>)
 8015f24:	4605      	mov	r5, r0
 8015f26:	4608      	mov	r0, r1
 8015f28:	4611      	mov	r1, r2
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	6022      	str	r2, [r4, #0]
 8015f2e:	461a      	mov	r2, r3
 8015f30:	f7fe fe4e 	bl	8014bd0 <_lseek>
 8015f34:	1c43      	adds	r3, r0, #1
 8015f36:	d102      	bne.n	8015f3e <_lseek_r+0x1e>
 8015f38:	6823      	ldr	r3, [r4, #0]
 8015f3a:	b103      	cbz	r3, 8015f3e <_lseek_r+0x1e>
 8015f3c:	602b      	str	r3, [r5, #0]
 8015f3e:	bd38      	pop	{r3, r4, r5, pc}
 8015f40:	2000a7b0 	.word	0x2000a7b0

08015f44 <__swhatbuf_r>:
 8015f44:	b570      	push	{r4, r5, r6, lr}
 8015f46:	460e      	mov	r6, r1
 8015f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f4c:	2900      	cmp	r1, #0
 8015f4e:	b096      	sub	sp, #88	; 0x58
 8015f50:	4614      	mov	r4, r2
 8015f52:	461d      	mov	r5, r3
 8015f54:	da07      	bge.n	8015f66 <__swhatbuf_r+0x22>
 8015f56:	2300      	movs	r3, #0
 8015f58:	602b      	str	r3, [r5, #0]
 8015f5a:	89b3      	ldrh	r3, [r6, #12]
 8015f5c:	061a      	lsls	r2, r3, #24
 8015f5e:	d410      	bmi.n	8015f82 <__swhatbuf_r+0x3e>
 8015f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f64:	e00e      	b.n	8015f84 <__swhatbuf_r+0x40>
 8015f66:	466a      	mov	r2, sp
 8015f68:	f000 f8a4 	bl	80160b4 <_fstat_r>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	dbf2      	blt.n	8015f56 <__swhatbuf_r+0x12>
 8015f70:	9a01      	ldr	r2, [sp, #4]
 8015f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f7a:	425a      	negs	r2, r3
 8015f7c:	415a      	adcs	r2, r3
 8015f7e:	602a      	str	r2, [r5, #0]
 8015f80:	e7ee      	b.n	8015f60 <__swhatbuf_r+0x1c>
 8015f82:	2340      	movs	r3, #64	; 0x40
 8015f84:	2000      	movs	r0, #0
 8015f86:	6023      	str	r3, [r4, #0]
 8015f88:	b016      	add	sp, #88	; 0x58
 8015f8a:	bd70      	pop	{r4, r5, r6, pc}

08015f8c <__smakebuf_r>:
 8015f8c:	898b      	ldrh	r3, [r1, #12]
 8015f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f90:	079d      	lsls	r5, r3, #30
 8015f92:	4606      	mov	r6, r0
 8015f94:	460c      	mov	r4, r1
 8015f96:	d507      	bpl.n	8015fa8 <__smakebuf_r+0x1c>
 8015f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f9c:	6023      	str	r3, [r4, #0]
 8015f9e:	6123      	str	r3, [r4, #16]
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	6163      	str	r3, [r4, #20]
 8015fa4:	b002      	add	sp, #8
 8015fa6:	bd70      	pop	{r4, r5, r6, pc}
 8015fa8:	ab01      	add	r3, sp, #4
 8015faa:	466a      	mov	r2, sp
 8015fac:	f7ff ffca 	bl	8015f44 <__swhatbuf_r>
 8015fb0:	9900      	ldr	r1, [sp, #0]
 8015fb2:	4605      	mov	r5, r0
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f7ff f94b 	bl	8015250 <_malloc_r>
 8015fba:	b948      	cbnz	r0, 8015fd0 <__smakebuf_r+0x44>
 8015fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fc0:	059a      	lsls	r2, r3, #22
 8015fc2:	d4ef      	bmi.n	8015fa4 <__smakebuf_r+0x18>
 8015fc4:	f023 0303 	bic.w	r3, r3, #3
 8015fc8:	f043 0302 	orr.w	r3, r3, #2
 8015fcc:	81a3      	strh	r3, [r4, #12]
 8015fce:	e7e3      	b.n	8015f98 <__smakebuf_r+0xc>
 8015fd0:	4b0d      	ldr	r3, [pc, #52]	; (8016008 <__smakebuf_r+0x7c>)
 8015fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015fd4:	89a3      	ldrh	r3, [r4, #12]
 8015fd6:	6020      	str	r0, [r4, #0]
 8015fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fdc:	81a3      	strh	r3, [r4, #12]
 8015fde:	9b00      	ldr	r3, [sp, #0]
 8015fe0:	6163      	str	r3, [r4, #20]
 8015fe2:	9b01      	ldr	r3, [sp, #4]
 8015fe4:	6120      	str	r0, [r4, #16]
 8015fe6:	b15b      	cbz	r3, 8016000 <__smakebuf_r+0x74>
 8015fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015fec:	4630      	mov	r0, r6
 8015fee:	f000 f873 	bl	80160d8 <_isatty_r>
 8015ff2:	b128      	cbz	r0, 8016000 <__smakebuf_r+0x74>
 8015ff4:	89a3      	ldrh	r3, [r4, #12]
 8015ff6:	f023 0303 	bic.w	r3, r3, #3
 8015ffa:	f043 0301 	orr.w	r3, r3, #1
 8015ffe:	81a3      	strh	r3, [r4, #12]
 8016000:	89a3      	ldrh	r3, [r4, #12]
 8016002:	431d      	orrs	r5, r3
 8016004:	81a5      	strh	r5, [r4, #12]
 8016006:	e7cd      	b.n	8015fa4 <__smakebuf_r+0x18>
 8016008:	0801502d 	.word	0x0801502d

0801600c <memmove>:
 801600c:	4288      	cmp	r0, r1
 801600e:	b510      	push	{r4, lr}
 8016010:	eb01 0302 	add.w	r3, r1, r2
 8016014:	d807      	bhi.n	8016026 <memmove+0x1a>
 8016016:	1e42      	subs	r2, r0, #1
 8016018:	4299      	cmp	r1, r3
 801601a:	d00a      	beq.n	8016032 <memmove+0x26>
 801601c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016020:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016024:	e7f8      	b.n	8016018 <memmove+0xc>
 8016026:	4283      	cmp	r3, r0
 8016028:	d9f5      	bls.n	8016016 <memmove+0xa>
 801602a:	1881      	adds	r1, r0, r2
 801602c:	1ad2      	subs	r2, r2, r3
 801602e:	42d3      	cmn	r3, r2
 8016030:	d100      	bne.n	8016034 <memmove+0x28>
 8016032:	bd10      	pop	{r4, pc}
 8016034:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016038:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801603c:	e7f7      	b.n	801602e <memmove+0x22>

0801603e <__malloc_lock>:
 801603e:	4770      	bx	lr

08016040 <__malloc_unlock>:
 8016040:	4770      	bx	lr

08016042 <_realloc_r>:
 8016042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016044:	4607      	mov	r7, r0
 8016046:	4614      	mov	r4, r2
 8016048:	460e      	mov	r6, r1
 801604a:	b921      	cbnz	r1, 8016056 <_realloc_r+0x14>
 801604c:	4611      	mov	r1, r2
 801604e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016052:	f7ff b8fd 	b.w	8015250 <_malloc_r>
 8016056:	b922      	cbnz	r2, 8016062 <_realloc_r+0x20>
 8016058:	f7ff f8ac 	bl	80151b4 <_free_r>
 801605c:	4625      	mov	r5, r4
 801605e:	4628      	mov	r0, r5
 8016060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016062:	f000 f849 	bl	80160f8 <_malloc_usable_size_r>
 8016066:	42a0      	cmp	r0, r4
 8016068:	d20f      	bcs.n	801608a <_realloc_r+0x48>
 801606a:	4621      	mov	r1, r4
 801606c:	4638      	mov	r0, r7
 801606e:	f7ff f8ef 	bl	8015250 <_malloc_r>
 8016072:	4605      	mov	r5, r0
 8016074:	2800      	cmp	r0, #0
 8016076:	d0f2      	beq.n	801605e <_realloc_r+0x1c>
 8016078:	4631      	mov	r1, r6
 801607a:	4622      	mov	r2, r4
 801607c:	f7fe fe5b 	bl	8014d36 <memcpy>
 8016080:	4631      	mov	r1, r6
 8016082:	4638      	mov	r0, r7
 8016084:	f7ff f896 	bl	80151b4 <_free_r>
 8016088:	e7e9      	b.n	801605e <_realloc_r+0x1c>
 801608a:	4635      	mov	r5, r6
 801608c:	e7e7      	b.n	801605e <_realloc_r+0x1c>
	...

08016090 <_read_r>:
 8016090:	b538      	push	{r3, r4, r5, lr}
 8016092:	4c07      	ldr	r4, [pc, #28]	; (80160b0 <_read_r+0x20>)
 8016094:	4605      	mov	r5, r0
 8016096:	4608      	mov	r0, r1
 8016098:	4611      	mov	r1, r2
 801609a:	2200      	movs	r2, #0
 801609c:	6022      	str	r2, [r4, #0]
 801609e:	461a      	mov	r2, r3
 80160a0:	f7fe fd36 	bl	8014b10 <_read>
 80160a4:	1c43      	adds	r3, r0, #1
 80160a6:	d102      	bne.n	80160ae <_read_r+0x1e>
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	b103      	cbz	r3, 80160ae <_read_r+0x1e>
 80160ac:	602b      	str	r3, [r5, #0]
 80160ae:	bd38      	pop	{r3, r4, r5, pc}
 80160b0:	2000a7b0 	.word	0x2000a7b0

080160b4 <_fstat_r>:
 80160b4:	b538      	push	{r3, r4, r5, lr}
 80160b6:	4c07      	ldr	r4, [pc, #28]	; (80160d4 <_fstat_r+0x20>)
 80160b8:	2300      	movs	r3, #0
 80160ba:	4605      	mov	r5, r0
 80160bc:	4608      	mov	r0, r1
 80160be:	4611      	mov	r1, r2
 80160c0:	6023      	str	r3, [r4, #0]
 80160c2:	f7fe fd6a 	bl	8014b9a <_fstat>
 80160c6:	1c43      	adds	r3, r0, #1
 80160c8:	d102      	bne.n	80160d0 <_fstat_r+0x1c>
 80160ca:	6823      	ldr	r3, [r4, #0]
 80160cc:	b103      	cbz	r3, 80160d0 <_fstat_r+0x1c>
 80160ce:	602b      	str	r3, [r5, #0]
 80160d0:	bd38      	pop	{r3, r4, r5, pc}
 80160d2:	bf00      	nop
 80160d4:	2000a7b0 	.word	0x2000a7b0

080160d8 <_isatty_r>:
 80160d8:	b538      	push	{r3, r4, r5, lr}
 80160da:	4c06      	ldr	r4, [pc, #24]	; (80160f4 <_isatty_r+0x1c>)
 80160dc:	2300      	movs	r3, #0
 80160de:	4605      	mov	r5, r0
 80160e0:	4608      	mov	r0, r1
 80160e2:	6023      	str	r3, [r4, #0]
 80160e4:	f7fe fd69 	bl	8014bba <_isatty>
 80160e8:	1c43      	adds	r3, r0, #1
 80160ea:	d102      	bne.n	80160f2 <_isatty_r+0x1a>
 80160ec:	6823      	ldr	r3, [r4, #0]
 80160ee:	b103      	cbz	r3, 80160f2 <_isatty_r+0x1a>
 80160f0:	602b      	str	r3, [r5, #0]
 80160f2:	bd38      	pop	{r3, r4, r5, pc}
 80160f4:	2000a7b0 	.word	0x2000a7b0

080160f8 <_malloc_usable_size_r>:
 80160f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160fc:	1f18      	subs	r0, r3, #4
 80160fe:	2b00      	cmp	r3, #0
 8016100:	bfbc      	itt	lt
 8016102:	580b      	ldrlt	r3, [r1, r0]
 8016104:	18c0      	addlt	r0, r0, r3
 8016106:	4770      	bx	lr

08016108 <_init>:
 8016108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801610a:	bf00      	nop
 801610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801610e:	bc08      	pop	{r3}
 8016110:	469e      	mov	lr, r3
 8016112:	4770      	bx	lr

08016114 <_fini>:
 8016114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016116:	bf00      	nop
 8016118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801611a:	bc08      	pop	{r3}
 801611c:	469e      	mov	lr, r3
 801611e:	4770      	bx	lr
