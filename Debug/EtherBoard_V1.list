
EtherBoard_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a20  08018110  08018110  00028110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb30  0801bb30  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb30  0801bb30  0002bb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb38  0801bb38  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb38  0801bb38  0002bb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb3c  0801bb3c  0002bb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0801bb40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a60c  20000204  0801bd44  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a810  0801bd44  0003a810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038045  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b18  00000000  00000000  00068279  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f08  00000000  00000000  0006ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d18  00000000  00000000  00070ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e468  00000000  00000000  000729b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000276f1  00000000  00000000  000a0e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb513  00000000  00000000  000c8511  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009018  00000000  00000000  001b3aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080180f4 	.word	0x080180f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	080180f4 	.word	0x080180f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f001 f981 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f013 febc 	bl	8014d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 f999 	bl	8002302 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f001 f961 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000030 	.word	0x20000030
 8001004:	20000004 	.word	0x20000004
 8001008:	20000000 	.word	0x20000000

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000004 	.word	0x20000004
 8001030:	200008fc 	.word	0x200008fc

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200008fc 	.word	0x200008fc

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_Delay+0x40>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e033      	b.n	800110e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f013 fe5a 	bl	8014d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d6:	f023 0302 	bic.w	r3, r3, #2
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa4a 	bl	800157c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
 80010fe:	e001      	b.n	8001104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Start_DMA+0x1e>
 8001132:	2302      	movs	r3, #2
 8001134:	e0cc      	b.n	80012d0 <HAL_ADC_Start_DMA+0x1b8>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d018      	beq.n	800117e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115c:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <HAL_ADC_Start_DMA+0x1c0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <HAL_ADC_Start_DMA+0x1c4>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9a      	lsrs	r2, r3, #18
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001170:	e002      	b.n	8001178 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3b01      	subs	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	f040 80a0 	bne.w	80012ce <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011cc:	d106      	bne.n	80011dc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f023 0206 	bic.w	r2, r3, #6
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
 80011da:	e002      	b.n	80011e2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_ADC_Start_DMA+0x1c8>)
 80011ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	4a3c      	ldr	r2, [pc, #240]	; (80012e4 <HAL_ADC_Start_DMA+0x1cc>)
 80011f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	4a3b      	ldr	r2, [pc, #236]	; (80012e8 <HAL_ADC_Start_DMA+0x1d0>)
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	4a3a      	ldr	r2, [pc, #232]	; (80012ec <HAL_ADC_Start_DMA+0x1d4>)
 8001204:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800120e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800121e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	334c      	adds	r3, #76	; 0x4c
 800123a:	4619      	mov	r1, r3
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f001 f91a 	bl	8002478 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12a      	bne.n	80012a6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_ADC_Start_DMA+0x1d8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d015      	beq.n	8001286 <HAL_ADC_Start_DMA+0x16e>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <HAL_ADC_Start_DMA+0x1dc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d105      	bne.n	8001270 <HAL_ADC_Start_DMA+0x158>
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_ADC_Start_DMA+0x1c8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00a      	beq.n	8001286 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <HAL_ADC_Start_DMA+0x1e0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d129      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1b6>
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_ADC_Start_DMA+0x1c8>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	2b0f      	cmp	r3, #15
 8001284:	d823      	bhi.n	80012ce <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11c      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e013      	b.n	80012ce <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_ADC_Start_DMA+0x1d8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d10e      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1b6>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d107      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012cc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000030 	.word	0x20000030
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	40012300 	.word	0x40012300
 80012e4:	08001775 	.word	0x08001775
 80012e8:	0800182f 	.word	0x0800182f
 80012ec:	0800184b 	.word	0x0800184b
 80012f0:	40012000 	.word	0x40012000
 80012f4:	40012100 	.word	0x40012100
 80012f8:	40012200 	.word	0x40012200

080012fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1c>
 8001350:	2302      	movs	r3, #2
 8001352:	e105      	b.n	8001560 <HAL_ADC_ConfigChannel+0x228>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b09      	cmp	r3, #9
 8001362:	d925      	bls.n	80013b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68d9      	ldr	r1, [r3, #12]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	3b1e      	subs	r3, #30
 800137a:	2207      	movs	r2, #7
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43da      	mvns	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	400a      	ands	r2, r1
 8001388:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68d9      	ldr	r1, [r3, #12]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	4603      	mov	r3, r0
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4403      	add	r3, r0
 80013a2:	3b1e      	subs	r3, #30
 80013a4:	409a      	lsls	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	e022      	b.n	80013f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6919      	ldr	r1, [r3, #16]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	2207      	movs	r2, #7
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6919      	ldr	r1, [r3, #16]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4403      	add	r3, r0
 80013ec:	409a      	lsls	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d824      	bhi.n	8001448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b05      	subs	r3, #5
 8001410:	221f      	movs	r2, #31
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	400a      	ands	r2, r1
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b05      	subs	r3, #5
 800143a:	fa00 f203 	lsl.w	r2, r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
 8001446:	e04c      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d824      	bhi.n	800149a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	3b23      	subs	r3, #35	; 0x23
 8001462:	221f      	movs	r2, #31
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43da      	mvns	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	400a      	ands	r2, r1
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b23      	subs	r3, #35	; 0x23
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
 8001498:	e023      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b41      	subs	r3, #65	; 0x41
 80014ac:	221f      	movs	r2, #31
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	400a      	ands	r2, r1
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b41      	subs	r3, #65	; 0x41
 80014d6:	fa00 f203 	lsl.w	r2, r0, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_ADC_ConfigChannel+0x234>)
 80014e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <HAL_ADC_ConfigChannel+0x238>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x1cc>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b12      	cmp	r3, #18
 80014f6:	d105      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_ADC_ConfigChannel+0x238>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d123      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x21e>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d003      	beq.n	800151e <HAL_ADC_ConfigChannel+0x1e6>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b11      	cmp	r3, #17
 800151c:	d11b      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b10      	cmp	r3, #16
 8001530:	d111      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_ADC_ConfigChannel+0x23c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_ADC_ConfigChannel+0x240>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	0c9a      	lsrs	r2, r3, #18
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001548:	e002      	b.n	8001550 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f9      	bne.n	800154a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40012300 	.word	0x40012300
 8001570:	40012000 	.word	0x40012000
 8001574:	20000030 	.word	0x20000030
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <ADC_Init+0x1f0>)
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	4a58      	ldr	r2, [pc, #352]	; (8001770 <ADC_Init+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e00f      	b.n	800167a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0202 	bic.w	r2, r2, #2
 8001688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	005a      	lsls	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	035a      	lsls	r2, r3, #13
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	e007      	b.n	80016f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	3b01      	subs	r3, #1
 800170c:	051a      	lsls	r2, r3, #20
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	029a      	lsls	r2, r3, #10
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	609a      	str	r2, [r3, #8]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	0f000001 	.word	0x0f000001

08001774 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800178a:	2b00      	cmp	r3, #0
 800178c:	d13c      	bne.n	8001808 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12b      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d127      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d119      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0220 	bic.w	r2, r2, #32
 80017da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fd7b 	bl	80012fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001806:	e00e      	b.n	8001826 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fd85 	bl	8001324 <HAL_ADC_ErrorCallback>
}
 800181a:	e004      	b.n	8001826 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff fd67 	bl	8001310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f043 0204 	orr.w	r2, r3, #4
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fd5a 	bl	8001324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0ed      	b.n	8001a66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f013 faba 	bl	8014e10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0202 	bic.w	r2, r2, #2
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff fbc2 	bl	8001034 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b2:	e012      	b.n	80018da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b4:	f7ff fbbe 	bl	8001034 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	d90b      	bls.n	80018da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2205      	movs	r2, #5
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0c5      	b.n	8001a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e5      	bne.n	80018b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f8:	f7ff fb9c 	bl	8001034 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018fe:	e012      	b.n	8001926 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001900:	f7ff fb98 	bl	8001034 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b0a      	cmp	r3, #10
 800190c:	d90b      	bls.n	8001926 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2205      	movs	r2, #5
 800191e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e09f      	b.n	8001a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0e5      	beq.n	8001900 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e1b      	ldrb	r3, [r3, #24]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d108      	bne.n	800194e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e007      	b.n	800195e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7e5b      	ldrb	r3, [r3, #25]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d108      	bne.n	8001978 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e007      	b.n	8001988 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001986:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e9b      	ldrb	r3, [r3, #26]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0220 	orr.w	r2, r2, #32
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e007      	b.n	80019b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0220 	bic.w	r2, r2, #32
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7edb      	ldrb	r3, [r3, #27]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0210 	bic.w	r2, r2, #16
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e007      	b.n	80019dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0210 	orr.w	r2, r2, #16
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7f1b      	ldrb	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0208 	orr.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e007      	b.n	8001a06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0208 	bic.w	r2, r2, #8
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f5b      	ldrb	r3, [r3, #29]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0204 	orr.w	r2, r2, #4
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e007      	b.n	8001a30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0204 	bic.w	r2, r2, #4
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	ea42 0103 	orr.w	r1, r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	1e5a      	subs	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b087      	sub	sp, #28
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <HAL_CAN_GetRxMessage+0x24>
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 80f3 	bne.w	8001c78 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10e      	bne.n	8001ab6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e7      	b.n	8001c86 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d8      	b.n	8001c86 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	331b      	adds	r3, #27
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0204 	and.w	r2, r3, #4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10c      	bne.n	8001b0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	331b      	adds	r3, #27
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0d5b      	lsrs	r3, r3, #21
 8001b02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	331b      	adds	r3, #27
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	331b      	adds	r3, #27
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4413      	add	r3, r2
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0202 	and.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	331b      	adds	r3, #27
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	331b      	adds	r3, #27
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	331b      	adds	r3, #27
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0a1a      	lsrs	r2, r3, #8
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0c1a      	lsrs	r2, r3, #16
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e1a      	lsrs	r2, r3, #24
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3303      	adds	r3, #3
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0a1a      	lsrs	r2, r3, #8
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3305      	adds	r3, #5
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0c1a      	lsrs	r2, r3, #16
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e1a      	lsrs	r2, r3, #24
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3307      	adds	r3, #7
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e006      	b.n	8001c86 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b08a      	sub	sp, #40	; 0x28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d07c      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d023      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f97d 	bl	8001ff4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cfa:	e016      	b.n	8001d2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	e00c      	b.n	8001d2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	e002      	b.n	8001d2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f983 	bl	8002030 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d024      	beq.n	8001d7e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f95d 	bl	8002008 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d4e:	e016      	b.n	8001d7e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e00c      	b.n	8001d7e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	e002      	b.n	8001d7e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f963 	bl	8002044 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d024      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f93d 	bl	800201c <HAL_CAN_TxMailbox2CompleteCallback>
 8001da2:	e016      	b.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	e00c      	b.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	e002      	b.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f943 	bl	8002058 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2210      	movs	r2, #16
 8001df4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2208      	movs	r2, #8
 8001e10:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f934 	bl	8002080 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f91b 	bl	800206c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00c      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00b      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f916 	bl	80020a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8fd 	bl	8002094 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f900 	bl	80020bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8f9 	bl	80020d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d075      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06c      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03d      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d038      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	d017      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x302>
 8001f64:	2b30      	cmp	r3, #48	; 0x30
 8001f66:	d804      	bhi.n	8001f72 <HAL_CAN_IRQHandler+0x2e0>
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d009      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x2ee>
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d00c      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f70:	e024      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f72:	2b50      	cmp	r3, #80	; 0x50
 8001f74:	d018      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x316>
 8001f76:	2b60      	cmp	r3, #96	; 0x60
 8001f78:	d01b      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x320>
 8001f7a:	2b40      	cmp	r3, #64	; 0x40
 8001f7c:	d00f      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f7e:	e01d      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f88:	e018      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f92:	e013      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f043 0320 	orr.w	r3, r3, #32
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f9c:	e00e      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fa6:	e009      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fb0:	e004      	b.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f87c 	bl	80020e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <__NVIC_EnableIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f7ff ff8e 	bl	8002198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff29 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff3e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff8e 	bl	80021ec <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5d 	bl	8002198 <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff31 	bl	800215c <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffa2 	bl	8002254 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7fe fe84 	bl	8001034 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e099      	b.n	800246c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002358:	e00f      	b.n	800237a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235a:	f7fe fe6b 	bl	8001034 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b05      	cmp	r3, #5
 8002366:	d908      	bls.n	800237a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e078      	b.n	800246c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e8      	bne.n	800235a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_DMA_Init+0x158>)
 8002394:	4013      	ands	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d107      	bne.n	80023e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	4313      	orrs	r3, r2
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0307 	bic.w	r3, r3, #7
 80023fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2b04      	cmp	r3, #4
 800240c:	d117      	bne.n	800243e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00e      	beq.n	800243e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fa6f 	bl	8002904 <DMA_CheckFifoParam>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800243a:	2301      	movs	r3, #1
 800243c:	e016      	b.n	800246c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa26 	bl	8002898 <DMA_CalcBaseAndBitshift>
 800244c:	4603      	mov	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	223f      	movs	r2, #63	; 0x3f
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	f010803f 	.word	0xf010803f

08002478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_DMA_Start_IT+0x26>
 800249a:	2302      	movs	r3, #2
 800249c:	e040      	b.n	8002520 <HAL_DMA_Start_IT+0xa8>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d12f      	bne.n	8002512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f9b8 	bl	800283c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	223f      	movs	r2, #63	; 0x3f
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0216 	orr.w	r2, r2, #22
 80024e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e005      	b.n	800251e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002534:	4b92      	ldr	r3, [pc, #584]	; (8002780 <HAL_DMA_IRQHandler+0x258>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a92      	ldr	r2, [pc, #584]	; (8002784 <HAL_DMA_IRQHandler+0x25c>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2208      	movs	r2, #8
 8002554:	409a      	lsls	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01a      	beq.n	8002594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2208      	movs	r2, #8
 8002582:	409a      	lsls	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2204      	movs	r2, #4
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d012      	beq.n	8002600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2204      	movs	r2, #4
 80025ee:	409a      	lsls	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	2210      	movs	r2, #16
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d043      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03c      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2210      	movs	r2, #16
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d018      	beq.n	800266a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d108      	bne.n	8002658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d024      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
 8002656:	e01f      	b.n	8002698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e016      	b.n	8002698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0208 	bic.w	r2, r2, #8
 8002686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2220      	movs	r2, #32
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 808e 	beq.w	80027c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8086 	beq.w	80027c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2220      	movs	r2, #32
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d136      	bne.n	8002740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0216 	bic.w	r2, r2, #22
 80026e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <HAL_DMA_IRQHandler+0x1da>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0208 	bic.w	r2, r2, #8
 8002710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	223f      	movs	r2, #63	; 0x3f
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	2b00      	cmp	r3, #0
 8002734:	d07d      	beq.n	8002832 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
        }
        return;
 800273e:	e078      	b.n	8002832 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01c      	beq.n	8002788 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d108      	bne.n	800276e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	2b00      	cmp	r3, #0
 8002762:	d030      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
 800276c:	e02b      	b.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
 800277e:	e022      	b.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
 8002780:	20000030 	.word	0x20000030
 8002784:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0210 	bic.w	r2, r2, #16
 80027a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d032      	beq.n	8002834 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d022      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2205      	movs	r2, #5
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d307      	bcc.n	800280e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f2      	bne.n	80027f2 <HAL_DMA_IRQHandler+0x2ca>
 800280c:	e000      	b.n	8002810 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800280e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e000      	b.n	8002834 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002832:	bf00      	nop
    }
  }
}
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop

0800283c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002858:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d108      	bne.n	800287c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800287a:	e007      	b.n	800288c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3b10      	subs	r3, #16
 80028a8:	4a14      	ldr	r2, [pc, #80]	; (80028fc <DMA_CalcBaseAndBitshift+0x64>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <DMA_CalcBaseAndBitshift+0x68>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d909      	bls.n	80028da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	1d1a      	adds	r2, r3, #4
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58
 80028d8:	e007      	b.n	80028ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	aaaaaaab 	.word	0xaaaaaaab
 8002900:	0801ad50 	.word	0x0801ad50

08002904 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11f      	bne.n	800295e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d855      	bhi.n	80029d0 <DMA_CheckFifoParam+0xcc>
 8002924:	a201      	add	r2, pc, #4	; (adr r2, 800292c <DMA_CheckFifoParam+0x28>)
 8002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292a:	bf00      	nop
 800292c:	0800293d 	.word	0x0800293d
 8002930:	0800294f 	.word	0x0800294f
 8002934:	0800293d 	.word	0x0800293d
 8002938:	080029d1 	.word	0x080029d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d045      	beq.n	80029d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294c:	e042      	b.n	80029d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002956:	d13f      	bne.n	80029d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295c:	e03c      	b.n	80029d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002966:	d121      	bne.n	80029ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d836      	bhi.n	80029dc <DMA_CheckFifoParam+0xd8>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <DMA_CheckFifoParam+0x70>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002985 	.word	0x08002985
 8002978:	0800298b 	.word	0x0800298b
 800297c:	08002985 	.word	0x08002985
 8002980:	0800299d 	.word	0x0800299d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	e02f      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d024      	beq.n	80029e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299a:	e021      	b.n	80029e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a4:	d11e      	bne.n	80029e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029aa:	e01b      	b.n	80029e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d902      	bls.n	80029b8 <DMA_CheckFifoParam+0xb4>
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d003      	beq.n	80029be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b6:	e018      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e015      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00e      	beq.n	80029e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      break;
 80029ce:	e00b      	b.n	80029e8 <DMA_CheckFifoParam+0xe4>
      break;
 80029d0:	bf00      	nop
 80029d2:	e00a      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      break;
 80029d4:	bf00      	nop
 80029d6:	e008      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      break;
 80029d8:	bf00      	nop
 80029da:	e006      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      break;
 80029dc:	bf00      	nop
 80029de:	e004      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      break;
 80029e0:	bf00      	nop
 80029e2:	e002      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      break;   
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <DMA_CheckFifoParam+0xe6>
      break;
 80029e8:	bf00      	nop
    }
  } 
  
  return status; 
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002a08:	4baa      	ldr	r3, [pc, #680]	; (8002cb4 <HAL_ETH_Init+0x2bc>)
 8002a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e185      	b.n	8002d2a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f010 fc56 	bl	80132e4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <HAL_ETH_Init+0x2c0>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	4a9d      	ldr	r2, [pc, #628]	; (8002cb8 <HAL_ETH_Init+0x2c0>)
 8002a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a46:	6453      	str	r3, [r2, #68]	; 0x44
 8002a48:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <HAL_ETH_Init+0x2c0>)
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002a54:	4b99      	ldr	r3, [pc, #612]	; (8002cbc <HAL_ETH_Init+0x2c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a98      	ldr	r2, [pc, #608]	; (8002cbc <HAL_ETH_Init+0x2c4>)
 8002a5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a5e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002a60:	4b96      	ldr	r3, [pc, #600]	; (8002cbc <HAL_ETH_Init+0x2c4>)
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4994      	ldr	r1, [pc, #592]	; (8002cbc <HAL_ETH_Init+0x2c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a84:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a86:	f7fe fad5 	bl	8001034 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002a8c:	e011      	b.n	8002ab2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002a8e:	f7fe fad1 	bl	8001034 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a9c:	d909      	bls.n	8002ab2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e13b      	b.n	8002d2a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e4      	bne.n	8002a8e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f023 031c 	bic.w	r3, r3, #28
 8002ad2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ad4:	f002 f800 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <HAL_ETH_Init+0x2c8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d908      	bls.n	8002af4 <HAL_ETH_Init+0xfc>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <HAL_ETH_Init+0x2cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d804      	bhi.n	8002af4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e027      	b.n	8002b44 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	4a73      	ldr	r2, [pc, #460]	; (8002cc4 <HAL_ETH_Init+0x2cc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d908      	bls.n	8002b0e <HAL_ETH_Init+0x116>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4a72      	ldr	r2, [pc, #456]	; (8002cc8 <HAL_ETH_Init+0x2d0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d804      	bhi.n	8002b0e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f043 030c 	orr.w	r3, r3, #12
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e01a      	b.n	8002b44 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4a6d      	ldr	r2, [pc, #436]	; (8002cc8 <HAL_ETH_Init+0x2d0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d903      	bls.n	8002b1e <HAL_ETH_Init+0x126>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4a6c      	ldr	r2, [pc, #432]	; (8002ccc <HAL_ETH_Init+0x2d4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d911      	bls.n	8002b42 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	4a6a      	ldr	r2, [pc, #424]	; (8002ccc <HAL_ETH_Init+0x2d4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d908      	bls.n	8002b38 <HAL_ETH_Init+0x140>
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_ETH_Init+0x2d8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d804      	bhi.n	8002b38 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e005      	b.n	8002b44 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f043 0310 	orr.w	r3, r3, #16
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	e000      	b.n	8002b44 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002b42:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b50:	2100      	movs	r1, #0
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fb9a 	bl	800328c <HAL_ETH_WritePHYRegister>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002b62:	6939      	ldr	r1, [r7, #16]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fc27 	bl	80033b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0d9      	b.n	8002d2a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002b76:	20ff      	movs	r0, #255	; 0xff
 8002b78:	f7fe fa68 	bl	800104c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a7 	beq.w	8002cd4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b86:	f7fe fa55 	bl	8001034 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	461a      	mov	r2, r3
 8002b92:	2101      	movs	r1, #1
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fb11 	bl	80031bc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002b9a:	f7fe fa4b 	bl	8001034 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d90f      	bls.n	8002bcc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002bb0:	6939      	ldr	r1, [r7, #16]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fc00 	bl	80033b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0ae      	b.n	8002d2a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0da      	beq.n	8002b8c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bda:	2100      	movs	r1, #0
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fb55 	bl	800328c <HAL_ETH_WritePHYRegister>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002bec:	6939      	ldr	r1, [r7, #16]
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fbe2 	bl	80033b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e094      	b.n	8002d2a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fe fa18 	bl	8001034 <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fad4 	bl	80031bc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002c14:	f7fe fa0e 	bl	8001034 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d90f      	bls.n	8002c46 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c2a:	6939      	ldr	r1, [r7, #16]
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fbc3 	bl	80033b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e071      	b.n	8002d2a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0da      	beq.n	8002c06 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	461a      	mov	r2, r3
 8002c56:	2110      	movs	r1, #16
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 faaf 	bl	80031bc <HAL_ETH_ReadPHYRegister>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002c68:	6939      	ldr	r1, [r7, #16]
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fba4 	bl	80033b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e056      	b.n	8002d2a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	e002      	b.n	8002c96 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e037      	b.n	8002d18 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e032      	b.n	8002d18 <HAL_ETH_Init+0x320>
 8002cb2:	bf00      	nop
 8002cb4:	03938700 	.word	0x03938700
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	01312cff 	.word	0x01312cff
 8002cc4:	02160ebf 	.word	0x02160ebf
 8002cc8:	039386ff 	.word	0x039386ff
 8002ccc:	05f5e0ff 	.word	0x05f5e0ff
 8002cd0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2100      	movs	r1, #0
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 facd 	bl	800328c <HAL_ETH_WritePHYRegister>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002cfc:	6939      	ldr	r1, [r7, #16]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb5a 	bl	80033b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e00c      	b.n	8002d2a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002d10:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002d14:	f7fe f99a 	bl	800104c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fb4c 	bl	80033b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop

08002d34 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_ETH_DMATxDescListInit+0x20>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e052      	b.n	8002dfa <HAL_ETH_DMATxDescListInit+0xc6>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e030      	b.n	8002dd2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	015b      	lsls	r3, r3, #5
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	4413      	add	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d80:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d208      	bcs.n	8002dc6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3301      	adds	r3, #1
 8002db8:	015b      	lsls	r3, r3, #5
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e002      	b.n	8002dcc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3ca      	bcc.n	8002d70 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de4:	3310      	adds	r3, #16
 8002de6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ETH_DMARxDescListInit+0x20>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e056      	b.n	8002ed4 <HAL_ETH_DMARxDescListInit+0xce>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e034      	b.n	8002eac <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015b      	lsls	r3, r3, #5
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e52:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002e5a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d208      	bcs.n	8002ea0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	015b      	lsls	r3, r3, #5
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	4413      	add	r3, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e002      	b.n	8002ea6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3c6      	bcc.n	8002e42 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ETH_TransmitFrame+0x24>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0cd      	b.n	80030a0 <HAL_ETH_TransmitFrame+0x1c0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0b8      	b.n	80030a0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da09      	bge.n	8002f4c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2212      	movs	r2, #18
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0a9      	b.n	80030a0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d915      	bls.n	8002f82 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_ETH_TransmitFrame+0x1cc>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_ETH_TransmitFrame+0x1cc>)
 8002f66:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6a:	0a9b      	lsrs	r3, r3, #10
 8002f6c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e001      	b.n	8002f86 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002f82:	2301      	movs	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d11c      	bne.n	8002fc6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002f9a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002fa6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fb6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fc4:	e04b      	b.n	800305e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e044      	b.n	8003056 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fda:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ffa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d116      	bne.n	8003034 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003014:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_ETH_TransmitFrame+0x1d0>)
 800301a:	fb02 f203 	mul.w	r2, r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4413      	add	r3, r2
 8003022:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003026:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003032:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003042:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3301      	adds	r3, #1
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3b6      	bcc.n	8002fcc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003066:	3314      	adds	r3, #20
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307a:	3314      	adds	r3, #20
 800307c:	2204      	movs	r2, #4
 800307e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003088:	3304      	adds	r3, #4
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	ac02b00b 	.word	0xac02b00b
 80030b0:	fffffa0c 	.word	0xfffffa0c

080030b4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ETH_GetReceivedFrame+0x1a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e070      	b.n	80031b0 <HAL_ETH_GetReceivedFrame+0xfc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db5a      	blt.n	800319e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d030      	beq.n	8003158 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2b01      	cmp	r3, #1
 8003106:	d103      	bne.n	8003110 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003124:	3b04      	subs	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e02b      	b.n	80031b0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
 8003186:	e00a      	b.n	800319e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	460b      	mov	r3, r1
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b82      	cmp	r3, #130	; 0x82
 80031dc:	d101      	bne.n	80031e2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
 80031e0:	e050      	b.n	8003284 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2282      	movs	r2, #130	; 0x82
 80031e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 031c 	and.w	r3, r3, #28
 80031f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8a1b      	ldrh	r3, [r3, #16]
 80031fe:	02db      	lsls	r3, r3, #11
 8003200:	b29b      	uxth	r3, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003208:	897b      	ldrh	r3, [r7, #10]
 800320a:	019b      	lsls	r3, r3, #6
 800320c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f023 0302 	bic.w	r3, r3, #2
 800321c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800322e:	f7fd ff01 	bl	8001034 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003234:	e015      	b.n	8003262 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003236:	f7fd fefd 	bl	8001034 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d309      	bcc.n	800325a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e014      	b.n	8003284 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e4      	bne.n	8003236 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	b29b      	uxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	460b      	mov	r3, r1
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b42      	cmp	r3, #66	; 0x42
 80032ac:	d101      	bne.n	80032b2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	e04e      	b.n	8003350 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2242      	movs	r2, #66	; 0x42
 80032b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 031c 	and.w	r3, r3, #28
 80032c8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8a1b      	ldrh	r3, [r3, #16]
 80032ce:	02db      	lsls	r3, r3, #11
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80032d8:	897b      	ldrh	r3, [r7, #10]
 80032da:	019b      	lsls	r3, r3, #6
 80032dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003308:	f7fd fe94 	bl	8001034 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800330e:	e015      	b.n	800333c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003310:	f7fd fe90 	bl	8001034 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d309      	bcc.n	8003334 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e00d      	b.n	8003350 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e4      	bne.n	8003310 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ETH_Start+0x16>
 800336a:	2302      	movs	r3, #2
 800336c:	e01f      	b.n	80033ae <HAL_ETH_Start+0x56>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa1c 	bl	80037bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fa36 	bl	80037f6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa80 	bl	8003890 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fa4d 	bl	8003830 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fa62 	bl	8003860 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0b0      	sub	sp, #192	; 0xc0
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80033e6:	2300      	movs	r3, #0
 80033e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80033fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003402:	663b      	str	r3, [r7, #96]	; 0x60
 8003404:	e001      	b.n	800340a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800340a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003414:	2300      	movs	r3, #0
 8003416:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003424:	2340      	movs	r3, #64	; 0x40
 8003426:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800348c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003490:	4bac      	ldr	r3, [pc, #688]	; (8003744 <ETH_MACDMAConfig+0x38c>)
 8003492:	4013      	ands	r3, r2
 8003494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003498:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800349a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800349c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800349e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80034a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80034a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80034aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80034ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80034ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80034b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80034b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80034ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80034bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80034be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80034c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80034c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80034c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80034c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80034ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80034cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80034ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7fd fdad 	bl	800104c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80034fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003500:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003504:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800350a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800350c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003510:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003516:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800351c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003520:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003528:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800352a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003536:	2001      	movs	r0, #1
 8003538:	f7fd fd88 	bl	800104c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003544:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800354e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003558:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003564:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003568:	f64f 7341 	movw	r3, #65345	; 0xff41
 800356c:	4013      	ands	r3, r2
 800356e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003572:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003576:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800357c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800357e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003582:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003588:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800358a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800358e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003594:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003596:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fd fd49 	bl	800104c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80035c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80035c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035de:	2001      	movs	r0, #1
 80035e0:	f7fd fd34 	bl	800104c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80035f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80035fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003600:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003612:	2304      	movs	r3, #4
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800361c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003620:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800362c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003632:	2300      	movs	r3, #0
 8003634:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003636:	2300      	movs	r3, #0
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003642:	3318      	adds	r3, #24
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800364a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <ETH_MACDMAConfig+0x390>)
 8003650:	4013      	ands	r3, r2
 8003652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003656:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003658:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800365a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800365c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800365e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003660:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003662:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003664:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003666:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003668:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800366a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800366c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800366e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003672:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003676:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368a:	3318      	adds	r3, #24
 800368c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003690:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369a:	3318      	adds	r3, #24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7fd fcd2 	bl	800104c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	3318      	adds	r3, #24
 80036b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80036c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80036c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80036ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80036ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80036d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7fd fcab 	bl	800104c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003702:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10f      	bne.n	800372c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	331c      	adds	r3, #28
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	331c      	adds	r3, #28
 800372a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	461a      	mov	r2, r3
 8003732:	2100      	movs	r1, #0
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f809 	bl	800374c <ETH_MACAddressConfig>
}
 800373a:	bf00      	nop
 800373c:	37c0      	adds	r7, #192	; 0xc0
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	ff20810f 	.word	0xff20810f
 8003748:	f8de3f23 	.word	0xf8de3f23

0800374c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3305      	adds	r3, #5
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	3204      	adds	r2, #4
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <ETH_MACAddressConfig+0x68>)
 800376e:	4413      	add	r3, r2
 8003770:	461a      	mov	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3303      	adds	r3, #3
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	061a      	lsls	r2, r3, #24
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3302      	adds	r3, #2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	4313      	orrs	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <ETH_MACAddressConfig+0x6c>)
 800379e:	4413      	add	r3, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	6013      	str	r3, [r2, #0]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40028040 	.word	0x40028040
 80037b8:	40028044 	.word	0x40028044

080037bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80037e0:	2001      	movs	r0, #1
 80037e2:	f000 f87f 	bl	80038e4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0204 	orr.w	r2, r2, #4
 8003810:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800381a:	2001      	movs	r0, #1
 800381c:	f000 f862 	bl	80038e4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003840:	3318      	adds	r3, #24
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800384c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003850:	3318      	adds	r3, #24
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	3318      	adds	r3, #24
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0202 	orr.w	r2, r2, #2
 800387c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003880:	3318      	adds	r3, #24
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a4:	3318      	adds	r3, #24
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	3318      	adds	r3, #24
 80038b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c0:	3318      	adds	r3, #24
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f000 f80c 	bl	80038e4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	3318      	adds	r3, #24
 80038d8:	601a      	str	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <ETH_Delay+0x34>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <ETH_Delay+0x38>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003900:	bf00      	nop
  } 
  while (Delay --);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	60fa      	str	r2, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f9      	bne.n	8003900 <ETH_Delay+0x1c>
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	20000030 	.word	0x20000030
 800391c:	10624dd3 	.word	0x10624dd3

08003920 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_FLASH_Program+0xa0>)
 8003934:	7e1b      	ldrb	r3, [r3, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_FLASH_Program+0x1e>
 800393a:	2302      	movs	r3, #2
 800393c:	e03b      	b.n	80039b6 <HAL_FLASH_Program+0x96>
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_FLASH_Program+0xa0>)
 8003940:	2201      	movs	r2, #1
 8003942:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003944:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003948:	f000 f87c 	bl	8003a44 <FLASH_WaitForLastOperation>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d12b      	bne.n	80039ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800395c:	783b      	ldrb	r3, [r7, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	68b8      	ldr	r0, [r7, #8]
 8003962:	f000 f925 	bl	8003bb0 <FLASH_Program_Byte>
 8003966:	e016      	b.n	8003996 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800396e:	883b      	ldrh	r3, [r7, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	68b8      	ldr	r0, [r7, #8]
 8003974:	f000 f8f8 	bl	8003b68 <FLASH_Program_HalfWord>
 8003978:	e00d      	b.n	8003996 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d105      	bne.n	800398c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	68b8      	ldr	r0, [r7, #8]
 8003986:	f000 f8cd 	bl	8003b24 <FLASH_Program_Word>
 800398a:	e004      	b.n	8003996 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800398c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003990:	68b8      	ldr	r0, [r7, #8]
 8003992:	f000 f897 	bl	8003ac4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003996:	f24c 3050 	movw	r0, #50000	; 0xc350
 800399a:	f000 f853 	bl	8003a44 <FLASH_WaitForLastOperation>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <HAL_FLASH_Program+0xa4>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <HAL_FLASH_Program+0xa4>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <HAL_FLASH_Program+0xa0>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000900 	.word	0x20000900
 80039c4:	40023c00 	.word	0x40023c00

080039c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_FLASH_Unlock+0x38>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da0b      	bge.n	80039f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_FLASH_Unlock+0x38>)
 80039dc:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_FLASH_Unlock+0x3c>)
 80039de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_FLASH_Unlock+0x38>)
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_FLASH_Unlock+0x38>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da01      	bge.n	80039f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80039f2:	79fb      	ldrb	r3, [r7, #7]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40023c00 	.word	0x40023c00
 8003a04:	45670123 	.word	0x45670123
 8003a08:	cdef89ab 	.word	0xcdef89ab

08003a0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_FLASH_Lock+0x1c>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <HAL_FLASH_Lock+0x1c>)
 8003a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a1a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40023c00 	.word	0x40023c00

08003a2c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_FLASH_GetError+0x14>)
 8003a32:	69db      	ldr	r3, [r3, #28]
}  
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000900 	.word	0x20000900

08003a44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <FLASH_WaitForLastOperation+0x78>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003a56:	f7fd faed 	bl	8001034 <HAL_GetTick>
 8003a5a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003a5c:	e010      	b.n	8003a80 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d00c      	beq.n	8003a80 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <FLASH_WaitForLastOperation+0x38>
 8003a6c:	f7fd fae2 	bl	8001034 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d201      	bcs.n	8003a80 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e019      	b.n	8003ab4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <FLASH_WaitForLastOperation+0x7c>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e8      	bne.n	8003a5e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <FLASH_WaitForLastOperation+0x7c>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <FLASH_WaitForLastOperation+0x7c>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <FLASH_WaitForLastOperation+0x7c>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003aaa:	f000 f8a3 	bl	8003bf4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
  
}  
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000900 	.word	0x20000900
 8003ac0:	40023c00 	.word	0x40023c00

08003ac4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ac4:	b490      	push	{r4, r7}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <FLASH_Program_DoubleWord+0x5c>)
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <FLASH_Program_DoubleWord+0x5c>)
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <FLASH_Program_DoubleWord+0x5c>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <FLASH_Program_DoubleWord+0x5c>)
 8003ae2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <FLASH_Program_DoubleWord+0x5c>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <FLASH_Program_DoubleWord+0x5c>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003afa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003afe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	2400      	movs	r4, #0
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	3204      	adds	r2, #4
 8003b12:	6013      	str	r3, [r2, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc90      	pop	{r4, r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00

08003b24 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <FLASH_Program_Word+0x40>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <FLASH_Program_Word+0x40>)
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <FLASH_Program_Word+0x40>)
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <FLASH_Program_Word+0x40>)
 8003b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <FLASH_Program_Word+0x40>)
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	4a06      	ldr	r2, [pc, #24]	; (8003b64 <FLASH_Program_Word+0x40>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <FLASH_Program_HalfWord+0x44>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <FLASH_Program_HalfWord+0x44>)
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <FLASH_Program_HalfWord+0x44>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	4a09      	ldr	r2, [pc, #36]	; (8003bac <FLASH_Program_HalfWord+0x44>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <FLASH_Program_HalfWord+0x44>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	4a06      	ldr	r2, [pc, #24]	; (8003bac <FLASH_Program_HalfWord+0x44>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	801a      	strh	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00

08003bb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <FLASH_Program_Byte+0x40>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <FLASH_Program_Byte+0x40>)
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <FLASH_Program_Byte+0x40>)
 8003bca:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <FLASH_Program_Byte+0x40>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <FLASH_Program_Byte+0x40>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	4a06      	ldr	r2, [pc, #24]	; (8003bf0 <FLASH_Program_Byte+0x40>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	701a      	strb	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00

08003bf4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f043 0310 	orr.w	r3, r3, #16
 8003c0c:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c0e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c12:	2210      	movs	r2, #16
 8003c14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f043 0308 	orr.w	r3, r3, #8
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c2c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c30:	2220      	movs	r2, #32
 8003c32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003c34:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f043 0304 	orr.w	r3, r3, #4
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c68:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f043 0320 	orr.w	r3, r3, #32
 8003c84:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <FLASH_SetErrorCode+0xa8>)
 8003c86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <FLASH_SetErrorCode+0xa4>)
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	60da      	str	r2, [r3, #12]
  }
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40023c00 	.word	0x40023c00
 8003c9c:	20000900 	.word	0x20000900

08003ca0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_FLASHEx_Erase+0xd8>)
 8003cb4:	7e1b      	ldrb	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_FLASHEx_Erase+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e058      	b.n	8003d70 <HAL_FLASHEx_Erase+0xd0>
 8003cbe:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_FLASHEx_Erase+0xd8>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cc8:	f7ff febc 	bl	8003a44 <FLASH_WaitForLastOperation>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d148      	bne.n	8003d68 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d115      	bne.n	8003d12 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 f844 	bl	8003d80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cfc:	f7ff fea2 	bl	8003a44 <FLASH_WaitForLastOperation>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_FLASHEx_Erase+0xdc>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_FLASHEx_Erase+0xdc>)
 8003d0a:	f023 0304 	bic.w	r3, r3, #4
 8003d0e:	6113      	str	r3, [r2, #16]
 8003d10:	e028      	b.n	8003d64 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	e01c      	b.n	8003d54 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	4619      	mov	r1, r3
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 f850 	bl	8003dc8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d2c:	f7ff fe8a 	bl	8003a44 <FLASH_WaitForLastOperation>
 8003d30:	4603      	mov	r3, r0
 8003d32:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_FLASHEx_Erase+0xdc>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_FLASHEx_Erase+0xdc>)
 8003d3a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003d3e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	601a      	str	r2, [r3, #0]
          break;
 8003d4c:	e00a      	b.n	8003d64 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3da      	bcc.n	8003d1a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003d64:	f000 f878 	bl	8003e58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_FLASHEx_Erase+0xd8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	761a      	strb	r2, [r3, #24]

  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000900 	.word	0x20000900
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <FLASH_MassErase+0x44>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <FLASH_MassErase+0x44>)
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <FLASH_MassErase+0x44>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <FLASH_MassErase+0x44>)
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <FLASH_MassErase+0x44>)
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	4313      	orrs	r3, r2
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <FLASH_MassErase+0x44>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6113      	str	r3, [r2, #16]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40023c00 	.word	0x40023c00

08003dc8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e010      	b.n	8003e06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d103      	bne.n	8003df2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e009      	b.n	8003e06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d103      	bne.n	8003e00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e002      	b.n	8003e06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	490f      	ldr	r1, [pc, #60]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e36:	f043 0302 	orr.w	r3, r3, #2
 8003e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <FLASH_Erase_Sector+0x8c>)
 8003e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e46:	6113      	str	r3, [r2, #16]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40023c00 	.word	0x40023c00

08003e58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e96:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003eb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <FLASH_FlushCaches+0x88>)
 8003ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ed2:	6013      	str	r3, [r2, #0]
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023c00 	.word	0x40023c00

08003ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b089      	sub	sp, #36	; 0x24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e16b      	b.n	80041d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f00:	2201      	movs	r2, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	f040 815a 	bne.w	80041d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d00b      	beq.n	8003f3e <HAL_GPIO_Init+0x5a>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f32:	2b11      	cmp	r3, #17
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b12      	cmp	r3, #18
 8003f3c:	d130      	bne.n	8003fa0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	2203      	movs	r2, #3
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f74:	2201      	movs	r2, #1
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 0201 	and.w	r2, r3, #1
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0xfc>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b12      	cmp	r3, #18
 8003fde:	d123      	bne.n	8004028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	08da      	lsrs	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3208      	adds	r2, #8
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	220f      	movs	r2, #15
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80b4 	beq.w	80041d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b5f      	ldr	r3, [pc, #380]	; (80041ec <HAL_GPIO_Init+0x308>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <HAL_GPIO_Init+0x308>)
 8004074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004078:	6453      	str	r3, [r2, #68]	; 0x44
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_GPIO_Init+0x308>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004086:	4a5a      	ldr	r2, [pc, #360]	; (80041f0 <HAL_GPIO_Init+0x30c>)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	3302      	adds	r3, #2
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a51      	ldr	r2, [pc, #324]	; (80041f4 <HAL_GPIO_Init+0x310>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d02b      	beq.n	800410a <HAL_GPIO_Init+0x226>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a50      	ldr	r2, [pc, #320]	; (80041f8 <HAL_GPIO_Init+0x314>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d025      	beq.n	8004106 <HAL_GPIO_Init+0x222>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4f      	ldr	r2, [pc, #316]	; (80041fc <HAL_GPIO_Init+0x318>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <HAL_GPIO_Init+0x21e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4e      	ldr	r2, [pc, #312]	; (8004200 <HAL_GPIO_Init+0x31c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d019      	beq.n	80040fe <HAL_GPIO_Init+0x21a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4d      	ldr	r2, [pc, #308]	; (8004204 <HAL_GPIO_Init+0x320>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_GPIO_Init+0x216>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a4c      	ldr	r2, [pc, #304]	; (8004208 <HAL_GPIO_Init+0x324>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00d      	beq.n	80040f6 <HAL_GPIO_Init+0x212>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a4b      	ldr	r2, [pc, #300]	; (800420c <HAL_GPIO_Init+0x328>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_Init+0x20e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a4a      	ldr	r2, [pc, #296]	; (8004210 <HAL_GPIO_Init+0x32c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_GPIO_Init+0x20a>
 80040ea:	2307      	movs	r3, #7
 80040ec:	e00e      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e00c      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e00a      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040f6:	2305      	movs	r3, #5
 80040f8:	e008      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e006      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040fe:	2303      	movs	r3, #3
 8004100:	e004      	b.n	800410c <HAL_GPIO_Init+0x228>
 8004102:	2302      	movs	r3, #2
 8004104:	e002      	b.n	800410c <HAL_GPIO_Init+0x228>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_GPIO_Init+0x228>
 800410a:	2300      	movs	r3, #0
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	f002 0203 	and.w	r2, r2, #3
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	4093      	lsls	r3, r2
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800411c:	4934      	ldr	r1, [pc, #208]	; (80041f0 <HAL_GPIO_Init+0x30c>)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800412a:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <HAL_GPIO_Init+0x330>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800414e:	4a31      	ldr	r2, [pc, #196]	; (8004214 <HAL_GPIO_Init+0x330>)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004154:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <HAL_GPIO_Init+0x330>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <HAL_GPIO_Init+0x330>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_GPIO_Init+0x330>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <HAL_GPIO_Init+0x330>)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_GPIO_Init+0x330>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <HAL_GPIO_Init+0x330>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3301      	adds	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b0f      	cmp	r3, #15
 80041dc:	f67f ae90 	bls.w	8003f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041e0:	bf00      	nop
 80041e2:	3724      	adds	r7, #36	; 0x24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40020000 	.word	0x40020000
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40021000 	.word	0x40021000
 8004208:	40021400 	.word	0x40021400
 800420c:	40021800 	.word	0x40021800
 8004210:	40021c00 	.word	0x40021c00
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
 8004224:	4613      	mov	r3, r2
 8004226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004228:	787b      	ldrb	r3, [r7, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004234:	e003      	b.n	800423e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	041a      	lsls	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	401a      	ands	r2, r3
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	429a      	cmp	r2, r3
 8004262:	d104      	bne.n	800426e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	041a      	lsls	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800426c:	e002      	b.n	8004274 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e25b      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d075      	beq.n	800438a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429e:	4ba3      	ldr	r3, [pc, #652]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4ba0      	ldr	r3, [pc, #640]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d112      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b9d      	ldr	r3, [pc, #628]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c2:	d10b      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	4b99      	ldr	r3, [pc, #612]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05b      	beq.n	8004388 <HAL_RCC_OscConfig+0x108>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d157      	bne.n	8004388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e236      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d106      	bne.n	80042f4 <HAL_RCC_OscConfig+0x74>
 80042e6:	4b91      	ldr	r3, [pc, #580]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a90      	ldr	r2, [pc, #576]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x98>
 80042fe:	4b8b      	ldr	r3, [pc, #556]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a8a      	ldr	r2, [pc, #552]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a87      	ldr	r2, [pc, #540]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 8004318:	4b84      	ldr	r3, [pc, #528]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a83      	ldr	r2, [pc, #524]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800432a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fc fe7c 	bl	8001034 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7fc fe78 	bl	8001034 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1fb      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0xc0>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fc fe68 	bl	8001034 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fc fe64 	bl	8001034 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1e7      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437a:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0xe8>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004396:	4b65      	ldr	r3, [pc, #404]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d11c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b5f      	ldr	r3, [pc, #380]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d116      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e1bb      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4952      	ldr	r1, [pc, #328]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e6:	e03a      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f0:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <HAL_RCC_OscConfig+0x2b0>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fc fe1d 	bl	8001034 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fc fe19 	bl	8001034 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e19c      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	4b46      	ldr	r3, [pc, #280]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4940      	ldr	r1, [pc, #256]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
 8004430:	e015      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <HAL_RCC_OscConfig+0x2b0>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fc fdfc 	bl	8001034 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004440:	f7fc fdf8 	bl	8001034 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e17b      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d030      	beq.n	80044cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_OscConfig+0x2b4>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fc fddc 	bl	8001034 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004480:	f7fc fdd8 	bl	8001034 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e15b      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x200>
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCC_OscConfig+0x2b4>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fc fdc5 	bl	8001034 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fc fdc1 	bl	8001034 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e144      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a0 	beq.w	800461a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d121      	bne.n	800455a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a07      	ldr	r2, [pc, #28]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fc fd87 	bl	8001034 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e011      	b.n	800454e <HAL_RCC_OscConfig+0x2ce>
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	42470000 	.word	0x42470000
 8004534:	42470e80 	.word	0x42470e80
 8004538:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fc fd7a 	bl	8001034 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0fd      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCC_OscConfig+0x4d4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d106      	bne.n	8004570 <HAL_RCC_OscConfig+0x2f0>
 8004562:	4b7d      	ldr	r3, [pc, #500]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a7c      	ldr	r2, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x32a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x312>
 8004578:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a76      	ldr	r2, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b74      	ldr	r3, [pc, #464]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a73      	ldr	r2, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x32a>
 8004592:	4b71      	ldr	r3, [pc, #452]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a70      	ldr	r2, [pc, #448]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b6e      	ldr	r3, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a6d      	ldr	r2, [pc, #436]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fc fd3f 	bl	8001034 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fc fd3b 	bl	8001034 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0bc      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x33a>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fc fd29 	bl	8001034 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fc fd25 	bl	8001034 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0a6      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b52      	ldr	r3, [pc, #328]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a51      	ldr	r2, [pc, #324]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8092 	beq.w	8004748 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d05c      	beq.n	80046ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d141      	bne.n	80046bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCC_OscConfig+0x4dc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fc fcf9 	bl	8001034 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fc fcf5 	bl	8001034 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e078      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	4933      	ldr	r1, [pc, #204]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468e:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_RCC_OscConfig+0x4dc>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fc fcce 	bl	8001034 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469c:	f7fc fcca 	bl	8001034 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e04d      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x41c>
 80046ba:	e045      	b.n	8004748 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x4dc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fc fcb7 	bl	8001034 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fc fcb3 	bl	8001034 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e036      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x44a>
 80046e8:	e02e      	b.n	8004748 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e029      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046f6:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	d11c      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d115      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004724:	4293      	cmp	r3, r2
 8004726:	d10d      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40007000 	.word	0x40007000
 8004758:	40023800 	.word	0x40023800
 800475c:	42470060 	.word	0x42470060

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cc      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90c      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b8      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	494d      	ldr	r1, [pc, #308]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d044      	beq.n	8004880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d119      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d003      	beq.n	800481e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e067      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4934      	ldr	r1, [pc, #208]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004850:	f7fc fbf0 	bl	8001034 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fc fbec 	bl	8001034 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d20c      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e032      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490e      	ldr	r1, [pc, #56]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048e6:	f000 f821 	bl	800492c <HAL_RCC_GetSysClockFreq>
 80048ea:	4601      	mov	r1, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	fa21 f303 	lsr.w	r3, r1, r3
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fc fb50 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023c00 	.word	0x40023c00
 800491c:	40023800 	.word	0x40023800
 8004920:	0801b850 	.word	0x0801b850
 8004924:	20000030 	.word	0x20000030
 8004928:	20000000 	.word	0x20000000

0800492c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004942:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b04      	cmp	r3, #4
 800494c:	d007      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x32>
 800494e:	2b08      	cmp	r3, #8
 8004950:	d008      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x38>
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80b4 	bne.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800495a:	60bb      	str	r3, [r7, #8]
       break;
 800495c:	e0b3      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004960:	60bb      	str	r3, [r7, #8]
      break;
 8004962:	e0b0      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b5a      	ldr	r3, [pc, #360]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496e:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d04a      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b55      	ldr	r3, [pc, #340]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	ea03 0501 	and.w	r5, r3, r1
 8004990:	ea04 0602 	and.w	r6, r4, r2
 8004994:	4629      	mov	r1, r5
 8004996:	4632      	mov	r2, r6
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	0154      	lsls	r4, r2, #5
 80049a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049a6:	014b      	lsls	r3, r1, #5
 80049a8:	4619      	mov	r1, r3
 80049aa:	4622      	mov	r2, r4
 80049ac:	1b49      	subs	r1, r1, r5
 80049ae:	eb62 0206 	sbc.w	r2, r2, r6
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f04f 0400 	mov.w	r4, #0
 80049ba:	0194      	lsls	r4, r2, #6
 80049bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c0:	018b      	lsls	r3, r1, #6
 80049c2:	1a5b      	subs	r3, r3, r1
 80049c4:	eb64 0402 	sbc.w	r4, r4, r2
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	00e2      	lsls	r2, r4, #3
 80049d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049d6:	00d9      	lsls	r1, r3, #3
 80049d8:	460b      	mov	r3, r1
 80049da:	4614      	mov	r4, r2
 80049dc:	195b      	adds	r3, r3, r5
 80049de:	eb44 0406 	adc.w	r4, r4, r6
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	02a2      	lsls	r2, r4, #10
 80049ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049f0:	0299      	lsls	r1, r3, #10
 80049f2:	460b      	mov	r3, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	4621      	mov	r1, r4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f04f 0400 	mov.w	r4, #0
 8004a00:	461a      	mov	r2, r3
 8004a02:	4623      	mov	r3, r4
 8004a04:	f7fc f930 	bl	8000c68 <__aeabi_uldivmod>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e049      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a10:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	099b      	lsrs	r3, r3, #6
 8004a16:	f04f 0400 	mov.w	r4, #0
 8004a1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	ea03 0501 	and.w	r5, r3, r1
 8004a26:	ea04 0602 	and.w	r6, r4, r2
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4632      	mov	r2, r6
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	f04f 0400 	mov.w	r4, #0
 8004a36:	0154      	lsls	r4, r2, #5
 8004a38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a3c:	014b      	lsls	r3, r1, #5
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4622      	mov	r2, r4
 8004a42:	1b49      	subs	r1, r1, r5
 8004a44:	eb62 0206 	sbc.w	r2, r2, r6
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	f04f 0400 	mov.w	r4, #0
 8004a50:	0194      	lsls	r4, r2, #6
 8004a52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a56:	018b      	lsls	r3, r1, #6
 8004a58:	1a5b      	subs	r3, r3, r1
 8004a5a:	eb64 0402 	sbc.w	r4, r4, r2
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a6c:	00d9      	lsls	r1, r3, #3
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	195b      	adds	r3, r3, r5
 8004a74:	eb44 0406 	adc.w	r4, r4, r6
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	02a2      	lsls	r2, r4, #10
 8004a82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a86:	0299      	lsls	r1, r3, #10
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	4621      	mov	r1, r4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	461a      	mov	r2, r3
 8004a98:	4623      	mov	r3, r4
 8004a9a:	f7fc f8e5 	bl	8000c68 <__aeabi_uldivmod>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	60bb      	str	r3, [r7, #8]
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ac2:	60bb      	str	r3, [r7, #8]
      break;
 8004ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	00f42400 	.word	0x00f42400

08004ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000030 	.word	0x20000030

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4601      	mov	r1, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4a03      	ldr	r2, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	0801b860 	.word	0x0801b860

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b1c:	f7ff ffdc 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004b20:	4601      	mov	r1, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0b5b      	lsrs	r3, r3, #13
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4a03      	ldr	r2, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	0801b860 	.word	0x0801b860

08004b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e056      	b.n	8004c00 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f010 f9ff 	bl	8014f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	ea42 0103 	orr.w	r1, r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	f003 0104 	and.w	r1, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69da      	ldr	r2, [r3, #28]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	; 0x30
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c16:	2301      	movs	r3, #1
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x26>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e18a      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x33c>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c36:	f7fc f9fd 	bl	8001034 <HAL_GetTick>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d00f      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x70>
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5e:	d107      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x68>
 8004c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d003      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c76:	e15b      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x82>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x82>
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c90:	e14e      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2205      	movs	r2, #5
 8004ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	887a      	ldrh	r2, [r7, #2]
 8004cce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d007      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d02:	d178      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x10a>
 8004d0c:	8b7b      	ldrh	r3, [r7, #26]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d166      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d36:	e053      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d11b      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x176>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x176>
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d113      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	881a      	ldrh	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	1c9a      	adds	r2, r3, #2
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d119      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x1b8>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d014      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	b292      	uxth	r2, r2
 8004da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dc0:	f7fc f938 	bl	8001034 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d807      	bhi.n	8004de0 <HAL_SPI_TransmitReceive+0x1d8>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d003      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dde:	e0a7      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1a6      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x130>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1a1      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x130>
 8004df4:	e07c      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x1fc>
 8004dfe:	8b7b      	ldrh	r3, [r7, #26]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d16b      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e2a:	e057      	b.n	8004edc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d11c      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x26c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x26c>
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d114      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d119      	bne.n	8004eb6 <HAL_SPI_TransmitReceive+0x2ae>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d014      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb6:	f7fc f8bd 	bl	8001034 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d803      	bhi.n	8004ece <HAL_SPI_TransmitReceive+0x2c6>
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d102      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x2cc>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004eda:	e029      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1a2      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x224>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d19d      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f893 	bl	8005020 <SPI_EndRxTxTransaction>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f0c:	e010      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	e000      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3730      	adds	r7, #48	; 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5c:	e04c      	b.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d048      	beq.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f66:	f7fc f865 	bl	8001034 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d902      	bls.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d13d      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f94:	d111      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d004      	beq.n	8004faa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa8:	d107      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc2:	d10f      	bne.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e00f      	b.n	8005018 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	429a      	cmp	r2, r3
 8005014:	d1a3      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <SPI_EndRxTxTransaction+0x7c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <SPI_EndRxTxTransaction+0x80>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	0d5b      	lsrs	r3, r3, #21
 8005038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504a:	d112      	bne.n	8005072 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff ff78 	bl	8004f4c <SPI_WaitFlagStateUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f043 0220 	orr.w	r2, r3, #32
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e00f      	b.n	8005092 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3b01      	subs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b80      	cmp	r3, #128	; 0x80
 800508a:	d0f2      	beq.n	8005072 <SPI_EndRxTxTransaction+0x52>
 800508c:	e000      	b.n	8005090 <SPI_EndRxTxTransaction+0x70>
        break;
 800508e:	bf00      	nop
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000030 	.word	0x20000030
 80050a0:	165e9f81 	.word	0x165e9f81

080050a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e01d      	b.n	80050f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f00f ff98 	bl	8015000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 f95e 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b06      	cmp	r3, #6
 8005122:	d007      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d122      	bne.n	800519e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d11b      	bne.n	800519e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0202 	mvn.w	r2, #2
 800516e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8ee 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 800518a:	e005      	b.n	8005198 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8e0 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f8f1 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d122      	bne.n	80051f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d11b      	bne.n	80051f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f06f 0204 	mvn.w	r2, #4
 80051c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8c4 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 80051de:	e005      	b.n	80051ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8b6 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8c7 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d122      	bne.n	8005246 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11b      	bne.n	8005246 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0208 	mvn.w	r2, #8
 8005216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2204      	movs	r2, #4
 800521c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f89a 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 8005232:	e005      	b.n	8005240 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f88c 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f89d 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b10      	cmp	r3, #16
 8005252:	d122      	bne.n	800529a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b10      	cmp	r3, #16
 8005260:	d11b      	bne.n	800529a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f06f 0210 	mvn.w	r2, #16
 800526a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2208      	movs	r2, #8
 8005270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f870 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 8005286:	e005      	b.n	8005294 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f862 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f873 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0201 	mvn.w	r2, #1
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f00f fd0b 	bl	8014cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d10e      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f97f 	bl	80055f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	d10e      	bne.n	800531e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	d107      	bne.n	800531e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f838 	bl	800538e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b20      	cmp	r3, #32
 800532a:	d10e      	bne.n	800534a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b20      	cmp	r3, #32
 8005338:	d107      	bne.n	800534a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f06f 0220 	mvn.w	r2, #32
 8005342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f949 	bl	80055dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <TIM_Base_SetConfig+0x114>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3d      	ldr	r2, [pc, #244]	; (80054bc <TIM_Base_SetConfig+0x118>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a3c      	ldr	r2, [pc, #240]	; (80054c0 <TIM_Base_SetConfig+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a3b      	ldr	r2, [pc, #236]	; (80054c4 <TIM_Base_SetConfig+0x120>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3a      	ldr	r2, [pc, #232]	; (80054c8 <TIM_Base_SetConfig+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <TIM_Base_SetConfig+0x114>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02b      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d027      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2c      	ldr	r2, [pc, #176]	; (80054bc <TIM_Base_SetConfig+0x118>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d023      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2b      	ldr	r2, [pc, #172]	; (80054c0 <TIM_Base_SetConfig+0x11c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01f      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <TIM_Base_SetConfig+0x120>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01b      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <TIM_Base_SetConfig+0x124>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d017      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a28      	ldr	r2, [pc, #160]	; (80054cc <TIM_Base_SetConfig+0x128>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a27      	ldr	r2, [pc, #156]	; (80054d0 <TIM_Base_SetConfig+0x12c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00f      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a26      	ldr	r2, [pc, #152]	; (80054d4 <TIM_Base_SetConfig+0x130>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00b      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <TIM_Base_SetConfig+0x134>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d007      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a24      	ldr	r2, [pc, #144]	; (80054dc <TIM_Base_SetConfig+0x138>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <TIM_Base_SetConfig+0x13c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d108      	bne.n	8005468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <TIM_Base_SetConfig+0x114>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_Base_SetConfig+0xf8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <TIM_Base_SetConfig+0x124>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d103      	bne.n	80054a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	615a      	str	r2, [r3, #20]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	40001800 	.word	0x40001800
 80054dc:	40001c00 	.word	0x40001c00
 80054e0:	40002000 	.word	0x40002000

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e05a      	b.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d01d      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10c      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4313      	orrs	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40001800 	.word	0x40001800

080055dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e03f      	b.n	8005696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f00f fd10 	bl	8015050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f90b 	bl	8005864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b088      	sub	sp, #32
 80056a2:	af02      	add	r7, sp, #8
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	f040 8083 	bne.w	80057c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_UART_Transmit+0x2e>
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e07b      	b.n	80057c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_UART_Transmit+0x40>
 80056da:	2302      	movs	r3, #2
 80056dc:	e074      	b.n	80057c8 <HAL_UART_Transmit+0x12a>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2221      	movs	r2, #33	; 0x21
 80056f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80056f4:	f7fb fc9e 	bl	8001034 <HAL_GetTick>
 80056f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800570e:	e042      	b.n	8005796 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005726:	d122      	bne.n	800576e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f84c 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e042      	b.n	80057c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005754:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3302      	adds	r3, #2
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	e017      	b.n	8005796 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3301      	adds	r3, #1
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	e013      	b.n	8005796 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f829 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e01f      	b.n	80057c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	60ba      	str	r2, [r7, #8]
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1b7      	bne.n	8005710 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2140      	movs	r1, #64	; 0x40
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f810 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	e02c      	b.n	800583c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d028      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f0:	f7fb fc20 	bl	8001034 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d21d      	bcs.n	800583c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800580e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e00f      	b.n	800585c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	429a      	cmp	r2, r3
 8005858:	d0c3      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80058a6:	f023 030c 	bic.w	r3, r3, #12
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	f040 818b 	bne.w	8005bec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4ac1      	ldr	r2, [pc, #772]	; (8005be0 <UART_SetConfig+0x37c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d005      	beq.n	80058ec <UART_SetConfig+0x88>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4abf      	ldr	r2, [pc, #764]	; (8005be4 <UART_SetConfig+0x380>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f040 80bd 	bne.w	8005a66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7ff f914 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 80058f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	461d      	mov	r5, r3
 80058f6:	f04f 0600 	mov.w	r6, #0
 80058fa:	46a8      	mov	r8, r5
 80058fc:	46b1      	mov	r9, r6
 80058fe:	eb18 0308 	adds.w	r3, r8, r8
 8005902:	eb49 0409 	adc.w	r4, r9, r9
 8005906:	4698      	mov	r8, r3
 8005908:	46a1      	mov	r9, r4
 800590a:	eb18 0805 	adds.w	r8, r8, r5
 800590e:	eb49 0906 	adc.w	r9, r9, r6
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800591e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005922:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005926:	4688      	mov	r8, r1
 8005928:	4691      	mov	r9, r2
 800592a:	eb18 0005 	adds.w	r0, r8, r5
 800592e:	eb49 0106 	adc.w	r1, r9, r6
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	461d      	mov	r5, r3
 8005938:	f04f 0600 	mov.w	r6, #0
 800593c:	196b      	adds	r3, r5, r5
 800593e:	eb46 0406 	adc.w	r4, r6, r6
 8005942:	461a      	mov	r2, r3
 8005944:	4623      	mov	r3, r4
 8005946:	f7fb f98f 	bl	8000c68 <__aeabi_uldivmod>
 800594a:	4603      	mov	r3, r0
 800594c:	460c      	mov	r4, r1
 800594e:	461a      	mov	r2, r3
 8005950:	4ba5      	ldr	r3, [pc, #660]	; (8005be8 <UART_SetConfig+0x384>)
 8005952:	fba3 2302 	umull	r2, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	461d      	mov	r5, r3
 8005960:	f04f 0600 	mov.w	r6, #0
 8005964:	46a9      	mov	r9, r5
 8005966:	46b2      	mov	sl, r6
 8005968:	eb19 0309 	adds.w	r3, r9, r9
 800596c:	eb4a 040a 	adc.w	r4, sl, sl
 8005970:	4699      	mov	r9, r3
 8005972:	46a2      	mov	sl, r4
 8005974:	eb19 0905 	adds.w	r9, r9, r5
 8005978:	eb4a 0a06 	adc.w	sl, sl, r6
 800597c:	f04f 0100 	mov.w	r1, #0
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005988:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800598c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005990:	4689      	mov	r9, r1
 8005992:	4692      	mov	sl, r2
 8005994:	eb19 0005 	adds.w	r0, r9, r5
 8005998:	eb4a 0106 	adc.w	r1, sl, r6
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	461d      	mov	r5, r3
 80059a2:	f04f 0600 	mov.w	r6, #0
 80059a6:	196b      	adds	r3, r5, r5
 80059a8:	eb46 0406 	adc.w	r4, r6, r6
 80059ac:	461a      	mov	r2, r3
 80059ae:	4623      	mov	r3, r4
 80059b0:	f7fb f95a 	bl	8000c68 <__aeabi_uldivmod>
 80059b4:	4603      	mov	r3, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <UART_SetConfig+0x384>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	; 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	3332      	adds	r3, #50	; 0x32
 80059ce:	4a86      	ldr	r2, [pc, #536]	; (8005be8 <UART_SetConfig+0x384>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059dc:	4498      	add	r8, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	461d      	mov	r5, r3
 80059e2:	f04f 0600 	mov.w	r6, #0
 80059e6:	46a9      	mov	r9, r5
 80059e8:	46b2      	mov	sl, r6
 80059ea:	eb19 0309 	adds.w	r3, r9, r9
 80059ee:	eb4a 040a 	adc.w	r4, sl, sl
 80059f2:	4699      	mov	r9, r3
 80059f4:	46a2      	mov	sl, r4
 80059f6:	eb19 0905 	adds.w	r9, r9, r5
 80059fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80059fe:	f04f 0100 	mov.w	r1, #0
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a12:	4689      	mov	r9, r1
 8005a14:	4692      	mov	sl, r2
 8005a16:	eb19 0005 	adds.w	r0, r9, r5
 8005a1a:	eb4a 0106 	adc.w	r1, sl, r6
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	461d      	mov	r5, r3
 8005a24:	f04f 0600 	mov.w	r6, #0
 8005a28:	196b      	adds	r3, r5, r5
 8005a2a:	eb46 0406 	adc.w	r4, r6, r6
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4623      	mov	r3, r4
 8005a32:	f7fb f919 	bl	8000c68 <__aeabi_uldivmod>
 8005a36:	4603      	mov	r3, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <UART_SetConfig+0x384>)
 8005a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2164      	movs	r1, #100	; 0x64
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	3332      	adds	r3, #50	; 0x32
 8005a50:	4a65      	ldr	r2, [pc, #404]	; (8005be8 <UART_SetConfig+0x384>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	f003 0207 	and.w	r2, r3, #7
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4442      	add	r2, r8
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	e26f      	b.n	8005f46 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a66:	f7ff f843 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8005a6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	461d      	mov	r5, r3
 8005a70:	f04f 0600 	mov.w	r6, #0
 8005a74:	46a8      	mov	r8, r5
 8005a76:	46b1      	mov	r9, r6
 8005a78:	eb18 0308 	adds.w	r3, r8, r8
 8005a7c:	eb49 0409 	adc.w	r4, r9, r9
 8005a80:	4698      	mov	r8, r3
 8005a82:	46a1      	mov	r9, r4
 8005a84:	eb18 0805 	adds.w	r8, r8, r5
 8005a88:	eb49 0906 	adc.w	r9, r9, r6
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005aa0:	4688      	mov	r8, r1
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	eb18 0005 	adds.w	r0, r8, r5
 8005aa8:	eb49 0106 	adc.w	r1, r9, r6
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	f04f 0600 	mov.w	r6, #0
 8005ab6:	196b      	adds	r3, r5, r5
 8005ab8:	eb46 0406 	adc.w	r4, r6, r6
 8005abc:	461a      	mov	r2, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	f7fb f8d2 	bl	8000c68 <__aeabi_uldivmod>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <UART_SetConfig+0x384>)
 8005acc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	461d      	mov	r5, r3
 8005ada:	f04f 0600 	mov.w	r6, #0
 8005ade:	46a9      	mov	r9, r5
 8005ae0:	46b2      	mov	sl, r6
 8005ae2:	eb19 0309 	adds.w	r3, r9, r9
 8005ae6:	eb4a 040a 	adc.w	r4, sl, sl
 8005aea:	4699      	mov	r9, r3
 8005aec:	46a2      	mov	sl, r4
 8005aee:	eb19 0905 	adds.w	r9, r9, r5
 8005af2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005af6:	f04f 0100 	mov.w	r1, #0
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b0a:	4689      	mov	r9, r1
 8005b0c:	4692      	mov	sl, r2
 8005b0e:	eb19 0005 	adds.w	r0, r9, r5
 8005b12:	eb4a 0106 	adc.w	r1, sl, r6
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	461d      	mov	r5, r3
 8005b1c:	f04f 0600 	mov.w	r6, #0
 8005b20:	196b      	adds	r3, r5, r5
 8005b22:	eb46 0406 	adc.w	r4, r6, r6
 8005b26:	461a      	mov	r2, r3
 8005b28:	4623      	mov	r3, r4
 8005b2a:	f7fb f89d 	bl	8000c68 <__aeabi_uldivmod>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	461a      	mov	r2, r3
 8005b34:	4b2c      	ldr	r3, [pc, #176]	; (8005be8 <UART_SetConfig+0x384>)
 8005b36:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2164      	movs	r1, #100	; 0x64
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	3332      	adds	r3, #50	; 0x32
 8005b48:	4a27      	ldr	r2, [pc, #156]	; (8005be8 <UART_SetConfig+0x384>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b56:	4498      	add	r8, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	461d      	mov	r5, r3
 8005b5c:	f04f 0600 	mov.w	r6, #0
 8005b60:	46a9      	mov	r9, r5
 8005b62:	46b2      	mov	sl, r6
 8005b64:	eb19 0309 	adds.w	r3, r9, r9
 8005b68:	eb4a 040a 	adc.w	r4, sl, sl
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	46a2      	mov	sl, r4
 8005b70:	eb19 0905 	adds.w	r9, r9, r5
 8005b74:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b78:	f04f 0100 	mov.w	r1, #0
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	4692      	mov	sl, r2
 8005b90:	eb19 0005 	adds.w	r0, r9, r5
 8005b94:	eb4a 0106 	adc.w	r1, sl, r6
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	461d      	mov	r5, r3
 8005b9e:	f04f 0600 	mov.w	r6, #0
 8005ba2:	196b      	adds	r3, r5, r5
 8005ba4:	eb46 0406 	adc.w	r4, r6, r6
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4623      	mov	r3, r4
 8005bac:	f7fb f85c 	bl	8000c68 <__aeabi_uldivmod>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <UART_SetConfig+0x384>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	; 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	3332      	adds	r3, #50	; 0x32
 8005bca:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <UART_SetConfig+0x384>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 0207 	and.w	r2, r3, #7
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4442      	add	r2, r8
 8005bdc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005bde:	e1b2      	b.n	8005f46 <UART_SetConfig+0x6e2>
 8005be0:	40011000 	.word	0x40011000
 8005be4:	40011400 	.word	0x40011400
 8005be8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4ad7      	ldr	r2, [pc, #860]	; (8005f50 <UART_SetConfig+0x6ec>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d005      	beq.n	8005c02 <UART_SetConfig+0x39e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4ad6      	ldr	r2, [pc, #856]	; (8005f54 <UART_SetConfig+0x6f0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f040 80d1 	bne.w	8005da4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c02:	f7fe ff89 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8005c06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	469a      	mov	sl, r3
 8005c0c:	f04f 0b00 	mov.w	fp, #0
 8005c10:	46d0      	mov	r8, sl
 8005c12:	46d9      	mov	r9, fp
 8005c14:	eb18 0308 	adds.w	r3, r8, r8
 8005c18:	eb49 0409 	adc.w	r4, r9, r9
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	46a1      	mov	r9, r4
 8005c20:	eb18 080a 	adds.w	r8, r8, sl
 8005c24:	eb49 090b 	adc.w	r9, r9, fp
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c3c:	4688      	mov	r8, r1
 8005c3e:	4691      	mov	r9, r2
 8005c40:	eb1a 0508 	adds.w	r5, sl, r8
 8005c44:	eb4b 0609 	adc.w	r6, fp, r9
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	f04f 0400 	mov.w	r4, #0
 8005c5a:	0094      	lsls	r4, r2, #2
 8005c5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c60:	008b      	lsls	r3, r1, #2
 8005c62:	461a      	mov	r2, r3
 8005c64:	4623      	mov	r3, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	4631      	mov	r1, r6
 8005c6a:	f7fa fffd 	bl	8000c68 <__aeabi_uldivmod>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	461a      	mov	r2, r3
 8005c74:	4bb8      	ldr	r3, [pc, #736]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005c76:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	469b      	mov	fp, r3
 8005c84:	f04f 0c00 	mov.w	ip, #0
 8005c88:	46d9      	mov	r9, fp
 8005c8a:	46e2      	mov	sl, ip
 8005c8c:	eb19 0309 	adds.w	r3, r9, r9
 8005c90:	eb4a 040a 	adc.w	r4, sl, sl
 8005c94:	4699      	mov	r9, r3
 8005c96:	46a2      	mov	sl, r4
 8005c98:	eb19 090b 	adds.w	r9, r9, fp
 8005c9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cb4:	4689      	mov	r9, r1
 8005cb6:	4692      	mov	sl, r2
 8005cb8:	eb1b 0509 	adds.w	r5, fp, r9
 8005cbc:	eb4c 060a 	adc.w	r6, ip, sl
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f04f 0400 	mov.w	r4, #0
 8005cd2:	0094      	lsls	r4, r2, #2
 8005cd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd8:	008b      	lsls	r3, r1, #2
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4623      	mov	r3, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	f7fa ffc1 	bl	8000c68 <__aeabi_uldivmod>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b9a      	ldr	r3, [pc, #616]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005cee:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2164      	movs	r1, #100	; 0x64
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	3332      	adds	r3, #50	; 0x32
 8005d00:	4a95      	ldr	r2, [pc, #596]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0c:	4498      	add	r8, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	469b      	mov	fp, r3
 8005d12:	f04f 0c00 	mov.w	ip, #0
 8005d16:	46d9      	mov	r9, fp
 8005d18:	46e2      	mov	sl, ip
 8005d1a:	eb19 0309 	adds.w	r3, r9, r9
 8005d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d22:	4699      	mov	r9, r3
 8005d24:	46a2      	mov	sl, r4
 8005d26:	eb19 090b 	adds.w	r9, r9, fp
 8005d2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d42:	4689      	mov	r9, r1
 8005d44:	4692      	mov	sl, r2
 8005d46:	eb1b 0509 	adds.w	r5, fp, r9
 8005d4a:	eb4c 060a 	adc.w	r6, ip, sl
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4619      	mov	r1, r3
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	f04f 0400 	mov.w	r4, #0
 8005d60:	0094      	lsls	r4, r2, #2
 8005d62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	4631      	mov	r1, r6
 8005d70:	f7fa ff7a 	bl	8000c68 <__aeabi_uldivmod>
 8005d74:	4603      	mov	r3, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b77      	ldr	r3, [pc, #476]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	; 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	; 0x32
 8005d8e:	4a72      	ldr	r2, [pc, #456]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4442      	add	r2, r8
 8005da0:	609a      	str	r2, [r3, #8]
 8005da2:	e0d0      	b.n	8005f46 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fe fea4 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8005da8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	469a      	mov	sl, r3
 8005dae:	f04f 0b00 	mov.w	fp, #0
 8005db2:	46d0      	mov	r8, sl
 8005db4:	46d9      	mov	r9, fp
 8005db6:	eb18 0308 	adds.w	r3, r8, r8
 8005dba:	eb49 0409 	adc.w	r4, r9, r9
 8005dbe:	4698      	mov	r8, r3
 8005dc0:	46a1      	mov	r9, r4
 8005dc2:	eb18 080a 	adds.w	r8, r8, sl
 8005dc6:	eb49 090b 	adc.w	r9, r9, fp
 8005dca:	f04f 0100 	mov.w	r1, #0
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dde:	4688      	mov	r8, r1
 8005de0:	4691      	mov	r9, r2
 8005de2:	eb1a 0508 	adds.w	r5, sl, r8
 8005de6:	eb4b 0609 	adc.w	r6, fp, r9
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4619      	mov	r1, r3
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	f04f 0400 	mov.w	r4, #0
 8005dfc:	0094      	lsls	r4, r2, #2
 8005dfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e02:	008b      	lsls	r3, r1, #2
 8005e04:	461a      	mov	r2, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	4628      	mov	r0, r5
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	f7fa ff2c 	bl	8000c68 <__aeabi_uldivmod>
 8005e10:	4603      	mov	r3, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005e18:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	469b      	mov	fp, r3
 8005e26:	f04f 0c00 	mov.w	ip, #0
 8005e2a:	46d9      	mov	r9, fp
 8005e2c:	46e2      	mov	sl, ip
 8005e2e:	eb19 0309 	adds.w	r3, r9, r9
 8005e32:	eb4a 040a 	adc.w	r4, sl, sl
 8005e36:	4699      	mov	r9, r3
 8005e38:	46a2      	mov	sl, r4
 8005e3a:	eb19 090b 	adds.w	r9, r9, fp
 8005e3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e42:	f04f 0100 	mov.w	r1, #0
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e56:	4689      	mov	r9, r1
 8005e58:	4692      	mov	sl, r2
 8005e5a:	eb1b 0509 	adds.w	r5, fp, r9
 8005e5e:	eb4c 060a 	adc.w	r6, ip, sl
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4619      	mov	r1, r3
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	f04f 0400 	mov.w	r4, #0
 8005e74:	0094      	lsls	r4, r2, #2
 8005e76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e7a:	008b      	lsls	r3, r1, #2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4623      	mov	r3, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	4631      	mov	r1, r6
 8005e84:	f7fa fef0 	bl	8000c68 <__aeabi_uldivmod>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eae:	4498      	add	r8, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	469b      	mov	fp, r3
 8005eb4:	f04f 0c00 	mov.w	ip, #0
 8005eb8:	46d9      	mov	r9, fp
 8005eba:	46e2      	mov	sl, ip
 8005ebc:	eb19 0309 	adds.w	r3, r9, r9
 8005ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ec4:	4699      	mov	r9, r3
 8005ec6:	46a2      	mov	sl, r4
 8005ec8:	eb19 090b 	adds.w	r9, r9, fp
 8005ecc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	4692      	mov	sl, r2
 8005ee8:	eb1b 0509 	adds.w	r5, fp, r9
 8005eec:	eb4c 060a 	adc.w	r6, ip, sl
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	f04f 0400 	mov.w	r4, #0
 8005f02:	0094      	lsls	r4, r2, #2
 8005f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f08:	008b      	lsls	r3, r1, #2
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4623      	mov	r3, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	4631      	mov	r1, r6
 8005f12:	f7fa fea9 	bl	8000c68 <__aeabi_uldivmod>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2164      	movs	r1, #100	; 0x64
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	3332      	adds	r3, #50	; 0x32
 8005f30:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <UART_SetConfig+0x6f4>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f003 020f 	and.w	r2, r3, #15
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4442      	add	r2, r8
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	e7ff      	b.n	8005f46 <UART_SetConfig+0x6e2>
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f50:	40011000 	.word	0x40011000
 8005f54:	40011400 	.word	0x40011400
 8005f58:	51eb851f 	.word	0x51eb851f

08005f5c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <fs_open+0x16>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <fs_open+0x1c>
     return ERR_ARG;
 8005f72:	f06f 030f 	mvn.w	r3, #15
 8005f76:	e028      	b.n	8005fca <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005f78:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <fs_open+0x78>)
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e020      	b.n	8005fc0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6838      	ldr	r0, [r7, #0]
 8005f86:	f7fa f923 	bl	80001d0 <strcmp>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d114      	bne.n	8005fba <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	7c1a      	ldrb	r2, [r3, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e007      	b.n	8005fca <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1db      	bne.n	8005f7e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8005fc6:	f06f 0305 	mvn.w	r3, #5
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	0801b704 	.word	0x0801b704

08005fd8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8006010:	f44f 709c 	mov.w	r0, #312	; 0x138
 8006014:	f001 fd9c 	bl	8007b50 <mem_malloc>
 8006018:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8006020:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f00f fa74 	bl	8015514 <memset>
  }
  return ret;
 800602c:	687b      	ldr	r3, [r7, #4]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 fc45 	bl	80078d4 <mem_free>
  }
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800605a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800605e:	2100      	movs	r1, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f00f fa57 	bl	8015514 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8006074:	f44f 7054 	mov.w	r0, #848	; 0x350
 8006078:	f001 fd6a 	bl	8007b50 <mem_malloc>
 800607c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <http_state_alloc+0x1c>
    http_state_init(ret);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ffe4 	bl	8006052 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800608a:	687b      	ldr	r3, [r7, #4]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ff95 	bl	8005fd8 <fs_close>
    hs->handle = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ffb8 	bl	8006036 <http_ssi_state_free>
    hs->ssi = NULL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <http_state_eof+0x50>
    pbuf_free(hs->req);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 fc15 	bl	8008908 <pbuf_free>
    hs->req = NULL;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <http_state_free+0x1a>
    http_state_eof(hs);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff ffca 	bl	8006094 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fbe7 	bl	80078d4 <mem_free>
  }
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <http_write+0x22>
 8006124:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <http_write+0xc8>)
 8006126:	f44f 7204 	mov.w	r2, #528	; 0x210
 800612a:	492c      	ldr	r1, [pc, #176]	; (80061dc <http_write+0xcc>)
 800612c:	482c      	ldr	r0, [pc, #176]	; (80061e0 <http_write+0xd0>)
 800612e:	f00f fe55 	bl	8015ddc <iprintf>
  len = *length;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8006138:	8afb      	ldrh	r3, [r7, #22]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <http_write+0x32>
    return ERR_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e045      	b.n	80061ce <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006148:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800614a:	8aba      	ldrh	r2, [r7, #20]
 800614c:	8afb      	ldrh	r3, [r7, #22]
 800614e:	429a      	cmp	r2, r3
 8006150:	d201      	bcs.n	8006156 <http_write+0x46>
    len = max_len;
 8006152:	8abb      	ldrh	r3, [r7, #20]
 8006154:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800615e:	8afa      	ldrh	r2, [r7, #22]
 8006160:	8abb      	ldrh	r3, [r7, #20]
 8006162:	429a      	cmp	r2, r3
 8006164:	d901      	bls.n	800616a <http_write+0x5a>
    len = max_len;
 8006166:	8abb      	ldrh	r3, [r7, #20]
 8006168:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	8afa      	ldrh	r2, [r7, #22]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f006 feab 	bl	800cecc <tcp_write>
 8006176:	4603      	mov	r3, r0
 8006178:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800617a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d10f      	bne.n	80061a4 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 8006194:	2b13      	cmp	r3, #19
 8006196:	d902      	bls.n	800619e <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 8006198:	2301      	movs	r3, #1
 800619a:	82fb      	strh	r3, [r7, #22]
 800619c:	e002      	b.n	80061a4 <http_write+0x94>
      } else {
        len /= 2;
 800619e:	8afb      	ldrh	r3, [r7, #22]
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80061a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d102      	bne.n	80061b4 <http_write+0xa4>
 80061ae:	8afb      	ldrh	r3, [r7, #22]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d8da      	bhi.n	800616a <http_write+0x5a>

  if (err == ERR_OK) {
 80061b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d103      	bne.n	80061c4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8afa      	ldrh	r2, [r7, #22]
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e002      	b.n	80061ca <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 80061ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	0801817c 	.word	0x0801817c
 80061dc:	080181b4 	.word	0x080181b4
 80061e0:	080181c4 	.word	0x080181c4

080061e4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 80061f2:	2100      	movs	r1, #0
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f004 f827 	bl	800a248 <tcp_arg>
  tcp_recv(pcb, NULL);
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f004 f835 	bl	800a26c <tcp_recv>
  tcp_err(pcb, NULL);
 8006202:	2100      	movs	r1, #0
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f004 f873 	bl	800a2f0 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800620a:	2200      	movs	r2, #0
 800620c:	2100      	movs	r1, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f004 f8a8 	bl	800a364 <tcp_poll>
  tcp_sent(pcb, NULL);
 8006214:	2100      	movs	r1, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f004 f84a 	bl	800a2b0 <tcp_sent>
  if (hs != NULL) {
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8006222:	68b8      	ldr	r0, [r7, #8]
 8006224:	f7ff ff62 	bl	80060ec <http_state_free>
  }

  if (abort_conn) {
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f003 f86c 	bl	800930c <tcp_abort>
    return ERR_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e00f      	b.n	8006258 <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f002 ff9d 	bl	8009178 <tcp_close>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8006242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800624a:	2204      	movs	r2, #4
 800624c:	4904      	ldr	r1, [pc, #16]	; (8006260 <http_close_or_abort_conn+0x7c>)
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f004 f888 	bl	800a364 <tcp_poll>
  }
  return err;
 8006254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	08007257 	.word	0x08007257

08006264 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800626e:	2200      	movs	r2, #0
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ffb6 	bl	80061e4 <http_close_or_abort_conn>
 8006278:	4603      	mov	r3, r0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff ffe8 	bl	8006264 <http_close_conn>
  }
}
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <extract_uri_parameters+0x18>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <extract_uri_parameters+0x1c>
      return(0);
 80062b4:	2300      	movs	r3, #0
 80062b6:	e04b      	b.n	8006350 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	e03f      	b.n	8006342 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	320c      	adds	r2, #12
 80062c8:	6979      	ldr	r1, [r7, #20]
 80062ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 80062d2:	2126      	movs	r1, #38	; 0x26
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f00f fded 	bl	8015eb4 <strchr>
 80062da:	6178      	str	r0, [r7, #20]
    if(pair) {
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d006      	beq.n	80062f0 <extract_uri_parameters+0x54>
      *pair = '\0';
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
      pair++;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3301      	adds	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e00c      	b.n	800630a <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 80062f0:	2120      	movs	r1, #32
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f00f fdde 	bl	8015eb4 <strchr>
 80062f8:	6178      	str	r0, [r7, #20]
        if(pair) {
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <extract_uri_parameters+0x6a>
            *pair = '\0';
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800630a:	213d      	movs	r1, #61	; 0x3d
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f00f fdd1 	bl	8015eb4 <strchr>
 8006312:	60f8      	str	r0, [r7, #12]
    if(equals) {
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <extract_uri_parameters+0x94>
      *equals = '\0';
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	3270      	adds	r2, #112	; 0x70
 800632a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800632e:	e005      	b.n	800633c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	3270      	adds	r2, #112	; 0x70
 8006336:	2100      	movs	r1, #0
 8006338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3301      	adds	r3, #1
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b63      	cmp	r3, #99	; 0x63
 8006346:	dc02      	bgt.n	800634e <extract_uri_parameters+0xb2>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1b9      	bne.n	80062c2 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800634e:	693b      	ldr	r3, [r7, #16]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <get_tag_insert+0x1c>
 8006366:	4b52      	ldr	r3, [pc, #328]	; (80064b0 <get_tag_insert+0x158>)
 8006368:	f240 22fb 	movw	r2, #763	; 0x2fb
 800636c:	4951      	ldr	r1, [pc, #324]	; (80064b4 <get_tag_insert+0x15c>)
 800636e:	4852      	ldr	r0, [pc, #328]	; (80064b8 <get_tag_insert+0x160>)
 8006370:	f00f fd34 	bl	8015ddc <iprintf>
  ssi = hs->ssi;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <get_tag_insert+0x36>
 8006380:	4b4b      	ldr	r3, [pc, #300]	; (80064b0 <get_tag_insert+0x158>)
 8006382:	f240 22fd 	movw	r2, #765	; 0x2fd
 8006386:	494d      	ldr	r1, [pc, #308]	; (80064bc <get_tag_insert+0x164>)
 8006388:	484b      	ldr	r0, [pc, #300]	; (80064b8 <get_tag_insert+0x160>)
 800638a:	f00f fd27 	bl	8015ddc <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800638e:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <get_tag_insert+0x168>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02e      	beq.n	80063f4 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 8006396:	4b4b      	ldr	r3, [pc, #300]	; (80064c4 <get_tag_insert+0x16c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02a      	beq.n	80063f4 <get_tag_insert+0x9c>
 800639e:	4b4a      	ldr	r3, [pc, #296]	; (80064c8 <get_tag_insert+0x170>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d026      	beq.n	80063f4 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	e01e      	b.n	80063ea <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f103 0011 	add.w	r0, r3, #17
 80063b2:	4b44      	ldr	r3, [pc, #272]	; (80064c4 <get_tag_insert+0x16c>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	f7f9 ff06 	bl	80001d0 <strcmp>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10c      	bne.n	80063e4 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 80063ca:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <get_tag_insert+0x168>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	f102 013a 	add.w	r1, r2, #58	; 0x3a
 80063d4:	22fa      	movs	r2, #250	; 0xfa
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 80063e2:	e061      	b.n	80064a8 <get_tag_insert+0x150>
    for(tag = 0; tag < g_iNumTags; tag++) {
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3301      	adds	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <get_tag_insert+0x170>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	dbdb      	blt.n	80063ac <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3311      	adds	r3, #17
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7f9 fef3 	bl	80001e4 <strlen>
 80063fe:	4603      	mov	r3, r0
 8006400:	2be0      	cmp	r3, #224	; 0xe0
 8006402:	d818      	bhi.n	8006436 <get_tag_insert+0xde>
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3311      	adds	r3, #17
 8006408:	4618      	mov	r0, r3
 800640a:	f7f9 feeb 	bl	80001e4 <strlen>
 800640e:	4603      	mov	r3, r0
 8006410:	2b29      	cmp	r3, #41	; 0x29
 8006412:	d810      	bhi.n	8006436 <get_tag_insert+0xde>
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3311      	adds	r3, #17
 8006418:	4618      	mov	r0, r3
 800641a:	f7f9 fee3 	bl	80001e4 <strlen>
 800641e:	4603      	mov	r3, r0
 8006420:	2be0      	cmp	r3, #224	; 0xe0
 8006422:	d806      	bhi.n	8006432 <get_tag_insert+0xda>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	3311      	adds	r3, #17
 8006428:	4618      	mov	r0, r3
 800642a:	f7f9 fedb 	bl	80001e4 <strlen>
 800642e:	4603      	mov	r3, r0
 8006430:	e002      	b.n	8006438 <get_tag_insert+0xe0>
 8006432:	23e1      	movs	r3, #225	; 0xe1
 8006434:	e000      	b.n	8006438 <get_tag_insert+0xe0>
 8006436:	2329      	movs	r3, #41	; 0x29
 8006438:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	333a      	adds	r3, #58	; 0x3a
 800643e:	2212      	movs	r2, #18
 8006440:	4922      	ldr	r1, [pc, #136]	; (80064cc <get_tag_insert+0x174>)
 8006442:	4618      	mov	r0, r3
 8006444:	f00f f85b 	bl	80154fe <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3311      	adds	r3, #17
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4619      	mov	r1, r3
 8006456:	f00f f852 	bl	80154fe <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3312      	adds	r3, #18
 800645e:	3338      	adds	r3, #56	; 0x38
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4413      	add	r3, r2
 8006464:	3302      	adds	r3, #2
 8006466:	2207      	movs	r2, #7
 8006468:	4919      	ldr	r1, [pc, #100]	; (80064d0 <get_tag_insert+0x178>)
 800646a:	4618      	mov	r0, r3
 800646c:	f00f f847 	bl	80154fe <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3319      	adds	r3, #25
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  len = strlen(ssi->tag_insert);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	333a      	adds	r3, #58	; 0x3a
 8006482:	4618      	mov	r0, r3
 8006484:	f7f9 feae 	bl	80001e4 <strlen>
 8006488:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d306      	bcc.n	80064a0 <get_tag_insert+0x148>
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <get_tag_insert+0x158>)
 8006494:	f240 3236 	movw	r2, #822	; 0x336
 8006498:	490e      	ldr	r1, [pc, #56]	; (80064d4 <get_tag_insert+0x17c>)
 800649a:	4807      	ldr	r0, [pc, #28]	; (80064b8 <get_tag_insert+0x160>)
 800649c:	f00f fc9e 	bl	8015ddc <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	81da      	strh	r2, [r3, #14]
}
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	0801817c 	.word	0x0801817c
 80064b4:	080181ec 	.word	0x080181ec
 80064b8:	080181c4 	.word	0x080181c4
 80064bc:	080181f8 	.word	0x080181f8
 80064c0:	20000924 	.word	0x20000924
 80064c4:	20000934 	.word	0x20000934
 80064c8:	2000092c 	.word	0x2000092c
 80064cc:	08018204 	.word	0x08018204
 80064d0:	08018218 	.word	0x08018218
 80064d4:	08018220 	.word	0x08018220

080064d8 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fec8 	bl	8006282 <http_eof>
    return 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e016      	b.n	8006524 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fd76 	bl	8005fec <fs_bytes_left>
 8006500:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dc05      	bgt.n	8006514 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff feb9 	bl	8006282 <http_eof>
    return 0;
 8006510:	2300      	movs	r3, #0
 8006512:	e007      	b.n	8006524 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <http_check_eof+0x54>)
 8006516:	f240 4283 	movw	r2, #1155	; 0x483
 800651a:	4905      	ldr	r1, [pc, #20]	; (8006530 <http_check_eof+0x58>)
 800651c:	4805      	ldr	r0, [pc, #20]	; (8006534 <http_check_eof+0x5c>)
 800651e:	f00f fc5d 	bl	8015ddc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8006522:	2301      	movs	r3, #1
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	0801817c 	.word	0x0801817c
 8006530:	08018230 	.word	0x08018230
 8006534:	080181c4 	.word	0x080181c4

08006538 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800654e:	4293      	cmp	r3, r2
 8006550:	d803      	bhi.n	800655a <http_send_data_nonssi+0x22>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	b29b      	uxth	r3, r3
 8006558:	e001      	b.n	800655e <http_send_data_nonssi+0x26>
 800655a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800655e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6999      	ldr	r1, [r3, #24]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f107 020c 	add.w	r2, r7, #12
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fdca 	bl	8006110 <http_write>
 800657c:	4603      	mov	r3, r0
 800657e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8006580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10d      	bne.n	80065a4 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	89ba      	ldrh	r2, [r7, #12]
 8006592:	441a      	add	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	89ba      	ldrh	r2, [r7, #12]
 800659e:	1a9a      	subs	r2, r3, r2
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <http_send_data_ssi+0x2c>
 80065ce:	4b98      	ldr	r3, [pc, #608]	; (8006830 <http_send_data_ssi+0x280>)
 80065d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80065d4:	4997      	ldr	r1, [pc, #604]	; (8006834 <http_send_data_ssi+0x284>)
 80065d6:	4898      	ldr	r0, [pc, #608]	; (8006838 <http_send_data_ssi+0x288>)
 80065d8:	f00f fc00 	bl	8015ddc <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065e2:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	f240 824f 	bls.w	8006a90 <http_send_data_ssi+0x4e0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006602:	4293      	cmp	r3, r2
 8006604:	dc07      	bgt.n	8006616 <http_send_data_ssi+0x66>
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	b29b      	uxth	r3, r3
 8006614:	e001      	b.n	800661a <http_send_data_ssi+0x6a>
 8006616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800661a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	6999      	ldr	r1, [r3, #24]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f107 020e 	add.w	r2, r7, #14
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fd6c 	bl	8006110 <http_write>
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800663c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10d      	bne.n	8006660 <http_send_data_ssi+0xb0>
      data_to_send = 1;
 8006644:	2301      	movs	r3, #1
 8006646:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	89fa      	ldrh	r2, [r7, #14]
 800664e:	441a      	add	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	89fa      	ldrh	r2, [r7, #14]
 800665a:	1a9a      	subs	r2, r3, r2
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 8212 	bne.w	8006a90 <http_send_data_ssi+0x4e0>
      return data_to_send;
 800666c:	7dbb      	ldrb	r3, [r7, #22]
 800666e:	e25b      	b.n	8006b28 <http_send_data_ssi+0x578>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8006670:	89fb      	ldrh	r3, [r7, #14]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <http_send_data_ssi+0xca>
      return data_to_send;
 8006676:	7dbb      	ldrb	r3, [r7, #22]
 8006678:	e256      	b.n	8006b28 <http_send_data_ssi+0x578>
    }
    switch(ssi->tag_state) {
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8006680:	2b04      	cmp	r3, #4
 8006682:	f200 8204 	bhi.w	8006a8e <http_send_data_ssi+0x4de>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <http_send_data_ssi+0xdc>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066a1 	.word	0x080066a1
 8006690:	080066d3 	.word	0x080066d3
 8006694:	0800672b 	.word	0x0800672b
 8006698:	08006867 	.word	0x08006867
 800669c:	080069a5 	.word	0x080069a5
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	4b65      	ldr	r3, [pc, #404]	; (800683c <http_send_data_ssi+0x28c>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d106      	bne.n	80066bc <http_send_data_ssi+0x10c>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          ssi->tag_index = 1;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2201      	movs	r2, #1
 80066ba:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	601a      	str	r2, [r3, #0]
        break;
 80066d0:	e1de      	b.n	8006a90 <http_send_data_ssi+0x4e0>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	899b      	ldrh	r3, [r3, #12]
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	d107      	bne.n	80066ea <http_send_data_ssi+0x13a>
          ssi->tag_index = 0;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2200      	movs	r2, #0
 80066de:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
 80066e8:	e1d2      	b.n	8006a90 <http_send_data_ssi+0x4e0>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	4952      	ldr	r1, [pc, #328]	; (800683c <http_send_data_ssi+0x28c>)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	899b      	ldrh	r3, [r3, #12]
 80066f6:	440b      	add	r3, r1
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d106      	bne.n	800670c <http_send_data_ssi+0x15c>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	899b      	ldrh	r3, [r3, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	819a      	strh	r2, [r3, #12]
 800670a:	e003      	b.n	8006714 <http_send_data_ssi+0x164>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	601a      	str	r2, [r3, #0]
        }
        break;
 8006728:	e1b2      	b.n	8006a90 <http_send_data_ssi+0x4e0>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	899b      	ldrh	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11e      	bne.n	8006770 <http_send_data_ssi+0x1c0>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b20      	cmp	r3, #32
 800673a:	d00e      	beq.n	800675a <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006742:	2b09      	cmp	r3, #9
 8006744:	d009      	beq.n	800675a <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b0a      	cmp	r3, #10
 800674e:	d004      	beq.n	800675a <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\r'))) {
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006756:	2b0d      	cmp	r3, #13
 8006758:	d10a      	bne.n	8006770 <http_send_data_ssi+0x1c0>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	1e5a      	subs	r2, r3, #1
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	601a      	str	r2, [r3, #0]
          break;
 800676e:	e18f      	b.n	8006a90 <http_send_data_ssi+0x4e0>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	4b32      	ldr	r3, [pc, #200]	; (8006840 <http_send_data_ssi+0x290>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d013      	beq.n	80067a6 <http_send_data_ssi+0x1f6>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8006784:	2b20      	cmp	r3, #32
 8006786:	d00e      	beq.n	80067a6 <http_send_data_ssi+0x1f6>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b09      	cmp	r3, #9
 8006790:	d009      	beq.n	80067a6 <http_send_data_ssi+0x1f6>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8006798:	2b0a      	cmp	r3, #10
 800679a:	d004      	beq.n	80067a6 <http_send_data_ssi+0x1f6>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b0d      	cmp	r3, #13
 80067a4:	d132      	bne.n	800680c <http_send_data_ssi+0x25c>

          if(ssi->tag_index == 0) {
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	899b      	ldrh	r3, [r3, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <http_send_data_ssi+0x208>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          if(ssi->tag_index == 0) {
 80067b6:	e04b      	b.n	8006850 <http_send_data_ssi+0x2a0>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2203      	movs	r2, #3
 80067bc:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	899b      	ldrh	r3, [r3, #12]
 80067c4:	2bff      	cmp	r3, #255	; 0xff
 80067c6:	d906      	bls.n	80067d6 <http_send_data_ssi+0x226>
 80067c8:	4b19      	ldr	r3, [pc, #100]	; (8006830 <http_send_data_ssi+0x280>)
 80067ca:	f240 521b 	movw	r2, #1307	; 0x51b
 80067ce:	491d      	ldr	r1, [pc, #116]	; (8006844 <http_send_data_ssi+0x294>)
 80067d0:	4819      	ldr	r0, [pc, #100]	; (8006838 <http_send_data_ssi+0x288>)
 80067d2:	f00f fb03 	bl	8015ddc <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	899b      	ldrh	r3, [r3, #12]
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	899b      	ldrh	r3, [r3, #12]
 80067e4:	461a      	mov	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	4b12      	ldr	r3, [pc, #72]	; (8006840 <http_send_data_ssi+0x290>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d103      	bne.n	8006804 <http_send_data_ssi+0x254>
              ssi->tag_index = 1;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2201      	movs	r2, #1
 8006800:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8006802:	e025      	b.n	8006850 <http_send_data_ssi+0x2a0>
            } else {
              ssi->tag_index = 0;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2200      	movs	r2, #0
 8006808:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800680a:	e021      	b.n	8006850 <http_send_data_ssi+0x2a0>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	899b      	ldrh	r3, [r3, #12]
 8006810:	2b27      	cmp	r3, #39	; 0x27
 8006812:	d819      	bhi.n	8006848 <http_send_data_ssi+0x298>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	899b      	ldrh	r3, [r3, #12]
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	b288      	uxth	r0, r1
 8006820:	6939      	ldr	r1, [r7, #16]
 8006822:	8188      	strh	r0, [r1, #12]
 8006824:	4619      	mov	r1, r3
 8006826:	7812      	ldrb	r2, [r2, #0]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	440b      	add	r3, r1
 800682c:	745a      	strb	r2, [r3, #17]
 800682e:	e00f      	b.n	8006850 <http_send_data_ssi+0x2a0>
 8006830:	0801817c 	.word	0x0801817c
 8006834:	080181f8 	.word	0x080181f8
 8006838:	080181c4 	.word	0x080181c4
 800683c:	08018170 	.word	0x08018170
 8006840:	08018178 	.word	0x08018178
 8006844:	08018268 	.word	0x08018268
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	1e5a      	subs	r2, r3, #1
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	601a      	str	r2, [r3, #0]

        break;
 8006864:	e114      	b.n	8006a90 <http_send_data_ssi+0x4e0>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	899b      	ldrh	r3, [r3, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11e      	bne.n	80068ac <http_send_data_ssi+0x2fc>
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b20      	cmp	r3, #32
 8006876:	d00e      	beq.n	8006896 <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800687e:	2b09      	cmp	r3, #9
 8006880:	d009      	beq.n	8006896 <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b0a      	cmp	r3, #10
 800688a:	d004      	beq.n	8006896 <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\r'))) {
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006892:	2b0d      	cmp	r3, #13
 8006894:	d10a      	bne.n	80068ac <http_send_data_ssi+0x2fc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	1e5a      	subs	r2, r3, #1
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	601a      	str	r2, [r3, #0]
          break;
 80068aa:	e0f1      	b.n	8006a90 <http_send_data_ssi+0x4e0>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	499f      	ldr	r1, [pc, #636]	; (8006b30 <http_send_data_ssi+0x580>)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	899b      	ldrh	r3, [r3, #12]
 80068b8:	440b      	add	r3, r1
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d162      	bne.n	8006986 <http_send_data_ssi+0x3d6>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	1e5a      	subs	r2, r3, #1
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	899b      	ldrh	r3, [r3, #12]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d14d      	bne.n	8006978 <http_send_data_ssi+0x3c8>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80068dc:	6838      	ldr	r0, [r7, #0]
 80068de:	f7ff fd3b 	bl	8006358 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2200      	movs	r2, #0
 80068e6:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2204      	movs	r2, #4
 80068ec:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
            ssi->tag_end = ssi->parsed;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	f240 80c5 	bls.w	8006a90 <http_send_data_ssi+0x4e0>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	461a      	mov	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006916:	4293      	cmp	r3, r2
 8006918:	dc07      	bgt.n	800692a <http_send_data_ssi+0x37a>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	461a      	mov	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	e001      	b.n	800692e <http_send_data_ssi+0x37e>
 800692a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800692e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6999      	ldr	r1, [r3, #24]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f107 020e 	add.w	r2, r7, #14
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fbe2 	bl	8006110 <http_write>
 800694c:	4603      	mov	r3, r0
 800694e:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8006950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 809b 	bne.w	8006a90 <http_send_data_ssi+0x4e0>
                data_to_send = 1;
 800695a:	2301      	movs	r3, #1
 800695c:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	89fa      	ldrh	r2, [r7, #14]
 8006964:	441a      	add	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	89fa      	ldrh	r2, [r7, #14]
 8006970:	1a9a      	subs	r2, r3, r2
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	625a      	str	r2, [r3, #36]	; 0x24
 8006976:	e08b      	b.n	8006a90 <http_send_data_ssi+0x4e0>
              }
            }
          } else {
            ssi->tag_index++;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	899b      	ldrh	r3, [r3, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	819a      	strh	r2, [r3, #12]
 8006984:	e084      	b.n	8006a90 <http_send_data_ssi+0x4e0>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
        }
        break;
 80069a2:	e075      	b.n	8006a90 <http_send_data_ssi+0x4e0>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d93d      	bls.n	8006a2c <http_send_data_ssi+0x47c>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	461a      	mov	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069c0:	4293      	cmp	r3, r2
 80069c2:	dc07      	bgt.n	80069d4 <http_send_data_ssi+0x424>
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	461a      	mov	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	e001      	b.n	80069d8 <http_send_data_ssi+0x428>
 80069d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069d8:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80069da:	89fb      	ldrh	r3, [r7, #14]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <http_send_data_ssi+0x452>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	6999      	ldr	r1, [r3, #24]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bf14      	ite	ne
 80069ec:	2301      	movne	r3, #1
 80069ee:	2300      	moveq	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f107 020e 	add.w	r2, r7, #14
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff fb8a 	bl	8006110 <http_write>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
 8006a00:	e001      	b.n	8006a06 <http_send_data_ssi+0x456>
          } else {
            err = ERR_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8006a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d140      	bne.n	8006a90 <http_send_data_ssi+0x4e0>
            data_to_send = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	89fa      	ldrh	r2, [r7, #14]
 8006a18:	441a      	add	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	89fa      	ldrh	r2, [r7, #14]
 8006a24:	1a9a      	subs	r2, r3, r2
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
 8006a2a:	e031      	b.n	8006a90 <http_send_data_ssi+0x4e0>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	899a      	ldrh	r2, [r3, #12]
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	89db      	ldrh	r3, [r3, #14]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d222      	bcs.n	8006a7e <http_send_data_ssi+0x4ce>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	89da      	ldrh	r2, [r3, #14]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	899b      	ldrh	r3, [r3, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	899b      	ldrh	r3, [r3, #12]
 8006a4a:	3338      	adds	r3, #56	; 0x38
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4413      	add	r3, r2
 8006a50:	1c99      	adds	r1, r3, #2
 8006a52:	f107 020e 	add.w	r2, r7, #14
 8006a56:	2301      	movs	r3, #1
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fb59 	bl	8006110 <http_write>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8006a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d112      	bne.n	8006a90 <http_send_data_ssi+0x4e0>
              data_to_send = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	899a      	ldrh	r2, [r3, #12]
 8006a72:	89fb      	ldrh	r3, [r7, #14]
 8006a74:	4413      	add	r3, r2
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	819a      	strh	r2, [r3, #12]
 8006a7c:	e008      	b.n	8006a90 <http_send_data_ssi+0x4e0>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2200      	movs	r2, #0
 8006a82:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8006a8c:	e000      	b.n	8006a90 <http_send_data_ssi+0x4e0>
        default:
          break;
 8006a8e:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <http_send_data_ssi+0x4f2>
 8006a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f43f ade7 	beq.w	8006670 <http_send_data_ssi+0xc0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d03c      	beq.n	8006b26 <http_send_data_ssi+0x576>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d936      	bls.n	8006b26 <http_send_data_ssi+0x576>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	dc07      	bgt.n	8006adc <http_send_data_ssi+0x52c>
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	e001      	b.n	8006ae0 <http_send_data_ssi+0x530>
 8006adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ae0:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6999      	ldr	r1, [r3, #24]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bf14      	ite	ne
 8006aee:	2301      	movne	r3, #1
 8006af0:	2300      	moveq	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f107 020e 	add.w	r2, r7, #14
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fb09 	bl	8006110 <http_write>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8006b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10d      	bne.n	8006b26 <http_send_data_ssi+0x576>
      data_to_send = 1;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	89fa      	ldrh	r2, [r7, #14]
 8006b14:	441a      	add	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	89fa      	ldrh	r2, [r7, #14]
 8006b20:	1a9a      	subs	r2, r3, r2
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8006b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	08018178 	.word	0x08018178

08006b34 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <http_send+0x18>
    return 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e030      	b.n	8006bae <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d108      	bne.n	8006b66 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff fcbe 	bl	80064d8 <http_check_eof>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <http_send+0x32>
      return 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e023      	b.n	8006bae <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fd1d 	bl	80065b0 <http_send_data_ssi>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	e005      	b.n	8006b88 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fcda 	bl	8006538 <http_send_data_nonssi>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10d      	bne.n	8006bac <http_send+0x78>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff fa29 	bl	8005fec <fs_bytes_left>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dc05      	bgt.n	8006bac <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fb6d 	bl	8006282 <http_eof>
    return 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <http_get_404_file+0x80>)
 8006bc6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f7ff f9c3 	bl	8005f5c <fs_open>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8006bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d024      	beq.n	8006c2c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <http_get_404_file+0x84>)
 8006be6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7ff f9b3 	bl	8005f5c <fs_open>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8006bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d014      	beq.n	8006c2c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	4a0e      	ldr	r2, [pc, #56]	; (8006c40 <http_get_404_file+0x88>)
 8006c06:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4610      	mov	r0, r2
 8006c12:	f7ff f9a3 	bl	8005f5c <fs_open>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8006c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
        return NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e000      	b.n	8006c2e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8006c2c:	687b      	ldr	r3, [r7, #4]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	08018280 	.word	0x08018280
 8006c3c:	0801828c 	.word	0x0801828c
 8006c40:	08018298 	.word	0x08018298

08006c44 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08e      	sub	sp, #56	; 0x38
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <http_parse_request+0x24>
 8006c5a:	4b65      	ldr	r3, [pc, #404]	; (8006df0 <http_parse_request+0x1ac>)
 8006c5c:	f240 727e 	movw	r2, #1918	; 0x77e
 8006c60:	4964      	ldr	r1, [pc, #400]	; (8006df4 <http_parse_request+0x1b0>)
 8006c62:	4865      	ldr	r0, [pc, #404]	; (8006df8 <http_parse_request+0x1b4>)
 8006c64:	f00f f8ba 	bl	8015ddc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <http_parse_request+0x38>
 8006c6e:	4b60      	ldr	r3, [pc, #384]	; (8006df0 <http_parse_request+0x1ac>)
 8006c70:	f240 727f 	movw	r2, #1919	; 0x77f
 8006c74:	4961      	ldr	r1, [pc, #388]	; (8006dfc <http_parse_request+0x1b8>)
 8006c76:	4860      	ldr	r0, [pc, #384]	; (8006df8 <http_parse_request+0x1b4>)
 8006c78:	f00f f8b0 	bl	8015ddc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <http_parse_request+0x48>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006c8c:	f06f 0307 	mvn.w	r3, #7
 8006c90:	e0aa      	b.n	8006de8 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	621a      	str	r2, [r3, #32]
 8006ca0:	e005      	b.n	8006cae <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fefb 	bl	8008aa4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cb0:	f001 fed6 	bl	8008a60 <pbuf_ref>

  if (hs->req->next != NULL) {
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d012      	beq.n	8006ce4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	891b      	ldrh	r3, [r3, #8]
 8006cc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	bf28      	it	cs
 8006ccc:	4613      	movcs	r3, r2
 8006cce:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6a18      	ldr	r0, [r3, #32]
 8006cd4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4949      	ldr	r1, [pc, #292]	; (8006e00 <http_parse_request+0x1bc>)
 8006cda:	f002 f815 	bl	8008d08 <pbuf_copy_partial>
    data = httpd_req_buf;
 8006cde:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <http_parse_request+0x1bc>)
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce2:	e005      	b.n	8006cf0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	895b      	ldrh	r3, [r3, #10]
 8006cee:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006cf0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d963      	bls.n	8006dbe <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006cf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4942      	ldr	r1, [pc, #264]	; (8006e04 <http_parse_request+0x1c0>)
 8006cfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006cfe:	f000 fc94 	bl	800762a <lwip_strnstr>
 8006d02:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d059      	beq.n	8006dbe <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006d0e:	2204      	movs	r2, #4
 8006d10:	493d      	ldr	r1, [pc, #244]	; (8006e08 <http_parse_request+0x1c4>)
 8006d12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d14:	f00f f8e3 	bl	8015ede <strncmp>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d117      	bne.n	8006d4e <http_parse_request+0x10a>
        sp1 = data + 3;
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d20:	3303      	adds	r3, #3
 8006d22:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	3301      	adds	r3, #1
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	8b7a      	ldrh	r2, [r7, #26]
 8006d3c:	4933      	ldr	r1, [pc, #204]	; (8006e0c <http_parse_request+0x1c8>)
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fc73 	bl	800762a <lwip_strnstr>
 8006d44:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d111      	bne.n	8006d70 <http_parse_request+0x12c>
 8006d4c:	e006      	b.n	8006d5c <http_parse_request+0x118>
        data[4] = 0;
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	3304      	adds	r3, #4
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8006d56:	f06f 030f 	mvn.w	r3, #15
 8006d5a:	e045      	b.n	8006de8 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	8b7a      	ldrh	r2, [r7, #26]
 8006d62:	4928      	ldr	r1, [pc, #160]	; (8006e04 <http_parse_request+0x1c0>)
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fc60 	bl	800762a <lwip_strnstr>
 8006d6a:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	3201      	adds	r2, #1
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01e      	beq.n	8006dbe <http_parse_request+0x17a>
 8006d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d91a      	bls.n	8006dbe <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8006d88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4920      	ldr	r1, [pc, #128]	; (8006e10 <http_parse_request+0x1cc>)
 8006d8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d90:	f000 fc4b 	bl	800762a <lwip_strnstr>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d011      	beq.n	8006dbe <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006da6:	8b3b      	ldrh	r3, [r7, #24]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	68b8      	ldr	r0, [r7, #8]
 8006db6:	f000 f82d 	bl	8006e14 <http_find_file>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	e014      	b.n	8006de8 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fe34 	bl	8008a30 <pbuf_clen>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	891b      	ldrh	r3, [r3, #8]
 8006dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd6:	d205      	bcs.n	8006de4 <http_parse_request+0x1a0>
 8006dd8:	8a7b      	ldrh	r3, [r7, #18]
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d802      	bhi.n	8006de4 <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006dde:	f06f 0304 	mvn.w	r3, #4
 8006de2:	e001      	b.n	8006de8 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006de4:	f06f 030f 	mvn.w	r3, #15
  }
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3738      	adds	r7, #56	; 0x38
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	0801817c 	.word	0x0801817c
 8006df4:	080182a4 	.word	0x080182a4
 8006df8:	080181c4 	.word	0x080181c4
 8006dfc:	080181ec 	.word	0x080181ec
 8006e00:	20000220 	.word	0x20000220
 8006e04:	080182b0 	.word	0x080182b0
 8006e08:	080182b4 	.word	0x080182b4
 8006e0c:	080182bc 	.word	0x080182bc
 8006e10:	080182c0 	.word	0x080182c0

08006e14 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b097      	sub	sp, #92	; 0x5c
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	64bb      	str	r3, [r7, #72]	; 0x48
  char *params = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7f9 f9d7 	bl	80001e4 <strlen>
 8006e36:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06c      	beq.n	8006f18 <http_find_file+0x104>
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	3b01      	subs	r3, #1
 8006e44:	4413      	add	r3, r2
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b2f      	cmp	r3, #47	; 0x2f
 8006e4a:	d165      	bne.n	8006f18 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006e4c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8006e4e:	4a98      	ldr	r2, [pc, #608]	; (80070b0 <http_find_file+0x29c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d102      	bne.n	8006e5a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d15e      	bne.n	8006f18 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	2bc8      	cmp	r3, #200	; 0xc8
 8006e60:	bf28      	it	cs
 8006e62:	23c8      	movcs	r3, #200	; 0xc8
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
    if (copy_len > 0) {
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e70:	4619      	mov	r1, r3
 8006e72:	488f      	ldr	r0, [pc, #572]	; (80070b0 <http_find_file+0x29c>)
 8006e74:	f00e fb43 	bl	80154fe <memcpy>
      http_uri_buf[copy_len] = 0;
 8006e78:	4a8d      	ldr	r2, [pc, #564]	; (80070b0 <http_find_file+0x29c>)
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	4413      	add	r3, r2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006e82:	2300      	movs	r3, #0
 8006e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e86:	e044      	b.n	8006f12 <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d022      	beq.n	8006ed4 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
        if (len_left > 0) {
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d018      	beq.n	8006ece <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8006e9c:	4a85      	ldr	r2, [pc, #532]	; (80070b4 <http_find_file+0x2a0>)
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7f9 f99d 	bl	80001e4 <strlen>
 8006eaa:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	bf28      	it	cs
 8006eb4:	4613      	movcs	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	4a7d      	ldr	r2, [pc, #500]	; (80070b0 <http_find_file+0x29c>)
 8006ebc:	1898      	adds	r0, r3, r2
 8006ebe:	4a7d      	ldr	r2, [pc, #500]	; (80070b4 <http_find_file+0x2a0>)
 8006ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f00e fb18 	bl	80154fe <memcpy>
        }
        file_name = http_uri_buf;
 8006ece:	4b78      	ldr	r3, [pc, #480]	; (80070b0 <http_find_file+0x29c>)
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ed2:	e004      	b.n	8006ede <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 8006ed4:	4a77      	ldr	r2, [pc, #476]	; (80070b4 <http_find_file+0x2a0>)
 8006ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff f83a 	bl	8005f5c <fs_open>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 8006eec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <http_find_file+0xf8>
        uri = file_name;
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	64bb      	str	r3, [r7, #72]	; 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 8006efc:	4a6d      	ldr	r2, [pc, #436]	; (80070b4 <http_find_file+0x2a0>)
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	4413      	add	r3, r2
 8006f04:	791b      	ldrb	r3, [r3, #4]
 8006f06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 8006f0a:	e005      	b.n	8006f18 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	3301      	adds	r3, #1
 8006f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d9b7      	bls.n	8006e88 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8006f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 80ac 	bne.w	8007078 <http_find_file+0x264>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	213f      	movs	r1, #63	; 0x3f
 8006f24:	4618      	mov	r0, r3
 8006f26:	f00e ffc5 	bl	8015eb4 <strchr>
 8006f2a:	6478      	str	r0, [r7, #68]	; 0x44
    if (params != NULL) {
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8006f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
      params++;
 8006f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	647b      	str	r3, [r7, #68]	; 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8006f3e:	4b5e      	ldr	r3, [pc, #376]	; (80070b8 <http_find_file+0x2a4>)
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295
 8006f44:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 8006f46:	4b5d      	ldr	r3, [pc, #372]	; (80070bc <http_find_file+0x2a8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d035      	beq.n	8006fba <http_find_file+0x1a6>
 8006f4e:	4b5c      	ldr	r3, [pc, #368]	; (80070c0 <http_find_file+0x2ac>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d031      	beq.n	8006fba <http_find_file+0x1a6>
      for (i = 0; i < g_iNumCGIs; i++) {
 8006f56:	2300      	movs	r3, #0
 8006f58:	643b      	str	r3, [r7, #64]	; 0x40
 8006f5a:	e029      	b.n	8006fb0 <http_find_file+0x19c>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 8006f5c:	68b8      	ldr	r0, [r7, #8]
 8006f5e:	4b58      	ldr	r3, [pc, #352]	; (80070c0 <http_find_file+0x2ac>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	4413      	add	r3, r2
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f7f9 f930 	bl	80001d0 <strcmp>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d119      	bne.n	8006faa <http_find_file+0x196>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 8006f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff f98f 	bl	800629c <extract_uri_parameters>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b4d      	ldr	r3, [pc, #308]	; (80070b8 <http_find_file+0x2a4>)
 8006f82:	601a      	str	r2, [r3, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006f84:	4b4e      	ldr	r3, [pc, #312]	; (80070c0 <http_find_file+0x2ac>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	685c      	ldr	r4, [r3, #4]
 8006f90:	4b49      	ldr	r3, [pc, #292]	; (80070b8 <http_find_file+0x2a4>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                          hs->param_vals);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006fa0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006fa2:	47a0      	blx	r4
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	60bb      	str	r3, [r7, #8]
           break;
 8006fa8:	e007      	b.n	8006fba <http_find_file+0x1a6>
      for (i = 0; i < g_iNumCGIs; i++) {
 8006faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fac:	3301      	adds	r3, #1
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb0:	4b42      	ldr	r3, [pc, #264]	; (80070bc <http_find_file+0x2a8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	dbd0      	blt.n	8006f5c <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe ffcb 	bl	8005f5c <fs_open>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 8006fca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <http_find_file+0x1c4>
       file = &hs->file_handle;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd6:	e006      	b.n	8006fe6 <http_find_file+0x1d2>
    } else {
      file = http_get_404_file(hs, &uri);
 8006fd8:	f107 0308 	add.w	r3, r7, #8
 8006fdc:	4619      	mov	r1, r3
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff fdea 	bl	8006bb8 <http_get_404_file>
 8006fe4:	64b8      	str	r0, [r7, #72]	; 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d045      	beq.n	8007078 <http_find_file+0x264>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 8006fec:	2300      	movs	r3, #0
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
      char* param = (char*)strstr(uri, "?");
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	213f      	movs	r1, #63	; 0x3f
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f00e ff5d 	bl	8015eb4 <strchr>
 8006ffa:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <http_find_file+0x1f4>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
      ext = uri;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8007010:	212e      	movs	r1, #46	; 0x2e
 8007012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007014:	f00e ff4e 	bl	8015eb4 <strchr>
 8007018:	6338      	str	r0, [r7, #48]	; 0x30
 800701a:	e009      	b.n	8007030 <http_find_file+0x21c>
      {
         ext = sub;
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
         sub++;
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	3301      	adds	r3, #1
 8007024:	633b      	str	r3, [r7, #48]	; 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8007026:	212e      	movs	r1, #46	; 0x2e
 8007028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702a:	f00e ff43 	bl	8015eb4 <strchr>
 800702e:	6338      	str	r0, [r7, #48]	; 0x30
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f2      	bne.n	800701c <http_find_file+0x208>
      }
      tag_check = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800703c:	2300      	movs	r3, #0
 800703e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007040:	e011      	b.n	8007066 <http_find_file+0x252>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8007042:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <http_find_file+0x2b0>)
 8007044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800704a:	4619      	mov	r1, r3
 800704c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800704e:	f000 fb22 	bl	8007696 <lwip_stricmp>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d103      	bne.n	8007060 <http_find_file+0x24c>
          tag_check = 1;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 800705e:	e005      	b.n	800706c <http_find_file+0x258>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8007060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007062:	3301      	adds	r3, #1
 8007064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007068:	2b03      	cmp	r3, #3
 800706a:	d9ea      	bls.n	8007042 <http_find_file+0x22e>
        }
      }
      if (param != NULL) {
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <http_find_file+0x264>
         *param = '?';
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	223f      	movs	r2, #63	; 0x3f
 8007076:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8007078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <http_find_file+0x278>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4619      	mov	r1, r3
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff fd97 	bl	8006bb8 <http_get_404_file>
 800708a:	64b8      	str	r0, [r7, #72]	; 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f812 	bl	80070c8 <http_init_file>
 80070a4:	4603      	mov	r3, r0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3754      	adds	r7, #84	; 0x54
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd90      	pop	{r4, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000620 	.word	0x20000620
 80070b4:	0801b728 	.word	0x0801b728
 80070b8:	20000928 	.word	0x20000928
 80070bc:	20000920 	.word	0x20000920
 80070c0:	20000930 	.word	0x20000930
 80070c4:	0801b718 	.word	0x0801b718

080070c8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d073      	beq.n	80071c4 <http_init_file+0xfc>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 80070dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01c      	beq.n	800711e <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80070e4:	f7fe ff91 	bl	800600a <http_ssi_state_alloc>
 80070e8:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d016      	beq.n	800711e <http_init_file+0x56>
        ssi->tag_index = 0;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2200      	movs	r2, #0
 80070f4:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
        ssi->parsed = file->data;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	461a      	mov	r2, r3
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	da06      	bge.n	8007142 <http_init_file+0x7a>
 8007134:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <http_init_file+0x120>)
 8007136:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800713a:	492c      	ldr	r1, [pc, #176]	; (80071ec <http_init_file+0x124>)
 800713c:	482c      	ldr	r0, [pc, #176]	; (80071f0 <http_init_file+0x128>)
 800713e:	f00e fe4d 	bl	8015ddc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	461a      	mov	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	7c1b      	ldrb	r3, [r3, #16]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <http_init_file+0xa8>
 8007162:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <http_init_file+0x120>)
 8007164:	f640 02df 	movw	r2, #2271	; 0x8df
 8007168:	4922      	ldr	r1, [pc, #136]	; (80071f4 <http_init_file+0x12c>)
 800716a:	4821      	ldr	r0, [pc, #132]	; (80071f0 <http_init_file+0x128>)
 800716c:	f00e fe36 	bl	8015ddc <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d033      	beq.n	80071de <http_init_file+0x116>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	7c1b      	ldrb	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02c      	beq.n	80071de <http_init_file+0x116>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6998      	ldr	r0, [r3, #24]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	461a      	mov	r2, r3
 800718e:	491a      	ldr	r1, [pc, #104]	; (80071f8 <http_init_file+0x130>)
 8007190:	f000 fa4b 	bl	800762a <lwip_strnstr>
 8007194:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <http_init_file+0x116>
        size_t diff = file_start + 4 - hs->file;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	3304      	adds	r3, #4
 80071a0:	461a      	mov	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	1ad2      	subs	r2, r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24
 80071c2:	e00c      	b.n	80071de <http_init_file+0x116>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	0801817c 	.word	0x0801817c
 80071ec:	080182c8 	.word	0x080182c8
 80071f0:	080181c4 	.word	0x080181c4
 80071f4:	080182e8 	.word	0x080182e8
 80071f8:	080182c0 	.word	0x080182c0

080071fc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <http_err+0x1c>
    http_state_free(hs);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7fe ff6a 	bl	80060ec <http_state_free>
  }
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <http_sent+0x1c>
    return ERR_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e008      	b.n	800724e <http_sent+0x2e>
  }

  hs->retries = 0;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8007244:	6979      	ldr	r1, [r7, #20]
 8007246:	68b8      	ldr	r0, [r7, #8]
 8007248:	f7ff fc74 	bl	8006b34 <http_send>

  return ERR_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d107      	bne.n	800727a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800726a:	2100      	movs	r1, #0
 800726c:	6838      	ldr	r0, [r7, #0]
 800726e:	f7fe fff9 	bl	8006264 <http_close_conn>
 8007272:	4603      	mov	r3, r0
 8007274:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e024      	b.n	80072c4 <http_poll+0x6e>
  } else {
    hs->retries++;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007280:	3301      	adds	r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007290:	2b04      	cmp	r3, #4
 8007292:	d105      	bne.n	80072a0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	f7fe ffe4 	bl	8006264 <http_close_conn>
      return ERR_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	e011      	b.n	80072c4 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00d      	beq.n	80072c2 <http_poll+0x6c>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	6838      	ldr	r0, [r7, #0]
 80072b2:	f7ff fc3f 	bl	8006b34 <http_send>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 80072bc:	6838      	ldr	r0, [r7, #0]
 80072be:	f006 fab7 	bl	800d830 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80072de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <http_recv+0x26>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <http_recv+0x26>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d111      	bne.n	8007316 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	891b      	ldrh	r3, [r3, #8]
 80072fc:	4619      	mov	r1, r3
 80072fe:	68b8      	ldr	r0, [r7, #8]
 8007300:	f002 f9aa 	bl	8009658 <tcp_recved>
      pbuf_free(p);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 faff 	bl	8008908 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800730a:	6979      	ldr	r1, [r7, #20]
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f7fe ffa9 	bl	8006264 <http_close_conn>
    return ERR_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e055      	b.n	80073c2 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	891b      	ldrh	r3, [r3, #8]
 800731a:	4619      	mov	r1, r3
 800731c:	68b8      	ldr	r0, [r7, #8]
 800731e:	f002 f99b 	bl	8009658 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d147      	bne.n	80073ba <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	6979      	ldr	r1, [r7, #20]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fc88 	bl	8006c44 <http_parse_request>
 8007334:	4603      	mov	r3, r0
 8007336:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8007338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <http_recv+0xa0>
 8007340:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007344:	f113 0f05 	cmn.w	r3, #5
 8007348:	d010      	beq.n	800736c <http_recv+0xa0>
 800734a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800734e:	f113 0f10 	cmn.w	r3, #16
 8007352:	d00b      	beq.n	800736c <http_recv+0xa0>
 8007354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007358:	f113 0f08 	cmn.w	r3, #8
 800735c:	d006      	beq.n	800736c <http_recv+0xa0>
 800735e:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <http_recv+0x100>)
 8007360:	f640 12b5 	movw	r2, #2485	; 0x9b5
 8007364:	491a      	ldr	r1, [pc, #104]	; (80073d0 <http_recv+0x104>)
 8007366:	481b      	ldr	r0, [pc, #108]	; (80073d4 <http_recv+0x108>)
 8007368:	f00e fd38 	bl	8015ddc <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800736c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007370:	f113 0f05 	cmn.w	r3, #5
 8007374:	d00b      	beq.n	800738e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <http_recv+0xc2>
          pbuf_free(hs->req);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	4618      	mov	r0, r3
 8007384:	f001 fac0 	bl	8008908 <pbuf_free>
          hs->req = NULL;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2200      	movs	r2, #0
 800738c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 faba 	bl	8008908 <pbuf_free>
      if (parsed == ERR_OK) {
 8007394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	68b8      	ldr	r0, [r7, #8]
 80073a0:	f7ff fbc8 	bl	8006b34 <http_send>
 80073a4:	e00c      	b.n	80073c0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80073a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073aa:	f113 0f10 	cmn.w	r3, #16
 80073ae:	d107      	bne.n	80073c0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80073b0:	6979      	ldr	r1, [r7, #20]
 80073b2:	68b8      	ldr	r0, [r7, #8]
 80073b4:	f7fe ff56 	bl	8006264 <http_close_conn>
 80073b8:	e002      	b.n	80073c0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 faa4 	bl	8008908 <pbuf_free>
    }
  }
  return ERR_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	0801817c 	.word	0x0801817c
 80073d0:	08018314 	.word	0x08018314
 80073d4:	080181c4 	.word	0x080181c4

080073d8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80073e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <http_accept+0x1c>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <http_accept+0x22>
    return ERR_VAL;
 80073f4:	f06f 0305 	mvn.w	r3, #5
 80073f8:	e025      	b.n	8007446 <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80073fa:	2101      	movs	r1, #1
 80073fc:	68b8      	ldr	r0, [r7, #8]
 80073fe:	f002 fd82 	bl	8009f06 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8007402:	f7fe fe34 	bl	800606e <http_state_alloc>
 8007406:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800740e:	f04f 33ff 	mov.w	r3, #4294967295
 8007412:	e018      	b.n	8007446 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f002 ff13 	bl	800a248 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8007422:	490b      	ldr	r1, [pc, #44]	; (8007450 <http_accept+0x78>)
 8007424:	68b8      	ldr	r0, [r7, #8]
 8007426:	f002 ff21 	bl	800a26c <tcp_recv>
  tcp_err(pcb, http_err);
 800742a:	490a      	ldr	r1, [pc, #40]	; (8007454 <http_accept+0x7c>)
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f002 ff5f 	bl	800a2f0 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8007432:	2204      	movs	r2, #4
 8007434:	4908      	ldr	r1, [pc, #32]	; (8007458 <http_accept+0x80>)
 8007436:	68b8      	ldr	r0, [r7, #8]
 8007438:	f002 ff94 	bl	800a364 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800743c:	4907      	ldr	r1, [pc, #28]	; (800745c <http_accept+0x84>)
 800743e:	68b8      	ldr	r0, [r7, #8]
 8007440:	f002 ff36 	bl	800a2b0 <tcp_sent>

  return ERR_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	080072cd 	.word	0x080072cd
 8007454:	080071fd 	.word	0x080071fd
 8007458:	08007257 	.word	0x08007257
 800745c:	08007221 	.word	0x08007221

08007460 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8007466:	202e      	movs	r0, #46	; 0x2e
 8007468:	f002 fee0 	bl	800a22c <tcp_new_ip_type>
 800746c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <httpd_init+0x22>
 8007474:	4b19      	ldr	r3, [pc, #100]	; (80074dc <httpd_init+0x7c>)
 8007476:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800747a:	4919      	ldr	r1, [pc, #100]	; (80074e0 <httpd_init+0x80>)
 800747c:	4819      	ldr	r0, [pc, #100]	; (80074e4 <httpd_init+0x84>)
 800747e:	f00e fcad 	bl	8015ddc <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f002 fd3e 	bl	8009f06 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800748a:	2250      	movs	r2, #80	; 0x50
 800748c:	4916      	ldr	r1, [pc, #88]	; (80074e8 <httpd_init+0x88>)
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 ff48 	bl	8009324 <tcp_bind>
 8007494:	4603      	mov	r3, r0
 8007496:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8007498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <httpd_init+0x4e>
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <httpd_init+0x7c>)
 80074a2:	f640 2215 	movw	r2, #2581	; 0xa15
 80074a6:	4911      	ldr	r1, [pc, #68]	; (80074ec <httpd_init+0x8c>)
 80074a8:	480e      	ldr	r0, [pc, #56]	; (80074e4 <httpd_init+0x84>)
 80074aa:	f00e fc97 	bl	8015ddc <iprintf>
  pcb = tcp_listen(pcb);
 80074ae:	21ff      	movs	r1, #255	; 0xff
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 ffd9 	bl	8009468 <tcp_listen_with_backlog>
 80074b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <httpd_init+0x6c>
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <httpd_init+0x7c>)
 80074c0:	f640 2217 	movw	r2, #2583	; 0xa17
 80074c4:	490a      	ldr	r1, [pc, #40]	; (80074f0 <httpd_init+0x90>)
 80074c6:	4807      	ldr	r0, [pc, #28]	; (80074e4 <httpd_init+0x84>)
 80074c8:	f00e fc88 	bl	8015ddc <iprintf>
  tcp_accept(pcb, http_accept);
 80074cc:	4909      	ldr	r1, [pc, #36]	; (80074f4 <httpd_init+0x94>)
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f002 ff30 	bl	800a334 <tcp_accept>
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	0801817c 	.word	0x0801817c
 80074e0:	08018340 	.word	0x08018340
 80074e4:	080181c4 	.word	0x080181c4
 80074e8:	0801b830 	.word	0x0801b830
 80074ec:	0801835c 	.word	0x0801835c
 80074f0:	08018378 	.word	0x08018378
 80074f4:	080073d9 	.word	0x080073d9

080074f8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <http_set_ssi_handler+0x20>
 800750a:	4b14      	ldr	r3, [pc, #80]	; (800755c <http_set_ssi_handler+0x64>)
 800750c:	f640 2228 	movw	r2, #2600	; 0xa28
 8007510:	4913      	ldr	r1, [pc, #76]	; (8007560 <http_set_ssi_handler+0x68>)
 8007512:	4814      	ldr	r0, [pc, #80]	; (8007564 <http_set_ssi_handler+0x6c>)
 8007514:	f00e fc62 	bl	8015ddc <iprintf>
  g_pfnSSIHandler = ssi_handler;
 8007518:	4a13      	ldr	r2, [pc, #76]	; (8007568 <http_set_ssi_handler+0x70>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <http_set_ssi_handler+0x3a>
 8007524:	4b0d      	ldr	r3, [pc, #52]	; (800755c <http_set_ssi_handler+0x64>)
 8007526:	f640 222f 	movw	r2, #2607	; 0xa2f
 800752a:	4910      	ldr	r1, [pc, #64]	; (800756c <http_set_ssi_handler+0x74>)
 800752c:	480d      	ldr	r0, [pc, #52]	; (8007564 <http_set_ssi_handler+0x6c>)
 800752e:	f00e fc55 	bl	8015ddc <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dc06      	bgt.n	8007546 <http_set_ssi_handler+0x4e>
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <http_set_ssi_handler+0x64>)
 800753a:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 800753e:	490c      	ldr	r1, [pc, #48]	; (8007570 <http_set_ssi_handler+0x78>)
 8007540:	4808      	ldr	r0, [pc, #32]	; (8007564 <http_set_ssi_handler+0x6c>)
 8007542:	f00e fc4b 	bl	8015ddc <iprintf>

  g_ppcTags = tags;
 8007546:	4a0b      	ldr	r2, [pc, #44]	; (8007574 <http_set_ssi_handler+0x7c>)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800754c:	4a0a      	ldr	r2, [pc, #40]	; (8007578 <http_set_ssi_handler+0x80>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	0801817c 	.word	0x0801817c
 8007560:	08018398 	.word	0x08018398
 8007564:	080181c4 	.word	0x080181c4
 8007568:	20000924 	.word	0x20000924
 800756c:	080183b0 	.word	0x080183b0
 8007570:	080183c0 	.word	0x080183c0
 8007574:	20000934 	.word	0x20000934
 8007578:	2000092c 	.word	0x2000092c

0800757c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d106      	bne.n	800759a <http_set_cgi_handlers+0x1e>
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <http_set_cgi_handlers+0x48>)
 800758e:	f640 2242 	movw	r2, #2626	; 0xa42
 8007592:	490d      	ldr	r1, [pc, #52]	; (80075c8 <http_set_cgi_handlers+0x4c>)
 8007594:	480d      	ldr	r0, [pc, #52]	; (80075cc <http_set_cgi_handlers+0x50>)
 8007596:	f00e fc21 	bl	8015ddc <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dc06      	bgt.n	80075ae <http_set_cgi_handlers+0x32>
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <http_set_cgi_handlers+0x48>)
 80075a2:	f640 2243 	movw	r2, #2627	; 0xa43
 80075a6:	490a      	ldr	r1, [pc, #40]	; (80075d0 <http_set_cgi_handlers+0x54>)
 80075a8:	4808      	ldr	r0, [pc, #32]	; (80075cc <http_set_cgi_handlers+0x50>)
 80075aa:	f00e fc17 	bl	8015ddc <iprintf>

  g_pCGIs = cgis;
 80075ae:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <http_set_cgi_handlers+0x58>)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 80075b4:	4a08      	ldr	r2, [pc, #32]	; (80075d8 <http_set_cgi_handlers+0x5c>)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6013      	str	r3, [r2, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	0801817c 	.word	0x0801817c
 80075c8:	080183d8 	.word	0x080183d8
 80075cc:	080181c4 	.word	0x080181c4
 80075d0:	080183e8 	.word	0x080183e8
 80075d4:	20000930 	.word	0x20000930
 80075d8:	20000920 	.word	0x20000920

080075dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	ba5b      	rev16	r3, r3
 80075ea:	b29b      	uxth	r3, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	061a      	lsls	r2, r3, #24
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	0a1b      	lsrs	r3, r3, #8
 8007612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	0e1b      	lsrs	r3, r3, #24
 800761c:	4313      	orrs	r3, r2
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 8007636:	68b8      	ldr	r0, [r7, #8]
 8007638:	f7f8 fdd4 	bl	80001e4 <strlen>
 800763c:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	e022      	b.n	800768e <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	e012      	b.n	8007674 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d109      	bne.n	800766e <lwip_strnstr+0x44>
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	6978      	ldr	r0, [r7, #20]
 8007660:	f00e fc3d 	bl	8015ede <strncmp>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	e00f      	b.n	800768e <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	3301      	adds	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <lwip_strnstr+0x62>
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	441a      	add	r2, r3
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	440b      	add	r3, r1
 8007688:	429a      	cmp	r2, r3
 800768a:	d9e0      	bls.n	800764e <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	603a      	str	r2, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80076b4:	7bfa      	ldrb	r2, [r7, #15]
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d016      	beq.n	80076ea <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	f043 0320 	orr.w	r3, r3, #32
 80076c2:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80076c4:	7b7b      	ldrb	r3, [r7, #13]
 80076c6:	2b60      	cmp	r3, #96	; 0x60
 80076c8:	d90c      	bls.n	80076e4 <lwip_stricmp+0x4e>
 80076ca:	7b7b      	ldrb	r3, [r7, #13]
 80076cc:	2b7a      	cmp	r3, #122	; 0x7a
 80076ce:	d809      	bhi.n	80076e4 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	f043 0320 	orr.w	r3, r3, #32
 80076d6:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80076d8:	7b7a      	ldrb	r2, [r7, #13]
 80076da:	7b3b      	ldrb	r3, [r7, #12]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d003      	beq.n	80076e8 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e006      	b.n	80076f2 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e004      	b.n	80076f2 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80076e8:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1d7      	bne.n	80076a0 <lwip_stricmp+0xa>
  return 0;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007708:	f000 f8a6 	bl	8007858 <mem_init>
  memp_init();
 800770c:	f000 fb3a 	bl	8007d84 <memp_init>
  pbuf_init();
  netif_init();
 8007710:	f000 fbf2 	bl	8007ef8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007714:	f006 feb8 	bl	800e488 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007718:	f001 fb70 	bl	8008dfc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800771c:	f006 fd96 	bl	800e24c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007730:	4b40      	ldr	r3, [pc, #256]	; (8007834 <plug_holes+0x10c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d206      	bcs.n	8007748 <plug_holes+0x20>
 800773a:	4b3f      	ldr	r3, [pc, #252]	; (8007838 <plug_holes+0x110>)
 800773c:	f240 125d 	movw	r2, #349	; 0x15d
 8007740:	493e      	ldr	r1, [pc, #248]	; (800783c <plug_holes+0x114>)
 8007742:	483f      	ldr	r0, [pc, #252]	; (8007840 <plug_holes+0x118>)
 8007744:	f00e fb4a 	bl	8015ddc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007748:	4b3e      	ldr	r3, [pc, #248]	; (8007844 <plug_holes+0x11c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	429a      	cmp	r2, r3
 8007750:	d306      	bcc.n	8007760 <plug_holes+0x38>
 8007752:	4b39      	ldr	r3, [pc, #228]	; (8007838 <plug_holes+0x110>)
 8007754:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007758:	493b      	ldr	r1, [pc, #236]	; (8007848 <plug_holes+0x120>)
 800775a:	4839      	ldr	r0, [pc, #228]	; (8007840 <plug_holes+0x118>)
 800775c:	f00e fb3e 	bl	8015ddc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	791b      	ldrb	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <plug_holes+0x4e>
 8007768:	4b33      	ldr	r3, [pc, #204]	; (8007838 <plug_holes+0x110>)
 800776a:	f240 125f 	movw	r2, #351	; 0x15f
 800776e:	4937      	ldr	r1, [pc, #220]	; (800784c <plug_holes+0x124>)
 8007770:	4833      	ldr	r0, [pc, #204]	; (8007840 <plug_holes+0x118>)
 8007772:	f00e fb33 	bl	8015ddc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800777e:	d906      	bls.n	800778e <plug_holes+0x66>
 8007780:	4b2d      	ldr	r3, [pc, #180]	; (8007838 <plug_holes+0x110>)
 8007782:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007786:	4932      	ldr	r1, [pc, #200]	; (8007850 <plug_holes+0x128>)
 8007788:	482d      	ldr	r0, [pc, #180]	; (8007840 <plug_holes+0x118>)
 800778a:	f00e fb27 	bl	8015ddc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800778e:	4b29      	ldr	r3, [pc, #164]	; (8007834 <plug_holes+0x10c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	8812      	ldrh	r2, [r2, #0]
 8007796:	4413      	add	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d01f      	beq.n	80077e2 <plug_holes+0xba>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	791b      	ldrb	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d11b      	bne.n	80077e2 <plug_holes+0xba>
 80077aa:	4b26      	ldr	r3, [pc, #152]	; (8007844 <plug_holes+0x11c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d016      	beq.n	80077e2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80077b4:	4b27      	ldr	r3, [pc, #156]	; (8007854 <plug_holes+0x12c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d102      	bne.n	80077c4 <plug_holes+0x9c>
      lfree = mem;
 80077be:	4a25      	ldr	r2, [pc, #148]	; (8007854 <plug_holes+0x12c>)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	881a      	ldrh	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a19      	ldr	r2, [pc, #100]	; (8007834 <plug_holes+0x10c>)
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	1a99      	subs	r1, r3, r2
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <plug_holes+0x10c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	8812      	ldrh	r2, [r2, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	b28a      	uxth	r2, r1
 80077e0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <plug_holes+0x10c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	8852      	ldrh	r2, [r2, #2]
 80077ea:	4413      	add	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d01a      	beq.n	800782c <plug_holes+0x104>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d116      	bne.n	800782c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80077fe:	4b15      	ldr	r3, [pc, #84]	; (8007854 <plug_holes+0x12c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d102      	bne.n	800780e <plug_holes+0xe6>
      lfree = pmem;
 8007808:	4a12      	ldr	r2, [pc, #72]	; (8007854 <plug_holes+0x12c>)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4a06      	ldr	r2, [pc, #24]	; (8007834 <plug_holes+0x10c>)
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	1a99      	subs	r1, r3, r2
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <plug_holes+0x10c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	8812      	ldrh	r2, [r2, #0]
 8007826:	4413      	add	r3, r2
 8007828:	b28a      	uxth	r2, r1
 800782a:	805a      	strh	r2, [r3, #2]
  }
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	200006ec 	.word	0x200006ec
 8007838:	08018404 	.word	0x08018404
 800783c:	08018434 	.word	0x08018434
 8007840:	0801844c 	.word	0x0801844c
 8007844:	200006f0 	.word	0x200006f0
 8007848:	08018474 	.word	0x08018474
 800784c:	08018490 	.word	0x08018490
 8007850:	080184ac 	.word	0x080184ac
 8007854:	200006f4 	.word	0x200006f4

08007858 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800785e:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <mem_init+0x6c>)
 8007860:	3303      	adds	r3, #3
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	461a      	mov	r2, r3
 8007868:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <mem_init+0x70>)
 800786a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800786c:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <mem_init+0x70>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007878:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <mem_init+0x70>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800788e:	4a0f      	ldr	r2, [pc, #60]	; (80078cc <mem_init+0x74>)
 8007890:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007892:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <mem_init+0x74>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2201      	movs	r2, #1
 8007898:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <mem_init+0x74>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80078a2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80078a4:	4b09      	ldr	r3, [pc, #36]	; (80078cc <mem_init+0x74>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80078ac:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <mem_init+0x70>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a07      	ldr	r2, [pc, #28]	; (80078d0 <mem_init+0x78>)
 80078b4:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000950 	.word	0x20000950
 80078c8:	200006ec 	.word	0x200006ec
 80078cc:	200006f0 	.word	0x200006f0
 80078d0:	200006f4 	.word	0x200006f4

080078d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d043      	beq.n	800796a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <mem_free+0x26>
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <mem_free+0xa4>)
 80078ee:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80078f2:	4922      	ldr	r1, [pc, #136]	; (800797c <mem_free+0xa8>)
 80078f4:	4822      	ldr	r0, [pc, #136]	; (8007980 <mem_free+0xac>)
 80078f6:	f00e fa71 	bl	8015ddc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80078fa:	4b22      	ldr	r3, [pc, #136]	; (8007984 <mem_free+0xb0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d304      	bcc.n	800790e <mem_free+0x3a>
 8007904:	4b20      	ldr	r3, [pc, #128]	; (8007988 <mem_free+0xb4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	429a      	cmp	r2, r3
 800790c:	d306      	bcc.n	800791c <mem_free+0x48>
 800790e:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <mem_free+0xa4>)
 8007910:	f240 12af 	movw	r2, #431	; 0x1af
 8007914:	491d      	ldr	r1, [pc, #116]	; (800798c <mem_free+0xb8>)
 8007916:	481a      	ldr	r0, [pc, #104]	; (8007980 <mem_free+0xac>)
 8007918:	f00e fa60 	bl	8015ddc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <mem_free+0xb0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d323      	bcc.n	800796e <mem_free+0x9a>
 8007926:	4b18      	ldr	r3, [pc, #96]	; (8007988 <mem_free+0xb4>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d21e      	bcs.n	800796e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3b08      	subs	r3, #8
 8007934:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	791b      	ldrb	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <mem_free+0x78>
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <mem_free+0xa4>)
 8007940:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007944:	4912      	ldr	r1, [pc, #72]	; (8007990 <mem_free+0xbc>)
 8007946:	480e      	ldr	r0, [pc, #56]	; (8007980 <mem_free+0xac>)
 8007948:	f00e fa48 	bl	8015ddc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <mem_free+0xc0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	429a      	cmp	r2, r3
 800795a:	d202      	bcs.n	8007962 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800795c:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <mem_free+0xc0>)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7ff fee0 	bl	8007728 <plug_holes>
 8007968:	e002      	b.n	8007970 <mem_free+0x9c>
    return;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <mem_free+0x9c>
    return;
 800796e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	08018404 	.word	0x08018404
 800797c:	080184d8 	.word	0x080184d8
 8007980:	0801844c 	.word	0x0801844c
 8007984:	200006ec 	.word	0x200006ec
 8007988:	200006f0 	.word	0x200006f0
 800798c:	080184fc 	.word	0x080184fc
 8007990:	08018514 	.word	0x08018514
 8007994:	200006f4 	.word	0x200006f4

08007998 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80079a4:	887b      	ldrh	r3, [r7, #2]
 80079a6:	3303      	adds	r3, #3
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f023 0303 	bic.w	r3, r3, #3
 80079ae:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80079b0:	887b      	ldrh	r3, [r7, #2]
 80079b2:	2b0b      	cmp	r3, #11
 80079b4:	d801      	bhi.n	80079ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80079b6:	230c      	movs	r3, #12
 80079b8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079c0:	d901      	bls.n	80079c6 <mem_trim+0x2e>
    return NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e0b1      	b.n	8007b2a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80079c6:	4b5b      	ldr	r3, [pc, #364]	; (8007b34 <mem_trim+0x19c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d304      	bcc.n	80079da <mem_trim+0x42>
 80079d0:	4b59      	ldr	r3, [pc, #356]	; (8007b38 <mem_trim+0x1a0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d306      	bcc.n	80079e8 <mem_trim+0x50>
 80079da:	4b58      	ldr	r3, [pc, #352]	; (8007b3c <mem_trim+0x1a4>)
 80079dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80079e0:	4957      	ldr	r1, [pc, #348]	; (8007b40 <mem_trim+0x1a8>)
 80079e2:	4858      	ldr	r0, [pc, #352]	; (8007b44 <mem_trim+0x1ac>)
 80079e4:	f00e f9fa 	bl	8015ddc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80079e8:	4b52      	ldr	r3, [pc, #328]	; (8007b34 <mem_trim+0x19c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d304      	bcc.n	80079fc <mem_trim+0x64>
 80079f2:	4b51      	ldr	r3, [pc, #324]	; (8007b38 <mem_trim+0x1a0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d301      	bcc.n	8007a00 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	e094      	b.n	8007b2a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3b08      	subs	r3, #8
 8007a04:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	4a4a      	ldr	r2, [pc, #296]	; (8007b34 <mem_trim+0x19c>)
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	881a      	ldrh	r2, [r3, #0]
 8007a14:	8a7b      	ldrh	r3, [r7, #18]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b08      	subs	r3, #8
 8007a1c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	8a3b      	ldrh	r3, [r7, #16]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d906      	bls.n	8007a34 <mem_trim+0x9c>
 8007a26:	4b45      	ldr	r3, [pc, #276]	; (8007b3c <mem_trim+0x1a4>)
 8007a28:	f240 2206 	movw	r2, #518	; 0x206
 8007a2c:	4946      	ldr	r1, [pc, #280]	; (8007b48 <mem_trim+0x1b0>)
 8007a2e:	4845      	ldr	r0, [pc, #276]	; (8007b44 <mem_trim+0x1ac>)
 8007a30:	f00e f9d4 	bl	8015ddc <iprintf>
  if (newsize > size) {
 8007a34:	887a      	ldrh	r2, [r7, #2]
 8007a36:	8a3b      	ldrh	r3, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d901      	bls.n	8007a40 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e074      	b.n	8007b2a <mem_trim+0x192>
  }
  if (newsize == size) {
 8007a40:	887a      	ldrh	r2, [r7, #2]
 8007a42:	8a3b      	ldrh	r3, [r7, #16]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d101      	bne.n	8007a4c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	e06e      	b.n	8007b2a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007a4c:	4b39      	ldr	r3, [pc, #228]	; (8007b34 <mem_trim+0x19c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	8812      	ldrh	r2, [r2, #0]
 8007a54:	4413      	add	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	791b      	ldrb	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d131      	bne.n	8007ac4 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007a66:	8a7a      	ldrh	r2, [r7, #18]
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3308      	adds	r3, #8
 8007a70:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8007a72:	4b36      	ldr	r3, [pc, #216]	; (8007b4c <mem_trim+0x1b4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d105      	bne.n	8007a88 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007a7c:	4b2d      	ldr	r3, [pc, #180]	; (8007b34 <mem_trim+0x19c>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	897b      	ldrh	r3, [r7, #10]
 8007a82:	4413      	add	r3, r2
 8007a84:	4a31      	ldr	r2, [pc, #196]	; (8007b4c <mem_trim+0x1b4>)
 8007a86:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007a88:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <mem_trim+0x19c>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	897b      	ldrh	r3, [r7, #10]
 8007a8e:	4413      	add	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	893a      	ldrh	r2, [r7, #8]
 8007a9c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8a7a      	ldrh	r2, [r7, #18]
 8007aa2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	897a      	ldrh	r2, [r7, #10]
 8007aa8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ab2:	d039      	beq.n	8007b28 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007ab4:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <mem_trim+0x19c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	8812      	ldrh	r2, [r2, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	897a      	ldrh	r2, [r7, #10]
 8007ac0:	805a      	strh	r2, [r3, #2]
 8007ac2:	e031      	b.n	8007b28 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	f103 0214 	add.w	r2, r3, #20
 8007aca:	8a3b      	ldrh	r3, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d82b      	bhi.n	8007b28 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007ad0:	8a7a      	ldrh	r2, [r7, #18]
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3308      	adds	r3, #8
 8007ada:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007adc:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <mem_trim+0x19c>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	897b      	ldrh	r3, [r7, #10]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8007ae6:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <mem_trim+0x1b4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d202      	bcs.n	8007af6 <mem_trim+0x15e>
      lfree = mem2;
 8007af0:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <mem_trim+0x1b4>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	881a      	ldrh	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8a7a      	ldrh	r2, [r7, #18]
 8007b08:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	897a      	ldrh	r2, [r7, #10]
 8007b0e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b18:	d006      	beq.n	8007b28 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007b1a:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <mem_trim+0x19c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	8812      	ldrh	r2, [r2, #0]
 8007b22:	4413      	add	r3, r2
 8007b24:	897a      	ldrh	r2, [r7, #10]
 8007b26:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007b28:	687b      	ldr	r3, [r7, #4]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	200006ec 	.word	0x200006ec
 8007b38:	200006f0 	.word	0x200006f0
 8007b3c:	08018404 	.word	0x08018404
 8007b40:	08018528 	.word	0x08018528
 8007b44:	0801844c 	.word	0x0801844c
 8007b48:	08018540 	.word	0x08018540
 8007b4c:	200006f4 	.word	0x200006f4

08007b50 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <mem_malloc+0x14>
    return NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e0c8      	b.n	8007cf6 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	3303      	adds	r3, #3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f023 0303 	bic.w	r3, r3, #3
 8007b6e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	2b0b      	cmp	r3, #11
 8007b74:	d801      	bhi.n	8007b7a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007b76:	230c      	movs	r3, #12
 8007b78:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b80:	d901      	bls.n	8007b86 <mem_malloc+0x36>
    return NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e0b7      	b.n	8007cf6 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007b86:	4b5e      	ldr	r3, [pc, #376]	; (8007d00 <mem_malloc+0x1b0>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4b5d      	ldr	r3, [pc, #372]	; (8007d04 <mem_malloc+0x1b4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	83fb      	strh	r3, [r7, #30]
 8007b94:	e0a7      	b.n	8007ce6 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8007b96:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <mem_malloc+0x1b4>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	8bfb      	ldrh	r3, [r7, #30]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	791b      	ldrb	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f040 8098 	bne.w	8007cda <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	8bfb      	ldrh	r3, [r7, #30]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	f0c0 808d 	bcc.w	8007cda <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	8bfb      	ldrh	r3, [r7, #30]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f1a3 0208 	sub.w	r2, r3, #8
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d327      	bcc.n	8007c26 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007bd6:	8bfa      	ldrh	r2, [r7, #30]
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	4413      	add	r3, r2
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3308      	adds	r3, #8
 8007be0:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007be2:	4b48      	ldr	r3, [pc, #288]	; (8007d04 <mem_malloc+0x1b4>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	8a7b      	ldrh	r3, [r7, #18]
 8007be8:	4413      	add	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	881a      	ldrh	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8bfa      	ldrh	r2, [r7, #30]
 8007bfe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	8a7a      	ldrh	r2, [r7, #18]
 8007c04:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c14:	d00a      	beq.n	8007c2c <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007c16:	4b3b      	ldr	r3, [pc, #236]	; (8007d04 <mem_malloc+0x1b4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	8812      	ldrh	r2, [r2, #0]
 8007c1e:	4413      	add	r3, r2
 8007c20:	8a7a      	ldrh	r2, [r7, #18]
 8007c22:	805a      	strh	r2, [r3, #2]
 8007c24:	e002      	b.n	8007c2c <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007c2c:	4b34      	ldr	r3, [pc, #208]	; (8007d00 <mem_malloc+0x1b0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d127      	bne.n	8007c86 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8007c36:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <mem_malloc+0x1b0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007c3c:	e005      	b.n	8007c4a <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <mem_malloc+0x1b4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	8812      	ldrh	r2, [r2, #0]
 8007c46:	4413      	add	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	791b      	ldrb	r3, [r3, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <mem_malloc+0x10c>
 8007c52:	4b2d      	ldr	r3, [pc, #180]	; (8007d08 <mem_malloc+0x1b8>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d1f0      	bne.n	8007c3e <mem_malloc+0xee>
          }
          lfree = cur;
 8007c5c:	4a28      	ldr	r2, [pc, #160]	; (8007d00 <mem_malloc+0x1b0>)
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007c62:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <mem_malloc+0x1b0>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b28      	ldr	r3, [pc, #160]	; (8007d08 <mem_malloc+0x1b8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d00b      	beq.n	8007c86 <mem_malloc+0x136>
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <mem_malloc+0x1b0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	791b      	ldrb	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <mem_malloc+0x136>
 8007c78:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <mem_malloc+0x1bc>)
 8007c7a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007c7e:	4924      	ldr	r1, [pc, #144]	; (8007d10 <mem_malloc+0x1c0>)
 8007c80:	4824      	ldr	r0, [pc, #144]	; (8007d14 <mem_malloc+0x1c4>)
 8007c82:	f00e f8ab 	bl	8015ddc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007c86:	88fa      	ldrh	r2, [r7, #6]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	4a1e      	ldr	r2, [pc, #120]	; (8007d08 <mem_malloc+0x1b8>)
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d906      	bls.n	8007ca4 <mem_malloc+0x154>
 8007c96:	4b1d      	ldr	r3, [pc, #116]	; (8007d0c <mem_malloc+0x1bc>)
 8007c98:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007c9c:	491e      	ldr	r1, [pc, #120]	; (8007d18 <mem_malloc+0x1c8>)
 8007c9e:	481d      	ldr	r0, [pc, #116]	; (8007d14 <mem_malloc+0x1c4>)
 8007ca0:	f00e f89c 	bl	8015ddc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d006      	beq.n	8007cbc <mem_malloc+0x16c>
 8007cae:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <mem_malloc+0x1bc>)
 8007cb0:	f240 22d6 	movw	r2, #726	; 0x2d6
 8007cb4:	4919      	ldr	r1, [pc, #100]	; (8007d1c <mem_malloc+0x1cc>)
 8007cb6:	4817      	ldr	r0, [pc, #92]	; (8007d14 <mem_malloc+0x1c4>)
 8007cb8:	f00e f890 	bl	8015ddc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d006      	beq.n	8007cd4 <mem_malloc+0x184>
 8007cc6:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <mem_malloc+0x1bc>)
 8007cc8:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8007ccc:	4914      	ldr	r1, [pc, #80]	; (8007d20 <mem_malloc+0x1d0>)
 8007cce:	4811      	ldr	r0, [pc, #68]	; (8007d14 <mem_malloc+0x1c4>)
 8007cd0:	f00e f884 	bl	8015ddc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	e00d      	b.n	8007cf6 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007cda:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <mem_malloc+0x1b4>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	8bfb      	ldrh	r3, [r7, #30]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007ce6:	8bfa      	ldrh	r2, [r7, #30]
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	f4ff af51 	bcc.w	8007b96 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200006f4 	.word	0x200006f4
 8007d04:	200006ec 	.word	0x200006ec
 8007d08:	200006f0 	.word	0x200006f0
 8007d0c:	08018404 	.word	0x08018404
 8007d10:	08018560 	.word	0x08018560
 8007d14:	0801844c 	.word	0x0801844c
 8007d18:	0801857c 	.word	0x0801857c
 8007d1c:	080185ac 	.word	0x080185ac
 8007d20:	080185dc 	.word	0x080185dc

08007d24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	3303      	adds	r3, #3
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e011      	b.n	8007d6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4293      	cmp	r3, r2
 8007d74:	dbe7      	blt.n	8007d46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007d76:	bf00      	nop
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	80fb      	strh	r3, [r7, #6]
 8007d8e:	e009      	b.n	8007da4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <memp_init+0x30>)
 8007d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff ffc3 	bl	8007d24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	3301      	adds	r3, #1
 8007da2:	80fb      	strh	r3, [r7, #6]
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d9f2      	bls.n	8007d90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	0801b7bc 	.word	0x0801b7bc

08007db8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d012      	beq.n	8007df4 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d006      	beq.n	8007df0 <do_memp_malloc_pool+0x38>
 8007de2:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <do_memp_malloc_pool+0x48>)
 8007de4:	f240 1249 	movw	r2, #329	; 0x149
 8007de8:	4906      	ldr	r1, [pc, #24]	; (8007e04 <do_memp_malloc_pool+0x4c>)
 8007dea:	4807      	ldr	r0, [pc, #28]	; (8007e08 <do_memp_malloc_pool+0x50>)
 8007dec:	f00d fff6 	bl	8015ddc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	e000      	b.n	8007df6 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	08018600 	.word	0x08018600
 8007e04:	08018630 	.word	0x08018630
 8007e08:	08018654 	.word	0x08018654

08007e0c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d908      	bls.n	8007e2e <memp_malloc+0x22>
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <memp_malloc+0x3c>)
 8007e1e:	f240 1287 	movw	r2, #391	; 0x187
 8007e22:	490a      	ldr	r1, [pc, #40]	; (8007e4c <memp_malloc+0x40>)
 8007e24:	480a      	ldr	r0, [pc, #40]	; (8007e50 <memp_malloc+0x44>)
 8007e26:	f00d ffd9 	bl	8015ddc <iprintf>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e008      	b.n	8007e40 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <memp_malloc+0x48>)
 8007e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ffbe 	bl	8007db8 <do_memp_malloc_pool>
 8007e3c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	08018600 	.word	0x08018600
 8007e4c:	08018690 	.word	0x08018690
 8007e50:	08018654 	.word	0x08018654
 8007e54:	0801b7bc 	.word	0x0801b7bc

08007e58 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	f003 0303 	and.w	r3, r3, #3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <do_memp_free_pool+0x22>
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <do_memp_free_pool+0x40>)
 8007e6e:	f240 129d 	movw	r2, #413	; 0x19d
 8007e72:	490a      	ldr	r1, [pc, #40]	; (8007e9c <do_memp_free_pool+0x44>)
 8007e74:	480a      	ldr	r0, [pc, #40]	; (8007ea0 <do_memp_free_pool+0x48>)
 8007e76:	f00d ffb1 	bl	8015ddc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	08018600 	.word	0x08018600
 8007e9c:	080186b0 	.word	0x080186b0
 8007ea0:	08018654 	.word	0x08018654

08007ea4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d907      	bls.n	8007ec6 <memp_free+0x22>
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <memp_free+0x44>)
 8007eb8:	f240 12db 	movw	r2, #475	; 0x1db
 8007ebc:	490b      	ldr	r1, [pc, #44]	; (8007eec <memp_free+0x48>)
 8007ebe:	480c      	ldr	r0, [pc, #48]	; (8007ef0 <memp_free+0x4c>)
 8007ec0:	f00d ff8c 	bl	8015ddc <iprintf>
 8007ec4:	e00c      	b.n	8007ee0 <memp_free+0x3c>

  if (mem == NULL) {
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <memp_free+0x50>)
 8007ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff ffbe 	bl	8007e58 <do_memp_free_pool>
 8007edc:	e000      	b.n	8007ee0 <memp_free+0x3c>
    return;
 8007ede:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08018600 	.word	0x08018600
 8007eec:	080186d0 	.word	0x080186d0
 8007ef0:	08018654 	.word	0x08018654
 8007ef4:	0801b7bc 	.word	0x0801b7bc

08007ef8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007efc:	bf00      	nop
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d105      	bne.n	8007f28 <netif_add+0x20>
 8007f1c:	4b23      	ldr	r3, [pc, #140]	; (8007fac <netif_add+0xa4>)
 8007f1e:	22fb      	movs	r2, #251	; 0xfb
 8007f20:	4923      	ldr	r1, [pc, #140]	; (8007fb0 <netif_add+0xa8>)
 8007f22:	4824      	ldr	r0, [pc, #144]	; (8007fb4 <netif_add+0xac>)
 8007f24:	f00d ff5a 	bl	8015ddc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3320      	adds	r3, #32
 8007f46:	2204      	movs	r2, #4
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f00d fae2 	bl	8015514 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2203      	movs	r2, #3
 8007f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8007f5e:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <netif_add+0xb0>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	b2d1      	uxtb	r1, r2
 8007f66:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <netif_add+0xb0>)
 8007f68:	7011      	strb	r1, [r2, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a3a      	ldr	r2, [r7, #32]
 8007f74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f81f 	bl	8007fc0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	4798      	blx	r3
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <netif_add+0x8a>
    return NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e007      	b.n	8007fa2 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <netif_add+0xb4>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007f9a:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <netif_add+0xb4>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	080186ec 	.word	0x080186ec
 8007fb0:	08018720 	.word	0x08018720
 8007fb4:	08018738 	.word	0x08018738
 8007fb8:	2000071c 	.word	0x2000071c
 8007fbc:	20007210 	.word	0x20007210

08007fc0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <netif_set_addr+0x1c>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10c      	bne.n	8007ff6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f81a 	bl	8008018 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f862 	bl	80080b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f84a 	bl	8008088 <netif_set_gw>
 8007ff4:	e00b      	b.n	800800e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f859 	bl	80080b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f841 	bl	8008088 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f805 	bl	8008018 <netif_set_ipaddr>
  }
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <netif_set_ipaddr+0x18>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	e002      	b.n	8008036 <netif_set_ipaddr+0x1e>
 8008030:	4b14      	ldr	r3, [pc, #80]	; (8008084 <netif_set_ipaddr+0x6c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d01c      	beq.n	800807c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3304      	adds	r3, #4
 8008046:	f107 020c 	add.w	r2, r7, #12
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f002 fac9 	bl	800a5e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	f107 020c 	add.w	r2, r7, #12
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f006 fd6f 	bl	800eb40 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <netif_set_ipaddr+0x56>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	e000      	b.n	8008070 <netif_set_ipaddr+0x58>
 800806e:	2300      	movs	r3, #0
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008074:	2101      	movs	r1, #1
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f861 	bl	800813e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	0801b830 	.word	0x0801b830

08008088 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <netif_set_gw+0x16>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	e000      	b.n	80080a0 <netif_set_gw+0x18>
 800809e:	2300      	movs	r3, #0
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <netif_set_netmask+0x16>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	e000      	b.n	80080c8 <netif_set_netmask+0x18>
 80080c6:	2300      	movs	r3, #0
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80080e0:	4a04      	ldr	r2, [pc, #16]	; (80080f4 <netif_set_default+0x1c>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20007214 	.word	0x20007214

080080f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d113      	bne.n	8008136 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	b2da      	uxtb	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800812e:	2103      	movs	r1, #3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f804 	bl	800813e <netif_issue_reports>
    }
  }
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b082      	sub	sp, #8
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d011      	beq.n	8008178 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f009 fad2 	bl	801171c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d012      	beq.n	80081bc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f008 fe72 	bl	8010ea0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80081ca:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <pbuf_free_ooseq+0x40>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <pbuf_free_ooseq+0x44>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	607b      	str	r3, [r7, #4]
 80081d6:	e00f      	b.n	80081f8 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fe62 	bl	8009eae <tcp_segs_free>
      pcb->ooseq = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80081f0:	e005      	b.n	80081fe <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1ec      	bne.n	80081d8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20007218 	.word	0x20007218
 8008208:	20007220 	.word	0x20007220

0800820c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008210:	4b03      	ldr	r3, [pc, #12]	; (8008220 <pbuf_pool_is_empty+0x14>)
 8008212:	2201      	movs	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008216:	bf00      	nop
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20007218 	.word	0x20007218

08008224 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	71fb      	strb	r3, [r7, #7]
 800822e:	460b      	mov	r3, r1
 8008230:	80bb      	strh	r3, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d81c      	bhi.n	8008276 <pbuf_alloc+0x52>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <pbuf_alloc+0x20>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008259 	.word	0x08008259
 8008248:	0800825f 	.word	0x0800825f
 800824c:	08008265 	.word	0x08008265
 8008250:	0800826b 	.word	0x0800826b
 8008254:	08008271 	.word	0x08008271
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008258:	2336      	movs	r3, #54	; 0x36
 800825a:	82fb      	strh	r3, [r7, #22]
    break;
 800825c:	e014      	b.n	8008288 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800825e:	2322      	movs	r3, #34	; 0x22
 8008260:	82fb      	strh	r3, [r7, #22]
    break;
 8008262:	e011      	b.n	8008288 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008264:	230e      	movs	r3, #14
 8008266:	82fb      	strh	r3, [r7, #22]
    break;
 8008268:	e00e      	b.n	8008288 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800826a:	2300      	movs	r3, #0
 800826c:	82fb      	strh	r3, [r7, #22]
    break;
 800826e:	e00b      	b.n	8008288 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	82fb      	strh	r3, [r7, #22]
    break;
 8008274:	e008      	b.n	8008288 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008276:	4ba5      	ldr	r3, [pc, #660]	; (800850c <pbuf_alloc+0x2e8>)
 8008278:	f44f 728b 	mov.w	r2, #278	; 0x116
 800827c:	49a4      	ldr	r1, [pc, #656]	; (8008510 <pbuf_alloc+0x2ec>)
 800827e:	48a5      	ldr	r0, [pc, #660]	; (8008514 <pbuf_alloc+0x2f0>)
 8008280:	f00d fdac 	bl	8015ddc <iprintf>
    return NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	e15d      	b.n	8008544 <pbuf_alloc+0x320>
  }

  switch (type) {
 8008288:	79bb      	ldrb	r3, [r7, #6]
 800828a:	2b03      	cmp	r3, #3
 800828c:	f200 8134 	bhi.w	80084f8 <pbuf_alloc+0x2d4>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <pbuf_alloc+0x74>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	08008439 	.word	0x08008439
 800829c:	080084c5 	.word	0x080084c5
 80082a0:	080084c5 	.word	0x080084c5
 80082a4:	080082a9 	.word	0x080082a9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80082a8:	2008      	movs	r0, #8
 80082aa:	f7ff fdaf 	bl	8007e0c <memp_malloc>
 80082ae:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80082b6:	f7ff ffa9 	bl	800820c <pbuf_pool_is_empty>
      return NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e142      	b.n	8008544 <pbuf_alloc+0x320>
    }
    p->type = type;
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	79ba      	ldrb	r2, [r7, #6]
 80082c2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80082ca:	8afb      	ldrh	r3, [r7, #22]
 80082cc:	3310      	adds	r3, #16
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	3303      	adds	r3, #3
 80082d4:	f023 0303 	bic.w	r3, r3, #3
 80082d8:	461a      	mov	r2, r3
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d006      	beq.n	80082f8 <pbuf_alloc+0xd4>
 80082ea:	4b88      	ldr	r3, [pc, #544]	; (800850c <pbuf_alloc+0x2e8>)
 80082ec:	f240 1229 	movw	r2, #297	; 0x129
 80082f0:	4989      	ldr	r1, [pc, #548]	; (8008518 <pbuf_alloc+0x2f4>)
 80082f2:	4888      	ldr	r0, [pc, #544]	; (8008514 <pbuf_alloc+0x2f0>)
 80082f4:	f00d fd72 	bl	8015ddc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	88ba      	ldrh	r2, [r7, #4]
 80082fc:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80082fe:	8afb      	ldrh	r3, [r7, #22]
 8008300:	3303      	adds	r3, #3
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	f5c3 6287 	rsb	r2, r3, #1080	; 0x438
 800830a:	88bb      	ldrh	r3, [r7, #4]
 800830c:	4293      	cmp	r3, r2
 800830e:	bf28      	it	cs
 8008310:	4613      	movcs	r3, r2
 8008312:	b29a      	uxth	r2, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	8952      	ldrh	r2, [r2, #10]
 8008320:	441a      	add	r2, r3
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8008328:	429a      	cmp	r2, r3
 800832a:	d906      	bls.n	800833a <pbuf_alloc+0x116>
 800832c:	4b77      	ldr	r3, [pc, #476]	; (800850c <pbuf_alloc+0x2e8>)
 800832e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008332:	497a      	ldr	r1, [pc, #488]	; (800851c <pbuf_alloc+0x2f8>)
 8008334:	4877      	ldr	r0, [pc, #476]	; (8008514 <pbuf_alloc+0x2f0>)
 8008336:	f00d fd51 	bl	8015ddc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800833a:	8afb      	ldrh	r3, [r7, #22]
 800833c:	3303      	adds	r3, #3
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8008346:	d106      	bne.n	8008356 <pbuf_alloc+0x132>
 8008348:	4b70      	ldr	r3, [pc, #448]	; (800850c <pbuf_alloc+0x2e8>)
 800834a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800834e:	4974      	ldr	r1, [pc, #464]	; (8008520 <pbuf_alloc+0x2fc>)
 8008350:	4870      	ldr	r0, [pc, #448]	; (8008514 <pbuf_alloc+0x2f0>)
 8008352:	f00d fd43 	bl	8015ddc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	2201      	movs	r2, #1
 800835a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008360:	88bb      	ldrh	r3, [r7, #4]
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	8952      	ldrh	r2, [r2, #10]
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800836a:	e061      	b.n	8008430 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800836c:	2008      	movs	r0, #8
 800836e:	f7ff fd4d 	bl	8007e0c <memp_malloc>
 8008372:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800837a:	f7ff ff47 	bl	800820c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800837e:	69f8      	ldr	r0, [r7, #28]
 8008380:	f000 fac2 	bl	8008908 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	e0dd      	b.n	8008544 <pbuf_alloc+0x320>
      }
      q->type = type;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	79ba      	ldrb	r2, [r7, #6]
 800838c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083a6:	4293      	cmp	r3, r2
 80083a8:	dd06      	ble.n	80083b8 <pbuf_alloc+0x194>
 80083aa:	4b58      	ldr	r3, [pc, #352]	; (800850c <pbuf_alloc+0x2e8>)
 80083ac:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80083b0:	495c      	ldr	r1, [pc, #368]	; (8008524 <pbuf_alloc+0x300>)
 80083b2:	4858      	ldr	r0, [pc, #352]	; (8008514 <pbuf_alloc+0x2f0>)
 80083b4:	f00d fd12 	bl	8015ddc <iprintf>
      q->tot_len = (u16_t)rem_len;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 80083c8:	bf28      	it	cs
 80083ca:	f44f 6387 	movcs.w	r3, #1080	; 0x438
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f103 0210 	add.w	r2, r3, #16
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d006      	beq.n	80083f8 <pbuf_alloc+0x1d4>
 80083ea:	4b48      	ldr	r3, [pc, #288]	; (800850c <pbuf_alloc+0x2e8>)
 80083ec:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80083f0:	494d      	ldr	r1, [pc, #308]	; (8008528 <pbuf_alloc+0x304>)
 80083f2:	4848      	ldr	r0, [pc, #288]	; (8008514 <pbuf_alloc+0x2f0>)
 80083f4:	f00d fcf2 	bl	8015ddc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	8952      	ldrh	r2, [r2, #10]
 8008400:	441a      	add	r2, r3
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8008408:	429a      	cmp	r2, r3
 800840a:	d906      	bls.n	800841a <pbuf_alloc+0x1f6>
 800840c:	4b3f      	ldr	r3, [pc, #252]	; (800850c <pbuf_alloc+0x2e8>)
 800840e:	f240 1255 	movw	r2, #341	; 0x155
 8008412:	4942      	ldr	r1, [pc, #264]	; (800851c <pbuf_alloc+0x2f8>)
 8008414:	483f      	ldr	r0, [pc, #252]	; (8008514 <pbuf_alloc+0x2f0>)
 8008416:	f00d fce1 	bl	8015ddc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	895b      	ldrh	r3, [r3, #10]
 8008424:	461a      	mov	r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	dc9a      	bgt.n	800836c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008436:	e07e      	b.n	8008536 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008438:	8afb      	ldrh	r3, [r7, #22]
 800843a:	3313      	adds	r3, #19
 800843c:	b29b      	uxth	r3, r3
 800843e:	f023 0303 	bic.w	r3, r3, #3
 8008442:	b29a      	uxth	r2, r3
 8008444:	88bb      	ldrh	r3, [r7, #4]
 8008446:	3303      	adds	r3, #3
 8008448:	b29b      	uxth	r3, r3
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	b29b      	uxth	r3, r3
 8008450:	4413      	add	r3, r2
 8008452:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008454:	897a      	ldrh	r2, [r7, #10]
 8008456:	88bb      	ldrh	r3, [r7, #4]
 8008458:	3303      	adds	r3, #3
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	429a      	cmp	r2, r3
 8008460:	d201      	bcs.n	8008466 <pbuf_alloc+0x242>
        return NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	e06e      	b.n	8008544 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008466:	897b      	ldrh	r3, [r7, #10]
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fb71 	bl	8007b50 <mem_malloc>
 800846e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <pbuf_alloc+0x256>
      return NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	e064      	b.n	8008544 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800847a:	8afb      	ldrh	r3, [r7, #22]
 800847c:	3310      	adds	r3, #16
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	3303      	adds	r3, #3
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	461a      	mov	r2, r3
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	88ba      	ldrh	r2, [r7, #4]
 8008492:	811a      	strh	r2, [r3, #8]
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	891a      	ldrh	r2, [r3, #8]
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	79ba      	ldrb	r2, [r7, #6]
 80084a6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f003 0303 	and.w	r3, r3, #3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d03f      	beq.n	8008534 <pbuf_alloc+0x310>
 80084b4:	4b15      	ldr	r3, [pc, #84]	; (800850c <pbuf_alloc+0x2e8>)
 80084b6:	f240 1277 	movw	r2, #375	; 0x177
 80084ba:	491c      	ldr	r1, [pc, #112]	; (800852c <pbuf_alloc+0x308>)
 80084bc:	4815      	ldr	r0, [pc, #84]	; (8008514 <pbuf_alloc+0x2f0>)
 80084be:	f00d fc8d 	bl	8015ddc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80084c2:	e037      	b.n	8008534 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80084c4:	2007      	movs	r0, #7
 80084c6:	f7ff fca1 	bl	8007e0c <memp_malloc>
 80084ca:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e036      	b.n	8008544 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	2200      	movs	r2, #0
 80084da:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	88ba      	ldrh	r2, [r7, #4]
 80084e0:	811a      	strh	r2, [r3, #8]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	891a      	ldrh	r2, [r3, #8]
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
    p->type = type;
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	79ba      	ldrb	r2, [r7, #6]
 80084f4:	731a      	strb	r2, [r3, #12]
    break;
 80084f6:	e01e      	b.n	8008536 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <pbuf_alloc+0x2e8>)
 80084fa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80084fe:	490c      	ldr	r1, [pc, #48]	; (8008530 <pbuf_alloc+0x30c>)
 8008500:	4804      	ldr	r0, [pc, #16]	; (8008514 <pbuf_alloc+0x2f0>)
 8008502:	f00d fc6b 	bl	8015ddc <iprintf>
    return NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	e01c      	b.n	8008544 <pbuf_alloc+0x320>
 800850a:	bf00      	nop
 800850c:	08018760 	.word	0x08018760
 8008510:	08018790 	.word	0x08018790
 8008514:	080187ac 	.word	0x080187ac
 8008518:	080187d4 	.word	0x080187d4
 800851c:	08018804 	.word	0x08018804
 8008520:	08018838 	.word	0x08018838
 8008524:	0801886c 	.word	0x0801886c
 8008528:	08018880 	.word	0x08018880
 800852c:	080188b0 	.word	0x080188b0
 8008530:	080188dc 	.word	0x080188dc
    break;
 8008534:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2201      	movs	r2, #1
 800853a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2200      	movs	r2, #0
 8008540:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008542:	69fb      	ldr	r3, [r7, #28]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	4603      	mov	r3, r0
 8008556:	71fb      	strb	r3, [r7, #7]
 8008558:	460b      	mov	r3, r1
 800855a:	80bb      	strh	r3, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d81b      	bhi.n	800859e <pbuf_alloced_custom+0x52>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <pbuf_alloced_custom+0x20>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008581 	.word	0x08008581
 8008570:	08008587 	.word	0x08008587
 8008574:	0800858d 	.word	0x0800858d
 8008578:	08008593 	.word	0x08008593
 800857c:	08008599 	.word	0x08008599
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008580:	2336      	movs	r3, #54	; 0x36
 8008582:	81fb      	strh	r3, [r7, #14]
    break;
 8008584:	e014      	b.n	80085b0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008586:	2322      	movs	r3, #34	; 0x22
 8008588:	81fb      	strh	r3, [r7, #14]
    break;
 800858a:	e011      	b.n	80085b0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800858c:	230e      	movs	r3, #14
 800858e:	81fb      	strh	r3, [r7, #14]
    break;
 8008590:	e00e      	b.n	80085b0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008592:	2300      	movs	r3, #0
 8008594:	81fb      	strh	r3, [r7, #14]
    break;
 8008596:	e00b      	b.n	80085b0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	81fb      	strh	r3, [r7, #14]
    break;
 800859c:	e008      	b.n	80085b0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800859e:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <pbuf_alloced_custom+0xc8>)
 80085a0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80085a4:	491c      	ldr	r1, [pc, #112]	; (8008618 <pbuf_alloced_custom+0xcc>)
 80085a6:	481d      	ldr	r0, [pc, #116]	; (800861c <pbuf_alloced_custom+0xd0>)
 80085a8:	f00d fc18 	bl	8015ddc <iprintf>
    return NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e02d      	b.n	800860c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80085b0:	89fb      	ldrh	r3, [r7, #14]
 80085b2:	3303      	adds	r3, #3
 80085b4:	f023 0203 	bic.w	r2, r3, #3
 80085b8:	88bb      	ldrh	r3, [r7, #4]
 80085ba:	441a      	add	r2, r3
 80085bc:	8bbb      	ldrh	r3, [r7, #28]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d901      	bls.n	80085c6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e022      	b.n	800860c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d008      	beq.n	80085e4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80085d2:	89fb      	ldrh	r3, [r7, #14]
 80085d4:	3303      	adds	r3, #3
 80085d6:	f023 0303 	bic.w	r3, r3, #3
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	441a      	add	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	605a      	str	r2, [r3, #4]
 80085e2:	e002      	b.n	80085ea <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2202      	movs	r2, #2
 80085ee:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	88ba      	ldrh	r2, [r7, #4]
 80085f4:	811a      	strh	r2, [r3, #8]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	891a      	ldrh	r2, [r3, #8]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	79ba      	ldrb	r2, [r7, #6]
 8008602:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2201      	movs	r2, #1
 8008608:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800860a:	683b      	ldr	r3, [r7, #0]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	08018760 	.word	0x08018760
 8008618:	080188f8 	.word	0x080188f8
 800861c:	080187ac 	.word	0x080187ac

08008620 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <pbuf_realloc+0x20>
 8008632:	4b4b      	ldr	r3, [pc, #300]	; (8008760 <pbuf_realloc+0x140>)
 8008634:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008638:	494a      	ldr	r1, [pc, #296]	; (8008764 <pbuf_realloc+0x144>)
 800863a:	484b      	ldr	r0, [pc, #300]	; (8008768 <pbuf_realloc+0x148>)
 800863c:	f00d fbce 	bl	8015ddc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7b1b      	ldrb	r3, [r3, #12]
 8008644:	2b03      	cmp	r3, #3
 8008646:	d012      	beq.n	800866e <pbuf_realloc+0x4e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7b1b      	ldrb	r3, [r3, #12]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d00e      	beq.n	800866e <pbuf_realloc+0x4e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7b1b      	ldrb	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <pbuf_realloc+0x4e>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	7b1b      	ldrb	r3, [r3, #12]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d006      	beq.n	800866e <pbuf_realloc+0x4e>
 8008660:	4b3f      	ldr	r3, [pc, #252]	; (8008760 <pbuf_realloc+0x140>)
 8008662:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008666:	4941      	ldr	r1, [pc, #260]	; (800876c <pbuf_realloc+0x14c>)
 8008668:	483f      	ldr	r0, [pc, #252]	; (8008768 <pbuf_realloc+0x148>)
 800866a:	f00d fbb7 	bl	8015ddc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	891b      	ldrh	r3, [r3, #8]
 8008672:	887a      	ldrh	r2, [r7, #2]
 8008674:	429a      	cmp	r2, r3
 8008676:	d26f      	bcs.n	8008758 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8008678:	887b      	ldrh	r3, [r7, #2]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	8912      	ldrh	r2, [r2, #8]
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008682:	887b      	ldrh	r3, [r7, #2]
 8008684:	827b      	strh	r3, [r7, #18]
  q = p;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800868a:	e025      	b.n	80086d8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	895b      	ldrh	r3, [r3, #10]
 8008690:	8a7a      	ldrh	r2, [r7, #18]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800869c:	4293      	cmp	r3, r2
 800869e:	dd06      	ble.n	80086ae <pbuf_realloc+0x8e>
 80086a0:	4b2f      	ldr	r3, [pc, #188]	; (8008760 <pbuf_realloc+0x140>)
 80086a2:	f240 220b 	movw	r2, #523	; 0x20b
 80086a6:	4932      	ldr	r1, [pc, #200]	; (8008770 <pbuf_realloc+0x150>)
 80086a8:	482f      	ldr	r0, [pc, #188]	; (8008768 <pbuf_realloc+0x148>)
 80086aa:	f00d fb97 	bl	8015ddc <iprintf>
    q->tot_len += (u16_t)grow;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	891a      	ldrh	r2, [r3, #8]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	4413      	add	r3, r2
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <pbuf_realloc+0xb8>
 80086ca:	4b25      	ldr	r3, [pc, #148]	; (8008760 <pbuf_realloc+0x140>)
 80086cc:	f240 220f 	movw	r2, #527	; 0x20f
 80086d0:	4928      	ldr	r1, [pc, #160]	; (8008774 <pbuf_realloc+0x154>)
 80086d2:	4825      	ldr	r0, [pc, #148]	; (8008768 <pbuf_realloc+0x148>)
 80086d4:	f00d fb82 	bl	8015ddc <iprintf>
  while (rem_len > q->len) {
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	895b      	ldrh	r3, [r3, #10]
 80086dc:	8a7a      	ldrh	r2, [r7, #18]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d8d4      	bhi.n	800868c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	7b1b      	ldrb	r3, [r3, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d122      	bne.n	8008730 <pbuf_realloc+0x110>
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	895b      	ldrh	r3, [r3, #10]
 80086ee:	8a7a      	ldrh	r2, [r7, #18]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d01d      	beq.n	8008730 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	7b5b      	ldrb	r3, [r3, #13]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d117      	bne.n	8008730 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	461a      	mov	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	b29a      	uxth	r2, r3
 800870c:	8a7b      	ldrh	r3, [r7, #18]
 800870e:	4413      	add	r3, r2
 8008710:	b29b      	uxth	r3, r3
 8008712:	4619      	mov	r1, r3
 8008714:	6978      	ldr	r0, [r7, #20]
 8008716:	f7ff f93f 	bl	8007998 <mem_trim>
 800871a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <pbuf_realloc+0x110>
 8008722:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <pbuf_realloc+0x140>)
 8008724:	f240 221d 	movw	r2, #541	; 0x21d
 8008728:	4913      	ldr	r1, [pc, #76]	; (8008778 <pbuf_realloc+0x158>)
 800872a:	480f      	ldr	r0, [pc, #60]	; (8008768 <pbuf_realloc+0x148>)
 800872c:	f00d fb56 	bl	8015ddc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	8a7a      	ldrh	r2, [r7, #18]
 8008734:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	895a      	ldrh	r2, [r3, #10]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d004      	beq.n	8008750 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f8dc 	bl	8008908 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e000      	b.n	800875a <pbuf_realloc+0x13a>
    return;
 8008758:	bf00      	nop

}
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08018760 	.word	0x08018760
 8008764:	0801891c 	.word	0x0801891c
 8008768:	080187ac 	.word	0x080187ac
 800876c:	08018934 	.word	0x08018934
 8008770:	08018950 	.word	0x08018950
 8008774:	08018964 	.word	0x08018964
 8008778:	0801897c 	.word	0x0801897c

0800877c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
 8008788:	4613      	mov	r3, r2
 800878a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d106      	bne.n	80087a0 <pbuf_header_impl+0x24>
 8008792:	4b46      	ldr	r3, [pc, #280]	; (80088ac <pbuf_header_impl+0x130>)
 8008794:	f240 223f 	movw	r2, #575	; 0x23f
 8008798:	4945      	ldr	r1, [pc, #276]	; (80088b0 <pbuf_header_impl+0x134>)
 800879a:	4846      	ldr	r0, [pc, #280]	; (80088b4 <pbuf_header_impl+0x138>)
 800879c:	f00d fb1e 	bl	8015ddc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80087a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <pbuf_header_impl+0x32>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <pbuf_header_impl+0x36>
    return 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e078      	b.n	80088a4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80087b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da10      	bge.n	80087dc <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80087ba:	887b      	ldrh	r3, [r7, #2]
 80087bc:	425b      	negs	r3, r3
 80087be:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	895b      	ldrh	r3, [r3, #10]
 80087c4:	89fa      	ldrh	r2, [r7, #14]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d90a      	bls.n	80087e0 <pbuf_header_impl+0x64>
 80087ca:	4b38      	ldr	r3, [pc, #224]	; (80088ac <pbuf_header_impl+0x130>)
 80087cc:	f240 2247 	movw	r2, #583	; 0x247
 80087d0:	4939      	ldr	r1, [pc, #228]	; (80088b8 <pbuf_header_impl+0x13c>)
 80087d2:	4838      	ldr	r0, [pc, #224]	; (80088b4 <pbuf_header_impl+0x138>)
 80087d4:	f00d fb02 	bl	8015ddc <iprintf>
 80087d8:	2301      	movs	r3, #1
 80087da:	e063      	b.n	80088a4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80087dc:	887b      	ldrh	r3, [r7, #2]
 80087de:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7b1b      	ldrb	r3, [r3, #12]
 80087e4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80087ec:	89bb      	ldrh	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <pbuf_header_impl+0x7c>
 80087f2:	89bb      	ldrh	r3, [r7, #12]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d112      	bne.n	800881e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008800:	425b      	negs	r3, r3
 8008802:	441a      	add	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3310      	adds	r3, #16
 8008810:	429a      	cmp	r2, r3
 8008812:	d238      	bcs.n	8008886 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800881a:	2301      	movs	r3, #1
 800881c:	e042      	b.n	80088a4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800881e:	89bb      	ldrh	r3, [r7, #12]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d002      	beq.n	800882a <pbuf_header_impl+0xae>
 8008824:	89bb      	ldrh	r3, [r7, #12]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d124      	bne.n	8008874 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800882a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800882e:	2b00      	cmp	r3, #0
 8008830:	da0d      	bge.n	800884e <pbuf_header_impl+0xd2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	895b      	ldrh	r3, [r3, #10]
 8008836:	89fa      	ldrh	r2, [r7, #14]
 8008838:	429a      	cmp	r2, r3
 800883a:	d808      	bhi.n	800884e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008844:	425b      	negs	r3, r3
 8008846:	441a      	add	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	605a      	str	r2, [r3, #4]
 800884c:	e011      	b.n	8008872 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800884e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008852:	2b00      	cmp	r3, #0
 8008854:	dd0b      	ble.n	800886e <pbuf_header_impl+0xf2>
 8008856:	787b      	ldrb	r3, [r7, #1]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008864:	425b      	negs	r3, r3
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	605a      	str	r2, [r3, #4]
 800886c:	e001      	b.n	8008872 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800886e:	2301      	movs	r3, #1
 8008870:	e018      	b.n	80088a4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008872:	e008      	b.n	8008886 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8008874:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <pbuf_header_impl+0x130>)
 8008876:	f240 2277 	movw	r2, #631	; 0x277
 800887a:	4910      	ldr	r1, [pc, #64]	; (80088bc <pbuf_header_impl+0x140>)
 800887c:	480d      	ldr	r0, [pc, #52]	; (80088b4 <pbuf_header_impl+0x138>)
 800887e:	f00d faad 	bl	8015ddc <iprintf>
    return 1;
 8008882:	2301      	movs	r3, #1
 8008884:	e00e      	b.n	80088a4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	895a      	ldrh	r2, [r3, #10]
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	4413      	add	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	891a      	ldrh	r2, [r3, #8]
 8008898:	887b      	ldrh	r3, [r7, #2]
 800889a:	4413      	add	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	08018760 	.word	0x08018760
 80088b0:	08018998 	.word	0x08018998
 80088b4:	080187ac 	.word	0x080187ac
 80088b8:	080189a4 	.word	0x080189a4
 80088bc:	080189c4 	.word	0x080189c4

080088c0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80088cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088d0:	2200      	movs	r2, #0
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff ff51 	bl	800877c <pbuf_header_impl>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80088f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088f4:	2201      	movs	r2, #1
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff3f 	bl	800877c <pbuf_header_impl>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <pbuf_free+0x22>
 800891c:	4b3e      	ldr	r3, [pc, #248]	; (8008a18 <pbuf_free+0x110>)
 800891e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008922:	493e      	ldr	r1, [pc, #248]	; (8008a1c <pbuf_free+0x114>)
 8008924:	483e      	ldr	r0, [pc, #248]	; (8008a20 <pbuf_free+0x118>)
 8008926:	f00d fa59 	bl	8015ddc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800892a:	2300      	movs	r3, #0
 800892c:	e070      	b.n	8008a10 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7b1b      	ldrb	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d012      	beq.n	800895c <pbuf_free+0x54>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7b1b      	ldrb	r3, [r3, #12]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d00e      	beq.n	800895c <pbuf_free+0x54>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	7b1b      	ldrb	r3, [r3, #12]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d00a      	beq.n	800895c <pbuf_free+0x54>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7b1b      	ldrb	r3, [r3, #12]
 800894a:	2b03      	cmp	r3, #3
 800894c:	d006      	beq.n	800895c <pbuf_free+0x54>
 800894e:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <pbuf_free+0x110>)
 8008950:	f240 22de 	movw	r2, #734	; 0x2de
 8008954:	4933      	ldr	r1, [pc, #204]	; (8008a24 <pbuf_free+0x11c>)
 8008956:	4832      	ldr	r0, [pc, #200]	; (8008a20 <pbuf_free+0x118>)
 8008958:	f00d fa40 	bl	8015ddc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008960:	e052      	b.n	8008a08 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	89db      	ldrh	r3, [r3, #14]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <pbuf_free+0x70>
 800896a:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <pbuf_free+0x110>)
 800896c:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008970:	492d      	ldr	r1, [pc, #180]	; (8008a28 <pbuf_free+0x120>)
 8008972:	482b      	ldr	r0, [pc, #172]	; (8008a20 <pbuf_free+0x118>)
 8008974:	f00d fa32 	bl	8015ddc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	89db      	ldrh	r3, [r3, #14]
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	81da      	strh	r2, [r3, #14]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	89db      	ldrh	r3, [r3, #14]
 8008988:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800898a:	8abb      	ldrh	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d139      	bne.n	8008a04 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7b1b      	ldrb	r3, [r3, #12]
 800899a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7b5b      	ldrb	r3, [r3, #13]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <pbuf_free+0xba>
 80089b4:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <pbuf_free+0x110>)
 80089b6:	f240 22f9 	movw	r2, #761	; 0x2f9
 80089ba:	491c      	ldr	r1, [pc, #112]	; (8008a2c <pbuf_free+0x124>)
 80089bc:	4818      	ldr	r0, [pc, #96]	; (8008a20 <pbuf_free+0x118>)
 80089be:	f00d fa0d 	bl	8015ddc <iprintf>
        pc->custom_free_function(p);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
 80089ca:	e015      	b.n	80089f8 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80089cc:	89fb      	ldrh	r3, [r7, #14]
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d104      	bne.n	80089dc <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	2008      	movs	r0, #8
 80089d6:	f7ff fa65 	bl	8007ea4 <memp_free>
 80089da:	e00d      	b.n	80089f8 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d002      	beq.n	80089e8 <pbuf_free+0xe0>
 80089e2:	89fb      	ldrh	r3, [r7, #14]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d104      	bne.n	80089f2 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	2007      	movs	r0, #7
 80089ec:	f7ff fa5a 	bl	8007ea4 <memp_free>
 80089f0:	e002      	b.n	80089f8 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fe ff6e 	bl	80078d4 <mem_free>
        }
      }
      count++;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	3301      	adds	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	607b      	str	r3, [r7, #4]
 8008a02:	e001      	b.n	8008a08 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1a9      	bne.n	8008962 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	08018760 	.word	0x08018760
 8008a1c:	08018998 	.word	0x08018998
 8008a20:	080187ac 	.word	0x080187ac
 8008a24:	080189d4 	.word	0x080189d4
 8008a28:	080189ec 	.word	0x080189ec
 8008a2c:	08018a04 	.word	0x08018a04

08008a30 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008a3c:	e005      	b.n	8008a4a <pbuf_clen+0x1a>
    ++len;
 8008a3e:	89fb      	ldrh	r3, [r7, #14]
 8008a40:	3301      	adds	r3, #1
 8008a42:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1f6      	bne.n	8008a3e <pbuf_clen+0xe>
  }
  return len;
 8008a50:	89fb      	ldrh	r3, [r7, #14]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	89db      	ldrh	r3, [r3, #14]
 8008a72:	3301      	adds	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	89db      	ldrh	r3, [r3, #14]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <pbuf_ref+0x30>
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <pbuf_ref+0x38>)
 8008a84:	f240 3239 	movw	r2, #825	; 0x339
 8008a88:	4904      	ldr	r1, [pc, #16]	; (8008a9c <pbuf_ref+0x3c>)
 8008a8a:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <pbuf_ref+0x40>)
 8008a8c:	f00d f9a6 	bl	8015ddc <iprintf>
  }
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	08018760 	.word	0x08018760
 8008a9c:	08018a28 	.word	0x08018a28
 8008aa0:	080187ac 	.word	0x080187ac

08008aa4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <pbuf_cat+0x16>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d107      	bne.n	8008aca <pbuf_cat+0x26>
 8008aba:	4b20      	ldr	r3, [pc, #128]	; (8008b3c <pbuf_cat+0x98>)
 8008abc:	f240 324d 	movw	r2, #845	; 0x34d
 8008ac0:	491f      	ldr	r1, [pc, #124]	; (8008b40 <pbuf_cat+0x9c>)
 8008ac2:	4820      	ldr	r0, [pc, #128]	; (8008b44 <pbuf_cat+0xa0>)
 8008ac4:	f00d f98a 	bl	8015ddc <iprintf>
 8008ac8:	e034      	b.n	8008b34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e00a      	b.n	8008ae6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	891a      	ldrh	r2, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	891b      	ldrh	r3, [r3, #8]
 8008ad8:	4413      	add	r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f0      	bne.n	8008ad0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	891a      	ldrh	r2, [r3, #8]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	895b      	ldrh	r3, [r3, #10]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d006      	beq.n	8008b08 <pbuf_cat+0x64>
 8008afa:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <pbuf_cat+0x98>)
 8008afc:	f240 3255 	movw	r2, #853	; 0x355
 8008b00:	4911      	ldr	r1, [pc, #68]	; (8008b48 <pbuf_cat+0xa4>)
 8008b02:	4810      	ldr	r0, [pc, #64]	; (8008b44 <pbuf_cat+0xa0>)
 8008b04:	f00d f96a 	bl	8015ddc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d006      	beq.n	8008b1e <pbuf_cat+0x7a>
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <pbuf_cat+0x98>)
 8008b12:	f240 3256 	movw	r2, #854	; 0x356
 8008b16:	490d      	ldr	r1, [pc, #52]	; (8008b4c <pbuf_cat+0xa8>)
 8008b18:	480a      	ldr	r0, [pc, #40]	; (8008b44 <pbuf_cat+0xa0>)
 8008b1a:	f00d f95f 	bl	8015ddc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	891a      	ldrh	r2, [r3, #8]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	891b      	ldrh	r3, [r3, #8]
 8008b26:	4413      	add	r3, r2
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08018760 	.word	0x08018760
 8008b40:	08018a3c 	.word	0x08018a3c
 8008b44:	080187ac 	.word	0x080187ac
 8008b48:	08018a74 	.word	0x08018a74
 8008b4c:	08018aa4 	.word	0x08018aa4

08008b50 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff ffa1 	bl	8008aa4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008b62:	6838      	ldr	r0, [r7, #0]
 8008b64:	f7ff ff7c 	bl	8008a60 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	81fb      	strh	r3, [r7, #14]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d008      	beq.n	8008b9a <pbuf_copy+0x2a>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <pbuf_copy+0x2a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	891a      	ldrh	r2, [r3, #8]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	891b      	ldrh	r3, [r3, #8]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d209      	bcs.n	8008bae <pbuf_copy+0x3e>
 8008b9a:	4b54      	ldr	r3, [pc, #336]	; (8008cec <pbuf_copy+0x17c>)
 8008b9c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008ba0:	4953      	ldr	r1, [pc, #332]	; (8008cf0 <pbuf_copy+0x180>)
 8008ba2:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <pbuf_copy+0x184>)
 8008ba4:	f00d f91a 	bl	8015ddc <iprintf>
 8008ba8:	f06f 030f 	mvn.w	r3, #15
 8008bac:	e099      	b.n	8008ce2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	895b      	ldrh	r3, [r3, #10]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	89fb      	ldrh	r3, [r7, #14]
 8008bb6:	1ad2      	subs	r2, r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	895b      	ldrh	r3, [r3, #10]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	89bb      	ldrh	r3, [r7, #12]
 8008bc0:	1acb      	subs	r3, r1, r3
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	db05      	blt.n	8008bd2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	895a      	ldrh	r2, [r3, #10]
 8008bca:	89bb      	ldrh	r3, [r7, #12]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	817b      	strh	r3, [r7, #10]
 8008bd0:	e004      	b.n	8008bdc <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	895a      	ldrh	r2, [r3, #10]
 8008bd6:	89fb      	ldrh	r3, [r7, #14]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	89fb      	ldrh	r3, [r7, #14]
 8008be2:	18d0      	adds	r0, r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	89bb      	ldrh	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	897a      	ldrh	r2, [r7, #10]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f00c fc85 	bl	80154fe <memcpy>
    offset_to += len;
 8008bf4:	89fa      	ldrh	r2, [r7, #14]
 8008bf6:	897b      	ldrh	r3, [r7, #10]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8008bfc:	89ba      	ldrh	r2, [r7, #12]
 8008bfe:	897b      	ldrh	r3, [r7, #10]
 8008c00:	4413      	add	r3, r2
 8008c02:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	895b      	ldrh	r3, [r3, #10]
 8008c08:	89fa      	ldrh	r2, [r7, #14]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d906      	bls.n	8008c1c <pbuf_copy+0xac>
 8008c0e:	4b37      	ldr	r3, [pc, #220]	; (8008cec <pbuf_copy+0x17c>)
 8008c10:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008c14:	4938      	ldr	r1, [pc, #224]	; (8008cf8 <pbuf_copy+0x188>)
 8008c16:	4837      	ldr	r0, [pc, #220]	; (8008cf4 <pbuf_copy+0x184>)
 8008c18:	f00d f8e0 	bl	8015ddc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	895b      	ldrh	r3, [r3, #10]
 8008c20:	89ba      	ldrh	r2, [r7, #12]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d906      	bls.n	8008c34 <pbuf_copy+0xc4>
 8008c26:	4b31      	ldr	r3, [pc, #196]	; (8008cec <pbuf_copy+0x17c>)
 8008c28:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008c2c:	4933      	ldr	r1, [pc, #204]	; (8008cfc <pbuf_copy+0x18c>)
 8008c2e:	4831      	ldr	r0, [pc, #196]	; (8008cf4 <pbuf_copy+0x184>)
 8008c30:	f00d f8d4 	bl	8015ddc <iprintf>
    if (offset_from >= p_from->len) {
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	895b      	ldrh	r3, [r3, #10]
 8008c38:	89ba      	ldrh	r2, [r7, #12]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d304      	bcc.n	8008c48 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	895b      	ldrh	r3, [r3, #10]
 8008c4c:	89fa      	ldrh	r2, [r7, #14]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d114      	bne.n	8008c7c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10c      	bne.n	8008c7c <pbuf_copy+0x10c>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d009      	beq.n	8008c7c <pbuf_copy+0x10c>
 8008c68:	4b20      	ldr	r3, [pc, #128]	; (8008cec <pbuf_copy+0x17c>)
 8008c6a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008c6e:	4924      	ldr	r1, [pc, #144]	; (8008d00 <pbuf_copy+0x190>)
 8008c70:	4820      	ldr	r0, [pc, #128]	; (8008cf4 <pbuf_copy+0x184>)
 8008c72:	f00d f8b3 	bl	8015ddc <iprintf>
 8008c76:	f06f 030f 	mvn.w	r3, #15
 8008c7a:	e032      	b.n	8008ce2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d013      	beq.n	8008caa <pbuf_copy+0x13a>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	895a      	ldrh	r2, [r3, #10]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	891b      	ldrh	r3, [r3, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d10d      	bne.n	8008caa <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <pbuf_copy+0x13a>
 8008c96:	4b15      	ldr	r3, [pc, #84]	; (8008cec <pbuf_copy+0x17c>)
 8008c98:	f240 32de 	movw	r2, #990	; 0x3de
 8008c9c:	4919      	ldr	r1, [pc, #100]	; (8008d04 <pbuf_copy+0x194>)
 8008c9e:	4815      	ldr	r0, [pc, #84]	; (8008cf4 <pbuf_copy+0x184>)
 8008ca0:	f00d f89c 	bl	8015ddc <iprintf>
 8008ca4:	f06f 0305 	mvn.w	r3, #5
 8008ca8:	e01b      	b.n	8008ce2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d013      	beq.n	8008cd8 <pbuf_copy+0x168>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	895a      	ldrh	r2, [r3, #10]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	891b      	ldrh	r3, [r3, #8]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d10d      	bne.n	8008cd8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d009      	beq.n	8008cd8 <pbuf_copy+0x168>
 8008cc4:	4b09      	ldr	r3, [pc, #36]	; (8008cec <pbuf_copy+0x17c>)
 8008cc6:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008cca:	490e      	ldr	r1, [pc, #56]	; (8008d04 <pbuf_copy+0x194>)
 8008ccc:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <pbuf_copy+0x184>)
 8008cce:	f00d f885 	bl	8015ddc <iprintf>
 8008cd2:	f06f 0305 	mvn.w	r3, #5
 8008cd6:	e004      	b.n	8008ce2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f47f af67 	bne.w	8008bae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	08018760 	.word	0x08018760
 8008cf0:	08018af0 	.word	0x08018af0
 8008cf4:	080187ac 	.word	0x080187ac
 8008cf8:	08018b20 	.word	0x08018b20
 8008cfc:	08018b38 	.word	0x08018b38
 8008d00:	08018b54 	.word	0x08018b54
 8008d04:	08018b64 	.word	0x08018b64

08008d08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4611      	mov	r1, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	460b      	mov	r3, r1
 8008d18:	80fb      	strh	r3, [r7, #6]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <pbuf_copy_partial+0x32>
 8008d28:	4b30      	ldr	r3, [pc, #192]	; (8008dec <pbuf_copy_partial+0xe4>)
 8008d2a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d2e:	4930      	ldr	r1, [pc, #192]	; (8008df0 <pbuf_copy_partial+0xe8>)
 8008d30:	4830      	ldr	r0, [pc, #192]	; (8008df4 <pbuf_copy_partial+0xec>)
 8008d32:	f00d f853 	bl	8015ddc <iprintf>
 8008d36:	2300      	movs	r3, #0
 8008d38:	e054      	b.n	8008de4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d108      	bne.n	8008d52 <pbuf_copy_partial+0x4a>
 8008d40:	4b2a      	ldr	r3, [pc, #168]	; (8008dec <pbuf_copy_partial+0xe4>)
 8008d42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008d46:	492c      	ldr	r1, [pc, #176]	; (8008df8 <pbuf_copy_partial+0xf0>)
 8008d48:	482a      	ldr	r0, [pc, #168]	; (8008df4 <pbuf_copy_partial+0xec>)
 8008d4a:	f00d f847 	bl	8015ddc <iprintf>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e048      	b.n	8008de4 <pbuf_copy_partial+0xdc>

  left = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <pbuf_copy_partial+0x5a>
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <pbuf_copy_partial+0x5e>
    return 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e03e      	b.n	8008de4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	61fb      	str	r3, [r7, #28]
 8008d6a:	e034      	b.n	8008dd6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8008d6c:	88bb      	ldrh	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <pbuf_copy_partial+0x80>
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	895b      	ldrh	r3, [r3, #10]
 8008d76:	88ba      	ldrh	r2, [r7, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d305      	bcc.n	8008d88 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	895b      	ldrh	r3, [r3, #10]
 8008d80:	88ba      	ldrh	r2, [r7, #4]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	80bb      	strh	r3, [r7, #4]
 8008d86:	e023      	b.n	8008dd0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	895a      	ldrh	r2, [r3, #10]
 8008d8c:	88bb      	ldrh	r3, [r7, #4]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008d92:	8b3a      	ldrh	r2, [r7, #24]
 8008d94:	88fb      	ldrh	r3, [r7, #6]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d901      	bls.n	8008d9e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008d9e:	8b7b      	ldrh	r3, [r7, #26]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	18d0      	adds	r0, r2, r3
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	88bb      	ldrh	r3, [r7, #4]
 8008daa:	4413      	add	r3, r2
 8008dac:	8b3a      	ldrh	r2, [r7, #24]
 8008dae:	4619      	mov	r1, r3
 8008db0:	f00c fba5 	bl	80154fe <memcpy>
      copied_total += buf_copy_len;
 8008db4:	8afa      	ldrh	r2, [r7, #22]
 8008db6:	8b3b      	ldrh	r3, [r7, #24]
 8008db8:	4413      	add	r3, r2
 8008dba:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8008dbc:	8b7a      	ldrh	r2, [r7, #26]
 8008dbe:	8b3b      	ldrh	r3, [r7, #24]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	8b3b      	ldrh	r3, [r7, #24]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <pbuf_copy_partial+0xda>
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1c4      	bne.n	8008d6c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8008de2:	8afb      	ldrh	r3, [r7, #22]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3720      	adds	r7, #32
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	08018760 	.word	0x08018760
 8008df0:	08018b90 	.word	0x08018b90
 8008df4:	080187ac 	.word	0x080187ac
 8008df8:	08018bb0 	.word	0x08018bb0

08008dfc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008e00:	bf00      	nop
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e10:	f000 ff80 	bl	8009d14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <tcp_tmr+0x28>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <tcp_tmr+0x28>)
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <tcp_tmr+0x28>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e2c:	f000 fcb2 	bl	8009794 <tcp_slowtmr>
  }
}
 8008e30:	bf00      	nop
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	2000071d 	.word	0x2000071d

08008e38 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e00a      	b.n	8008e5e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d102      	bne.n	8008e58 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1f1      	bne.n	8008e48 <tcp_remove_listener+0x10>
      }
   }
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d105      	bne.n	8008e8a <tcp_listen_closed+0x1a>
 8008e7e:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <tcp_listen_closed+0x5c>)
 8008e80:	22c0      	movs	r2, #192	; 0xc0
 8008e82:	4913      	ldr	r1, [pc, #76]	; (8008ed0 <tcp_listen_closed+0x60>)
 8008e84:	4813      	ldr	r0, [pc, #76]	; (8008ed4 <tcp_listen_closed+0x64>)
 8008e86:	f00c ffa9 	bl	8015ddc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d005      	beq.n	8008e9e <tcp_listen_closed+0x2e>
 8008e92:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <tcp_listen_closed+0x5c>)
 8008e94:	22c1      	movs	r2, #193	; 0xc1
 8008e96:	4910      	ldr	r1, [pc, #64]	; (8008ed8 <tcp_listen_closed+0x68>)
 8008e98:	480e      	ldr	r0, [pc, #56]	; (8008ed4 <tcp_listen_closed+0x64>)
 8008e9a:	f00c ff9f 	bl	8015ddc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e00b      	b.n	8008ebc <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008ea4:	4a0d      	ldr	r2, [pc, #52]	; (8008edc <tcp_listen_closed+0x6c>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff ffc1 	bl	8008e38 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d9f0      	bls.n	8008ea4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	08018ce4 	.word	0x08018ce4
 8008ed0:	08018d14 	.word	0x08018d14
 8008ed4:	08018d20 	.word	0x08018d20
 8008ed8:	08018d48 	.word	0x08018d48
 8008edc:	0801b7f8 	.word	0x0801b7f8

08008ee0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008ee0:	b5b0      	push	{r4, r5, r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d075      	beq.n	8008fde <tcp_close_shutdown+0xfe>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7d1b      	ldrb	r3, [r3, #20]
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d003      	beq.n	8008f02 <tcp_close_shutdown+0x22>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	7d1b      	ldrb	r3, [r3, #20]
 8008efe:	2b07      	cmp	r3, #7
 8008f00:	d16d      	bne.n	8008fde <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <tcp_close_shutdown+0x34>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f12:	d064      	beq.n	8008fde <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7e9b      	ldrb	r3, [r3, #26]
 8008f18:	f003 0310 	and.w	r3, r3, #16
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <tcp_close_shutdown+0x4e>
 8008f20:	4b59      	ldr	r3, [pc, #356]	; (8009088 <tcp_close_shutdown+0x1a8>)
 8008f22:	f240 120f 	movw	r2, #271	; 0x10f
 8008f26:	4959      	ldr	r1, [pc, #356]	; (800908c <tcp_close_shutdown+0x1ac>)
 8008f28:	4859      	ldr	r0, [pc, #356]	; (8009090 <tcp_close_shutdown+0x1b0>)
 8008f2a:	f00c ff57 	bl	8015ddc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f36:	687c      	ldr	r4, [r7, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	1d1d      	adds	r5, r3, #4
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	8adb      	ldrh	r3, [r3, #22]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	8b12      	ldrh	r2, [r2, #24]
 8008f44:	9201      	str	r2, [sp, #4]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	462b      	mov	r3, r5
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	f004 fefa 	bl	800dd44 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 fa2b 	bl	800a3ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008f56:	4b4f      	ldr	r3, [pc, #316]	; (8009094 <tcp_close_shutdown+0x1b4>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d105      	bne.n	8008f6c <tcp_close_shutdown+0x8c>
 8008f60:	4b4c      	ldr	r3, [pc, #304]	; (8009094 <tcp_close_shutdown+0x1b4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	4a4b      	ldr	r2, [pc, #300]	; (8009094 <tcp_close_shutdown+0x1b4>)
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e013      	b.n	8008f94 <tcp_close_shutdown+0xb4>
 8008f6c:	4b49      	ldr	r3, [pc, #292]	; (8009094 <tcp_close_shutdown+0x1b4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	e00c      	b.n	8008f8e <tcp_close_shutdown+0xae>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d104      	bne.n	8008f88 <tcp_close_shutdown+0xa8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	60da      	str	r2, [r3, #12]
 8008f86:	e005      	b.n	8008f94 <tcp_close_shutdown+0xb4>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1ef      	bne.n	8008f74 <tcp_close_shutdown+0x94>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	4b3f      	ldr	r3, [pc, #252]	; (8009098 <tcp_close_shutdown+0x1b8>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	7d1b      	ldrb	r3, [r3, #20]
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d10c      	bne.n	8008fc2 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	220a      	movs	r2, #10
 8008fac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008fae:	4b3b      	ldr	r3, [pc, #236]	; (800909c <tcp_close_shutdown+0x1bc>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	4a39      	ldr	r2, [pc, #228]	; (800909c <tcp_close_shutdown+0x1bc>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	f005 f910 	bl	800e1e0 <tcp_timer_needed>
 8008fc0:	e00b      	b.n	8008fda <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8008fc2:	4b37      	ldr	r3, [pc, #220]	; (80090a0 <tcp_close_shutdown+0x1c0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d102      	bne.n	8008fd2 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8008fcc:	f003 fd52 	bl	800ca74 <tcp_trigger_input_pcb_close>
 8008fd0:	e003      	b.n	8008fda <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	f7fe ff65 	bl	8007ea4 <memp_free>
        }
      }
      return ERR_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e050      	b.n	8009080 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7d1b      	ldrb	r3, [r3, #20]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d02e      	beq.n	8009044 <tcp_close_shutdown+0x164>
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d038      	beq.n	800905c <tcp_close_shutdown+0x17c>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d142      	bne.n	8009074 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8adb      	ldrh	r3, [r3, #22]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d021      	beq.n	800903a <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ff6:	4b2b      	ldr	r3, [pc, #172]	; (80090a4 <tcp_close_shutdown+0x1c4>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d105      	bne.n	800900c <tcp_close_shutdown+0x12c>
 8009000:	4b28      	ldr	r3, [pc, #160]	; (80090a4 <tcp_close_shutdown+0x1c4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	4a27      	ldr	r2, [pc, #156]	; (80090a4 <tcp_close_shutdown+0x1c4>)
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e013      	b.n	8009034 <tcp_close_shutdown+0x154>
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <tcp_close_shutdown+0x1c4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	e00c      	b.n	800902e <tcp_close_shutdown+0x14e>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	429a      	cmp	r2, r3
 800901c:	d104      	bne.n	8009028 <tcp_close_shutdown+0x148>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	60da      	str	r2, [r3, #12]
 8009026:	e005      	b.n	8009034 <tcp_close_shutdown+0x154>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1ef      	bne.n	8009014 <tcp_close_shutdown+0x134>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	2001      	movs	r0, #1
 800903e:	f7fe ff31 	bl	8007ea4 <memp_free>
    break;
 8009042:	e01c      	b.n	800907e <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ff13 	bl	8008e70 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4816      	ldr	r0, [pc, #88]	; (80090a8 <tcp_close_shutdown+0x1c8>)
 800904e:	f001 f9ef 	bl	800a430 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	2002      	movs	r0, #2
 8009056:	f7fe ff25 	bl	8007ea4 <memp_free>
    break;
 800905a:	e010      	b.n	800907e <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	480d      	ldr	r0, [pc, #52]	; (8009094 <tcp_close_shutdown+0x1b4>)
 8009060:	f001 f9e6 	bl	800a430 <tcp_pcb_remove>
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <tcp_close_shutdown+0x1b8>)
 8009066:	2201      	movs	r2, #1
 8009068:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	2001      	movs	r0, #1
 800906e:	f7fe ff19 	bl	8007ea4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8009072:	e004      	b.n	800907e <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f819 	bl	80090ac <tcp_close_shutdown_fin>
 800907a:	4603      	mov	r3, r0
 800907c:	e000      	b.n	8009080 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bdb0      	pop	{r4, r5, r7, pc}
 8009088:	08018ce4 	.word	0x08018ce4
 800908c:	08018d60 	.word	0x08018d60
 8009090:	08018d20 	.word	0x08018d20
 8009094:	20007220 	.word	0x20007220
 8009098:	2000721c 	.word	0x2000721c
 800909c:	20007230 	.word	0x20007230
 80090a0:	20007234 	.word	0x20007234
 80090a4:	2000722c 	.word	0x2000722c
 80090a8:	20007228 	.word	0x20007228

080090ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <tcp_close_shutdown_fin+0x1c>
 80090ba:	4b2c      	ldr	r3, [pc, #176]	; (800916c <tcp_close_shutdown_fin+0xc0>)
 80090bc:	f240 124d 	movw	r2, #333	; 0x14d
 80090c0:	492b      	ldr	r1, [pc, #172]	; (8009170 <tcp_close_shutdown_fin+0xc4>)
 80090c2:	482c      	ldr	r0, [pc, #176]	; (8009174 <tcp_close_shutdown_fin+0xc8>)
 80090c4:	f00c fe8a 	bl	8015ddc <iprintf>

  switch (pcb->state) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	7d1b      	ldrb	r3, [r3, #20]
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d010      	beq.n	80090f2 <tcp_close_shutdown_fin+0x46>
 80090d0:	2b07      	cmp	r3, #7
 80090d2:	d01b      	beq.n	800910c <tcp_close_shutdown_fin+0x60>
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d126      	bne.n	8009126 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f003 fd57 	bl	800cb8c <tcp_send_fin>
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80090e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d11f      	bne.n	800912a <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2205      	movs	r2, #5
 80090ee:	751a      	strb	r2, [r3, #20]
    }
    break;
 80090f0:	e01b      	b.n	800912a <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f003 fd4a 	bl	800cb8c <tcp_send_fin>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80090fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d114      	bne.n	800912e <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2205      	movs	r2, #5
 8009108:	751a      	strb	r2, [r3, #20]
    }
    break;
 800910a:	e010      	b.n	800912e <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f003 fd3d 	bl	800cb8c <tcp_send_fin>
 8009112:	4603      	mov	r3, r0
 8009114:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2209      	movs	r2, #9
 8009122:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009124:	e005      	b.n	8009132 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e01c      	b.n	8009164 <tcp_close_shutdown_fin+0xb8>
    break;
 800912a:	bf00      	nop
 800912c:	e002      	b.n	8009134 <tcp_close_shutdown_fin+0x88>
    break;
 800912e:	bf00      	nop
 8009130:	e000      	b.n	8009134 <tcp_close_shutdown_fin+0x88>
    break;
 8009132:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d103      	bne.n	8009144 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f004 fb77 	bl	800d830 <tcp_output>
 8009142:	e00d      	b.n	8009160 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d108      	bne.n	8009160 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7e9b      	ldrb	r3, [r3, #26]
 8009152:	f043 0308 	orr.w	r3, r3, #8
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e001      	b.n	8009164 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009160:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	08018ce4 	.word	0x08018ce4
 8009170:	08018d14 	.word	0x08018d14
 8009174:	08018d20 	.word	0x08018d20

08009178 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7d1b      	ldrb	r3, [r3, #20]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d006      	beq.n	8009196 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7e9b      	ldrb	r3, [r3, #26]
 800918c:	f043 0310 	orr.w	r3, r3, #16
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009196:	2101      	movs	r1, #1
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff fea1 	bl	8008ee0 <tcp_close_shutdown>
 800919e:	4603      	mov	r3, r0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08c      	sub	sp, #48	; 0x30
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	7d1b      	ldrb	r3, [r3, #20]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d106      	bne.n	80091c8 <tcp_abandon+0x20>
 80091ba:	4b4d      	ldr	r3, [pc, #308]	; (80092f0 <tcp_abandon+0x148>)
 80091bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80091c0:	494c      	ldr	r1, [pc, #304]	; (80092f4 <tcp_abandon+0x14c>)
 80091c2:	484d      	ldr	r0, [pc, #308]	; (80092f8 <tcp_abandon+0x150>)
 80091c4:	f00c fe0a 	bl	8015ddc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7d1b      	ldrb	r3, [r3, #20]
 80091cc:	2b0a      	cmp	r3, #10
 80091ce:	d108      	bne.n	80091e2 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	484a      	ldr	r0, [pc, #296]	; (80092fc <tcp_abandon+0x154>)
 80091d4:	f001 f92c 	bl	800a430 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	2001      	movs	r0, #1
 80091dc:	f7fe fe62 	bl	8007ea4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80091e0:	e081      	b.n	80092e6 <tcp_abandon+0x13e>
    int send_rst = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091fc:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7d1b      	ldrb	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d126      	bne.n	800925a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8adb      	ldrh	r3, [r3, #22]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d02e      	beq.n	8009272 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009214:	4b3a      	ldr	r3, [pc, #232]	; (8009300 <tcp_abandon+0x158>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d105      	bne.n	800922a <tcp_abandon+0x82>
 800921e:	4b38      	ldr	r3, [pc, #224]	; (8009300 <tcp_abandon+0x158>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	4a36      	ldr	r2, [pc, #216]	; (8009300 <tcp_abandon+0x158>)
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	e013      	b.n	8009252 <tcp_abandon+0xaa>
 800922a:	4b35      	ldr	r3, [pc, #212]	; (8009300 <tcp_abandon+0x158>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	e00c      	b.n	800924c <tcp_abandon+0xa4>
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d104      	bne.n	8009246 <tcp_abandon+0x9e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	60da      	str	r2, [r3, #12]
 8009244:	e005      	b.n	8009252 <tcp_abandon+0xaa>
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1ef      	bne.n	8009232 <tcp_abandon+0x8a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	60da      	str	r2, [r3, #12]
 8009258:	e00b      	b.n	8009272 <tcp_abandon+0xca>
      send_rst = reset;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	8adb      	ldrh	r3, [r3, #22]
 8009262:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4827      	ldr	r0, [pc, #156]	; (8009304 <tcp_abandon+0x15c>)
 8009268:	f001 f8e2 	bl	800a430 <tcp_pcb_remove>
 800926c:	4b26      	ldr	r3, [pc, #152]	; (8009308 <tcp_abandon+0x160>)
 800926e:	2201      	movs	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fe15 	bl	8009eae <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fe0c 	bl	8009eae <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fe03 	bl	8009eae <tcp_segs_free>
    if (send_rst) {
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00c      	beq.n	80092c8 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	1d19      	adds	r1, r3, #4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	8b1b      	ldrh	r3, [r3, #24]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	460b      	mov	r3, r1
 80092c0:	6979      	ldr	r1, [r7, #20]
 80092c2:	69b8      	ldr	r0, [r7, #24]
 80092c4:	f004 fd3e 	bl	800dd44 <tcp_rst>
    last_state = pcb->state;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	7d1b      	ldrb	r3, [r3, #20]
 80092cc:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	2001      	movs	r0, #1
 80092d2:	f7fe fde7 	bl	8007ea4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d004      	beq.n	80092e6 <tcp_abandon+0x13e>
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f06f 010c 	mvn.w	r1, #12
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	4798      	blx	r3
}
 80092e6:	bf00      	nop
 80092e8:	3728      	adds	r7, #40	; 0x28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	08018ce4 	.word	0x08018ce4
 80092f4:	08018d7c 	.word	0x08018d7c
 80092f8:	08018d20 	.word	0x08018d20
 80092fc:	20007230 	.word	0x20007230
 8009300:	2000722c 	.word	0x2000722c
 8009304:	20007220 	.word	0x20007220
 8009308:	2000721c 	.word	0x2000721c

0800930c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009314:	2101      	movs	r1, #1
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff46 	bl	80091a8 <tcp_abandon>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009332:	2304      	movs	r3, #4
 8009334:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800933c:	4b3c      	ldr	r3, [pc, #240]	; (8009430 <tcp_bind+0x10c>)
 800933e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <tcp_bind+0x28>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <tcp_bind+0x2e>
    return ERR_VAL;
 800934c:	f06f 0305 	mvn.w	r3, #5
 8009350:	e06a      	b.n	8009428 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	7d1b      	ldrb	r3, [r3, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <tcp_bind+0x4a>
 800935a:	4b36      	ldr	r3, [pc, #216]	; (8009434 <tcp_bind+0x110>)
 800935c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009360:	4935      	ldr	r1, [pc, #212]	; (8009438 <tcp_bind+0x114>)
 8009362:	4836      	ldr	r0, [pc, #216]	; (800943c <tcp_bind+0x118>)
 8009364:	f00c fd3a 	bl	8015ddc <iprintf>
 8009368:	f06f 0305 	mvn.w	r3, #5
 800936c:	e05c      	b.n	8009428 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <tcp_bind+0x64>
    port = tcp_new_port();
 8009374:	f000 f9ca 	bl	800970c <tcp_new_port>
 8009378:	4603      	mov	r3, r0
 800937a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d135      	bne.n	80093ee <tcp_bind+0xca>
      return ERR_BUF;
 8009382:	f06f 0301 	mvn.w	r3, #1
 8009386:	e04f      	b.n	8009428 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009388:	2300      	movs	r3, #0
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e02b      	b.n	80093e6 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800938e:	4a2c      	ldr	r2, [pc, #176]	; (8009440 <tcp_bind+0x11c>)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	61bb      	str	r3, [r7, #24]
 800939a:	e01e      	b.n	80093da <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	8adb      	ldrh	r3, [r3, #22]
 80093a0:	88fa      	ldrh	r2, [r7, #6]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d116      	bne.n	80093d4 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80093a6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d010      	beq.n	80093ce <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <tcp_bind+0xaa>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d102      	bne.n	80093d4 <tcp_bind+0xb0>
              return ERR_USE;
 80093ce:	f06f 0307 	mvn.w	r3, #7
 80093d2:	e029      	b.n	8009428 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1dd      	bne.n	800939c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	dbcf      	blt.n	800938e <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00c      	beq.n	800940e <tcp_bind+0xea>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <tcp_bind+0xe4>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	e000      	b.n	800940a <tcp_bind+0xe6>
 8009408:	2300      	movs	r3, #0
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	88fa      	ldrh	r2, [r7, #6]
 8009412:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009414:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <tcp_bind+0x120>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	60da      	str	r2, [r3, #12]
 800941c:	4a09      	ldr	r2, [pc, #36]	; (8009444 <tcp_bind+0x120>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	f004 fedd 	bl	800e1e0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3720      	adds	r7, #32
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	0801b830 	.word	0x0801b830
 8009434:	08018ce4 	.word	0x08018ce4
 8009438:	08018db0 	.word	0x08018db0
 800943c:	08018d20 	.word	0x08018d20
 8009440:	0801b7f8 	.word	0x0801b7f8
 8009444:	2000722c 	.word	0x2000722c

08009448 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8009456:	68b8      	ldr	r0, [r7, #8]
 8009458:	f7ff ff58 	bl	800930c <tcp_abort>

  return ERR_ABRT;
 800945c:	f06f 030c 	mvn.w	r3, #12
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2200      	movs	r2, #0
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f806 	bl	800948c <tcp_listen_with_backlog_and_err>
 8009480:	4603      	mov	r3, r0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	460b      	mov	r3, r1
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	7d1b      	ldrb	r3, [r3, #20]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <tcp_listen_with_backlog_and_err+0x2e>
 80094a6:	4b3f      	ldr	r3, [pc, #252]	; (80095a4 <tcp_listen_with_backlog_and_err+0x118>)
 80094a8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80094ac:	493e      	ldr	r1, [pc, #248]	; (80095a8 <tcp_listen_with_backlog_and_err+0x11c>)
 80094ae:	483f      	ldr	r0, [pc, #252]	; (80095ac <tcp_listen_with_backlog_and_err+0x120>)
 80094b0:	f00c fc94 	bl	8015ddc <iprintf>
 80094b4:	23f1      	movs	r3, #241	; 0xf1
 80094b6:	76fb      	strb	r3, [r7, #27]
 80094b8:	e069      	b.n	800958e <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	7d1b      	ldrb	r3, [r3, #20]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d104      	bne.n	80094cc <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80094c6:	23f7      	movs	r3, #247	; 0xf7
 80094c8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80094ca:	e060      	b.n	800958e <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80094cc:	2002      	movs	r0, #2
 80094ce:	f7fe fc9d 	bl	8007e0c <memp_malloc>
 80094d2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80094da:	23ff      	movs	r3, #255	; 0xff
 80094dc:	76fb      	strb	r3, [r7, #27]
    goto done;
 80094de:	e056      	b.n	800958e <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8ada      	ldrh	r2, [r3, #22]
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2201      	movs	r2, #1
 80094f4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	7d5a      	ldrb	r2, [r3, #21]
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	7a1a      	ldrb	r2, [r3, #8]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	7a9a      	ldrb	r2, [r3, #10]
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	7a5a      	ldrb	r2, [r3, #9]
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8adb      	ldrh	r3, [r3, #22]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d021      	beq.n	800956a <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009526:	4b22      	ldr	r3, [pc, #136]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	429a      	cmp	r2, r3
 800952e:	d105      	bne.n	800953c <tcp_listen_with_backlog_and_err+0xb0>
 8009530:	4b1f      	ldr	r3, [pc, #124]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	4a1e      	ldr	r2, [pc, #120]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	e013      	b.n	8009564 <tcp_listen_with_backlog_and_err+0xd8>
 800953c:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <tcp_listen_with_backlog_and_err+0x124>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	e00c      	b.n	800955e <tcp_listen_with_backlog_and_err+0xd2>
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	429a      	cmp	r2, r3
 800954c:	d104      	bne.n	8009558 <tcp_listen_with_backlog_and_err+0xcc>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	60da      	str	r2, [r3, #12]
 8009556:	e005      	b.n	8009564 <tcp_listen_with_backlog_and_err+0xd8>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1ef      	bne.n	8009544 <tcp_listen_with_backlog_and_err+0xb8>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	2001      	movs	r0, #1
 800956e:	f7fe fc99 	bl	8007ea4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4a0f      	ldr	r2, [pc, #60]	; (80095b4 <tcp_listen_with_backlog_and_err+0x128>)
 8009576:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009578:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <tcp_listen_with_backlog_and_err+0x12c>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	4a0d      	ldr	r2, [pc, #52]	; (80095b8 <tcp_listen_with_backlog_and_err+0x12c>)
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	f004 fe2b 	bl	800e1e0 <tcp_timer_needed>
  res = ERR_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7efa      	ldrb	r2, [r7, #27]
 8009598:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800959a:	69fb      	ldr	r3, [r7, #28]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	08018ce4 	.word	0x08018ce4
 80095a8:	08018dd8 	.word	0x08018dd8
 80095ac:	08018d20 	.word	0x08018d20
 80095b0:	2000722c 	.word	0x2000722c
 80095b4:	08009449 	.word	0x08009449
 80095b8:	20007228 	.word	0x20007228

080095bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80095cc:	4413      	add	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80095d8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80095dc:	bf28      	it	cs
 80095de:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 80095e2:	b292      	uxth	r2, r2
 80095e4:	4413      	add	r3, r2
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	db08      	blt.n	8009600 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	e020      	b.n	8009642 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	dd03      	ble.n	8009616 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009614:	e014      	b.n	8009640 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009628:	d306      	bcc.n	8009638 <tcp_update_rcv_ann_wnd+0x7c>
 800962a:	4b08      	ldr	r3, [pc, #32]	; (800964c <tcp_update_rcv_ann_wnd+0x90>)
 800962c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009630:	4907      	ldr	r1, [pc, #28]	; (8009650 <tcp_update_rcv_ann_wnd+0x94>)
 8009632:	4808      	ldr	r0, [pc, #32]	; (8009654 <tcp_update_rcv_ann_wnd+0x98>)
 8009634:	f00c fbd2 	bl	8015ddc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009640:	2300      	movs	r3, #0
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	08018ce4 	.word	0x08018ce4
 8009650:	08018dfc 	.word	0x08018dfc
 8009654:	08018d20 	.word	0x08018d20

08009658 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7d1b      	ldrb	r3, [r3, #20]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d106      	bne.n	800967a <tcp_recved+0x22>
 800966c:	4b23      	ldr	r3, [pc, #140]	; (80096fc <tcp_recved+0xa4>)
 800966e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009672:	4923      	ldr	r1, [pc, #140]	; (8009700 <tcp_recved+0xa8>)
 8009674:	4823      	ldr	r0, [pc, #140]	; (8009704 <tcp_recved+0xac>)
 8009676:	f00c fbb1 	bl	8015ddc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800967e:	887b      	ldrh	r3, [r7, #2]
 8009680:	4413      	add	r3, r2
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009690:	d904      	bls.n	800969c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009698:	851a      	strh	r2, [r3, #40]	; 0x28
 800969a:	e017      	b.n	80096cc <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d113      	bne.n	80096cc <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
 80096a8:	2b07      	cmp	r3, #7
 80096aa:	d003      	beq.n	80096b4 <tcp_recved+0x5c>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
 80096b0:	2b09      	cmp	r3, #9
 80096b2:	d104      	bne.n	80096be <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80096bc:	e006      	b.n	80096cc <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <tcp_recved+0xa4>)
 80096c0:	f240 322d 	movw	r2, #813	; 0x32d
 80096c4:	4910      	ldr	r1, [pc, #64]	; (8009708 <tcp_recved+0xb0>)
 80096c6:	480f      	ldr	r0, [pc, #60]	; (8009704 <tcp_recved+0xac>)
 80096c8:	f00c fb88 	bl	8015ddc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff ff75 	bl	80095bc <tcp_update_rcv_ann_wnd>
 80096d2:	4603      	mov	r3, r0
 80096d4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096dc:	db09      	blt.n	80096f2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7e9b      	ldrb	r3, [r3, #26]
 80096e2:	f043 0302 	orr.w	r3, r3, #2
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f004 f89f 	bl	800d830 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08018ce4 	.word	0x08018ce4
 8009700:	08018e18 	.word	0x08018e18
 8009704:	08018d20 	.word	0x08018d20
 8009708:	08018e40 	.word	0x08018e40

0800970c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8009716:	4b1d      	ldr	r3, [pc, #116]	; (800978c <tcp_new_port+0x80>)
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	b291      	uxth	r1, r2
 800971e:	4a1b      	ldr	r2, [pc, #108]	; (800978c <tcp_new_port+0x80>)
 8009720:	8011      	strh	r1, [r2, #0]
 8009722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009726:	4293      	cmp	r3, r2
 8009728:	d103      	bne.n	8009732 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800972a:	4b18      	ldr	r3, [pc, #96]	; (800978c <tcp_new_port+0x80>)
 800972c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009730:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009732:	2300      	movs	r3, #0
 8009734:	71fb      	strb	r3, [r7, #7]
 8009736:	e01e      	b.n	8009776 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	4a15      	ldr	r2, [pc, #84]	; (8009790 <tcp_new_port+0x84>)
 800973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	e011      	b.n	800976a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	8ada      	ldrh	r2, [r3, #22]
 800974a:	4b10      	ldr	r3, [pc, #64]	; (800978c <tcp_new_port+0x80>)
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d108      	bne.n	8009764 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009752:	88bb      	ldrh	r3, [r7, #4]
 8009754:	3301      	adds	r3, #1
 8009756:	80bb      	strh	r3, [r7, #4]
 8009758:	88bb      	ldrh	r3, [r7, #4]
 800975a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800975e:	d3da      	bcc.n	8009716 <tcp_new_port+0xa>
          return 0;
 8009760:	2300      	movs	r3, #0
 8009762:	e00d      	b.n	8009780 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1ea      	bne.n	8009746 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	3301      	adds	r3, #1
 8009774:	71fb      	strb	r3, [r7, #7]
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d9dd      	bls.n	8009738 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800977c:	4b03      	ldr	r3, [pc, #12]	; (800978c <tcp_new_port+0x80>)
 800977e:	881b      	ldrh	r3, [r3, #0]
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	20000006 	.word	0x20000006
 8009790:	0801b7f8 	.word	0x0801b7f8

08009794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009794:	b5b0      	push	{r4, r5, r7, lr}
 8009796:	b08c      	sub	sp, #48	; 0x30
 8009798:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800979e:	4b97      	ldr	r3, [pc, #604]	; (80099fc <tcp_slowtmr+0x268>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	4a95      	ldr	r2, [pc, #596]	; (80099fc <tcp_slowtmr+0x268>)
 80097a6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80097a8:	4b95      	ldr	r3, [pc, #596]	; (8009a00 <tcp_slowtmr+0x26c>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	4b93      	ldr	r3, [pc, #588]	; (8009a00 <tcp_slowtmr+0x26c>)
 80097b2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80097b4:	2300      	movs	r3, #0
 80097b6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80097b8:	4b92      	ldr	r3, [pc, #584]	; (8009a04 <tcp_slowtmr+0x270>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80097be:	e227      	b.n	8009c10 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	7d1b      	ldrb	r3, [r3, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <tcp_slowtmr+0x42>
 80097c8:	4b8f      	ldr	r3, [pc, #572]	; (8009a08 <tcp_slowtmr+0x274>)
 80097ca:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80097ce:	498f      	ldr	r1, [pc, #572]	; (8009a0c <tcp_slowtmr+0x278>)
 80097d0:	488f      	ldr	r0, [pc, #572]	; (8009a10 <tcp_slowtmr+0x27c>)
 80097d2:	f00c fb03 	bl	8015ddc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	7d1b      	ldrb	r3, [r3, #20]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d106      	bne.n	80097ec <tcp_slowtmr+0x58>
 80097de:	4b8a      	ldr	r3, [pc, #552]	; (8009a08 <tcp_slowtmr+0x274>)
 80097e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80097e4:	498b      	ldr	r1, [pc, #556]	; (8009a14 <tcp_slowtmr+0x280>)
 80097e6:	488a      	ldr	r0, [pc, #552]	; (8009a10 <tcp_slowtmr+0x27c>)
 80097e8:	f00c faf8 	bl	8015ddc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	2b0a      	cmp	r3, #10
 80097f2:	d106      	bne.n	8009802 <tcp_slowtmr+0x6e>
 80097f4:	4b84      	ldr	r3, [pc, #528]	; (8009a08 <tcp_slowtmr+0x274>)
 80097f6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80097fa:	4987      	ldr	r1, [pc, #540]	; (8009a18 <tcp_slowtmr+0x284>)
 80097fc:	4884      	ldr	r0, [pc, #528]	; (8009a10 <tcp_slowtmr+0x27c>)
 80097fe:	f00c faed 	bl	8015ddc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	7f5a      	ldrb	r2, [r3, #29]
 8009806:	4b7e      	ldr	r3, [pc, #504]	; (8009a00 <tcp_slowtmr+0x26c>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d103      	bne.n	8009816 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009814:	e1fc      	b.n	8009c10 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009816:	4b7a      	ldr	r3, [pc, #488]	; (8009a00 <tcp_slowtmr+0x26c>)
 8009818:	781a      	ldrb	r2, [r3, #0]
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	7d1b      	ldrb	r3, [r3, #20]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d108      	bne.n	8009840 <tcp_slowtmr+0xac>
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009834:	2b05      	cmp	r3, #5
 8009836:	d903      	bls.n	8009840 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8009838:	7ffb      	ldrb	r3, [r7, #31]
 800983a:	3301      	adds	r3, #1
 800983c:	77fb      	strb	r3, [r7, #31]
 800983e:	e0a2      	b.n	8009986 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009846:	2b0b      	cmp	r3, #11
 8009848:	d903      	bls.n	8009852 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800984a:	7ffb      	ldrb	r3, [r7, #31]
 800984c:	3301      	adds	r3, #1
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e099      	b.n	8009986 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009858:	2b00      	cmp	r3, #0
 800985a:	d032      	beq.n	80098c2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009862:	3b01      	subs	r3, #1
 8009864:	4a6d      	ldr	r2, [pc, #436]	; (8009a1c <tcp_slowtmr+0x288>)
 8009866:	5cd3      	ldrb	r3, [r2, r3]
 8009868:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009870:	7cfa      	ldrb	r2, [r7, #19]
 8009872:	429a      	cmp	r2, r3
 8009874:	d907      	bls.n	8009886 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800987c:	3301      	adds	r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800988c:	7cfa      	ldrb	r2, [r7, #19]
 800988e:	429a      	cmp	r2, r3
 8009890:	d879      	bhi.n	8009986 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009894:	f004 fbe4 	bl	800e060 <tcp_zero_window_probe>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d173      	bne.n	8009986 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	d86a      	bhi.n	8009986 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80098b6:	3301      	adds	r3, #1
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80098c0:	e061      	b.n	8009986 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	db08      	blt.n	80098de <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3301      	adds	r3, #1
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	b21a      	sxth	r2, r3
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d04f      	beq.n	8009986 <tcp_slowtmr+0x1f2>
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80098f2:	429a      	cmp	r2, r3
 80098f4:	db47      	blt.n	8009986 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d018      	beq.n	8009930 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009904:	2b0c      	cmp	r3, #12
 8009906:	bf28      	it	cs
 8009908:	230c      	movcs	r3, #12
 800990a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009912:	10db      	asrs	r3, r3, #3
 8009914:	b21b      	sxth	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800991e:	4413      	add	r3, r2
 8009920:	7dfa      	ldrb	r2, [r7, #23]
 8009922:	493f      	ldr	r1, [pc, #252]	; (8009a20 <tcp_slowtmr+0x28c>)
 8009924:	5c8a      	ldrb	r2, [r1, r2]
 8009926:	4093      	lsls	r3, r2
 8009928:	b21a      	sxth	r2, r3
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	2200      	movs	r2, #0
 8009934:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009942:	4293      	cmp	r3, r2
 8009944:	bf28      	it	cs
 8009946:	4613      	movcs	r3, r2
 8009948:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800994a:	8abb      	ldrh	r3, [r7, #20]
 800994c:	085b      	lsrs	r3, r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	b29b      	uxth	r3, r3
 8009964:	429a      	cmp	r2, r3
 8009966:	d206      	bcs.n	8009976 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	b29a      	uxth	r2, r3
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8009980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009982:	f004 fa53 	bl	800de2c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	7d1b      	ldrb	r3, [r3, #20]
 800998a:	2b06      	cmp	r3, #6
 800998c:	d10f      	bne.n	80099ae <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	7e9b      	ldrb	r3, [r3, #26]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800999a:	4b18      	ldr	r3, [pc, #96]	; (80099fc <tcp_slowtmr+0x268>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	2b28      	cmp	r3, #40	; 0x28
 80099a6:	d902      	bls.n	80099ae <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80099a8:	7ffb      	ldrb	r3, [r7, #31]
 80099aa:	3301      	adds	r3, #1
 80099ac:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	7a1b      	ldrb	r3, [r3, #8]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d05d      	beq.n	8009a76 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d003      	beq.n	80099ca <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80099c6:	2b07      	cmp	r3, #7
 80099c8:	d155      	bne.n	8009a76 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <tcp_slowtmr+0x268>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099da:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80099de:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80099e2:	4910      	ldr	r1, [pc, #64]	; (8009a24 <tcp_slowtmr+0x290>)
 80099e4:	fba1 1303 	umull	r1, r3, r1, r3
 80099e8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d91c      	bls.n	8009a28 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80099ee:	7ffb      	ldrb	r3, [r7, #31]
 80099f0:	3301      	adds	r3, #1
 80099f2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80099f4:	7fbb      	ldrb	r3, [r7, #30]
 80099f6:	3301      	adds	r3, #1
 80099f8:	77bb      	strb	r3, [r7, #30]
 80099fa:	e03c      	b.n	8009a76 <tcp_slowtmr+0x2e2>
 80099fc:	20007224 	.word	0x20007224
 8009a00:	2000071e 	.word	0x2000071e
 8009a04:	20007220 	.word	0x20007220
 8009a08:	08018ce4 	.word	0x08018ce4
 8009a0c:	08018e94 	.word	0x08018e94
 8009a10:	08018d20 	.word	0x08018d20
 8009a14:	08018ec0 	.word	0x08018ec0
 8009a18:	08018eec 	.word	0x08018eec
 8009a1c:	0801b7f0 	.word	0x0801b7f0
 8009a20:	0801b7e0 	.word	0x0801b7e0
 8009a24:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a28:	4b97      	ldr	r3, [pc, #604]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009a3e:	4618      	mov	r0, r3
 8009a40:	4b92      	ldr	r3, [pc, #584]	; (8009c8c <tcp_slowtmr+0x4f8>)
 8009a42:	fb03 f300 	mul.w	r3, r3, r0
 8009a46:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8009a48:	4991      	ldr	r1, [pc, #580]	; (8009c90 <tcp_slowtmr+0x4fc>)
 8009a4a:	fba1 1303 	umull	r1, r3, r1, r3
 8009a4e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d910      	bls.n	8009a76 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8009a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a56:	f004 fac6 	bl	800dfe6 <tcp_keepalive>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8009a5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d107      	bne.n	8009a76 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d016      	beq.n	8009aac <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8009a7e:	4b82      	ldr	r3, [pc, #520]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	1ad2      	subs	r2, r2, r3
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009a8e:	4619      	mov	r1, r3
 8009a90:	460b      	mov	r3, r1
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	440b      	add	r3, r1
 8009a96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d307      	bcc.n	8009aac <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 fa04 	bl	8009eae <tcp_segs_free>
      pcb->ooseq = NULL;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	7d1b      	ldrb	r3, [r3, #20]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d109      	bne.n	8009ac8 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ab4:	4b74      	ldr	r3, [pc, #464]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b28      	cmp	r3, #40	; 0x28
 8009ac0:	d902      	bls.n	8009ac8 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009ac2:	7ffb      	ldrb	r3, [r7, #31]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	7d1b      	ldrb	r3, [r3, #20]
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d109      	bne.n	8009ae4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009ad0:	4b6d      	ldr	r3, [pc, #436]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2bf0      	cmp	r3, #240	; 0xf0
 8009adc:	d902      	bls.n	8009ae4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009ae4:	7ffb      	ldrb	r3, [r7, #31]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d05d      	beq.n	8009ba6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009af4:	f000 fc5a 	bl	800a3ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d010      	beq.n	8009b20 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009afe:	4b65      	ldr	r3, [pc, #404]	; (8009c94 <tcp_slowtmr+0x500>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d106      	bne.n	8009b16 <tcp_slowtmr+0x382>
 8009b08:	4b63      	ldr	r3, [pc, #396]	; (8009c98 <tcp_slowtmr+0x504>)
 8009b0a:	f240 4289 	movw	r2, #1161	; 0x489
 8009b0e:	4963      	ldr	r1, [pc, #396]	; (8009c9c <tcp_slowtmr+0x508>)
 8009b10:	4863      	ldr	r0, [pc, #396]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009b12:	f00c f963 	bl	8015ddc <iprintf>
        prev->next = pcb->next;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e00f      	b.n	8009b40 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009b20:	4b5c      	ldr	r3, [pc, #368]	; (8009c94 <tcp_slowtmr+0x500>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d006      	beq.n	8009b38 <tcp_slowtmr+0x3a4>
 8009b2a:	4b5b      	ldr	r3, [pc, #364]	; (8009c98 <tcp_slowtmr+0x504>)
 8009b2c:	f240 428d 	movw	r2, #1165	; 0x48d
 8009b30:	495c      	ldr	r1, [pc, #368]	; (8009ca4 <tcp_slowtmr+0x510>)
 8009b32:	485b      	ldr	r0, [pc, #364]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009b34:	f00c f952 	bl	8015ddc <iprintf>
        tcp_active_pcbs = pcb->next;
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4a55      	ldr	r2, [pc, #340]	; (8009c94 <tcp_slowtmr+0x500>)
 8009b3e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009b40:	7fbb      	ldrb	r3, [r7, #30]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d010      	beq.n	8009b68 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	1d1d      	adds	r5, r3, #4
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	8adb      	ldrh	r3, [r3, #22]
 8009b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5a:	8b12      	ldrh	r2, [r2, #24]
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462b      	mov	r3, r5
 8009b62:	4622      	mov	r2, r4
 8009b64:	f004 f8ee 	bl	800dd44 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	7d1b      	ldrb	r3, [r3, #20]
 8009b72:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	2001      	movs	r0, #1
 8009b82:	f7fe f98f 	bl	8007ea4 <memp_free>

      tcp_active_pcbs_changed = 0;
 8009b86:	4b48      	ldr	r3, [pc, #288]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <tcp_slowtmr+0x408>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f06f 010c 	mvn.w	r1, #12
 8009b98:	68b8      	ldr	r0, [r7, #8]
 8009b9a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009b9c:	4b42      	ldr	r3, [pc, #264]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d035      	beq.n	8009c10 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8009ba4:	e606      	b.n	80097b4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	7edb      	ldrb	r3, [r3, #27]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	7eda      	ldrb	r2, [r3, #27]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	7f1b      	ldrb	r3, [r3, #28]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d323      	bcc.n	8009c10 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009bce:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <tcp_slowtmr+0x460>
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be4:	6a3a      	ldr	r2, [r7, #32]
 8009be6:	6912      	ldr	r2, [r2, #16]
 8009be8:	6a39      	ldr	r1, [r7, #32]
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3
 8009bee:	4603      	mov	r3, r0
 8009bf0:	777b      	strb	r3, [r7, #29]
 8009bf2:	e001      	b.n	8009bf8 <tcp_slowtmr+0x464>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <tcp_slowtmr+0x514>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d000      	beq.n	8009c02 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8009c00:	e5d8      	b.n	80097b4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009c02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8009c0a:	6a38      	ldr	r0, [r7, #32]
 8009c0c:	f003 fe10 	bl	800d830 <tcp_output>
  while (pcb != NULL) {
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f47f add4 	bne.w	80097c0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8009c1c:	4b23      	ldr	r3, [pc, #140]	; (8009cac <tcp_slowtmr+0x518>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009c22:	e068      	b.n	8009cf6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	7d1b      	ldrb	r3, [r3, #20]
 8009c28:	2b0a      	cmp	r3, #10
 8009c2a:	d006      	beq.n	8009c3a <tcp_slowtmr+0x4a6>
 8009c2c:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <tcp_slowtmr+0x504>)
 8009c2e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8009c32:	491f      	ldr	r1, [pc, #124]	; (8009cb0 <tcp_slowtmr+0x51c>)
 8009c34:	481a      	ldr	r0, [pc, #104]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009c36:	f00c f8d1 	bl	8015ddc <iprintf>
    pcb_remove = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <tcp_slowtmr+0x4f4>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2bf0      	cmp	r3, #240	; 0xf0
 8009c4a:	d902      	bls.n	8009c52 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8009c4c:	7ffb      	ldrb	r3, [r7, #31]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009c52:	7ffb      	ldrb	r3, [r7, #31]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d049      	beq.n	8009cec <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c5a:	f000 fba7 	bl	800a3ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <tcp_slowtmr+0x518>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d106      	bne.n	8009c7c <tcp_slowtmr+0x4e8>
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <tcp_slowtmr+0x504>)
 8009c70:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8009c74:	490f      	ldr	r1, [pc, #60]	; (8009cb4 <tcp_slowtmr+0x520>)
 8009c76:	480a      	ldr	r0, [pc, #40]	; (8009ca0 <tcp_slowtmr+0x50c>)
 8009c78:	f00c f8b0 	bl	8015ddc <iprintf>
        prev->next = pcb->next;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	60da      	str	r2, [r3, #12]
 8009c84:	e028      	b.n	8009cd8 <tcp_slowtmr+0x544>
 8009c86:	bf00      	nop
 8009c88:	20007224 	.word	0x20007224
 8009c8c:	000124f8 	.word	0x000124f8
 8009c90:	10624dd3 	.word	0x10624dd3
 8009c94:	20007220 	.word	0x20007220
 8009c98:	08018ce4 	.word	0x08018ce4
 8009c9c:	08018f1c 	.word	0x08018f1c
 8009ca0:	08018d20 	.word	0x08018d20
 8009ca4:	08018f48 	.word	0x08018f48
 8009ca8:	2000721c 	.word	0x2000721c
 8009cac:	20007230 	.word	0x20007230
 8009cb0:	08018f74 	.word	0x08018f74
 8009cb4:	08018fa4 	.word	0x08018fa4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009cb8:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <tcp_slowtmr+0x570>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d006      	beq.n	8009cd0 <tcp_slowtmr+0x53c>
 8009cc2:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <tcp_slowtmr+0x574>)
 8009cc4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009cc8:	4910      	ldr	r1, [pc, #64]	; (8009d0c <tcp_slowtmr+0x578>)
 8009cca:	4811      	ldr	r0, [pc, #68]	; (8009d10 <tcp_slowtmr+0x57c>)
 8009ccc:	f00c f886 	bl	8015ddc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	4a0b      	ldr	r2, [pc, #44]	; (8009d04 <tcp_slowtmr+0x570>)
 8009cd6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009ce2:	69b9      	ldr	r1, [r7, #24]
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	f7fe f8dd 	bl	8007ea4 <memp_free>
 8009cea:	e004      	b.n	8009cf6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d193      	bne.n	8009c24 <tcp_slowtmr+0x490>
    }
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3728      	adds	r7, #40	; 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bdb0      	pop	{r4, r5, r7, pc}
 8009d04:	20007230 	.word	0x20007230
 8009d08:	08018ce4 	.word	0x08018ce4
 8009d0c:	08018fcc 	.word	0x08018fcc
 8009d10:	08018d20 	.word	0x08018d20

08009d14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009d1a:	4b2d      	ldr	r3, [pc, #180]	; (8009dd0 <tcp_fasttmr+0xbc>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	4b2b      	ldr	r3, [pc, #172]	; (8009dd0 <tcp_fasttmr+0xbc>)
 8009d24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009d26:	4b2b      	ldr	r3, [pc, #172]	; (8009dd4 <tcp_fasttmr+0xc0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d2c:	e048      	b.n	8009dc0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7f5a      	ldrb	r2, [r3, #29]
 8009d32:	4b27      	ldr	r3, [pc, #156]	; (8009dd0 <tcp_fasttmr+0xbc>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d03f      	beq.n	8009dba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009d3a:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <tcp_fasttmr+0xbc>)
 8009d3c:	781a      	ldrb	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7e9b      	ldrb	r3, [r3, #26]
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d010      	beq.n	8009d70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7e9b      	ldrb	r3, [r3, #26]
 8009d52:	f043 0302 	orr.w	r3, r3, #2
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 fd67 	bl	800d830 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	7e9b      	ldrb	r3, [r3, #26]
 8009d66:	f023 0303 	bic.w	r3, r3, #3
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7e9b      	ldrb	r3, [r3, #26]
 8009d74:	f003 0308 	and.w	r3, r3, #8
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7e9b      	ldrb	r3, [r3, #26]
 8009d80:	f023 0308 	bic.w	r3, r3, #8
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff f98e 	bl	80090ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <tcp_fasttmr+0xc4>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f819 	bl	8009ddc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009daa:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <tcp_fasttmr+0xc4>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d000      	beq.n	8009db4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009db2:	e7b8      	b.n	8009d26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	e002      	b.n	8009dc0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1b3      	bne.n	8009d2e <tcp_fasttmr+0x1a>
    }
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	2000071e 	.word	0x2000071e
 8009dd4:	20007220 	.word	0x20007220
 8009dd8:	2000721c 	.word	0x2000721c

08009ddc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009ddc:	b590      	push	{r4, r7, lr}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de8:	7b5b      	ldrb	r3, [r3, #13]
 8009dea:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <tcp_process_refused_data+0x3e>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6918      	ldr	r0, [r3, #16]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	47a0      	blx	r4
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
 8009e18:	e007      	b.n	8009e2a <tcp_process_refused_data+0x4e>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	2000      	movs	r0, #0
 8009e22:	f000 f89b 	bl	8009f5c <tcp_recv_null>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d12a      	bne.n	8009e88 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d033      	beq.n	8009ea4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e44:	d005      	beq.n	8009e52 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <tcp_process_refused_data+0x98>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6918      	ldr	r0, [r3, #16]
 8009e66:	2300      	movs	r3, #0
 8009e68:	2200      	movs	r2, #0
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	47a0      	blx	r4
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
 8009e72:	e001      	b.n	8009e78 <tcp_process_refused_data+0x9c>
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e7c:	f113 0f0d 	cmn.w	r3, #13
 8009e80:	d110      	bne.n	8009ea4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8009e82:	f06f 030c 	mvn.w	r3, #12
 8009e86:	e00e      	b.n	8009ea6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8009e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e8c:	f113 0f0d 	cmn.w	r3, #13
 8009e90:	d102      	bne.n	8009e98 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009e92:	f06f 030c 	mvn.w	r3, #12
 8009e96:	e006      	b.n	8009ea6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8009e9e:	f06f 0304 	mvn.w	r3, #4
 8009ea2:	e000      	b.n	8009ea6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd90      	pop	{r4, r7, pc}

08009eae <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009eb6:	e007      	b.n	8009ec8 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f809 	bl	8009ed6 <tcp_seg_free>
    seg = next;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1f4      	bne.n	8009eb8 <tcp_segs_free+0xa>
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00c      	beq.n	8009efe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe fd09 	bl	8008908 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	2003      	movs	r0, #3
 8009efa:	f7fd ffd3 	bl	8007ea4 <memp_free>
  }
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	755a      	strb	r2, [r3, #21]
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009f2c:	2003      	movs	r0, #3
 8009f2e:	f7fd ff6d 	bl	8007e0c <memp_malloc>
 8009f32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <tcp_seg_copy+0x1a>
    return NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e00a      	b.n	8009f54 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009f3e:	2210      	movs	r2, #16
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f00b fadb 	bl	80154fe <memcpy>
  pbuf_ref(cseg->p);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fd87 	bl	8008a60 <pbuf_ref>
  return cseg;
 8009f52:	68fb      	ldr	r3, [r7, #12]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	891b      	ldrh	r3, [r3, #8]
 8009f74:	4619      	mov	r1, r3
 8009f76:	68b8      	ldr	r0, [r7, #8]
 8009f78:	f7ff fb6e 	bl	8009658 <tcp_recved>
    pbuf_free(p);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7fe fcc3 	bl	8008908 <pbuf_free>
 8009f82:	e008      	b.n	8009f96 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8009f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8009f8c:	68b8      	ldr	r0, [r7, #8]
 8009f8e:	f7ff f8f3 	bl	8009178 <tcp_close>
 8009f92:	4603      	mov	r3, r0
 8009f94:	e000      	b.n	8009f98 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	db01      	blt.n	8009fb6 <tcp_kill_prio+0x16>
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	e000      	b.n	8009fb8 <tcp_kill_prio+0x18>
 8009fb6:	237f      	movs	r3, #127	; 0x7f
 8009fb8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fc2:	4b16      	ldr	r3, [pc, #88]	; (800a01c <tcp_kill_prio+0x7c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	e01a      	b.n	800a000 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	7d5b      	ldrb	r3, [r3, #21]
 8009fce:	7afa      	ldrb	r2, [r7, #11]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d312      	bcc.n	8009ffa <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009fd4:	4b12      	ldr	r3, [pc, #72]	; (800a020 <tcp_kill_prio+0x80>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d80a      	bhi.n	8009ffa <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009fe4:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <tcp_kill_prio+0x80>)
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	7d5b      	ldrb	r3, [r3, #21]
 8009ff8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e1      	bne.n	8009fca <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a00c:	6938      	ldr	r0, [r7, #16]
 800a00e:	f7ff f97d 	bl	800930c <tcp_abort>
  }
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20007220 	.word	0x20007220
 800a020:	20007224 	.word	0x20007224

0800a024 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b08      	cmp	r3, #8
 800a032:	d009      	beq.n	800a048 <tcp_kill_state+0x24>
 800a034:	79fb      	ldrb	r3, [r7, #7]
 800a036:	2b09      	cmp	r3, #9
 800a038:	d006      	beq.n	800a048 <tcp_kill_state+0x24>
 800a03a:	4b1a      	ldr	r3, [pc, #104]	; (800a0a4 <tcp_kill_state+0x80>)
 800a03c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a040:	4919      	ldr	r1, [pc, #100]	; (800a0a8 <tcp_kill_state+0x84>)
 800a042:	481a      	ldr	r0, [pc, #104]	; (800a0ac <tcp_kill_state+0x88>)
 800a044:	f00b feca 	bl	8015ddc <iprintf>

  inactivity = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a050:	4b17      	ldr	r3, [pc, #92]	; (800a0b0 <tcp_kill_state+0x8c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	e017      	b.n	800a088 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	7d1b      	ldrb	r3, [r3, #20]
 800a05c:	79fa      	ldrb	r2, [r7, #7]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d10f      	bne.n	800a082 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a062:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <tcp_kill_state+0x90>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d807      	bhi.n	800a082 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a072:	4b10      	ldr	r3, [pc, #64]	; (800a0b4 <tcp_kill_state+0x90>)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1e4      	bne.n	800a058 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a094:	2100      	movs	r1, #0
 800a096:	6938      	ldr	r0, [r7, #16]
 800a098:	f7ff f886 	bl	80091a8 <tcp_abandon>
  }
}
 800a09c:	bf00      	nop
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08018ce4 	.word	0x08018ce4
 800a0a8:	08018ff4 	.word	0x08018ff4
 800a0ac:	08018d20 	.word	0x08018d20
 800a0b0:	20007220 	.word	0x20007220
 800a0b4:	20007224 	.word	0x20007224

0800a0b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0c6:	4b12      	ldr	r3, [pc, #72]	; (800a110 <tcp_kill_timewait+0x58>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e012      	b.n	800a0f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a0ce:	4b11      	ldr	r3, [pc, #68]	; (800a114 <tcp_kill_timewait+0x5c>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d807      	bhi.n	800a0ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a0de:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <tcp_kill_timewait+0x5c>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1e9      	bne.n	800a0ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a100:	68b8      	ldr	r0, [r7, #8]
 800a102:	f7ff f903 	bl	800930c <tcp_abort>
  }
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20007230 	.word	0x20007230
 800a114:	20007224 	.word	0x20007224

0800a118 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a122:	2001      	movs	r0, #1
 800a124:	f7fd fe72 	bl	8007e0c <memp_malloc>
 800a128:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d124      	bne.n	800a17a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a130:	f7ff ffc2 	bl	800a0b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a134:	2001      	movs	r0, #1
 800a136:	f7fd fe69 	bl	8007e0c <memp_malloc>
 800a13a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d11b      	bne.n	800a17a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a142:	2009      	movs	r0, #9
 800a144:	f7ff ff6e 	bl	800a024 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a148:	2001      	movs	r0, #1
 800a14a:	f7fd fe5f 	bl	8007e0c <memp_malloc>
 800a14e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d111      	bne.n	800a17a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a156:	2008      	movs	r0, #8
 800a158:	f7ff ff64 	bl	800a024 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a15c:	2001      	movs	r0, #1
 800a15e:	f7fd fe55 	bl	8007e0c <memp_malloc>
 800a162:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d107      	bne.n	800a17a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff ff17 	bl	8009fa0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a172:	2001      	movs	r0, #1
 800a174:	f7fd fe4a 	bl	8007e0c <memp_malloc>
 800a178:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d03f      	beq.n	800a200 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a180:	2298      	movs	r2, #152	; 0x98
 800a182:	2100      	movs	r1, #0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f00b f9c5 	bl	8015514 <memset>
    pcb->prio = prio;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	79fa      	ldrb	r2, [r7, #7]
 800a18e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	22ff      	movs	r2, #255	; 0xff
 800a1ae:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a1b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2206      	movs	r2, #6
 800a1bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2206      	movs	r2, #6
 800a1c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <tcp_alloc+0xf4>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <tcp_alloc+0xf8>)
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a08      	ldr	r2, [pc, #32]	; (800a214 <tcp_alloc+0xfc>)
 800a1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4a07      	ldr	r2, [pc, #28]	; (800a218 <tcp_alloc+0x100>)
 800a1fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a200:	68fb      	ldr	r3, [r7, #12]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20007224 	.word	0x20007224
 800a210:	2000071e 	.word	0x2000071e
 800a214:	08009f5d 	.word	0x08009f5d
 800a218:	006ddd00 	.word	0x006ddd00

0800a21c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a220:	2040      	movs	r0, #64	; 0x40
 800a222:	f7ff ff79 	bl	800a118 <tcp_alloc>
 800a226:	4603      	mov	r3, r0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a236:	2040      	movs	r0, #64	; 0x40
 800a238:	f7ff ff6e 	bl	800a118 <tcp_alloc>
 800a23c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800a23e:	68fb      	ldr	r3, [r7, #12]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	611a      	str	r2, [r3, #16]
  }
}
 800a25e:	bf00      	nop
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00e      	beq.n	800a29a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7d1b      	ldrb	r3, [r3, #20]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d106      	bne.n	800a292 <tcp_recv+0x26>
 800a284:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <tcp_recv+0x38>)
 800a286:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800a28a:	4907      	ldr	r1, [pc, #28]	; (800a2a8 <tcp_recv+0x3c>)
 800a28c:	4807      	ldr	r0, [pc, #28]	; (800a2ac <tcp_recv+0x40>)
 800a28e:	f00b fda5 	bl	8015ddc <iprintf>
    pcb->recv = recv;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	08018ce4 	.word	0x08018ce4
 800a2a8:	08019004 	.word	0x08019004
 800a2ac:	08018d20 	.word	0x08018d20

0800a2b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00d      	beq.n	800a2dc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7d1b      	ldrb	r3, [r3, #20]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d106      	bne.n	800a2d6 <tcp_sent+0x26>
 800a2c8:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <tcp_sent+0x34>)
 800a2ca:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800a2ce:	4906      	ldr	r1, [pc, #24]	; (800a2e8 <tcp_sent+0x38>)
 800a2d0:	4806      	ldr	r0, [pc, #24]	; (800a2ec <tcp_sent+0x3c>)
 800a2d2:	f00b fd83 	bl	8015ddc <iprintf>
    pcb->sent = sent;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	08018ce4 	.word	0x08018ce4
 800a2e8:	0801902c 	.word	0x0801902c
 800a2ec:	08018d20 	.word	0x08018d20

0800a2f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7d1b      	ldrb	r3, [r3, #20]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d106      	bne.n	800a316 <tcp_err+0x26>
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <tcp_err+0x38>)
 800a30a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800a30e:	4907      	ldr	r1, [pc, #28]	; (800a32c <tcp_err+0x3c>)
 800a310:	4807      	ldr	r0, [pc, #28]	; (800a330 <tcp_err+0x40>)
 800a312:	f00b fd63 	bl	8015ddc <iprintf>
    pcb->errf = err;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	08018ce4 	.word	0x08018ce4
 800a32c:	08019054 	.word	0x08019054
 800a330:	08018d20 	.word	0x08018d20

0800a334 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d008      	beq.n	800a356 <tcp_accept+0x22>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7d1b      	ldrb	r3, [r3, #20]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d104      	bne.n	800a356 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	619a      	str	r2, [r3, #24]
  }
}
 800a356:	bf00      	nop
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
	...

0800a364 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	7d1b      	ldrb	r3, [r3, #20]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d106      	bne.n	800a388 <tcp_poll+0x24>
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <tcp_poll+0x3c>)
 800a37c:	f240 7203 	movw	r2, #1795	; 0x703
 800a380:	4908      	ldr	r1, [pc, #32]	; (800a3a4 <tcp_poll+0x40>)
 800a382:	4809      	ldr	r0, [pc, #36]	; (800a3a8 <tcp_poll+0x44>)
 800a384:	f00b fd2a 	bl	8015ddc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	79fa      	ldrb	r2, [r7, #7]
 800a394:	771a      	strb	r2, [r3, #28]
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	08018ce4 	.word	0x08018ce4
 800a3a4:	0801907c 	.word	0x0801907c
 800a3a8:	08018d20 	.word	0x08018d20

0800a3ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7d1b      	ldrb	r3, [r3, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d034      	beq.n	800a426 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a3c0:	2b0a      	cmp	r3, #10
 800a3c2:	d030      	beq.n	800a426 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d02c      	beq.n	800a426 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d007      	beq.n	800a3e4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fa95 	bl	8008908 <pbuf_free>
      pcb->refused_data = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fd60 	bl	8009eae <tcp_segs_free>
    pcb->ooseq = NULL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3fa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fd54 	bl	8009eae <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fd4f 	bl	8009eae <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	669a      	str	r2, [r3, #104]	; 0x68
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800a426:	bf00      	nop
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	429a      	cmp	r2, r3
 800a442:	d105      	bne.n	800a450 <tcp_pcb_remove+0x20>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e013      	b.n	800a478 <tcp_pcb_remove+0x48>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	e00c      	b.n	800a472 <tcp_pcb_remove+0x42>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d104      	bne.n	800a46c <tcp_pcb_remove+0x3c>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	60da      	str	r2, [r3, #12]
 800a46a:	e005      	b.n	800a478 <tcp_pcb_remove+0x48>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1ef      	bne.n	800a458 <tcp_pcb_remove+0x28>
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2200      	movs	r2, #0
 800a47c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a47e:	6838      	ldr	r0, [r7, #0]
 800a480:	f7ff ff94 	bl	800a3ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	7d1b      	ldrb	r3, [r3, #20]
 800a488:	2b0a      	cmp	r3, #10
 800a48a:	d013      	beq.n	800a4b4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800a490:	2b01      	cmp	r3, #1
 800a492:	d00f      	beq.n	800a4b4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	7e9b      	ldrb	r3, [r3, #26]
 800a498:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d009      	beq.n	800a4b4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	7e9b      	ldrb	r3, [r3, #26]
 800a4a4:	f043 0302 	orr.w	r3, r3, #2
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a4ae:	6838      	ldr	r0, [r7, #0]
 800a4b0:	f003 f9be 	bl	800d830 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	7d1b      	ldrb	r3, [r3, #20]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d020      	beq.n	800a4fe <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d006      	beq.n	800a4d2 <tcp_pcb_remove+0xa2>
 800a4c4:	4b13      	ldr	r3, [pc, #76]	; (800a514 <tcp_pcb_remove+0xe4>)
 800a4c6:	f240 7253 	movw	r2, #1875	; 0x753
 800a4ca:	4913      	ldr	r1, [pc, #76]	; (800a518 <tcp_pcb_remove+0xe8>)
 800a4cc:	4813      	ldr	r0, [pc, #76]	; (800a51c <tcp_pcb_remove+0xec>)
 800a4ce:	f00b fc85 	bl	8015ddc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d006      	beq.n	800a4e8 <tcp_pcb_remove+0xb8>
 800a4da:	4b0e      	ldr	r3, [pc, #56]	; (800a514 <tcp_pcb_remove+0xe4>)
 800a4dc:	f240 7254 	movw	r2, #1876	; 0x754
 800a4e0:	490f      	ldr	r1, [pc, #60]	; (800a520 <tcp_pcb_remove+0xf0>)
 800a4e2:	480e      	ldr	r0, [pc, #56]	; (800a51c <tcp_pcb_remove+0xec>)
 800a4e4:	f00b fc7a 	bl	8015ddc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <tcp_pcb_remove+0xce>
 800a4f0:	4b08      	ldr	r3, [pc, #32]	; (800a514 <tcp_pcb_remove+0xe4>)
 800a4f2:	f240 7256 	movw	r2, #1878	; 0x756
 800a4f6:	490b      	ldr	r1, [pc, #44]	; (800a524 <tcp_pcb_remove+0xf4>)
 800a4f8:	4808      	ldr	r0, [pc, #32]	; (800a51c <tcp_pcb_remove+0xec>)
 800a4fa:	f00b fc6f 	bl	8015ddc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2200      	movs	r2, #0
 800a502:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2200      	movs	r2, #0
 800a508:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	08018ce4 	.word	0x08018ce4
 800a518:	0801909c 	.word	0x0801909c
 800a51c:	08018d20 	.word	0x08018d20
 800a520:	080190b4 	.word	0x080190b4
 800a524:	080190d0 	.word	0x080190d0

0800a528 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <tcp_next_iss+0x28>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	4b07      	ldr	r3, [pc, #28]	; (800a554 <tcp_next_iss+0x2c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4413      	add	r3, r2
 800a53a:	4a05      	ldr	r2, [pc, #20]	; (800a550 <tcp_next_iss+0x28>)
 800a53c:	6013      	str	r3, [r2, #0]
  return iss;
 800a53e:	4b04      	ldr	r3, [pc, #16]	; (800a550 <tcp_next_iss+0x28>)
 800a540:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000008 	.word	0x20000008
 800a554:	20007224 	.word	0x20007224

0800a558 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800a564:	6838      	ldr	r0, [r7, #0]
 800a566:	f007 fa79 	bl	8011a5c <ip4_route>
 800a56a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800a572:	88fb      	ldrh	r3, [r7, #6]
 800a574:	e010      	b.n	800a598 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a57a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a57c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800a584:	897b      	ldrh	r3, [r7, #10]
 800a586:	3b28      	subs	r3, #40	; 0x28
 800a588:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a58a:	893a      	ldrh	r2, [r7, #8]
 800a58c:	88fb      	ldrh	r3, [r7, #6]
 800a58e:	4293      	cmp	r3, r2
 800a590:	bf28      	it	cs
 800a592:	4613      	movcs	r3, r2
 800a594:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800a596:	88fb      	ldrh	r3, [r7, #6]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a5ae:	e011      	b.n	800a5d4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d108      	bne.n	800a5ce <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f7fe fea2 	bl	800930c <tcp_abort>
      pcb = next;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	e002      	b.n	800a5d4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1ea      	bne.n	800a5b0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800a5da:	bf00      	nop
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02c      	beq.n	800a64e <tcp_netif_ip_addr_changed+0x6a>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d028      	beq.n	800a64e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a5fc:	4b16      	ldr	r3, [pc, #88]	; (800a658 <tcp_netif_ip_addr_changed+0x74>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff ffcc 	bl	800a5a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a608:	4b14      	ldr	r3, [pc, #80]	; (800a65c <tcp_netif_ip_addr_changed+0x78>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff ffc6 	bl	800a5a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d019      	beq.n	800a64e <tcp_netif_ip_addr_changed+0x6a>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d015      	beq.n	800a64e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a622:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <tcp_netif_ip_addr_changed+0x7c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	e00e      	b.n	800a648 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d103      	bne.n	800a644 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1ed      	bne.n	800a62a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20007220 	.word	0x20007220
 800a65c:	2000722c 	.word	0x2000722c
 800a660:	20007228 	.word	0x20007228

0800a664 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a664:	b590      	push	{r4, r7, lr}
 800a666:	b08b      	sub	sp, #44	; 0x2c
 800a668:	af02      	add	r7, sp, #8
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	4a82      	ldr	r2, [pc, #520]	; (800a87c <tcp_input+0x218>)
 800a674:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	895b      	ldrh	r3, [r3, #10]
 800a67a:	2b13      	cmp	r3, #19
 800a67c:	f240 838a 	bls.w	800ad94 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a680:	4b7f      	ldr	r3, [pc, #508]	; (800a880 <tcp_input+0x21c>)
 800a682:	695a      	ldr	r2, [r3, #20]
 800a684:	4b7e      	ldr	r3, [pc, #504]	; (800a880 <tcp_input+0x21c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4619      	mov	r1, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f007 fc7e 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	f040 8380 	bne.w	800ad98 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a698:	4b79      	ldr	r3, [pc, #484]	; (800a880 <tcp_input+0x21c>)
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a6a0:	2be0      	cmp	r3, #224	; 0xe0
 800a6a2:	f000 8379 	beq.w	800ad98 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800a6a6:	4b75      	ldr	r3, [pc, #468]	; (800a87c <tcp_input+0x218>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	899b      	ldrh	r3, [r3, #12]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fc ff94 	bl	80075dc <lwip_htons>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	0b1b      	lsrs	r3, r3, #12
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a6c0:	7cbb      	ldrb	r3, [r7, #18]
 800a6c2:	2b13      	cmp	r3, #19
 800a6c4:	f240 8368 	bls.w	800ad98 <tcp_input+0x734>
 800a6c8:	7cbb      	ldrb	r3, [r7, #18]
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	891b      	ldrh	r3, [r3, #8]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	f200 8361 	bhi.w	800ad98 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800a6d6:	7cbb      	ldrb	r3, [r7, #18]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3b14      	subs	r3, #20
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	4b69      	ldr	r3, [pc, #420]	; (800a884 <tcp_input+0x220>)
 800a6e0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a6e2:	4b69      	ldr	r3, [pc, #420]	; (800a888 <tcp_input+0x224>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	895a      	ldrh	r2, [r3, #10]
 800a6ec:	7cbb      	ldrb	r3, [r7, #18]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d30d      	bcc.n	800a710 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a6f4:	4b63      	ldr	r3, [pc, #396]	; (800a884 <tcp_input+0x220>)
 800a6f6:	881a      	ldrh	r2, [r3, #0]
 800a6f8:	4b64      	ldr	r3, [pc, #400]	; (800a88c <tcp_input+0x228>)
 800a6fa:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800a6fc:	7cbb      	ldrb	r3, [r7, #18]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	425b      	negs	r3, r3
 800a702:	b29b      	uxth	r3, r3
 800a704:	b21b      	sxth	r3, r3
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7fe f8d9 	bl	80088c0 <pbuf_header>
 800a70e:	e055      	b.n	800a7bc <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d105      	bne.n	800a724 <tcp_input+0xc0>
 800a718:	4b5d      	ldr	r3, [pc, #372]	; (800a890 <tcp_input+0x22c>)
 800a71a:	22b2      	movs	r2, #178	; 0xb2
 800a71c:	495d      	ldr	r1, [pc, #372]	; (800a894 <tcp_input+0x230>)
 800a71e:	485e      	ldr	r0, [pc, #376]	; (800a898 <tcp_input+0x234>)
 800a720:	f00b fb5c 	bl	8015ddc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800a724:	f06f 0113 	mvn.w	r1, #19
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7fe f8c9 	bl	80088c0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	895a      	ldrh	r2, [r3, #10]
 800a732:	4b56      	ldr	r3, [pc, #344]	; (800a88c <tcp_input+0x228>)
 800a734:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800a736:	4b53      	ldr	r3, [pc, #332]	; (800a884 <tcp_input+0x220>)
 800a738:	881a      	ldrh	r2, [r3, #0]
 800a73a:	4b54      	ldr	r3, [pc, #336]	; (800a88c <tcp_input+0x228>)
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a742:	4b52      	ldr	r3, [pc, #328]	; (800a88c <tcp_input+0x228>)
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	425b      	negs	r3, r3
 800a748:	b29b      	uxth	r3, r3
 800a74a:	b21b      	sxth	r3, r3
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7fe f8b6 	bl	80088c0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	895b      	ldrh	r3, [r3, #10]
 800a75a:	8a3a      	ldrh	r2, [r7, #16]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	f200 831d 	bhi.w	800ad9c <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	4a47      	ldr	r2, [pc, #284]	; (800a888 <tcp_input+0x224>)
 800a76a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	8a3b      	ldrh	r3, [r7, #16]
 800a772:	425b      	negs	r3, r3
 800a774:	b29b      	uxth	r3, r3
 800a776:	b21b      	sxth	r3, r3
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f7fe f8a0 	bl	80088c0 <pbuf_header>
    p->tot_len -= opt2len;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	891a      	ldrh	r2, [r3, #8]
 800a784:	8a3b      	ldrh	r3, [r7, #16]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	b29a      	uxth	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	895b      	ldrh	r3, [r3, #10]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d005      	beq.n	800a7a2 <tcp_input+0x13e>
 800a796:	4b3e      	ldr	r3, [pc, #248]	; (800a890 <tcp_input+0x22c>)
 800a798:	22cf      	movs	r2, #207	; 0xcf
 800a79a:	4940      	ldr	r1, [pc, #256]	; (800a89c <tcp_input+0x238>)
 800a79c:	483e      	ldr	r0, [pc, #248]	; (800a898 <tcp_input+0x234>)
 800a79e:	f00b fb1d 	bl	8015ddc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	891a      	ldrh	r2, [r3, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	891b      	ldrh	r3, [r3, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d005      	beq.n	800a7bc <tcp_input+0x158>
 800a7b0:	4b37      	ldr	r3, [pc, #220]	; (800a890 <tcp_input+0x22c>)
 800a7b2:	22d0      	movs	r2, #208	; 0xd0
 800a7b4:	493a      	ldr	r1, [pc, #232]	; (800a8a0 <tcp_input+0x23c>)
 800a7b6:	4838      	ldr	r0, [pc, #224]	; (800a898 <tcp_input+0x234>)
 800a7b8:	f00b fb10 	bl	8015ddc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a7bc:	4b2f      	ldr	r3, [pc, #188]	; (800a87c <tcp_input+0x218>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <tcp_input+0x218>)
 800a7c6:	681c      	ldr	r4, [r3, #0]
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7fc ff07 	bl	80075dc <lwip_htons>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a7d2:	4b2a      	ldr	r3, [pc, #168]	; (800a87c <tcp_input+0x218>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	885b      	ldrh	r3, [r3, #2]
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	4b28      	ldr	r3, [pc, #160]	; (800a87c <tcp_input+0x218>)
 800a7dc:	681c      	ldr	r4, [r3, #0]
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f7fc fefc 	bl	80075dc <lwip_htons>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a7e8:	4b24      	ldr	r3, [pc, #144]	; (800a87c <tcp_input+0x218>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	4b23      	ldr	r3, [pc, #140]	; (800a87c <tcp_input+0x218>)
 800a7f0:	681c      	ldr	r4, [r3, #0]
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fc ff00 	bl	80075f8 <lwip_htonl>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	6063      	str	r3, [r4, #4]
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	4a29      	ldr	r2, [pc, #164]	; (800a8a4 <tcp_input+0x240>)
 800a800:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a802:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <tcp_input+0x218>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	4b1c      	ldr	r3, [pc, #112]	; (800a87c <tcp_input+0x218>)
 800a80a:	681c      	ldr	r4, [r3, #0]
 800a80c:	4610      	mov	r0, r2
 800a80e:	f7fc fef3 	bl	80075f8 <lwip_htonl>
 800a812:	4603      	mov	r3, r0
 800a814:	60a3      	str	r3, [r4, #8]
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	4a23      	ldr	r2, [pc, #140]	; (800a8a8 <tcp_input+0x244>)
 800a81a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a81c:	4b17      	ldr	r3, [pc, #92]	; (800a87c <tcp_input+0x218>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	89db      	ldrh	r3, [r3, #14]
 800a822:	b29a      	uxth	r2, r3
 800a824:	4b15      	ldr	r3, [pc, #84]	; (800a87c <tcp_input+0x218>)
 800a826:	681c      	ldr	r4, [r3, #0]
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fc fed7 	bl	80075dc <lwip_htons>
 800a82e:	4603      	mov	r3, r0
 800a830:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a832:	4b12      	ldr	r3, [pc, #72]	; (800a87c <tcp_input+0x218>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	899b      	ldrh	r3, [r3, #12]
 800a838:	b29b      	uxth	r3, r3
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fc fece 	bl	80075dc <lwip_htons>
 800a840:	4603      	mov	r3, r0
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	4b18      	ldr	r3, [pc, #96]	; (800a8ac <tcp_input+0x248>)
 800a84c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	891a      	ldrh	r2, [r3, #8]
 800a852:	4b16      	ldr	r3, [pc, #88]	; (800a8ac <tcp_input+0x248>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bf14      	ite	ne
 800a85e:	2301      	movne	r3, #1
 800a860:	2300      	moveq	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	b29b      	uxth	r3, r3
 800a866:	4413      	add	r3, r2
 800a868:	b29a      	uxth	r2, r3
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <tcp_input+0x24c>)
 800a86c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a872:	4b10      	ldr	r3, [pc, #64]	; (800a8b4 <tcp_input+0x250>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	61fb      	str	r3, [r7, #28]
 800a878:	e082      	b.n	800a980 <tcp_input+0x31c>
 800a87a:	bf00      	nop
 800a87c:	20000730 	.word	0x20000730
 800a880:	20000938 	.word	0x20000938
 800a884:	20000734 	.word	0x20000734
 800a888:	20000738 	.word	0x20000738
 800a88c:	20000736 	.word	0x20000736
 800a890:	080190e8 	.word	0x080190e8
 800a894:	0801911c 	.word	0x0801911c
 800a898:	0801912c 	.word	0x0801912c
 800a89c:	08019154 	.word	0x08019154
 800a8a0:	08019160 	.word	0x08019160
 800a8a4:	20000740 	.word	0x20000740
 800a8a8:	20000744 	.word	0x20000744
 800a8ac:	2000074c 	.word	0x2000074c
 800a8b0:	2000074a 	.word	0x2000074a
 800a8b4:	20007220 	.word	0x20007220
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	7d1b      	ldrb	r3, [r3, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d105      	bne.n	800a8cc <tcp_input+0x268>
 800a8c0:	4b8f      	ldr	r3, [pc, #572]	; (800ab00 <tcp_input+0x49c>)
 800a8c2:	22e2      	movs	r2, #226	; 0xe2
 800a8c4:	498f      	ldr	r1, [pc, #572]	; (800ab04 <tcp_input+0x4a0>)
 800a8c6:	4890      	ldr	r0, [pc, #576]	; (800ab08 <tcp_input+0x4a4>)
 800a8c8:	f00b fa88 	bl	8015ddc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	7d1b      	ldrb	r3, [r3, #20]
 800a8d0:	2b0a      	cmp	r3, #10
 800a8d2:	d105      	bne.n	800a8e0 <tcp_input+0x27c>
 800a8d4:	4b8a      	ldr	r3, [pc, #552]	; (800ab00 <tcp_input+0x49c>)
 800a8d6:	22e3      	movs	r2, #227	; 0xe3
 800a8d8:	498c      	ldr	r1, [pc, #560]	; (800ab0c <tcp_input+0x4a8>)
 800a8da:	488b      	ldr	r0, [pc, #556]	; (800ab08 <tcp_input+0x4a4>)
 800a8dc:	f00b fa7e 	bl	8015ddc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	7d1b      	ldrb	r3, [r3, #20]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d105      	bne.n	800a8f4 <tcp_input+0x290>
 800a8e8:	4b85      	ldr	r3, [pc, #532]	; (800ab00 <tcp_input+0x49c>)
 800a8ea:	22e4      	movs	r2, #228	; 0xe4
 800a8ec:	4988      	ldr	r1, [pc, #544]	; (800ab10 <tcp_input+0x4ac>)
 800a8ee:	4886      	ldr	r0, [pc, #536]	; (800ab08 <tcp_input+0x4a4>)
 800a8f0:	f00b fa74 	bl	8015ddc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	8b1a      	ldrh	r2, [r3, #24]
 800a8f8:	4b86      	ldr	r3, [pc, #536]	; (800ab14 <tcp_input+0x4b0>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	429a      	cmp	r2, r3
 800a902:	d138      	bne.n	800a976 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	8ada      	ldrh	r2, [r3, #22]
 800a908:	4b82      	ldr	r3, [pc, #520]	; (800ab14 <tcp_input+0x4b0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	885b      	ldrh	r3, [r3, #2]
 800a90e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a910:	429a      	cmp	r2, r3
 800a912:	d130      	bne.n	800a976 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	685a      	ldr	r2, [r3, #4]
 800a918:	4b7f      	ldr	r3, [pc, #508]	; (800ab18 <tcp_input+0x4b4>)
 800a91a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d12a      	bne.n	800a976 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	4b7c      	ldr	r3, [pc, #496]	; (800ab18 <tcp_input+0x4b4>)
 800a926:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a928:	429a      	cmp	r2, r3
 800a92a:	d124      	bne.n	800a976 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	429a      	cmp	r2, r3
 800a934:	d105      	bne.n	800a942 <tcp_input+0x2de>
 800a936:	4b72      	ldr	r3, [pc, #456]	; (800ab00 <tcp_input+0x49c>)
 800a938:	22ec      	movs	r2, #236	; 0xec
 800a93a:	4978      	ldr	r1, [pc, #480]	; (800ab1c <tcp_input+0x4b8>)
 800a93c:	4872      	ldr	r0, [pc, #456]	; (800ab08 <tcp_input+0x4a4>)
 800a93e:	f00b fa4d 	bl	8015ddc <iprintf>
      if (prev != NULL) {
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00a      	beq.n	800a95e <tcp_input+0x2fa>
        prev->next = pcb->next;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a950:	4b73      	ldr	r3, [pc, #460]	; (800ab20 <tcp_input+0x4bc>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a958:	4a71      	ldr	r2, [pc, #452]	; (800ab20 <tcp_input+0x4bc>)
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	69fa      	ldr	r2, [r7, #28]
 800a964:	429a      	cmp	r2, r3
 800a966:	d10f      	bne.n	800a988 <tcp_input+0x324>
 800a968:	4b65      	ldr	r3, [pc, #404]	; (800ab00 <tcp_input+0x49c>)
 800a96a:	22f4      	movs	r2, #244	; 0xf4
 800a96c:	496d      	ldr	r1, [pc, #436]	; (800ab24 <tcp_input+0x4c0>)
 800a96e:	4866      	ldr	r0, [pc, #408]	; (800ab08 <tcp_input+0x4a4>)
 800a970:	f00b fa34 	bl	8015ddc <iprintf>
      break;
 800a974:	e008      	b.n	800a988 <tcp_input+0x324>
    }
    prev = pcb;
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d198      	bne.n	800a8b8 <tcp_input+0x254>
 800a986:	e000      	b.n	800a98a <tcp_input+0x326>
      break;
 800a988:	bf00      	nop
  }

  if (pcb == NULL) {
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d173      	bne.n	800aa78 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a990:	4b65      	ldr	r3, [pc, #404]	; (800ab28 <tcp_input+0x4c4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	61fb      	str	r3, [r7, #28]
 800a996:	e02f      	b.n	800a9f8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	7d1b      	ldrb	r3, [r3, #20]
 800a99c:	2b0a      	cmp	r3, #10
 800a99e:	d005      	beq.n	800a9ac <tcp_input+0x348>
 800a9a0:	4b57      	ldr	r3, [pc, #348]	; (800ab00 <tcp_input+0x49c>)
 800a9a2:	22fe      	movs	r2, #254	; 0xfe
 800a9a4:	4961      	ldr	r1, [pc, #388]	; (800ab2c <tcp_input+0x4c8>)
 800a9a6:	4858      	ldr	r0, [pc, #352]	; (800ab08 <tcp_input+0x4a4>)
 800a9a8:	f00b fa18 	bl	8015ddc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	8b1a      	ldrh	r2, [r3, #24]
 800a9b0:	4b58      	ldr	r3, [pc, #352]	; (800ab14 <tcp_input+0x4b0>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d11a      	bne.n	800a9f2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	8ada      	ldrh	r2, [r3, #22]
 800a9c0:	4b54      	ldr	r3, [pc, #336]	; (800ab14 <tcp_input+0x4b0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	885b      	ldrh	r3, [r3, #2]
 800a9c6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d112      	bne.n	800a9f2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	4b51      	ldr	r3, [pc, #324]	; (800ab18 <tcp_input+0x4b4>)
 800a9d2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d10c      	bne.n	800a9f2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	4b4e      	ldr	r3, [pc, #312]	; (800ab18 <tcp_input+0x4b4>)
 800a9de:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d106      	bne.n	800a9f2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800a9e4:	69f8      	ldr	r0, [r7, #28]
 800a9e6:	f000 fb15 	bl	800b014 <tcp_timewait_input>
        pbuf_free(p);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7fd ff8c 	bl	8008908 <pbuf_free>
        return;
 800a9f0:	e1da      	b.n	800ada8 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	61fb      	str	r3, [r7, #28]
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1cc      	bne.n	800a998 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa02:	4b4b      	ldr	r3, [pc, #300]	; (800ab30 <tcp_input+0x4cc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	e019      	b.n	800aa3e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	8ada      	ldrh	r2, [r3, #22]
 800aa0e:	4b41      	ldr	r3, [pc, #260]	; (800ab14 <tcp_input+0x4b0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	885b      	ldrh	r3, [r3, #2]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d10c      	bne.n	800aa34 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b3e      	ldr	r3, [pc, #248]	; (800ab18 <tcp_input+0x4b4>)
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d00f      	beq.n	800aa46 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00d      	beq.n	800aa48 <tcp_input+0x3e4>
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d009      	beq.n	800aa48 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e2      	bne.n	800aa0a <tcp_input+0x3a6>
 800aa44:	e000      	b.n	800aa48 <tcp_input+0x3e4>
            break;
 800aa46:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d014      	beq.n	800aa78 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa5c:	4b34      	ldr	r3, [pc, #208]	; (800ab30 <tcp_input+0x4cc>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa64:	4a32      	ldr	r2, [pc, #200]	; (800ab30 <tcp_input+0x4cc>)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800aa6a:	6978      	ldr	r0, [r7, #20]
 800aa6c:	f000 f9f0 	bl	800ae50 <tcp_listen_input>
      pbuf_free(p);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7fd ff49 	bl	8008908 <pbuf_free>
      return;
 800aa76:	e197      	b.n	800ada8 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 8164 	beq.w	800ad48 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aa80:	4b2c      	ldr	r3, [pc, #176]	; (800ab34 <tcp_input+0x4d0>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	891a      	ldrh	r2, [r3, #8]
 800aa8a:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <tcp_input+0x4d0>)
 800aa8c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aa8e:	4a29      	ldr	r2, [pc, #164]	; (800ab34 <tcp_input+0x4d0>)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800aa94:	4b1f      	ldr	r3, [pc, #124]	; (800ab14 <tcp_input+0x4b0>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a26      	ldr	r2, [pc, #152]	; (800ab34 <tcp_input+0x4d0>)
 800aa9a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aa9c:	4b26      	ldr	r3, [pc, #152]	; (800ab38 <tcp_input+0x4d4>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aaa2:	4b26      	ldr	r3, [pc, #152]	; (800ab3c <tcp_input+0x4d8>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aaa8:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <tcp_input+0x4dc>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aaae:	4b25      	ldr	r3, [pc, #148]	; (800ab44 <tcp_input+0x4e0>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	7b5b      	ldrb	r3, [r3, #13]
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d03d      	beq.n	800ab4c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aad0:	69f8      	ldr	r0, [r7, #28]
 800aad2:	f7ff f983 	bl	8009ddc <tcp_process_refused_data>
 800aad6:	4603      	mov	r3, r0
 800aad8:	f113 0f0d 	cmn.w	r3, #13
 800aadc:	d007      	beq.n	800aaee <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d032      	beq.n	800ab4c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aae6:	4b18      	ldr	r3, [pc, #96]	; (800ab48 <tcp_input+0x4e4>)
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02e      	beq.n	800ab4c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f040 8108 	bne.w	800ad08 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aaf8:	69f8      	ldr	r0, [r7, #28]
 800aafa:	f002 fe3d 	bl	800d778 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aafe:	e103      	b.n	800ad08 <tcp_input+0x6a4>
 800ab00:	080190e8 	.word	0x080190e8
 800ab04:	08019180 	.word	0x08019180
 800ab08:	0801912c 	.word	0x0801912c
 800ab0c:	080191a8 	.word	0x080191a8
 800ab10:	080191d4 	.word	0x080191d4
 800ab14:	20000730 	.word	0x20000730
 800ab18:	20000938 	.word	0x20000938
 800ab1c:	080191fc 	.word	0x080191fc
 800ab20:	20007220 	.word	0x20007220
 800ab24:	08019228 	.word	0x08019228
 800ab28:	20007230 	.word	0x20007230
 800ab2c:	08019254 	.word	0x08019254
 800ab30:	20007228 	.word	0x20007228
 800ab34:	20000720 	.word	0x20000720
 800ab38:	20000750 	.word	0x20000750
 800ab3c:	2000074d 	.word	0x2000074d
 800ab40:	20000748 	.word	0x20000748
 800ab44:	2000074c 	.word	0x2000074c
 800ab48:	2000074a 	.word	0x2000074a
      }
    }
    tcp_input_pcb = pcb;
 800ab4c:	4a98      	ldr	r2, [pc, #608]	; (800adb0 <tcp_input+0x74c>)
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ab52:	69f8      	ldr	r0, [r7, #28]
 800ab54:	f000 fac6 	bl	800b0e4 <tcp_process>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ab5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab60:	f113 0f0d 	cmn.w	r3, #13
 800ab64:	f000 80d2 	beq.w	800ad0c <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800ab68:	4b92      	ldr	r3, [pc, #584]	; (800adb4 <tcp_input+0x750>)
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 0308 	and.w	r3, r3, #8
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d016      	beq.n	800aba2 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d008      	beq.n	800ab90 <tcp_input+0x52c>
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab84:	69fa      	ldr	r2, [r7, #28]
 800ab86:	6912      	ldr	r2, [r2, #16]
 800ab88:	f06f 010d 	mvn.w	r1, #13
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ab90:	69f9      	ldr	r1, [r7, #28]
 800ab92:	4889      	ldr	r0, [pc, #548]	; (800adb8 <tcp_input+0x754>)
 800ab94:	f7ff fc4c 	bl	800a430 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800ab98:	69f9      	ldr	r1, [r7, #28]
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	f7fd f982 	bl	8007ea4 <memp_free>
 800aba0:	e0bf      	b.n	800ad22 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aba6:	4b85      	ldr	r3, [pc, #532]	; (800adbc <tcp_input+0x758>)
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d01b      	beq.n	800abe6 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800abae:	4b83      	ldr	r3, [pc, #524]	; (800adbc <tcp_input+0x758>)
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d009      	beq.n	800abd0 <tcp_input+0x56c>
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	6910      	ldr	r0, [r2, #16]
 800abc4:	89fa      	ldrh	r2, [r7, #14]
 800abc6:	69f9      	ldr	r1, [r7, #28]
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	74fb      	strb	r3, [r7, #19]
 800abce:	e001      	b.n	800abd4 <tcp_input+0x570>
 800abd0:	2300      	movs	r3, #0
 800abd2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abd8:	f113 0f0d 	cmn.w	r3, #13
 800abdc:	f000 8098 	beq.w	800ad10 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800abe0:	4b76      	ldr	r3, [pc, #472]	; (800adbc <tcp_input+0x758>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800abe6:	69f8      	ldr	r0, [r7, #28]
 800abe8:	f000 f900 	bl	800adec <tcp_input_delayed_close>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f040 8090 	bne.w	800ad14 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800abf4:	4b72      	ldr	r3, [pc, #456]	; (800adc0 <tcp_input+0x75c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d041      	beq.n	800ac80 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d006      	beq.n	800ac12 <tcp_input+0x5ae>
 800ac04:	4b6f      	ldr	r3, [pc, #444]	; (800adc4 <tcp_input+0x760>)
 800ac06:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800ac0a:	496f      	ldr	r1, [pc, #444]	; (800adc8 <tcp_input+0x764>)
 800ac0c:	486f      	ldr	r0, [pc, #444]	; (800adcc <tcp_input+0x768>)
 800ac0e:	f00b f8e5 	bl	8015ddc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	7e9b      	ldrb	r3, [r3, #26]
 800ac16:	f003 0310 	and.w	r3, r3, #16
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d008      	beq.n	800ac30 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac1e:	4b68      	ldr	r3, [pc, #416]	; (800adc0 <tcp_input+0x75c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fd fe70 	bl	8008908 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac28:	69f8      	ldr	r0, [r7, #28]
 800ac2a:	f7fe fb6f 	bl	800930c <tcp_abort>
            goto aborted;
 800ac2e:	e078      	b.n	800ad22 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <tcp_input+0x5f0>
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	6918      	ldr	r0, [r3, #16]
 800ac44:	4b5e      	ldr	r3, [pc, #376]	; (800adc0 <tcp_input+0x75c>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	69f9      	ldr	r1, [r7, #28]
 800ac4c:	47a0      	blx	r4
 800ac4e:	4603      	mov	r3, r0
 800ac50:	74fb      	strb	r3, [r7, #19]
 800ac52:	e008      	b.n	800ac66 <tcp_input+0x602>
 800ac54:	4b5a      	ldr	r3, [pc, #360]	; (800adc0 <tcp_input+0x75c>)
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	69f9      	ldr	r1, [r7, #28]
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	f7ff f97d 	bl	8009f5c <tcp_recv_null>
 800ac62:	4603      	mov	r3, r0
 800ac64:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ac66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac6a:	f113 0f0d 	cmn.w	r3, #13
 800ac6e:	d053      	beq.n	800ad18 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ac70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d003      	beq.n	800ac80 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ac78:	4b51      	ldr	r3, [pc, #324]	; (800adc0 <tcp_input+0x75c>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ac80:	4b4c      	ldr	r3, [pc, #304]	; (800adb4 <tcp_input+0x750>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d030      	beq.n	800acee <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d009      	beq.n	800aca8 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac98:	7b5a      	ldrb	r2, [r3, #13]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac9e:	f042 0220 	orr.w	r2, r2, #32
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	735a      	strb	r2, [r3, #13]
 800aca6:	e022      	b.n	800acee <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb0:	d005      	beq.n	800acbe <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acb6:	3301      	adds	r3, #1
 800acb8:	b29a      	uxth	r2, r3
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <tcp_input+0x67c>
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	6918      	ldr	r0, [r3, #16]
 800acd2:	2300      	movs	r3, #0
 800acd4:	2200      	movs	r2, #0
 800acd6:	69f9      	ldr	r1, [r7, #28]
 800acd8:	47a0      	blx	r4
 800acda:	4603      	mov	r3, r0
 800acdc:	74fb      	strb	r3, [r7, #19]
 800acde:	e001      	b.n	800ace4 <tcp_input+0x680>
 800ace0:	2300      	movs	r3, #0
 800ace2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ace4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ace8:	f113 0f0d 	cmn.w	r3, #13
 800acec:	d016      	beq.n	800ad1c <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800acee:	4b30      	ldr	r3, [pc, #192]	; (800adb0 <tcp_input+0x74c>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800acf4:	69f8      	ldr	r0, [r7, #28]
 800acf6:	f000 f879 	bl	800adec <tcp_input_delayed_close>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10f      	bne.n	800ad20 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ad00:	69f8      	ldr	r0, [r7, #28]
 800ad02:	f002 fd95 	bl	800d830 <tcp_output>
 800ad06:	e00c      	b.n	800ad22 <tcp_input+0x6be>
        goto aborted;
 800ad08:	bf00      	nop
 800ad0a:	e00a      	b.n	800ad22 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ad0c:	bf00      	nop
 800ad0e:	e008      	b.n	800ad22 <tcp_input+0x6be>
              goto aborted;
 800ad10:	bf00      	nop
 800ad12:	e006      	b.n	800ad22 <tcp_input+0x6be>
          goto aborted;
 800ad14:	bf00      	nop
 800ad16:	e004      	b.n	800ad22 <tcp_input+0x6be>
            goto aborted;
 800ad18:	bf00      	nop
 800ad1a:	e002      	b.n	800ad22 <tcp_input+0x6be>
              goto aborted;
 800ad1c:	bf00      	nop
 800ad1e:	e000      	b.n	800ad22 <tcp_input+0x6be>
          goto aborted;
 800ad20:	bf00      	nop
    tcp_input_pcb = NULL;
 800ad22:	4b23      	ldr	r3, [pc, #140]	; (800adb0 <tcp_input+0x74c>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <tcp_input+0x75c>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ad2e:	4b28      	ldr	r3, [pc, #160]	; (800add0 <tcp_input+0x76c>)
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d037      	beq.n	800ada6 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800ad36:	4b26      	ldr	r3, [pc, #152]	; (800add0 <tcp_input+0x76c>)
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fd fde4 	bl	8008908 <pbuf_free>
      inseg.p = NULL;
 800ad40:	4b23      	ldr	r3, [pc, #140]	; (800add0 <tcp_input+0x76c>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ad46:	e02e      	b.n	800ada6 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ad48:	4b22      	ldr	r3, [pc, #136]	; (800add4 <tcp_input+0x770>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	899b      	ldrh	r3, [r3, #12]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fc fc43 	bl	80075dc <lwip_htons>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d115      	bne.n	800ad8c <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad60:	4b1d      	ldr	r3, [pc, #116]	; (800add8 <tcp_input+0x774>)
 800ad62:	6818      	ldr	r0, [r3, #0]
 800ad64:	4b1d      	ldr	r3, [pc, #116]	; (800addc <tcp_input+0x778>)
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <tcp_input+0x77c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad70:	4b18      	ldr	r3, [pc, #96]	; (800add4 <tcp_input+0x770>)
 800ad72:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad74:	885b      	ldrh	r3, [r3, #2]
 800ad76:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad78:	4a16      	ldr	r2, [pc, #88]	; (800add4 <tcp_input+0x770>)
 800ad7a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7c:	8812      	ldrh	r2, [r2, #0]
 800ad7e:	b292      	uxth	r2, r2
 800ad80:	9201      	str	r2, [sp, #4]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	4b17      	ldr	r3, [pc, #92]	; (800ade4 <tcp_input+0x780>)
 800ad86:	4a18      	ldr	r2, [pc, #96]	; (800ade8 <tcp_input+0x784>)
 800ad88:	f002 ffdc 	bl	800dd44 <tcp_rst>
    pbuf_free(p);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7fd fdbb 	bl	8008908 <pbuf_free>
  return;
 800ad92:	e008      	b.n	800ada6 <tcp_input+0x742>
    goto dropped;
 800ad94:	bf00      	nop
 800ad96:	e002      	b.n	800ad9e <tcp_input+0x73a>
dropped:
 800ad98:	bf00      	nop
 800ad9a:	e000      	b.n	800ad9e <tcp_input+0x73a>
      goto dropped;
 800ad9c:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fd fdb2 	bl	8008908 <pbuf_free>
 800ada4:	e000      	b.n	800ada8 <tcp_input+0x744>
  return;
 800ada6:	bf00      	nop
}
 800ada8:	3724      	adds	r7, #36	; 0x24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd90      	pop	{r4, r7, pc}
 800adae:	bf00      	nop
 800adb0:	20007234 	.word	0x20007234
 800adb4:	2000074d 	.word	0x2000074d
 800adb8:	20007220 	.word	0x20007220
 800adbc:	20000748 	.word	0x20000748
 800adc0:	20000750 	.word	0x20000750
 800adc4:	080190e8 	.word	0x080190e8
 800adc8:	08019284 	.word	0x08019284
 800adcc:	0801912c 	.word	0x0801912c
 800add0:	20000720 	.word	0x20000720
 800add4:	20000730 	.word	0x20000730
 800add8:	20000744 	.word	0x20000744
 800addc:	2000074a 	.word	0x2000074a
 800ade0:	20000740 	.word	0x20000740
 800ade4:	20000948 	.word	0x20000948
 800ade8:	2000094c 	.word	0x2000094c

0800adec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800adf4:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <tcp_input_delayed_close+0x5c>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	f003 0310 	and.w	r3, r3, #16
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01d      	beq.n	800ae3c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7e9b      	ldrb	r3, [r3, #26]
 800ae04:	f003 0310 	and.w	r3, r3, #16
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10d      	bne.n	800ae28 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <tcp_input_delayed_close+0x3c>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6912      	ldr	r2, [r2, #16]
 800ae20:	f06f 010e 	mvn.w	r1, #14
 800ae24:	4610      	mov	r0, r2
 800ae26:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	4808      	ldr	r0, [pc, #32]	; (800ae4c <tcp_input_delayed_close+0x60>)
 800ae2c:	f7ff fb00 	bl	800a430 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	2001      	movs	r0, #1
 800ae34:	f7fd f836 	bl	8007ea4 <memp_free>
    return 1;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000074d 	.word	0x2000074d
 800ae4c:	20007220 	.word	0x20007220

0800ae50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ae58:	4b64      	ldr	r3, [pc, #400]	; (800afec <tcp_listen_input+0x19c>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 80bc 	bne.w	800afde <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ae66:	4b61      	ldr	r3, [pc, #388]	; (800afec <tcp_listen_input+0x19c>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	f003 0310 	and.w	r3, r3, #16
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d016      	beq.n	800aea0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae72:	4b5f      	ldr	r3, [pc, #380]	; (800aff0 <tcp_listen_input+0x1a0>)
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	4b5f      	ldr	r3, [pc, #380]	; (800aff4 <tcp_listen_input+0x1a4>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4b5e      	ldr	r3, [pc, #376]	; (800aff8 <tcp_listen_input+0x1a8>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae82:	4b5e      	ldr	r3, [pc, #376]	; (800affc <tcp_listen_input+0x1ac>)
 800ae84:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae86:	885b      	ldrh	r3, [r3, #2]
 800ae88:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae8a:	4a5c      	ldr	r2, [pc, #368]	; (800affc <tcp_listen_input+0x1ac>)
 800ae8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae8e:	8812      	ldrh	r2, [r2, #0]
 800ae90:	b292      	uxth	r2, r2
 800ae92:	9201      	str	r2, [sp, #4]
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	4b5a      	ldr	r3, [pc, #360]	; (800b000 <tcp_listen_input+0x1b0>)
 800ae98:	4a5a      	ldr	r2, [pc, #360]	; (800b004 <tcp_listen_input+0x1b4>)
 800ae9a:	f002 ff53 	bl	800dd44 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ae9e:	e0a0      	b.n	800afe2 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800aea0:	4b52      	ldr	r3, [pc, #328]	; (800afec <tcp_listen_input+0x19c>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	f003 0302 	and.w	r3, r3, #2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 809a 	beq.w	800afe2 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	7d5b      	ldrb	r3, [r3, #21]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff f930 	bl	800a118 <tcp_alloc>
 800aeb8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d111      	bne.n	800aee4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <tcp_listen_input+0x8e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6910      	ldr	r0, [r2, #16]
 800aed0:	f04f 32ff 	mov.w	r2, #4294967295
 800aed4:	2100      	movs	r1, #0
 800aed6:	4798      	blx	r3
 800aed8:	4603      	mov	r3, r0
 800aeda:	73bb      	strb	r3, [r7, #14]
      return;
 800aedc:	e082      	b.n	800afe4 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aede:	23f0      	movs	r3, #240	; 0xf0
 800aee0:	73bb      	strb	r3, [r7, #14]
      return;
 800aee2:	e07f      	b.n	800afe4 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aee4:	4b48      	ldr	r3, [pc, #288]	; (800b008 <tcp_listen_input+0x1b8>)
 800aee6:	695a      	ldr	r2, [r3, #20]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aeec:	4b46      	ldr	r3, [pc, #280]	; (800b008 <tcp_listen_input+0x1b8>)
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8ada      	ldrh	r2, [r3, #22]
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aefc:	4b3f      	ldr	r3, [pc, #252]	; (800affc <tcp_listen_input+0x1ac>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	b29a      	uxth	r2, r3
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2203      	movs	r2, #3
 800af0c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800af0e:	4b3a      	ldr	r3, [pc, #232]	; (800aff8 <tcp_listen_input+0x1a8>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800af20:	6978      	ldr	r0, [r7, #20]
 800af22:	f7ff fb01 	bl	800a528 <tcp_next_iss>
 800af26:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800af40:	4b2d      	ldr	r3, [pc, #180]	; (800aff8 <tcp_listen_input+0x1a8>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	1e5a      	subs	r2, r3, #1
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	691a      	ldr	r2, [r3, #16]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7a1b      	ldrb	r3, [r3, #8]
 800af5c:	f003 030c 	and.w	r3, r3, #12
 800af60:	b2da      	uxtb	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800af66:	4b29      	ldr	r3, [pc, #164]	; (800b00c <tcp_listen_input+0x1bc>)
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	4a27      	ldr	r2, [pc, #156]	; (800b00c <tcp_listen_input+0x1bc>)
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	f003 f934 	bl	800e1e0 <tcp_timer_needed>
 800af78:	4b25      	ldr	r3, [pc, #148]	; (800b010 <tcp_listen_input+0x1c0>)
 800af7a:	2201      	movs	r2, #1
 800af7c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800af7e:	6978      	ldr	r0, [r7, #20]
 800af80:	f001 fd14 	bl	800c9ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800af84:	4b1d      	ldr	r3, [pc, #116]	; (800affc <tcp_listen_input+0x1ac>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	89db      	ldrh	r3, [r3, #14]
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7ff fad5 	bl	800a558 <tcp_eff_send_mss_impl>
 800afae:	4603      	mov	r3, r0
 800afb0:	461a      	mov	r2, r3
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800afb6:	2112      	movs	r1, #18
 800afb8:	6978      	ldr	r0, [r7, #20]
 800afba:	f002 fae1 	bl	800d580 <tcp_enqueue_flags>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800afc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d004      	beq.n	800afd4 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800afca:	2100      	movs	r1, #0
 800afcc:	6978      	ldr	r0, [r7, #20]
 800afce:	f7fe f8eb 	bl	80091a8 <tcp_abandon>
      return;
 800afd2:	e007      	b.n	800afe4 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800afd4:	6978      	ldr	r0, [r7, #20]
 800afd6:	f002 fc2b 	bl	800d830 <tcp_output>
  return;
 800afda:	bf00      	nop
 800afdc:	e001      	b.n	800afe2 <tcp_listen_input+0x192>
    return;
 800afde:	bf00      	nop
 800afe0:	e000      	b.n	800afe4 <tcp_listen_input+0x194>
  return;
 800afe2:	bf00      	nop
}
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	2000074c 	.word	0x2000074c
 800aff0:	20000744 	.word	0x20000744
 800aff4:	2000074a 	.word	0x2000074a
 800aff8:	20000740 	.word	0x20000740
 800affc:	20000730 	.word	0x20000730
 800b000:	20000948 	.word	0x20000948
 800b004:	2000094c 	.word	0x2000094c
 800b008:	20000938 	.word	0x20000938
 800b00c:	20007220 	.word	0x20007220
 800b010:	2000721c 	.word	0x2000721c

0800b014 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af02      	add	r7, sp, #8
 800b01a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b01c:	4b29      	ldr	r3, [pc, #164]	; (800b0c4 <tcp_timewait_input+0xb0>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b00      	cmp	r3, #0
 800b026:	d147      	bne.n	800b0b8 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b028:	4b26      	ldr	r3, [pc, #152]	; (800b0c4 <tcp_timewait_input+0xb0>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d027      	beq.n	800b084 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b034:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <tcp_timewait_input+0xb4>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	db2a      	blt.n	800b098 <tcp_timewait_input+0x84>
 800b042:	4b21      	ldr	r3, [pc, #132]	; (800b0c8 <tcp_timewait_input+0xb4>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b04e:	440b      	add	r3, r1
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	dc20      	bgt.n	800b098 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b056:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <tcp_timewait_input+0xb8>)
 800b058:	6818      	ldr	r0, [r3, #0]
 800b05a:	4b1d      	ldr	r3, [pc, #116]	; (800b0d0 <tcp_timewait_input+0xbc>)
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	4b19      	ldr	r3, [pc, #100]	; (800b0c8 <tcp_timewait_input+0xb4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b066:	4b1b      	ldr	r3, [pc, #108]	; (800b0d4 <tcp_timewait_input+0xc0>)
 800b068:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b06a:	885b      	ldrh	r3, [r3, #2]
 800b06c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b06e:	4a19      	ldr	r2, [pc, #100]	; (800b0d4 <tcp_timewait_input+0xc0>)
 800b070:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b072:	8812      	ldrh	r2, [r2, #0]
 800b074:	b292      	uxth	r2, r2
 800b076:	9201      	str	r2, [sp, #4]
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	4b17      	ldr	r3, [pc, #92]	; (800b0d8 <tcp_timewait_input+0xc4>)
 800b07c:	4a17      	ldr	r2, [pc, #92]	; (800b0dc <tcp_timewait_input+0xc8>)
 800b07e:	f002 fe61 	bl	800dd44 <tcp_rst>
      return;
 800b082:	e01c      	b.n	800b0be <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800b084:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <tcp_timewait_input+0xb0>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b090:	4b13      	ldr	r3, [pc, #76]	; (800b0e0 <tcp_timewait_input+0xcc>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b098:	4b0d      	ldr	r3, [pc, #52]	; (800b0d0 <tcp_timewait_input+0xbc>)
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00d      	beq.n	800b0bc <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7e9b      	ldrb	r3, [r3, #26]
 800b0a4:	f043 0302 	orr.w	r3, r3, #2
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f002 fbbe 	bl	800d830 <tcp_output>
  }
  return;
 800b0b4:	bf00      	nop
 800b0b6:	e001      	b.n	800b0bc <tcp_timewait_input+0xa8>
    return;
 800b0b8:	bf00      	nop
 800b0ba:	e000      	b.n	800b0be <tcp_timewait_input+0xaa>
  return;
 800b0bc:	bf00      	nop
}
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	2000074c 	.word	0x2000074c
 800b0c8:	20000740 	.word	0x20000740
 800b0cc:	20000744 	.word	0x20000744
 800b0d0:	2000074a 	.word	0x2000074a
 800b0d4:	20000730 	.word	0x20000730
 800b0d8:	20000948 	.word	0x20000948
 800b0dc:	2000094c 	.word	0x2000094c
 800b0e0:	20007224 	.word	0x20007224

0800b0e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	; 0x28
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0f4:	4ba4      	ldr	r3, [pc, #656]	; (800b388 <tcp_process+0x2a4>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d04e      	beq.n	800b19e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d108      	bne.n	800b11a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b10c:	4b9f      	ldr	r3, [pc, #636]	; (800b38c <tcp_process+0x2a8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d123      	bne.n	800b15c <tcp_process+0x78>
        acceptable = 1;
 800b114:	2301      	movs	r3, #1
 800b116:	76fb      	strb	r3, [r7, #27]
 800b118:	e020      	b.n	800b15c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b11e:	4b9c      	ldr	r3, [pc, #624]	; (800b390 <tcp_process+0x2ac>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d102      	bne.n	800b12c <tcp_process+0x48>
        acceptable = 1;
 800b126:	2301      	movs	r3, #1
 800b128:	76fb      	strb	r3, [r7, #27]
 800b12a:	e017      	b.n	800b15c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b12c:	4b98      	ldr	r3, [pc, #608]	; (800b390 <tcp_process+0x2ac>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	db10      	blt.n	800b15c <tcp_process+0x78>
 800b13a:	4b95      	ldr	r3, [pc, #596]	; (800b390 <tcp_process+0x2ac>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b146:	440b      	add	r3, r1
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dc06      	bgt.n	800b15c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7e9b      	ldrb	r3, [r3, #26]
 800b152:	f043 0302 	orr.w	r3, r3, #2
 800b156:	b2da      	uxtb	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b15c:	7efb      	ldrb	r3, [r7, #27]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d01b      	beq.n	800b19a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	7d1b      	ldrb	r3, [r3, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d106      	bne.n	800b178 <tcp_process+0x94>
 800b16a:	4b8a      	ldr	r3, [pc, #552]	; (800b394 <tcp_process+0x2b0>)
 800b16c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b170:	4989      	ldr	r1, [pc, #548]	; (800b398 <tcp_process+0x2b4>)
 800b172:	488a      	ldr	r0, [pc, #552]	; (800b39c <tcp_process+0x2b8>)
 800b174:	f00a fe32 	bl	8015ddc <iprintf>
      recv_flags |= TF_RESET;
 800b178:	4b89      	ldr	r3, [pc, #548]	; (800b3a0 <tcp_process+0x2bc>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f043 0308 	orr.w	r3, r3, #8
 800b180:	b2da      	uxtb	r2, r3
 800b182:	4b87      	ldr	r3, [pc, #540]	; (800b3a0 <tcp_process+0x2bc>)
 800b184:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7e9b      	ldrb	r3, [r3, #26]
 800b18a:	f023 0301 	bic.w	r3, r3, #1
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800b194:	f06f 030d 	mvn.w	r3, #13
 800b198:	e34d      	b.n	800b836 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	e34b      	b.n	800b836 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b19e:	4b7a      	ldr	r3, [pc, #488]	; (800b388 <tcp_process+0x2a4>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d010      	beq.n	800b1cc <tcp_process+0xe8>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7d1b      	ldrb	r3, [r3, #20]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d00c      	beq.n	800b1cc <tcp_process+0xe8>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	7d1b      	ldrb	r3, [r3, #20]
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d008      	beq.n	800b1cc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	7e9b      	ldrb	r3, [r3, #26]
 800b1be:	f043 0302 	orr.w	r3, r3, #2
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e334      	b.n	800b836 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	7e9b      	ldrb	r3, [r3, #26]
 800b1d0:	f003 0310 	and.w	r3, r3, #16
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d103      	bne.n	800b1e0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b1d8:	4b72      	ldr	r3, [pc, #456]	; (800b3a4 <tcp_process+0x2c0>)
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f001 fbdf 	bl	800c9ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7d1b      	ldrb	r3, [r3, #20]
 800b1f2:	3b02      	subs	r3, #2
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	f200 830e 	bhi.w	800b816 <tcp_process+0x732>
 800b1fa:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <tcp_process+0x11c>)
 800b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b200:	0800b221 	.word	0x0800b221
 800b204:	0800b419 	.word	0x0800b419
 800b208:	0800b571 	.word	0x0800b571
 800b20c:	0800b59b 	.word	0x0800b59b
 800b210:	0800b6c5 	.word	0x0800b6c5
 800b214:	0800b571 	.word	0x0800b571
 800b218:	0800b751 	.word	0x0800b751
 800b21c:	0800b7e1 	.word	0x0800b7e1
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b220:	4b59      	ldr	r3, [pc, #356]	; (800b388 <tcp_process+0x2a4>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	f003 0310 	and.w	r3, r3, #16
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80cb 	beq.w	800b3c4 <tcp_process+0x2e0>
 800b22e:	4b56      	ldr	r3, [pc, #344]	; (800b388 <tcp_process+0x2a4>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 80c4 	beq.w	800b3c4 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	4b52      	ldr	r3, [pc, #328]	; (800b38c <tcp_process+0x2a8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	f040 80bc 	bne.w	800b3c4 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800b24c:	4b50      	ldr	r3, [pc, #320]	; (800b390 <tcp_process+0x2ac>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800b25e:	4b4b      	ldr	r3, [pc, #300]	; (800b38c <tcp_process+0x2a8>)
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800b266:	4b50      	ldr	r3, [pc, #320]	; (800b3a8 <tcp_process+0x2c4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	89db      	ldrh	r3, [r3, #14]
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b280:	4b43      	ldr	r3, [pc, #268]	; (800b390 <tcp_process+0x2ac>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	1e5a      	subs	r2, r3, #1
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7ff f95c 	bl	800a558 <tcp_eff_send_mss_impl>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	bf38      	it	cc
 800b2b6:	461a      	movcc	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	bf28      	it	cs
 800b2c2:	4613      	movcs	r3, r2
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <tcp_process+0x200>
 800b2d6:	4b2f      	ldr	r3, [pc, #188]	; (800b394 <tcp_process+0x2b0>)
 800b2d8:	f240 321a 	movw	r2, #794	; 0x31a
 800b2dc:	4933      	ldr	r1, [pc, #204]	; (800b3ac <tcp_process+0x2c8>)
 800b2de:	482f      	ldr	r0, [pc, #188]	; (800b39c <tcp_process+0x2b8>)
 800b2e0:	f00a fd7c 	bl	8015ddc <iprintf>
      --pcb->snd_queuelen;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2f8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d111      	bne.n	800b324 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b304:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <tcp_process+0x236>
 800b30c:	4b21      	ldr	r3, [pc, #132]	; (800b394 <tcp_process+0x2b0>)
 800b30e:	f240 3222 	movw	r2, #802	; 0x322
 800b312:	4927      	ldr	r1, [pc, #156]	; (800b3b0 <tcp_process+0x2cc>)
 800b314:	4821      	ldr	r0, [pc, #132]	; (800b39c <tcp_process+0x2b8>)
 800b316:	f00a fd61 	bl	8015ddc <iprintf>
        pcb->unsent = rseg->next;
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	669a      	str	r2, [r3, #104]	; 0x68
 800b322:	e003      	b.n	800b32c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800b32c:	69f8      	ldr	r0, [r7, #28]
 800b32e:	f7fe fdd2 	bl	8009ed6 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <tcp_process+0x260>
        pcb->rtime = -1;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b340:	861a      	strh	r2, [r3, #48]	; 0x30
 800b342:	e006      	b.n	800b352 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <tcp_process+0x28e>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	6910      	ldr	r0, [r2, #16]
 800b366:	2200      	movs	r2, #0
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	4798      	blx	r3
 800b36c:	4603      	mov	r3, r0
 800b36e:	76bb      	strb	r3, [r7, #26]
 800b370:	e001      	b.n	800b376 <tcp_process+0x292>
 800b372:	2300      	movs	r3, #0
 800b374:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800b376:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b37a:	f113 0f0d 	cmn.w	r3, #13
 800b37e:	d119      	bne.n	800b3b4 <tcp_process+0x2d0>
        return ERR_ABRT;
 800b380:	f06f 030c 	mvn.w	r3, #12
 800b384:	e257      	b.n	800b836 <tcp_process+0x752>
 800b386:	bf00      	nop
 800b388:	2000074c 	.word	0x2000074c
 800b38c:	20000744 	.word	0x20000744
 800b390:	20000740 	.word	0x20000740
 800b394:	080190e8 	.word	0x080190e8
 800b398:	080192a0 	.word	0x080192a0
 800b39c:	0801912c 	.word	0x0801912c
 800b3a0:	2000074d 	.word	0x2000074d
 800b3a4:	20007224 	.word	0x20007224
 800b3a8:	20000730 	.word	0x20000730
 800b3ac:	080192c0 	.word	0x080192c0
 800b3b0:	080192d8 	.word	0x080192d8
      }
      tcp_ack_now(pcb);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	7e9b      	ldrb	r3, [r3, #26]
 800b3b8:	f043 0302 	orr.w	r3, r3, #2
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800b3c2:	e22a      	b.n	800b81a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800b3c4:	4b9f      	ldr	r3, [pc, #636]	; (800b644 <tcp_process+0x560>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	f003 0310 	and.w	r3, r3, #16
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8224 	beq.w	800b81a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3d2:	4b9d      	ldr	r3, [pc, #628]	; (800b648 <tcp_process+0x564>)
 800b3d4:	6818      	ldr	r0, [r3, #0]
 800b3d6:	4b9d      	ldr	r3, [pc, #628]	; (800b64c <tcp_process+0x568>)
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4b9c      	ldr	r3, [pc, #624]	; (800b650 <tcp_process+0x56c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3e2:	4b9c      	ldr	r3, [pc, #624]	; (800b654 <tcp_process+0x570>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3e6:	885b      	ldrh	r3, [r3, #2]
 800b3e8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3ea:	4a9a      	ldr	r2, [pc, #616]	; (800b654 <tcp_process+0x570>)
 800b3ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3ee:	8812      	ldrh	r2, [r2, #0]
 800b3f0:	b292      	uxth	r2, r2
 800b3f2:	9201      	str	r2, [sp, #4]
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	4b98      	ldr	r3, [pc, #608]	; (800b658 <tcp_process+0x574>)
 800b3f8:	4a98      	ldr	r2, [pc, #608]	; (800b65c <tcp_process+0x578>)
 800b3fa:	f002 fca3 	bl	800dd44 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b404:	2b05      	cmp	r3, #5
 800b406:	f200 8208 	bhi.w	800b81a <tcp_process+0x736>
        pcb->rtime = 0;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f002 fd0b 	bl	800de2c <tcp_rexmit_rto>
    break;
 800b416:	e200      	b.n	800b81a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800b418:	4b8a      	ldr	r3, [pc, #552]	; (800b644 <tcp_process+0x560>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 0310 	and.w	r3, r3, #16
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 8091 	beq.w	800b548 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b426:	4b88      	ldr	r3, [pc, #544]	; (800b648 <tcp_process+0x564>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	3b01      	subs	r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	db71      	blt.n	800b51a <tcp_process+0x436>
 800b436:	4b84      	ldr	r3, [pc, #528]	; (800b648 <tcp_process+0x564>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	dc6a      	bgt.n	800b51a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2204      	movs	r2, #4
 800b448:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00b      	beq.n	800b46a <tcp_process+0x386>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <tcp_process+0x386>
 800b45c:	4b80      	ldr	r3, [pc, #512]	; (800b660 <tcp_process+0x57c>)
 800b45e:	f240 3251 	movw	r2, #849	; 0x351
 800b462:	4980      	ldr	r1, [pc, #512]	; (800b664 <tcp_process+0x580>)
 800b464:	4880      	ldr	r0, [pc, #512]	; (800b668 <tcp_process+0x584>)
 800b466:	f00a fcb9 	bl	8015ddc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d102      	bne.n	800b478 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800b472:	23fa      	movs	r3, #250	; 0xfa
 800b474:	76bb      	strb	r3, [r7, #26]
 800b476:	e011      	b.n	800b49c <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <tcp_process+0x3b4>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6910      	ldr	r0, [r2, #16]
 800b48c:	2200      	movs	r2, #0
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	4798      	blx	r3
 800b492:	4603      	mov	r3, r0
 800b494:	76bb      	strb	r3, [r7, #26]
 800b496:	e001      	b.n	800b49c <tcp_process+0x3b8>
 800b498:	23f0      	movs	r3, #240	; 0xf0
 800b49a:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800b49c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00a      	beq.n	800b4ba <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800b4a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4a8:	f113 0f0d 	cmn.w	r3, #13
 800b4ac:	d002      	beq.n	800b4b4 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7fd ff2c 	bl	800930c <tcp_abort>
          }
          return ERR_ABRT;
 800b4b4:	f06f 030c 	mvn.w	r3, #12
 800b4b8:	e1bd      	b.n	800b836 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa42 	bl	800b944 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800b4c0:	4b6a      	ldr	r3, [pc, #424]	; (800b66c <tcp_process+0x588>)
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <tcp_process+0x3f0>
          recv_acked--;
 800b4c8:	4b68      	ldr	r3, [pc, #416]	; (800b66c <tcp_process+0x588>)
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4b66      	ldr	r3, [pc, #408]	; (800b66c <tcp_process+0x588>)
 800b4d2:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	f241 121c 	movw	r2, #4380	; 0x111c
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	bf38      	it	cc
 800b4e2:	461a      	movcc	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	bf28      	it	cs
 800b4ee:	4613      	movcs	r3, r2
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800b4f8:	4b5d      	ldr	r3, [pc, #372]	; (800b670 <tcp_process+0x58c>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 0320 	and.w	r3, r3, #32
 800b500:	2b00      	cmp	r3, #0
 800b502:	d034      	beq.n	800b56e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7e9b      	ldrb	r3, [r3, #26]
 800b508:	f043 0302 	orr.w	r3, r3, #2
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2207      	movs	r2, #7
 800b516:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800b518:	e029      	b.n	800b56e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b51a:	4b4b      	ldr	r3, [pc, #300]	; (800b648 <tcp_process+0x564>)
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	4b4b      	ldr	r3, [pc, #300]	; (800b64c <tcp_process+0x568>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	4b4a      	ldr	r3, [pc, #296]	; (800b650 <tcp_process+0x56c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b52a:	4b4a      	ldr	r3, [pc, #296]	; (800b654 <tcp_process+0x570>)
 800b52c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b52e:	885b      	ldrh	r3, [r3, #2]
 800b530:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b532:	4a48      	ldr	r2, [pc, #288]	; (800b654 <tcp_process+0x570>)
 800b534:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b536:	8812      	ldrh	r2, [r2, #0]
 800b538:	b292      	uxth	r2, r2
 800b53a:	9201      	str	r2, [sp, #4]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4b46      	ldr	r3, [pc, #280]	; (800b658 <tcp_process+0x574>)
 800b540:	4a46      	ldr	r2, [pc, #280]	; (800b65c <tcp_process+0x578>)
 800b542:	f002 fbff 	bl	800dd44 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800b546:	e16a      	b.n	800b81e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b548:	4b3e      	ldr	r3, [pc, #248]	; (800b644 <tcp_process+0x560>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	f003 0302 	and.w	r3, r3, #2
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 8164 	beq.w	800b81e <tcp_process+0x73a>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	4b3c      	ldr	r3, [pc, #240]	; (800b650 <tcp_process+0x56c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	f040 815c 	bne.w	800b81e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f002 fc96 	bl	800de98 <tcp_rexmit>
    break;
 800b56c:	e157      	b.n	800b81e <tcp_process+0x73a>
 800b56e:	e156      	b.n	800b81e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f9e7 	bl	800b944 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b576:	4b3e      	ldr	r3, [pc, #248]	; (800b670 <tcp_process+0x58c>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f003 0320 	and.w	r3, r3, #32
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 814f 	beq.w	800b822 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7e9b      	ldrb	r3, [r3, #26]
 800b588:	f043 0302 	orr.w	r3, r3, #2
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2207      	movs	r2, #7
 800b596:	751a      	strb	r2, [r3, #20]
    }
    break;
 800b598:	e143      	b.n	800b822 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9d2 	bl	800b944 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b5a0:	4b33      	ldr	r3, [pc, #204]	; (800b670 <tcp_process+0x58c>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f003 0320 	and.w	r3, r3, #32
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d074      	beq.n	800b696 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5ac:	4b25      	ldr	r3, [pc, #148]	; (800b644 <tcp_process+0x560>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 0310 	and.w	r3, r3, #16
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d063      	beq.n	800b680 <tcp_process+0x59c>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5bc:	4b22      	ldr	r3, [pc, #136]	; (800b648 <tcp_process+0x564>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d15d      	bne.n	800b680 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d159      	bne.n	800b680 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	7e9b      	ldrb	r3, [r3, #26]
 800b5d0:	f043 0302 	orr.w	r3, r3, #2
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fe fee6 	bl	800a3ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b5e0:	4b24      	ldr	r3, [pc, #144]	; (800b674 <tcp_process+0x590>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d105      	bne.n	800b5f6 <tcp_process+0x512>
 800b5ea:	4b22      	ldr	r3, [pc, #136]	; (800b674 <tcp_process+0x590>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	4a20      	ldr	r2, [pc, #128]	; (800b674 <tcp_process+0x590>)
 800b5f2:	6013      	str	r3, [r2, #0]
 800b5f4:	e013      	b.n	800b61e <tcp_process+0x53a>
 800b5f6:	4b1f      	ldr	r3, [pc, #124]	; (800b674 <tcp_process+0x590>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e00c      	b.n	800b618 <tcp_process+0x534>
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d104      	bne.n	800b612 <tcp_process+0x52e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	60da      	str	r2, [r3, #12]
 800b610:	e005      	b.n	800b61e <tcp_process+0x53a>
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1ef      	bne.n	800b5fe <tcp_process+0x51a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	60da      	str	r2, [r3, #12]
 800b624:	4b14      	ldr	r3, [pc, #80]	; (800b678 <tcp_process+0x594>)
 800b626:	2201      	movs	r2, #1
 800b628:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	220a      	movs	r2, #10
 800b62e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b630:	4b12      	ldr	r3, [pc, #72]	; (800b67c <tcp_process+0x598>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]
 800b638:	4a10      	ldr	r2, [pc, #64]	; (800b67c <tcp_process+0x598>)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	f002 fdcf 	bl	800e1e0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800b642:	e0f0      	b.n	800b826 <tcp_process+0x742>
 800b644:	2000074c 	.word	0x2000074c
 800b648:	20000744 	.word	0x20000744
 800b64c:	2000074a 	.word	0x2000074a
 800b650:	20000740 	.word	0x20000740
 800b654:	20000730 	.word	0x20000730
 800b658:	20000948 	.word	0x20000948
 800b65c:	2000094c 	.word	0x2000094c
 800b660:	080190e8 	.word	0x080190e8
 800b664:	080192ec 	.word	0x080192ec
 800b668:	0801912c 	.word	0x0801912c
 800b66c:	20000748 	.word	0x20000748
 800b670:	2000074d 	.word	0x2000074d
 800b674:	20007220 	.word	0x20007220
 800b678:	2000721c 	.word	0x2000721c
 800b67c:	20007230 	.word	0x20007230
        tcp_ack_now(pcb);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7e9b      	ldrb	r3, [r3, #26]
 800b684:	f043 0302 	orr.w	r3, r3, #2
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2208      	movs	r2, #8
 800b692:	751a      	strb	r2, [r3, #20]
    break;
 800b694:	e0c7      	b.n	800b826 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b696:	4b6a      	ldr	r3, [pc, #424]	; (800b840 <tcp_process+0x75c>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	f003 0310 	and.w	r3, r3, #16
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 80c1 	beq.w	800b826 <tcp_process+0x742>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6a8:	4b66      	ldr	r3, [pc, #408]	; (800b844 <tcp_process+0x760>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	f040 80ba 	bne.w	800b826 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f040 80b5 	bne.w	800b826 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2206      	movs	r2, #6
 800b6c0:	751a      	strb	r2, [r3, #20]
    break;
 800b6c2:	e0b0      	b.n	800b826 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f93d 	bl	800b944 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b6ca:	4b5f      	ldr	r3, [pc, #380]	; (800b848 <tcp_process+0x764>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 80a9 	beq.w	800b82a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7e9b      	ldrb	r3, [r3, #26]
 800b6dc:	f043 0302 	orr.w	r3, r3, #2
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7fe fe60 	bl	800a3ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b6ec:	4b57      	ldr	r3, [pc, #348]	; (800b84c <tcp_process+0x768>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d105      	bne.n	800b702 <tcp_process+0x61e>
 800b6f6:	4b55      	ldr	r3, [pc, #340]	; (800b84c <tcp_process+0x768>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	4a53      	ldr	r2, [pc, #332]	; (800b84c <tcp_process+0x768>)
 800b6fe:	6013      	str	r3, [r2, #0]
 800b700:	e013      	b.n	800b72a <tcp_process+0x646>
 800b702:	4b52      	ldr	r3, [pc, #328]	; (800b84c <tcp_process+0x768>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	613b      	str	r3, [r7, #16]
 800b708:	e00c      	b.n	800b724 <tcp_process+0x640>
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d104      	bne.n	800b71e <tcp_process+0x63a>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68da      	ldr	r2, [r3, #12]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	60da      	str	r2, [r3, #12]
 800b71c:	e005      	b.n	800b72a <tcp_process+0x646>
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1ef      	bne.n	800b70a <tcp_process+0x626>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	60da      	str	r2, [r3, #12]
 800b730:	4b47      	ldr	r3, [pc, #284]	; (800b850 <tcp_process+0x76c>)
 800b732:	2201      	movs	r2, #1
 800b734:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	220a      	movs	r2, #10
 800b73a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b73c:	4b45      	ldr	r3, [pc, #276]	; (800b854 <tcp_process+0x770>)
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	60da      	str	r2, [r3, #12]
 800b744:	4a43      	ldr	r2, [pc, #268]	; (800b854 <tcp_process+0x770>)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	f002 fd49 	bl	800e1e0 <tcp_timer_needed>
    }
    break;
 800b74e:	e06c      	b.n	800b82a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f8f7 	bl	800b944 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b756:	4b3a      	ldr	r3, [pc, #232]	; (800b840 <tcp_process+0x75c>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	f003 0310 	and.w	r3, r3, #16
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d065      	beq.n	800b82e <tcp_process+0x74a>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b766:	4b37      	ldr	r3, [pc, #220]	; (800b844 <tcp_process+0x760>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d15f      	bne.n	800b82e <tcp_process+0x74a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b772:	2b00      	cmp	r3, #0
 800b774:	d15b      	bne.n	800b82e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7fe fe18 	bl	800a3ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b77c:	4b33      	ldr	r3, [pc, #204]	; (800b84c <tcp_process+0x768>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	429a      	cmp	r2, r3
 800b784:	d105      	bne.n	800b792 <tcp_process+0x6ae>
 800b786:	4b31      	ldr	r3, [pc, #196]	; (800b84c <tcp_process+0x768>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	4a2f      	ldr	r2, [pc, #188]	; (800b84c <tcp_process+0x768>)
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	e013      	b.n	800b7ba <tcp_process+0x6d6>
 800b792:	4b2e      	ldr	r3, [pc, #184]	; (800b84c <tcp_process+0x768>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	e00c      	b.n	800b7b4 <tcp_process+0x6d0>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d104      	bne.n	800b7ae <tcp_process+0x6ca>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	60da      	str	r2, [r3, #12]
 800b7ac:	e005      	b.n	800b7ba <tcp_process+0x6d6>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1ef      	bne.n	800b79a <tcp_process+0x6b6>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	60da      	str	r2, [r3, #12]
 800b7c0:	4b23      	ldr	r3, [pc, #140]	; (800b850 <tcp_process+0x76c>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b7cc:	4b21      	ldr	r3, [pc, #132]	; (800b854 <tcp_process+0x770>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	60da      	str	r2, [r3, #12]
 800b7d4:	4a1f      	ldr	r2, [pc, #124]	; (800b854 <tcp_process+0x770>)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	f002 fd01 	bl	800e1e0 <tcp_timer_needed>
    }
    break;
 800b7de:	e026      	b.n	800b82e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f8af 	bl	800b944 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7e6:	4b16      	ldr	r3, [pc, #88]	; (800b840 <tcp_process+0x75c>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	f003 0310 	and.w	r3, r3, #16
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d01f      	beq.n	800b832 <tcp_process+0x74e>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7f6:	4b13      	ldr	r3, [pc, #76]	; (800b844 <tcp_process+0x760>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d119      	bne.n	800b832 <tcp_process+0x74e>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b802:	2b00      	cmp	r3, #0
 800b804:	d115      	bne.n	800b832 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800b806:	4b10      	ldr	r3, [pc, #64]	; (800b848 <tcp_process+0x764>)
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f043 0310 	orr.w	r3, r3, #16
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <tcp_process+0x764>)
 800b812:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b814:	e00d      	b.n	800b832 <tcp_process+0x74e>
  default:
    break;
 800b816:	bf00      	nop
 800b818:	e00c      	b.n	800b834 <tcp_process+0x750>
    break;
 800b81a:	bf00      	nop
 800b81c:	e00a      	b.n	800b834 <tcp_process+0x750>
    break;
 800b81e:	bf00      	nop
 800b820:	e008      	b.n	800b834 <tcp_process+0x750>
    break;
 800b822:	bf00      	nop
 800b824:	e006      	b.n	800b834 <tcp_process+0x750>
    break;
 800b826:	bf00      	nop
 800b828:	e004      	b.n	800b834 <tcp_process+0x750>
    break;
 800b82a:	bf00      	nop
 800b82c:	e002      	b.n	800b834 <tcp_process+0x750>
    break;
 800b82e:	bf00      	nop
 800b830:	e000      	b.n	800b834 <tcp_process+0x750>
    break;
 800b832:	bf00      	nop
  }
  return ERR_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	2000074c 	.word	0x2000074c
 800b844:	20000744 	.word	0x20000744
 800b848:	2000074d 	.word	0x2000074d
 800b84c:	20007220 	.word	0x20007220
 800b850:	2000721c 	.word	0x2000721c
 800b854:	20007230 	.word	0x20007230

0800b858 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b858:	b590      	push	{r4, r7, lr}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	899b      	ldrh	r3, [r3, #12]
 800b868:	b29b      	uxth	r3, r3
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fb feb6 	bl	80075dc <lwip_htons>
 800b870:	4603      	mov	r3, r0
 800b872:	f003 0301 	and.w	r3, r3, #1
 800b876:	2b00      	cmp	r3, #0
 800b878:	d027      	beq.n	800b8ca <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b87a:	6838      	ldr	r0, [r7, #0]
 800b87c:	f7fe fb17 	bl	8009eae <tcp_segs_free>
    next = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	603b      	str	r3, [r7, #0]
 800b884:	e055      	b.n	800b932 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	899b      	ldrh	r3, [r3, #12]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fb fea4 	bl	80075dc <lwip_htons>
 800b894:	4603      	mov	r3, r0
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00d      	beq.n	800b8ba <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	899b      	ldrh	r3, [r3, #12]
 800b8a4:	b29c      	uxth	r4, r3
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	f7fb fe98 	bl	80075dc <lwip_htons>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	4322      	orrs	r2, r4
 800b8b6:	b292      	uxth	r2, r2
 800b8b8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7fe fb06 	bl	8009ed6 <tcp_seg_free>
    while (next &&
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00e      	beq.n	800b8ee <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	891b      	ldrh	r3, [r3, #8]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4b1a      	ldr	r3, [pc, #104]	; (800b940 <tcp_oos_insert_segment+0xe8>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	441a      	add	r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	8909      	ldrh	r1, [r1, #8]
 800b8e6:	440b      	add	r3, r1
 800b8e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	dacb      	bge.n	800b886 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01e      	beq.n	800b932 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	891b      	ldrh	r3, [r3, #8]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4b11      	ldr	r3, [pc, #68]	; (800b940 <tcp_oos_insert_segment+0xe8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	441a      	add	r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd12      	ble.n	800b932 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	b29a      	uxth	r2, r3
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <tcp_oos_insert_segment+0xe8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	891b      	ldrh	r3, [r3, #8]
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f7fc fe77 	bl	8008620 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	601a      	str	r2, [r3, #0]
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd90      	pop	{r4, r7, pc}
 800b940:	20000740 	.word	0x20000740

0800b944 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b946:	b08d      	sub	sp, #52	; 0x34
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	7d1b      	ldrb	r3, [r3, #20]
 800b954:	2b03      	cmp	r3, #3
 800b956:	d806      	bhi.n	800b966 <tcp_receive+0x22>
 800b958:	4ba6      	ldr	r3, [pc, #664]	; (800bbf4 <tcp_receive+0x2b0>)
 800b95a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b95e:	49a6      	ldr	r1, [pc, #664]	; (800bbf8 <tcp_receive+0x2b4>)
 800b960:	48a6      	ldr	r0, [pc, #664]	; (800bbfc <tcp_receive+0x2b8>)
 800b962:	f00a fa3b 	bl	8015ddc <iprintf>

  if (flags & TCP_ACK) {
 800b966:	4ba6      	ldr	r3, [pc, #664]	; (800bc00 <tcp_receive+0x2bc>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	f003 0310 	and.w	r3, r3, #16
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 82bf 	beq.w	800bef2 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b97a:	461a      	mov	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b980:	4413      	add	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b988:	4b9e      	ldr	r3, [pc, #632]	; (800bc04 <tcp_receive+0x2c0>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	db1b      	blt.n	800b9ca <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b996:	4b9b      	ldr	r3, [pc, #620]	; (800bc04 <tcp_receive+0x2c0>)
 800b998:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d106      	bne.n	800b9ac <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9a2:	4b99      	ldr	r3, [pc, #612]	; (800bc08 <tcp_receive+0x2c4>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	db0e      	blt.n	800b9ca <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9b0:	4b95      	ldr	r3, [pc, #596]	; (800bc08 <tcp_receive+0x2c4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d141      	bne.n	800ba3c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9b8:	4b94      	ldr	r3, [pc, #592]	; (800bc0c <tcp_receive+0x2c8>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	89db      	ldrh	r3, [r3, #14]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d938      	bls.n	800ba3c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b9ca:	4b90      	ldr	r3, [pc, #576]	; (800bc0c <tcp_receive+0x2c8>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	89db      	ldrh	r3, [r3, #14]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d205      	bcs.n	800b9f4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800b9f4:	4b83      	ldr	r3, [pc, #524]	; (800bc04 <tcp_receive+0x2c0>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800b9fc:	4b82      	ldr	r3, [pc, #520]	; (800bc08 <tcp_receive+0x2c4>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10d      	bne.n	800ba2a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d111      	bne.n	800ba3c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ba28:	e008      	b.n	800ba3c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ba3c:	4b72      	ldr	r3, [pc, #456]	; (800bc08 <tcp_receive+0x2c4>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dc53      	bgt.n	800baf2 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800ba4a:	4b71      	ldr	r3, [pc, #452]	; (800bc10 <tcp_receive+0x2cc>)
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d146      	bne.n	800bae0 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ba5c:	4413      	add	r3, r2
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d13d      	bne.n	800bae0 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	db38      	blt.n	800bae0 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba72:	4b65      	ldr	r3, [pc, #404]	; (800bc08 <tcp_receive+0x2c4>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d132      	bne.n	800bae0 <tcp_receive+0x19c>
              found_dupack = 1;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba84:	2bff      	cmp	r3, #255	; 0xff
 800ba86:	d007      	beq.n	800ba98 <tcp_receive+0x154>
                ++pcb->dupacks;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba8e:	3301      	adds	r3, #1
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d916      	bls.n	800bad0 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baac:	4413      	add	r3, r2
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d912      	bls.n	800bae0 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bac4:	4413      	add	r3, r2
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bace:	e007      	b.n	800bae0 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d102      	bne.n	800bae0 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f002 fa2c 	bl	800df38 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f040 8169 	bne.w	800bdba <tcp_receive+0x476>
        pcb->dupacks = 0;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800baf0:	e163      	b.n	800bdba <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800baf2:	4b45      	ldr	r3, [pc, #276]	; (800bc08 <tcp_receive+0x2c4>)
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f2c0 8107 	blt.w	800bd12 <tcp_receive+0x3ce>
 800bb04:	4b40      	ldr	r3, [pc, #256]	; (800bc08 <tcp_receive+0x2c4>)
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f300 80ff 	bgt.w	800bd12 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7e9b      	ldrb	r3, [r3, #26]
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00c      	beq.n	800bb3a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	7e9b      	ldrb	r3, [r3, #26]
 800bb24:	f023 0304 	bic.w	r3, r3, #4
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb48:	10db      	asrs	r3, r3, #3
 800bb4a:	b21b      	sxth	r3, r3
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4413      	add	r3, r2
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	b21a      	sxth	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bb6a:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <tcp_receive+0x2c4>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7d1b      	ldrb	r3, [r3, #20]
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	f240 8094 	bls.w	800bca4 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d216      	bcs.n	800bbba <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb96:	4413      	add	r3, r2
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d97f      	bls.n	800bca4 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbae:	4413      	add	r3, r2
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bbb8:	e074      	b.n	800bca4 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbca:	fb03 f301 	mul.w	r3, r3, r1
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800bbd4:	fb93 f3f1 	sdiv	r3, r3, r1
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4413      	add	r3, r2
 800bbdc:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbe4:	8a7a      	ldrh	r2, [r7, #18]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d95c      	bls.n	800bca4 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8a7a      	ldrh	r2, [r7, #18]
 800bbee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800bbf2:	e057      	b.n	800bca4 <tcp_receive+0x360>
 800bbf4:	080190e8 	.word	0x080190e8
 800bbf8:	0801930c 	.word	0x0801930c
 800bbfc:	0801912c 	.word	0x0801912c
 800bc00:	2000074c 	.word	0x2000074c
 800bc04:	20000740 	.word	0x20000740
 800bc08:	20000744 	.word	0x20000744
 800bc0c:	20000730 	.word	0x20000730
 800bc10:	2000074a 	.word	0x2000074a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc18:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800bc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fc fefe 	bl	8008a30 <pbuf_clen>
 800bc34:	4603      	mov	r3, r0
 800bc36:	429c      	cmp	r4, r3
 800bc38:	d206      	bcs.n	800bc48 <tcp_receive+0x304>
 800bc3a:	4b70      	ldr	r3, [pc, #448]	; (800bdfc <tcp_receive+0x4b8>)
 800bc3c:	f240 429e 	movw	r2, #1182	; 0x49e
 800bc40:	496f      	ldr	r1, [pc, #444]	; (800be00 <tcp_receive+0x4bc>)
 800bc42:	4870      	ldr	r0, [pc, #448]	; (800be04 <tcp_receive+0x4c0>)
 800bc44:	f00a f8ca 	bl	8015ddc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fc feef 	bl	8008a30 <pbuf_clen>
 800bc52:	4603      	mov	r3, r0
 800bc54:	461a      	mov	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800bc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc68:	891a      	ldrh	r2, [r3, #8]
 800bc6a:	4b67      	ldr	r3, [pc, #412]	; (800be08 <tcp_receive+0x4c4>)
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	4413      	add	r3, r2
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	4b65      	ldr	r3, [pc, #404]	; (800be08 <tcp_receive+0x4c4>)
 800bc74:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800bc76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc78:	f7fe f92d 	bl	8009ed6 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00e      	beq.n	800bca4 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <tcp_receive+0x360>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <tcp_receive+0x360>
 800bc96:	4b59      	ldr	r3, [pc, #356]	; (800bdfc <tcp_receive+0x4b8>)
 800bc98:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800bc9c:	495b      	ldr	r1, [pc, #364]	; (800be0c <tcp_receive+0x4c8>)
 800bc9e:	4859      	ldr	r0, [pc, #356]	; (800be04 <tcp_receive+0x4c0>)
 800bca0:	f00a f89c 	bl	8015ddc <iprintf>
      while (pcb->unacked != NULL &&
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d022      	beq.n	800bcf2 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fb fc9f 	bl	80075f8 <lwip_htonl>
 800bcba:	4604      	mov	r4, r0
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcc0:	891b      	ldrh	r3, [r3, #8]
 800bcc2:	461d      	mov	r5, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	899b      	ldrh	r3, [r3, #12]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fb fc84 	bl	80075dc <lwip_htons>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	f003 0303 	and.w	r3, r3, #3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <tcp_receive+0x39e>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <tcp_receive+0x3a0>
 800bce2:	2300      	movs	r3, #0
 800bce4:	442b      	add	r3, r5
 800bce6:	18e2      	adds	r2, r4, r3
 800bce8:	4b49      	ldr	r3, [pc, #292]	; (800be10 <tcp_receive+0x4cc>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	dd90      	ble.n	800bc14 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d104      	bne.n	800bd04 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd00:	861a      	strh	r2, [r3, #48]	; 0x30
 800bd02:	e002      	b.n	800bd0a <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	76da      	strb	r2, [r3, #27]
 800bd10:	e002      	b.n	800bd18 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 fd30 	bl	800d778 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800bd18:	e04f      	b.n	800bdba <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fc fe73 	bl	8008a30 <pbuf_clen>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	429c      	cmp	r4, r3
 800bd4e:	d206      	bcs.n	800bd5e <tcp_receive+0x41a>
 800bd50:	4b2a      	ldr	r3, [pc, #168]	; (800bdfc <tcp_receive+0x4b8>)
 800bd52:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bd56:	492a      	ldr	r1, [pc, #168]	; (800be00 <tcp_receive+0x4bc>)
 800bd58:	482a      	ldr	r0, [pc, #168]	; (800be04 <tcp_receive+0x4c0>)
 800bd5a:	f00a f83f 	bl	8015ddc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fc fe64 	bl	8008a30 <pbuf_clen>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd72:	1a9b      	subs	r3, r3, r2
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800bd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7e:	891a      	ldrh	r2, [r3, #8]
 800bd80:	4b21      	ldr	r3, [pc, #132]	; (800be08 <tcp_receive+0x4c4>)
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	4413      	add	r3, r2
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <tcp_receive+0x4c4>)
 800bd8a:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800bd8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd8e:	f7fe f8a2 	bl	8009ed6 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00e      	beq.n	800bdba <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <tcp_receive+0x476>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d106      	bne.n	800bdba <tcp_receive+0x476>
 800bdac:	4b13      	ldr	r3, [pc, #76]	; (800bdfc <tcp_receive+0x4b8>)
 800bdae:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800bdb2:	4916      	ldr	r1, [pc, #88]	; (800be0c <tcp_receive+0x4c8>)
 800bdb4:	4813      	ldr	r0, [pc, #76]	; (800be04 <tcp_receive+0x4c0>)
 800bdb6:	f00a f811 	bl	8015ddc <iprintf>
    while (pcb->unsent != NULL &&
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d036      	beq.n	800be30 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800bdc2:	4b13      	ldr	r3, [pc, #76]	; (800be10 <tcp_receive+0x4cc>)
 800bdc4:	681c      	ldr	r4, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fb fc12 	bl	80075f8 <lwip_htonl>
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdda:	891b      	ldrh	r3, [r3, #8]
 800bddc:	461e      	mov	r6, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	899b      	ldrh	r3, [r3, #12]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fb fbf7 	bl	80075dc <lwip_htons>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f003 0303 	and.w	r3, r3, #3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00d      	beq.n	800be14 <tcp_receive+0x4d0>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e00c      	b.n	800be16 <tcp_receive+0x4d2>
 800bdfc:	080190e8 	.word	0x080190e8
 800be00:	08019328 	.word	0x08019328
 800be04:	0801912c 	.word	0x0801912c
 800be08:	20000748 	.word	0x20000748
 800be0c:	08019350 	.word	0x08019350
 800be10:	20000744 	.word	0x20000744
 800be14:	2300      	movs	r3, #0
 800be16:	4433      	add	r3, r6
 800be18:	442b      	add	r3, r5
 800be1a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	db07      	blt.n	800be30 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800be20:	4b8d      	ldr	r3, [pc, #564]	; (800c058 <tcp_receive+0x714>)
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f77f af75 	ble.w	800bd1a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be36:	4b89      	ldr	r3, [pc, #548]	; (800c05c <tcp_receive+0x718>)
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	4413      	add	r3, r2
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d052      	beq.n	800bef2 <tcp_receive+0x5ae>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be50:	4b81      	ldr	r3, [pc, #516]	; (800c058 <tcp_receive+0x714>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	da4b      	bge.n	800bef2 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800be5a:	4b81      	ldr	r3, [pc, #516]	; (800c060 <tcp_receive+0x71c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	b29a      	uxth	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be64:	b29b      	uxth	r3, r3
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	b29b      	uxth	r3, r3
 800be6a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800be6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be74:	10db      	asrs	r3, r3, #3
 800be76:	b21b      	sxth	r3, r3
 800be78:	b29b      	uxth	r3, r3
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be86:	b29a      	uxth	r2, r3
 800be88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be8a:	4413      	add	r3, r2
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	b21a      	sxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800be94:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be98:	2b00      	cmp	r3, #0
 800be9a:	da03      	bge.n	800bea4 <tcp_receive+0x560>
        m = -m;
 800be9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be9e:	425b      	negs	r3, r3
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800bea4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800beac:	109b      	asrs	r3, r3, #2
 800beae:	b21b      	sxth	r3, r3
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bec2:	4413      	add	r3, r2
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	b21a      	sxth	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bed2:	10db      	asrs	r3, r3, #3
 800bed4:	b21b      	sxth	r3, r3
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bede:	b29b      	uxth	r3, r3
 800bee0:	4413      	add	r3, r2
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	b21a      	sxth	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bef2:	4b5c      	ldr	r3, [pc, #368]	; (800c064 <tcp_receive+0x720>)
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 84f1 	beq.w	800c8de <tcp_receive+0xf9a>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
 800bf00:	2b06      	cmp	r3, #6
 800bf02:	f200 84ec 	bhi.w	800c8de <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf0a:	4b57      	ldr	r3, [pc, #348]	; (800c068 <tcp_receive+0x724>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	3b01      	subs	r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f2c0 80b8 	blt.w	800c088 <tcp_receive+0x744>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf1c:	4b51      	ldr	r3, [pc, #324]	; (800c064 <tcp_receive+0x720>)
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	4619      	mov	r1, r3
 800bf22:	4b51      	ldr	r3, [pc, #324]	; (800c068 <tcp_receive+0x724>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	440b      	add	r3, r1
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f300 80ab 	bgt.w	800c088 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bf32:	4b4e      	ldr	r3, [pc, #312]	; (800c06c <tcp_receive+0x728>)
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf3c:	4b4a      	ldr	r3, [pc, #296]	; (800c068 <tcp_receive+0x724>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bf44:	4b49      	ldr	r3, [pc, #292]	; (800c06c <tcp_receive+0x728>)
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <tcp_receive+0x616>
 800bf4c:	4b48      	ldr	r3, [pc, #288]	; (800c070 <tcp_receive+0x72c>)
 800bf4e:	f240 523c 	movw	r2, #1340	; 0x53c
 800bf52:	4948      	ldr	r1, [pc, #288]	; (800c074 <tcp_receive+0x730>)
 800bf54:	4848      	ldr	r0, [pc, #288]	; (800c078 <tcp_receive+0x734>)
 800bf56:	f009 ff41 	bl	8015ddc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bf60:	4293      	cmp	r3, r2
 800bf62:	dd06      	ble.n	800bf72 <tcp_receive+0x62e>
 800bf64:	4b42      	ldr	r3, [pc, #264]	; (800c070 <tcp_receive+0x72c>)
 800bf66:	f240 523d 	movw	r2, #1341	; 0x53d
 800bf6a:	4944      	ldr	r1, [pc, #272]	; (800c07c <tcp_receive+0x738>)
 800bf6c:	4842      	ldr	r0, [pc, #264]	; (800c078 <tcp_receive+0x734>)
 800bf6e:	f009 ff35 	bl	8015ddc <iprintf>
      if (inseg.p->len < off) {
 800bf72:	4b3e      	ldr	r3, [pc, #248]	; (800c06c <tcp_receive+0x728>)
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	895b      	ldrh	r3, [r3, #10]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	dd3e      	ble.n	800bffe <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bf80:	4b3a      	ldr	r3, [pc, #232]	; (800c06c <tcp_receive+0x728>)
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	891b      	ldrh	r3, [r3, #8]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	dd06      	ble.n	800bf9c <tcp_receive+0x658>
 800bf8e:	4b38      	ldr	r3, [pc, #224]	; (800c070 <tcp_receive+0x72c>)
 800bf90:	f240 523f 	movw	r2, #1343	; 0x53f
 800bf94:	493a      	ldr	r1, [pc, #232]	; (800c080 <tcp_receive+0x73c>)
 800bf96:	4838      	ldr	r0, [pc, #224]	; (800c078 <tcp_receive+0x734>)
 800bf98:	f009 ff20 	bl	8015ddc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bf9c:	4b33      	ldr	r3, [pc, #204]	; (800c06c <tcp_receive+0x728>)
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	891a      	ldrh	r2, [r3, #8]
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800bfaa:	e00e      	b.n	800bfca <tcp_receive+0x686>
          off -= p->len;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	895b      	ldrh	r3, [r3, #10]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	8a3a      	ldrh	r2, [r7, #16]
 800bfbc:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	895b      	ldrh	r3, [r3, #10]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	dcea      	bgt.n	800bfac <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	425b      	negs	r3, r3
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	b21b      	sxth	r3, r3
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	69b8      	ldr	r0, [r7, #24]
 800bfe4:	f7fc fc6c 	bl	80088c0 <pbuf_header>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d01c      	beq.n	800c028 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800bfee:	4b20      	ldr	r3, [pc, #128]	; (800c070 <tcp_receive+0x72c>)
 800bff0:	f240 524c 	movw	r2, #1356	; 0x54c
 800bff4:	4923      	ldr	r1, [pc, #140]	; (800c084 <tcp_receive+0x740>)
 800bff6:	4820      	ldr	r0, [pc, #128]	; (800c078 <tcp_receive+0x734>)
 800bff8:	f009 fef0 	bl	8015ddc <iprintf>
 800bffc:	e014      	b.n	800c028 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800bffe:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <tcp_receive+0x728>)
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c004:	b292      	uxth	r2, r2
 800c006:	4252      	negs	r2, r2
 800c008:	b292      	uxth	r2, r2
 800c00a:	b212      	sxth	r2, r2
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fc fc56 	bl	80088c0 <pbuf_header>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d006      	beq.n	800c028 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c01a:	4b15      	ldr	r3, [pc, #84]	; (800c070 <tcp_receive+0x72c>)
 800c01c:	f240 5251 	movw	r2, #1361	; 0x551
 800c020:	4918      	ldr	r1, [pc, #96]	; (800c084 <tcp_receive+0x740>)
 800c022:	4815      	ldr	r0, [pc, #84]	; (800c078 <tcp_receive+0x734>)
 800c024:	f009 feda 	bl	8015ddc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c028:	4b10      	ldr	r3, [pc, #64]	; (800c06c <tcp_receive+0x728>)
 800c02a:	891a      	ldrh	r2, [r3, #8]
 800c02c:	4b0e      	ldr	r3, [pc, #56]	; (800c068 <tcp_receive+0x724>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	b299      	uxth	r1, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	b29b      	uxth	r3, r3
 800c038:	1acb      	subs	r3, r1, r3
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4413      	add	r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <tcp_receive+0x728>)
 800c042:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c048:	4a07      	ldr	r2, [pc, #28]	; (800c068 <tcp_receive+0x724>)
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	4b07      	ldr	r3, [pc, #28]	; (800c06c <tcp_receive+0x728>)
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	4a05      	ldr	r2, [pc, #20]	; (800c068 <tcp_receive+0x724>)
 800c052:	6812      	ldr	r2, [r2, #0]
 800c054:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c056:	e025      	b.n	800c0a4 <tcp_receive+0x760>
 800c058:	20000744 	.word	0x20000744
 800c05c:	20000748 	.word	0x20000748
 800c060:	20007224 	.word	0x20007224
 800c064:	2000074a 	.word	0x2000074a
 800c068:	20000740 	.word	0x20000740
 800c06c:	20000720 	.word	0x20000720
 800c070:	080190e8 	.word	0x080190e8
 800c074:	08019370 	.word	0x08019370
 800c078:	0801912c 	.word	0x0801912c
 800c07c:	08019380 	.word	0x08019380
 800c080:	08019390 	.word	0x08019390
 800c084:	080193a0 	.word	0x080193a0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c088:	4b87      	ldr	r3, [pc, #540]	; (800c2a8 <tcp_receive+0x964>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	da06      	bge.n	800c0a4 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7e9b      	ldrb	r3, [r3, #26]
 800c09a:	f043 0302 	orr.w	r3, r3, #2
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0a4:	4b80      	ldr	r3, [pc, #512]	; (800c2a8 <tcp_receive+0x964>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f2c0 8410 	blt.w	800c8d4 <tcp_receive+0xf90>
 800c0b4:	4b7c      	ldr	r3, [pc, #496]	; (800c2a8 <tcp_receive+0x964>)
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0c0:	440b      	add	r3, r1
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f300 8404 	bgt.w	800c8d4 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d0:	4b75      	ldr	r3, [pc, #468]	; (800c2a8 <tcp_receive+0x964>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	f040 8287 	bne.w	800c5e8 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c0da:	4b74      	ldr	r3, [pc, #464]	; (800c2ac <tcp_receive+0x968>)
 800c0dc:	891c      	ldrh	r4, [r3, #8]
 800c0de:	4b73      	ldr	r3, [pc, #460]	; (800c2ac <tcp_receive+0x968>)
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	899b      	ldrh	r3, [r3, #12]
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fb fa78 	bl	80075dc <lwip_htons>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f003 0303 	and.w	r3, r3, #3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <tcp_receive+0x7b6>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e000      	b.n	800c0fc <tcp_receive+0x7b8>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	4423      	add	r3, r4
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	4b6b      	ldr	r3, [pc, #428]	; (800c2b0 <tcp_receive+0x96c>)
 800c102:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c108:	4b69      	ldr	r3, [pc, #420]	; (800c2b0 <tcp_receive+0x96c>)
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d26e      	bcs.n	800c1ee <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c110:	4b66      	ldr	r3, [pc, #408]	; (800c2ac <tcp_receive+0x968>)
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	899b      	ldrh	r3, [r3, #12]
 800c116:	b29b      	uxth	r3, r3
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fb fa5f 	bl	80075dc <lwip_htons>
 800c11e:	4603      	mov	r3, r0
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01b      	beq.n	800c160 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c128:	4b60      	ldr	r3, [pc, #384]	; (800c2ac <tcp_receive+0x968>)
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	899b      	ldrh	r3, [r3, #12]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c134:	b29c      	uxth	r4, r3
 800c136:	4b5d      	ldr	r3, [pc, #372]	; (800c2ac <tcp_receive+0x968>)
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	899b      	ldrh	r3, [r3, #12]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fb fa4c 	bl	80075dc <lwip_htons>
 800c144:	4603      	mov	r3, r0
 800c146:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fb fa45 	bl	80075dc <lwip_htons>
 800c152:	4603      	mov	r3, r0
 800c154:	461a      	mov	r2, r3
 800c156:	4b55      	ldr	r3, [pc, #340]	; (800c2ac <tcp_receive+0x968>)
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	4322      	orrs	r2, r4
 800c15c:	b292      	uxth	r2, r2
 800c15e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c164:	4b51      	ldr	r3, [pc, #324]	; (800c2ac <tcp_receive+0x968>)
 800c166:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c168:	4b50      	ldr	r3, [pc, #320]	; (800c2ac <tcp_receive+0x968>)
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	899b      	ldrh	r3, [r3, #12]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	4618      	mov	r0, r3
 800c172:	f7fb fa33 	bl	80075dc <lwip_htons>
 800c176:	4603      	mov	r3, r0
 800c178:	f003 0302 	and.w	r3, r3, #2
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d005      	beq.n	800c18c <tcp_receive+0x848>
            inseg.len -= 1;
 800c180:	4b4a      	ldr	r3, [pc, #296]	; (800c2ac <tcp_receive+0x968>)
 800c182:	891b      	ldrh	r3, [r3, #8]
 800c184:	3b01      	subs	r3, #1
 800c186:	b29a      	uxth	r2, r3
 800c188:	4b48      	ldr	r3, [pc, #288]	; (800c2ac <tcp_receive+0x968>)
 800c18a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c18c:	4b47      	ldr	r3, [pc, #284]	; (800c2ac <tcp_receive+0x968>)
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	4b46      	ldr	r3, [pc, #280]	; (800c2ac <tcp_receive+0x968>)
 800c192:	891b      	ldrh	r3, [r3, #8]
 800c194:	4619      	mov	r1, r3
 800c196:	4610      	mov	r0, r2
 800c198:	f7fc fa42 	bl	8008620 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c19c:	4b43      	ldr	r3, [pc, #268]	; (800c2ac <tcp_receive+0x968>)
 800c19e:	891c      	ldrh	r4, [r3, #8]
 800c1a0:	4b42      	ldr	r3, [pc, #264]	; (800c2ac <tcp_receive+0x968>)
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	899b      	ldrh	r3, [r3, #12]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fb fa17 	bl	80075dc <lwip_htons>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	f003 0303 	and.w	r3, r3, #3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <tcp_receive+0x878>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e000      	b.n	800c1be <tcp_receive+0x87a>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4423      	add	r3, r4
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	4b3b      	ldr	r3, [pc, #236]	; (800c2b0 <tcp_receive+0x96c>)
 800c1c4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c1c6:	4b3a      	ldr	r3, [pc, #232]	; (800c2b0 <tcp_receive+0x96c>)
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4b36      	ldr	r3, [pc, #216]	; (800c2a8 <tcp_receive+0x964>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	441a      	add	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1da:	440b      	add	r3, r1
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d006      	beq.n	800c1ee <tcp_receive+0x8aa>
 800c1e0:	4b34      	ldr	r3, [pc, #208]	; (800c2b4 <tcp_receive+0x970>)
 800c1e2:	f240 527f 	movw	r2, #1407	; 0x57f
 800c1e6:	4934      	ldr	r1, [pc, #208]	; (800c2b8 <tcp_receive+0x974>)
 800c1e8:	4834      	ldr	r0, [pc, #208]	; (800c2bc <tcp_receive+0x978>)
 800c1ea:	f009 fdf7 	bl	8015ddc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f000 80e1 	beq.w	800c3ba <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1f8:	4b2c      	ldr	r3, [pc, #176]	; (800c2ac <tcp_receive+0x968>)
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	899b      	ldrh	r3, [r3, #12]
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	4618      	mov	r0, r3
 800c202:	f7fb f9eb 	bl	80075dc <lwip_htons>
 800c206:	4603      	mov	r3, r0
 800c208:	f003 0301 	and.w	r3, r3, #1
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d010      	beq.n	800c232 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c210:	e00a      	b.n	800c228 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c216:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800c222:	68b8      	ldr	r0, [r7, #8]
 800c224:	f7fd fe57 	bl	8009ed6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1f0      	bne.n	800c212 <tcp_receive+0x8ce>
 800c230:	e0c3      	b.n	800c3ba <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c236:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c238:	e04f      	b.n	800c2da <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	899b      	ldrh	r3, [r3, #12]
 800c240:	b29b      	uxth	r3, r3
 800c242:	4618      	mov	r0, r3
 800c244:	f7fb f9ca 	bl	80075dc <lwip_htons>
 800c248:	4603      	mov	r3, r0
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d03b      	beq.n	800c2ca <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c252:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <tcp_receive+0x968>)
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	899b      	ldrh	r3, [r3, #12]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fb f9be 	bl	80075dc <lwip_htons>
 800c260:	4603      	mov	r3, r0
 800c262:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c266:	2b00      	cmp	r3, #0
 800c268:	d12f      	bne.n	800c2ca <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c26a:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <tcp_receive+0x968>)
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	899b      	ldrh	r3, [r3, #12]
 800c270:	b29c      	uxth	r4, r3
 800c272:	2001      	movs	r0, #1
 800c274:	f7fb f9b2 	bl	80075dc <lwip_htons>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <tcp_receive+0x968>)
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	4322      	orrs	r2, r4
 800c282:	b292      	uxth	r2, r2
 800c284:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c286:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <tcp_receive+0x968>)
 800c288:	891c      	ldrh	r4, [r3, #8]
 800c28a:	4b08      	ldr	r3, [pc, #32]	; (800c2ac <tcp_receive+0x968>)
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	899b      	ldrh	r3, [r3, #12]
 800c290:	b29b      	uxth	r3, r3
 800c292:	4618      	mov	r0, r3
 800c294:	f7fb f9a2 	bl	80075dc <lwip_htons>
 800c298:	4603      	mov	r3, r0
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00e      	beq.n	800c2c0 <tcp_receive+0x97c>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e00d      	b.n	800c2c2 <tcp_receive+0x97e>
 800c2a6:	bf00      	nop
 800c2a8:	20000740 	.word	0x20000740
 800c2ac:	20000720 	.word	0x20000720
 800c2b0:	2000074a 	.word	0x2000074a
 800c2b4:	080190e8 	.word	0x080190e8
 800c2b8:	080193b4 	.word	0x080193b4
 800c2bc:	0801912c 	.word	0x0801912c
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	4423      	add	r3, r4
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	4b95      	ldr	r3, [pc, #596]	; (800c51c <tcp_receive+0xbd8>)
 800c2c8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800c2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d6:	f7fd fdfe 	bl	8009ed6 <tcp_seg_free>
            while (next &&
 800c2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00e      	beq.n	800c2fe <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c2e0:	4b8e      	ldr	r3, [pc, #568]	; (800c51c <tcp_receive+0xbd8>)
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	4b8e      	ldr	r3, [pc, #568]	; (800c520 <tcp_receive+0xbdc>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	441a      	add	r2, r3
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2f4:	8909      	ldrh	r1, [r1, #8]
 800c2f6:	440b      	add	r3, r1
 800c2f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da9d      	bge.n	800c23a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	2b00      	cmp	r3, #0
 800c302:	d057      	beq.n	800c3b4 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800c304:	4b85      	ldr	r3, [pc, #532]	; (800c51c <tcp_receive+0xbd8>)
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	4b85      	ldr	r3, [pc, #532]	; (800c520 <tcp_receive+0xbdc>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	441a      	add	r2, r3
 800c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dd4b      	ble.n	800c3b4 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	b29a      	uxth	r2, r3
 800c324:	4b7e      	ldr	r3, [pc, #504]	; (800c520 <tcp_receive+0xbdc>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	b29b      	uxth	r3, r3
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	4b7d      	ldr	r3, [pc, #500]	; (800c524 <tcp_receive+0xbe0>)
 800c330:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c332:	4b7c      	ldr	r3, [pc, #496]	; (800c524 <tcp_receive+0xbe0>)
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	899b      	ldrh	r3, [r3, #12]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fb f94e 	bl	80075dc <lwip_htons>
 800c340:	4603      	mov	r3, r0
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <tcp_receive+0xa12>
                inseg.len -= 1;
 800c34a:	4b76      	ldr	r3, [pc, #472]	; (800c524 <tcp_receive+0xbe0>)
 800c34c:	891b      	ldrh	r3, [r3, #8]
 800c34e:	3b01      	subs	r3, #1
 800c350:	b29a      	uxth	r2, r3
 800c352:	4b74      	ldr	r3, [pc, #464]	; (800c524 <tcp_receive+0xbe0>)
 800c354:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c356:	4b73      	ldr	r3, [pc, #460]	; (800c524 <tcp_receive+0xbe0>)
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	4b72      	ldr	r3, [pc, #456]	; (800c524 <tcp_receive+0xbe0>)
 800c35c:	891b      	ldrh	r3, [r3, #8]
 800c35e:	4619      	mov	r1, r3
 800c360:	4610      	mov	r0, r2
 800c362:	f7fc f95d 	bl	8008620 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c366:	4b6f      	ldr	r3, [pc, #444]	; (800c524 <tcp_receive+0xbe0>)
 800c368:	891c      	ldrh	r4, [r3, #8]
 800c36a:	4b6e      	ldr	r3, [pc, #440]	; (800c524 <tcp_receive+0xbe0>)
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	899b      	ldrh	r3, [r3, #12]
 800c370:	b29b      	uxth	r3, r3
 800c372:	4618      	mov	r0, r3
 800c374:	f7fb f932 	bl	80075dc <lwip_htons>
 800c378:	4603      	mov	r3, r0
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <tcp_receive+0xa42>
 800c382:	2301      	movs	r3, #1
 800c384:	e000      	b.n	800c388 <tcp_receive+0xa44>
 800c386:	2300      	movs	r3, #0
 800c388:	4423      	add	r3, r4
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	4b63      	ldr	r3, [pc, #396]	; (800c51c <tcp_receive+0xbd8>)
 800c38e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c390:	4b62      	ldr	r3, [pc, #392]	; (800c51c <tcp_receive+0xbd8>)
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	461a      	mov	r2, r3
 800c396:	4b62      	ldr	r3, [pc, #392]	; (800c520 <tcp_receive+0xbdc>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	441a      	add	r2, r3
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d006      	beq.n	800c3b4 <tcp_receive+0xa70>
 800c3a6:	4b60      	ldr	r3, [pc, #384]	; (800c528 <tcp_receive+0xbe4>)
 800c3a8:	f240 52af 	movw	r2, #1455	; 0x5af
 800c3ac:	495f      	ldr	r1, [pc, #380]	; (800c52c <tcp_receive+0xbe8>)
 800c3ae:	4860      	ldr	r0, [pc, #384]	; (800c530 <tcp_receive+0xbec>)
 800c3b0:	f009 fd14 	bl	8015ddc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b8:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c3ba:	4b58      	ldr	r3, [pc, #352]	; (800c51c <tcp_receive+0xbd8>)
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4b57      	ldr	r3, [pc, #348]	; (800c520 <tcp_receive+0xbdc>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	441a      	add	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3ce:	4b53      	ldr	r3, [pc, #332]	; (800c51c <tcp_receive+0xbd8>)
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d206      	bcs.n	800c3e4 <tcp_receive+0xaa0>
 800c3d6:	4b54      	ldr	r3, [pc, #336]	; (800c528 <tcp_receive+0xbe4>)
 800c3d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c3dc:	4955      	ldr	r1, [pc, #340]	; (800c534 <tcp_receive+0xbf0>)
 800c3de:	4854      	ldr	r0, [pc, #336]	; (800c530 <tcp_receive+0xbec>)
 800c3e0:	f009 fcfc 	bl	8015ddc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3e8:	4b4c      	ldr	r3, [pc, #304]	; (800c51c <tcp_receive+0xbd8>)
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7fd f8e1 	bl	80095bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c3fa:	4b4a      	ldr	r3, [pc, #296]	; (800c524 <tcp_receive+0xbe0>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	891b      	ldrh	r3, [r3, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d006      	beq.n	800c412 <tcp_receive+0xace>
          recv_data = inseg.p;
 800c404:	4b47      	ldr	r3, [pc, #284]	; (800c524 <tcp_receive+0xbe0>)
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	4a4b      	ldr	r2, [pc, #300]	; (800c538 <tcp_receive+0xbf4>)
 800c40a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c40c:	4b45      	ldr	r3, [pc, #276]	; (800c524 <tcp_receive+0xbe0>)
 800c40e:	2200      	movs	r2, #0
 800c410:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c412:	4b44      	ldr	r3, [pc, #272]	; (800c524 <tcp_receive+0xbe0>)
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	899b      	ldrh	r3, [r3, #12]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fb f8de 	bl	80075dc <lwip_htons>
 800c420:	4603      	mov	r3, r0
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 80b4 	beq.w	800c594 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c42c:	4b43      	ldr	r3, [pc, #268]	; (800c53c <tcp_receive+0xbf8>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	f043 0320 	orr.w	r3, r3, #32
 800c434:	b2da      	uxtb	r2, r3
 800c436:	4b41      	ldr	r3, [pc, #260]	; (800c53c <tcp_receive+0xbf8>)
 800c438:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c43a:	e0ab      	b.n	800c594 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c440:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	4a35      	ldr	r2, [pc, #212]	; (800c520 <tcp_receive+0xbdc>)
 800c44c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	891b      	ldrh	r3, [r3, #8]
 800c452:	461c      	mov	r4, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	899b      	ldrh	r3, [r3, #12]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fb f8bd 	bl	80075dc <lwip_htons>
 800c462:	4603      	mov	r3, r0
 800c464:	f003 0303 	and.w	r3, r3, #3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <tcp_receive+0xb2c>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e000      	b.n	800c472 <tcp_receive+0xb2e>
 800c470:	2300      	movs	r3, #0
 800c472:	191a      	adds	r2, r3, r4
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	441a      	add	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c482:	461c      	mov	r4, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	891b      	ldrh	r3, [r3, #8]
 800c488:	461d      	mov	r5, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	899b      	ldrh	r3, [r3, #12]
 800c490:	b29b      	uxth	r3, r3
 800c492:	4618      	mov	r0, r3
 800c494:	f7fb f8a2 	bl	80075dc <lwip_htons>
 800c498:	4603      	mov	r3, r0
 800c49a:	f003 0303 	and.w	r3, r3, #3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <tcp_receive+0xb62>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e000      	b.n	800c4a8 <tcp_receive+0xb64>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	442b      	add	r3, r5
 800c4aa:	429c      	cmp	r4, r3
 800c4ac:	d206      	bcs.n	800c4bc <tcp_receive+0xb78>
 800c4ae:	4b1e      	ldr	r3, [pc, #120]	; (800c528 <tcp_receive+0xbe4>)
 800c4b0:	f240 52de 	movw	r2, #1502	; 0x5de
 800c4b4:	4922      	ldr	r1, [pc, #136]	; (800c540 <tcp_receive+0xbfc>)
 800c4b6:	481e      	ldr	r0, [pc, #120]	; (800c530 <tcp_receive+0xbec>)
 800c4b8:	f009 fc90 	bl	8015ddc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	891b      	ldrh	r3, [r3, #8]
 800c4c0:	461c      	mov	r4, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	899b      	ldrh	r3, [r3, #12]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fb f886 	bl	80075dc <lwip_htons>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f003 0303 	and.w	r3, r3, #3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <tcp_receive+0xb9a>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e000      	b.n	800c4e0 <tcp_receive+0xb9c>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	1919      	adds	r1, r3, r4
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4e6:	b28b      	uxth	r3, r1
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f7fd f863 	bl	80095bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	891b      	ldrh	r3, [r3, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d028      	beq.n	800c552 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c500:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <tcp_receive+0xbf4>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d01d      	beq.n	800c544 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800c508:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <tcp_receive+0xbf4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7fc fac6 	bl	8008aa4 <pbuf_cat>
 800c518:	e018      	b.n	800c54c <tcp_receive+0xc08>
 800c51a:	bf00      	nop
 800c51c:	2000074a 	.word	0x2000074a
 800c520:	20000740 	.word	0x20000740
 800c524:	20000720 	.word	0x20000720
 800c528:	080190e8 	.word	0x080190e8
 800c52c:	080193ec 	.word	0x080193ec
 800c530:	0801912c 	.word	0x0801912c
 800c534:	08019428 	.word	0x08019428
 800c538:	20000750 	.word	0x20000750
 800c53c:	2000074d 	.word	0x2000074d
 800c540:	08019448 	.word	0x08019448
            } else {
              recv_data = cseg->p;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4a71      	ldr	r2, [pc, #452]	; (800c710 <tcp_receive+0xdcc>)
 800c54a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	899b      	ldrh	r3, [r3, #12]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fb f83e 	bl	80075dc <lwip_htons>
 800c560:	4603      	mov	r3, r0
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00d      	beq.n	800c586 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c56a:	4b6a      	ldr	r3, [pc, #424]	; (800c714 <tcp_receive+0xdd0>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	f043 0320 	orr.w	r3, r3, #32
 800c572:	b2da      	uxtb	r2, r3
 800c574:	4b67      	ldr	r3, [pc, #412]	; (800c714 <tcp_receive+0xdd0>)
 800c576:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7d1b      	ldrb	r3, [r3, #20]
 800c57c:	2b04      	cmp	r3, #4
 800c57e:	d102      	bne.n	800c586 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2207      	movs	r2, #7
 800c584:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7fd fca1 	bl	8009ed6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d008      	beq.n	800c5ae <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	f43f af47 	beq.w	800c43c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7e9b      	ldrb	r3, [r3, #26]
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00e      	beq.n	800c5d8 <tcp_receive+0xc94>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	7e9b      	ldrb	r3, [r3, #26]
 800c5be:	f023 0301 	bic.w	r3, r3, #1
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	769a      	strb	r2, [r3, #26]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	7e9b      	ldrb	r3, [r3, #26]
 800c5cc:	f043 0302 	orr.w	r3, r3, #2
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c5d6:	e181      	b.n	800c8dc <tcp_receive+0xf98>
        tcp_ack(pcb);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	7e9b      	ldrb	r3, [r3, #26]
 800c5dc:	f043 0301 	orr.w	r3, r3, #1
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c5e6:	e179      	b.n	800c8dc <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f001 f8c5 	bl	800d778 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c5f6:	4848      	ldr	r0, [pc, #288]	; (800c718 <tcp_receive+0xdd4>)
 800c5f8:	f7fd fc94 	bl	8009f24 <tcp_seg_copy>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800c602:	e16b      	b.n	800c8dc <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c60c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c60e:	e150      	b.n	800c8b2 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	4b41      	ldr	r3, [pc, #260]	; (800c71c <tcp_receive+0xdd8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d11d      	bne.n	800c65a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c61e:	4b3e      	ldr	r3, [pc, #248]	; (800c718 <tcp_receive+0xdd4>)
 800c620:	891a      	ldrh	r2, [r3, #8]
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	891b      	ldrh	r3, [r3, #8]
 800c626:	429a      	cmp	r2, r3
 800c628:	f240 8148 	bls.w	800c8bc <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800c62c:	483a      	ldr	r0, [pc, #232]	; (800c718 <tcp_receive+0xdd4>)
 800c62e:	f7fd fc79 	bl	8009f24 <tcp_seg_copy>
 800c632:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 8142 	beq.w	800c8c0 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800c63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <tcp_receive+0xd06>
                    prev->next = cseg;
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	e002      	b.n	800c650 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7ff f900 	bl	800b858 <tcp_oos_insert_segment>
                }
                break;
 800c658:	e132      	b.n	800c8c0 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d117      	bne.n	800c690 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c660:	4b2e      	ldr	r3, [pc, #184]	; (800c71c <tcp_receive+0xdd8>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da57      	bge.n	800c720 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800c670:	4829      	ldr	r0, [pc, #164]	; (800c718 <tcp_receive+0xdd4>)
 800c672:	f7fd fc57 	bl	8009f24 <tcp_seg_copy>
 800c676:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 8122 	beq.w	800c8c4 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800c686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f7ff f8e5 	bl	800b858 <tcp_oos_insert_segment>
                  }
                  break;
 800c68e:	e119      	b.n	800c8c4 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800c690:	4b22      	ldr	r3, [pc, #136]	; (800c71c <tcp_receive+0xdd8>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	3b01      	subs	r3, #1
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	db3e      	blt.n	800c720 <tcp_receive+0xddc>
 800c6a2:	4b1e      	ldr	r3, [pc, #120]	; (800c71c <tcp_receive+0xdd8>)
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	dc35      	bgt.n	800c720 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800c6b4:	4818      	ldr	r0, [pc, #96]	; (800c718 <tcp_receive+0xdd4>)
 800c6b6:	f7fd fc35 	bl	8009f24 <tcp_seg_copy>
 800c6ba:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 8102 	beq.w	800c8c8 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6cc:	8912      	ldrh	r2, [r2, #8]
 800c6ce:	441a      	add	r2, r3
 800c6d0:	4b12      	ldr	r3, [pc, #72]	; (800c71c <tcp_receive+0xdd8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	dd12      	ble.n	800c700 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c6da:	4b10      	ldr	r3, [pc, #64]	; (800c71c <tcp_receive+0xdd8>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	891b      	ldrh	r3, [r3, #8]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	f7fb ff90 	bl	8008620 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f7ff f8a5 	bl	800b858 <tcp_oos_insert_segment>
                  }
                  break;
 800c70e:	e0db      	b.n	800c8c8 <tcp_receive+0xf84>
 800c710:	20000750 	.word	0x20000750
 800c714:	2000074d 	.word	0x2000074d
 800c718:	20000720 	.word	0x20000720
 800c71c:	20000740 	.word	0x20000740
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	f040 80bf 	bne.w	800c8a8 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c72a:	4b7c      	ldr	r3, [pc, #496]	; (800c91c <tcp_receive+0xfd8>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c736:	2b00      	cmp	r3, #0
 800c738:	f340 80b6 	ble.w	800c8a8 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	899b      	ldrh	r3, [r3, #12]
 800c742:	b29b      	uxth	r3, r3
 800c744:	4618      	mov	r0, r3
 800c746:	f7fa ff49 	bl	80075dc <lwip_htons>
 800c74a:	4603      	mov	r3, r0
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	f040 80bb 	bne.w	800c8cc <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c756:	4872      	ldr	r0, [pc, #456]	; (800c920 <tcp_receive+0xfdc>)
 800c758:	f7fd fbe4 	bl	8009f24 <tcp_seg_copy>
 800c75c:	4602      	mov	r2, r0
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80b2 	beq.w	800c8d0 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c774:	8912      	ldrh	r2, [r2, #8]
 800c776:	441a      	add	r2, r3
 800c778:	4b68      	ldr	r3, [pc, #416]	; (800c91c <tcp_receive+0xfd8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dd12      	ble.n	800c7a8 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c782:	4b66      	ldr	r3, [pc, #408]	; (800c91c <tcp_receive+0xfd8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	b29a      	uxth	r2, r3
 800c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	b29a      	uxth	r2, r3
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	891b      	ldrh	r3, [r3, #8]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	f7fb ff3c 	bl	8008620 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c7a8:	4b5e      	ldr	r3, [pc, #376]	; (800c924 <tcp_receive+0xfe0>)
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4b5b      	ldr	r3, [pc, #364]	; (800c91c <tcp_receive+0xfd8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	441a      	add	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c7bc:	440b      	add	r3, r1
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f340 8085 	ble.w	800c8d0 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	899b      	ldrh	r3, [r3, #12]
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fa ff03 	bl	80075dc <lwip_htons>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01e      	beq.n	800c81e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	899b      	ldrh	r3, [r3, #12]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c7ee:	b29c      	uxth	r4, r3
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	899b      	ldrh	r3, [r3, #12]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fa feee 	bl	80075dc <lwip_htons>
 800c800:	4603      	mov	r3, r0
 800c802:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c806:	b29b      	uxth	r3, r3
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fa fee7 	bl	80075dc <lwip_htons>
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	4322      	orrs	r2, r4
 800c81a:	b292      	uxth	r2, r2
 800c81c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	b29a      	uxth	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c828:	4413      	add	r3, r2
 800c82a:	b299      	uxth	r1, r3
 800c82c:	4b3b      	ldr	r3, [pc, #236]	; (800c91c <tcp_receive+0xfd8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	b29a      	uxth	r2, r3
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	1a8a      	subs	r2, r1, r2
 800c838:	b292      	uxth	r2, r2
 800c83a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	891b      	ldrh	r3, [r3, #8]
 800c848:	4619      	mov	r1, r3
 800c84a:	4610      	mov	r0, r2
 800c84c:	f7fb fee8 	bl	8008620 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	891c      	ldrh	r4, [r3, #8]
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	899b      	ldrh	r3, [r3, #12]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	4618      	mov	r0, r3
 800c862:	f7fa febb 	bl	80075dc <lwip_htons>
 800c866:	4603      	mov	r3, r0
 800c868:	f003 0303 	and.w	r3, r3, #3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <tcp_receive+0xf30>
 800c870:	2301      	movs	r3, #1
 800c872:	e000      	b.n	800c876 <tcp_receive+0xf32>
 800c874:	2300      	movs	r3, #0
 800c876:	4423      	add	r3, r4
 800c878:	b29a      	uxth	r2, r3
 800c87a:	4b2a      	ldr	r3, [pc, #168]	; (800c924 <tcp_receive+0xfe0>)
 800c87c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c87e:	4b29      	ldr	r3, [pc, #164]	; (800c924 <tcp_receive+0xfe0>)
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	461a      	mov	r2, r3
 800c884:	4b25      	ldr	r3, [pc, #148]	; (800c91c <tcp_receive+0xfd8>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	441a      	add	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c892:	440b      	add	r3, r1
 800c894:	429a      	cmp	r2, r3
 800c896:	d01b      	beq.n	800c8d0 <tcp_receive+0xf8c>
 800c898:	4b23      	ldr	r3, [pc, #140]	; (800c928 <tcp_receive+0xfe4>)
 800c89a:	f240 627b 	movw	r2, #1659	; 0x67b
 800c89e:	4923      	ldr	r1, [pc, #140]	; (800c92c <tcp_receive+0xfe8>)
 800c8a0:	4823      	ldr	r0, [pc, #140]	; (800c930 <tcp_receive+0xfec>)
 800c8a2:	f009 fa9b 	bl	8015ddc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c8a6:	e013      	b.n	800c8d0 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f47f aeab 	bne.w	800c610 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800c8ba:	e00f      	b.n	800c8dc <tcp_receive+0xf98>
                break;
 800c8bc:	bf00      	nop
 800c8be:	e00d      	b.n	800c8dc <tcp_receive+0xf98>
                break;
 800c8c0:	bf00      	nop
 800c8c2:	e00b      	b.n	800c8dc <tcp_receive+0xf98>
                  break;
 800c8c4:	bf00      	nop
 800c8c6:	e009      	b.n	800c8dc <tcp_receive+0xf98>
                  break;
 800c8c8:	bf00      	nop
 800c8ca:	e007      	b.n	800c8dc <tcp_receive+0xf98>
                  break;
 800c8cc:	bf00      	nop
 800c8ce:	e005      	b.n	800c8dc <tcp_receive+0xf98>
                break;
 800c8d0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800c8d2:	e003      	b.n	800c8dc <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 ff4f 	bl	800d778 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8da:	e01a      	b.n	800c912 <tcp_receive+0xfce>
 800c8dc:	e019      	b.n	800c912 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c8de:	4b0f      	ldr	r3, [pc, #60]	; (800c91c <tcp_receive+0xfd8>)
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	db0a      	blt.n	800c902 <tcp_receive+0xfbe>
 800c8ec:	4b0b      	ldr	r3, [pc, #44]	; (800c91c <tcp_receive+0xfd8>)
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8f8:	440b      	add	r3, r1
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	dd07      	ble.n	800c912 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7e9b      	ldrb	r3, [r3, #26]
 800c906:	f043 0302 	orr.w	r3, r3, #2
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800c910:	e7ff      	b.n	800c912 <tcp_receive+0xfce>
 800c912:	bf00      	nop
 800c914:	3734      	adds	r7, #52	; 0x34
 800c916:	46bd      	mov	sp, r7
 800c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20000740 	.word	0x20000740
 800c920:	20000720 	.word	0x20000720
 800c924:	2000074a 	.word	0x2000074a
 800c928:	080190e8 	.word	0x080190e8
 800c92c:	080193b4 	.word	0x080193b4
 800c930:	0801912c 	.word	0x0801912c

0800c934 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c93a:	4b18      	ldr	r3, [pc, #96]	; (800c99c <tcp_getoptbyte+0x68>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d005      	beq.n	800c94e <tcp_getoptbyte+0x1a>
 800c942:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <tcp_getoptbyte+0x6c>)
 800c944:	881a      	ldrh	r2, [r3, #0]
 800c946:	4b17      	ldr	r3, [pc, #92]	; (800c9a4 <tcp_getoptbyte+0x70>)
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d20e      	bcs.n	800c96c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c94e:	4b16      	ldr	r3, [pc, #88]	; (800c9a8 <tcp_getoptbyte+0x74>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3314      	adds	r3, #20
 800c954:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800c956:	4b12      	ldr	r3, [pc, #72]	; (800c9a0 <tcp_getoptbyte+0x6c>)
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	b291      	uxth	r1, r2
 800c95e:	4a10      	ldr	r2, [pc, #64]	; (800c9a0 <tcp_getoptbyte+0x6c>)
 800c960:	8011      	strh	r1, [r2, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	4413      	add	r3, r2
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	e010      	b.n	800c98e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c96c:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <tcp_getoptbyte+0x6c>)
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	b291      	uxth	r1, r2
 800c974:	4a0a      	ldr	r2, [pc, #40]	; (800c9a0 <tcp_getoptbyte+0x6c>)
 800c976:	8011      	strh	r1, [r2, #0]
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <tcp_getoptbyte+0x70>)
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800c984:	4b05      	ldr	r3, [pc, #20]	; (800c99c <tcp_getoptbyte+0x68>)
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	79fb      	ldrb	r3, [r7, #7]
 800c98a:	4413      	add	r3, r2
 800c98c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c98e:	4618      	mov	r0, r3
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	20000738 	.word	0x20000738
 800c9a0:	2000073c 	.word	0x2000073c
 800c9a4:	20000736 	.word	0x20000736
 800c9a8:	20000730 	.word	0x20000730

0800c9ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ca6c <tcp_parseopt+0xc0>)
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d053      	beq.n	800ca64 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c9bc:	4b2c      	ldr	r3, [pc, #176]	; (800ca70 <tcp_parseopt+0xc4>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	801a      	strh	r2, [r3, #0]
 800c9c2:	e043      	b.n	800ca4c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800c9c4:	f7ff ffb6 	bl	800c934 <tcp_getoptbyte>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d03c      	beq.n	800ca4c <tcp_parseopt+0xa0>
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d002      	beq.n	800c9dc <tcp_parseopt+0x30>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d03f      	beq.n	800ca5a <tcp_parseopt+0xae>
 800c9da:	e026      	b.n	800ca2a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c9dc:	f7ff ffaa 	bl	800c934 <tcp_getoptbyte>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	d13b      	bne.n	800ca5e <tcp_parseopt+0xb2>
 800c9e6:	4b22      	ldr	r3, [pc, #136]	; (800ca70 <tcp_parseopt+0xc4>)
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	3302      	adds	r3, #2
 800c9ec:	4a1f      	ldr	r2, [pc, #124]	; (800ca6c <tcp_parseopt+0xc0>)
 800c9ee:	8812      	ldrh	r2, [r2, #0]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	dc34      	bgt.n	800ca5e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c9f4:	f7ff ff9e 	bl	800c934 <tcp_getoptbyte>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	021b      	lsls	r3, r3, #8
 800c9fe:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800ca00:	f7ff ff98 	bl	800c934 <tcp_getoptbyte>
 800ca04:	4603      	mov	r3, r0
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	89bb      	ldrh	r3, [r7, #12]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ca0e:	89bb      	ldrh	r3, [r7, #12]
 800ca10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca14:	d804      	bhi.n	800ca20 <tcp_parseopt+0x74>
 800ca16:	89bb      	ldrh	r3, [r7, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <tcp_parseopt+0x74>
 800ca1c:	89ba      	ldrh	r2, [r7, #12]
 800ca1e:	e001      	b.n	800ca24 <tcp_parseopt+0x78>
 800ca20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800ca28:	e010      	b.n	800ca4c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800ca2a:	f7ff ff83 	bl	800c934 <tcp_getoptbyte>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800ca32:	7afb      	ldrb	r3, [r7, #11]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d914      	bls.n	800ca62 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800ca38:	7afb      	ldrb	r3, [r7, #11]
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	4b0c      	ldr	r3, [pc, #48]	; (800ca70 <tcp_parseopt+0xc4>)
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	4413      	add	r3, r2
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	3b02      	subs	r3, #2
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <tcp_parseopt+0xc4>)
 800ca4a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca4c:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <tcp_parseopt+0xc4>)
 800ca4e:	881a      	ldrh	r2, [r3, #0]
 800ca50:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <tcp_parseopt+0xc0>)
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d3b5      	bcc.n	800c9c4 <tcp_parseopt+0x18>
 800ca58:	e004      	b.n	800ca64 <tcp_parseopt+0xb8>
        return;
 800ca5a:	bf00      	nop
 800ca5c:	e002      	b.n	800ca64 <tcp_parseopt+0xb8>
          return;
 800ca5e:	bf00      	nop
 800ca60:	e000      	b.n	800ca64 <tcp_parseopt+0xb8>
          return;
 800ca62:	bf00      	nop
      }
    }
  }
}
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20000734 	.word	0x20000734
 800ca70:	2000073c 	.word	0x2000073c

0800ca74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ca74:	b480      	push	{r7}
 800ca76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ca78:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <tcp_trigger_input_pcb_close+0x1c>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	f043 0310 	orr.w	r3, r3, #16
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	4b03      	ldr	r3, [pc, #12]	; (800ca90 <tcp_trigger_input_pcb_close+0x1c>)
 800ca84:	701a      	strb	r2, [r3, #0]
}
 800ca86:	bf00      	nop
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	2000074d 	.word	0x2000074d

0800ca94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	607b      	str	r3, [r7, #4]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	817b      	strh	r3, [r7, #10]
 800caa2:	4613      	mov	r3, r2
 800caa4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800caa6:	897a      	ldrh	r2, [r7, #10]
 800caa8:	893b      	ldrh	r3, [r7, #8]
 800caaa:	4413      	add	r3, r2
 800caac:	b29b      	uxth	r3, r3
 800caae:	3314      	adds	r3, #20
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	2200      	movs	r2, #0
 800cab4:	4619      	mov	r1, r3
 800cab6:	2001      	movs	r0, #1
 800cab8:	f7fb fbb4 	bl	8008224 <pbuf_alloc>
 800cabc:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d057      	beq.n	800cb74 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	895b      	ldrh	r3, [r3, #10]
 800cac8:	461a      	mov	r2, r3
 800caca:	897b      	ldrh	r3, [r7, #10]
 800cacc:	3314      	adds	r3, #20
 800cace:	429a      	cmp	r2, r3
 800cad0:	da05      	bge.n	800cade <tcp_output_alloc_header+0x4a>
 800cad2:	4b2b      	ldr	r3, [pc, #172]	; (800cb80 <tcp_output_alloc_header+0xec>)
 800cad4:	2273      	movs	r2, #115	; 0x73
 800cad6:	492b      	ldr	r1, [pc, #172]	; (800cb84 <tcp_output_alloc_header+0xf0>)
 800cad8:	482b      	ldr	r0, [pc, #172]	; (800cb88 <tcp_output_alloc_header+0xf4>)
 800cada:	f009 f97f 	bl	8015ddc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	8adb      	ldrh	r3, [r3, #22]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fa fd77 	bl	80075dc <lwip_htons>
 800caee:	4603      	mov	r3, r0
 800caf0:	461a      	mov	r2, r3
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	8b1b      	ldrh	r3, [r3, #24]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fa fd6e 	bl	80075dc <lwip_htons>
 800cb00:	4603      	mov	r3, r0
 800cb02:	461a      	mov	r2, r3
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fa fd70 	bl	80075f8 <lwip_htonl>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800cb1e:	897b      	ldrh	r3, [r7, #10]
 800cb20:	089b      	lsrs	r3, r3, #2
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	3305      	adds	r3, #5
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	031b      	lsls	r3, r3, #12
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f043 0310 	orr.w	r3, r3, #16
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fa fd52 	bl	80075dc <lwip_htons>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fa fd49 	bl	80075dc <lwip_htons>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	2200      	movs	r2, #0
 800cb56:	741a      	strb	r2, [r3, #16]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	749a      	strb	r2, [r3, #18]
 800cb62:	2200      	movs	r2, #0
 800cb64:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cb6e:	441a      	add	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cb74:	697b      	ldr	r3, [r7, #20]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	08019470 	.word	0x08019470
 800cb84:	080194a4 	.word	0x080194a4
 800cb88:	080194d4 	.word	0x080194d4

0800cb8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cb8c:	b590      	push	{r4, r7, lr}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d02d      	beq.n	800cbf8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	e002      	b.n	800cbaa <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1f8      	bne.n	800cba4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	899b      	ldrh	r3, [r3, #12]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fa fd0e 	bl	80075dc <lwip_htons>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	f003 0307 	and.w	r3, r3, #7
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d116      	bne.n	800cbf8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	899b      	ldrh	r3, [r3, #12]
 800cbd0:	b29c      	uxth	r4, r3
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	f7fa fd02 	bl	80075dc <lwip_htons>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	461a      	mov	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	4322      	orrs	r2, r4
 800cbe2:	b292      	uxth	r2, r2
 800cbe4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	7e9b      	ldrb	r3, [r3, #26]
 800cbea:	f043 0320 	orr.w	r3, r3, #32
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e004      	b.n	800cc02 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fcc0 	bl	800d580 <tcp_enqueue_flags>
 800cc00:	4603      	mov	r3, r0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd90      	pop	{r4, r7, pc}
	...

0800cc0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cc0c:	b590      	push	{r4, r7, lr}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	603b      	str	r3, [r7, #0]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cc1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 0304 	and.w	r3, r3, #4
 800cc28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc2a:	2003      	movs	r0, #3
 800cc2c:	f7fb f8ee 	bl	8007e0c <memp_malloc>
 800cc30:	6138      	str	r0, [r7, #16]
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d104      	bne.n	800cc42 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cc38:	68b8      	ldr	r0, [r7, #8]
 800cc3a:	f7fb fe65 	bl	8008908 <pbuf_free>
    return NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e061      	b.n	800cd06 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cc48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	891a      	ldrh	r2, [r3, #8]
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d205      	bcs.n	800cc6e <tcp_create_segment+0x62>
 800cc62:	4b2b      	ldr	r3, [pc, #172]	; (800cd10 <tcp_create_segment+0x104>)
 800cc64:	22ba      	movs	r2, #186	; 0xba
 800cc66:	492b      	ldr	r1, [pc, #172]	; (800cd14 <tcp_create_segment+0x108>)
 800cc68:	482b      	ldr	r0, [pc, #172]	; (800cd18 <tcp_create_segment+0x10c>)
 800cc6a:	f009 f8b7 	bl	8015ddc <iprintf>
  seg->len = p->tot_len - optlen;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	891a      	ldrh	r2, [r3, #8]
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800cc7e:	2114      	movs	r1, #20
 800cc80:	68b8      	ldr	r0, [r7, #8]
 800cc82:	f7fb fe1d 	bl	80088c0 <pbuf_header>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d004      	beq.n	800cc96 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cc8c:	6938      	ldr	r0, [r7, #16]
 800cc8e:	f7fd f922 	bl	8009ed6 <tcp_seg_free>
    return NULL;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e037      	b.n	800cd06 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	8ada      	ldrh	r2, [r3, #22]
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	68dc      	ldr	r4, [r3, #12]
 800cca8:	4610      	mov	r0, r2
 800ccaa:	f7fa fc97 	bl	80075dc <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	8b1a      	ldrh	r2, [r3, #24]
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	68dc      	ldr	r4, [r3, #12]
 800ccba:	4610      	mov	r0, r2
 800ccbc:	f7fa fc8e 	bl	80075dc <lwip_htons>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	68dc      	ldr	r4, [r3, #12]
 800ccc8:	6838      	ldr	r0, [r7, #0]
 800ccca:	f7fa fc95 	bl	80075f8 <lwip_htonl>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	089b      	lsrs	r3, r3, #2
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	3305      	adds	r3, #5
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	031b      	lsls	r3, r3, #12
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	4313      	orrs	r3, r2
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	68dc      	ldr	r4, [r3, #12]
 800ccee:	4610      	mov	r0, r2
 800ccf0:	f7fa fc74 	bl	80075dc <lwip_htons>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	749a      	strb	r2, [r3, #18]
 800cd00:	2200      	movs	r2, #0
 800cd02:	74da      	strb	r2, [r3, #19]
  return seg;
 800cd04:	693b      	ldr	r3, [r7, #16]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	371c      	adds	r7, #28
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd90      	pop	{r4, r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	08019470 	.word	0x08019470
 800cd14:	080194fc 	.word	0x080194fc
 800cd18:	080194d4 	.word	0x080194d4

0800cd1c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	607b      	str	r3, [r7, #4]
 800cd24:	4603      	mov	r3, r0
 800cd26:	73fb      	strb	r3, [r7, #15]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	81bb      	strh	r3, [r7, #12]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800cd30:	89bb      	ldrh	r3, [r7, #12]
 800cd32:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cd34:	89ba      	ldrh	r2, [r7, #12]
 800cd36:	897b      	ldrh	r3, [r7, #10]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d221      	bcs.n	800cd80 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cd3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd40:	f003 0302 	and.w	r3, r3, #2
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d111      	bne.n	800cd6c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	7e9b      	ldrb	r3, [r3, #26]
 800cd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d115      	bne.n	800cd80 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800cd54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d009      	beq.n	800cd80 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800cd6c:	89bb      	ldrh	r3, [r7, #12]
 800cd6e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800cd72:	f023 0203 	bic.w	r2, r3, #3
 800cd76:	897b      	ldrh	r3, [r7, #10]
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	bf28      	it	cs
 800cd7c:	4613      	movcs	r3, r2
 800cd7e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cd80:	8af9      	ldrh	r1, [r7, #22]
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2200      	movs	r2, #0
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fb fa4c 	bl	8008224 <pbuf_alloc>
 800cd8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800cd94:	2300      	movs	r3, #0
 800cd96:	e019      	b.n	800cdcc <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <tcp_pbuf_prealloc+0x92>
 800cda0:	4b0c      	ldr	r3, [pc, #48]	; (800cdd4 <tcp_pbuf_prealloc+0xb8>)
 800cda2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800cda6:	490c      	ldr	r1, [pc, #48]	; (800cdd8 <tcp_pbuf_prealloc+0xbc>)
 800cda8:	480c      	ldr	r0, [pc, #48]	; (800cddc <tcp_pbuf_prealloc+0xc0>)
 800cdaa:	f009 f817 	bl	8015ddc <iprintf>
  *oversize = p->len - length;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	895a      	ldrh	r2, [r3, #10]
 800cdb2:	89bb      	ldrh	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	89ba      	ldrh	r2, [r7, #12]
 800cdc0:	811a      	strh	r2, [r3, #8]
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	891a      	ldrh	r2, [r3, #8]
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	815a      	strh	r2, [r3, #10]
  return p;
 800cdca:	693b      	ldr	r3, [r7, #16]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	08019470 	.word	0x08019470
 800cdd8:	08019514 	.word	0x08019514
 800cddc:	080194d4 	.word	0x080194d4

0800cde0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7d1b      	ldrb	r3, [r3, #20]
 800cdf0:	2b04      	cmp	r3, #4
 800cdf2:	d00e      	beq.n	800ce12 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cdf8:	2b07      	cmp	r3, #7
 800cdfa:	d00a      	beq.n	800ce12 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d006      	beq.n	800ce12 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	d002      	beq.n	800ce12 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ce0c:	f06f 030a 	mvn.w	r3, #10
 800ce10:	e04f      	b.n	800ceb2 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800ce12:	887b      	ldrh	r3, [r7, #2]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <tcp_write_checks+0x3c>
    return ERR_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e04a      	b.n	800ceb2 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce22:	887a      	ldrh	r2, [r7, #2]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d909      	bls.n	800ce3c <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7e9b      	ldrb	r3, [r3, #26]
 800ce2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ce36:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3a:	e03a      	b.n	800ceb2 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce42:	2b13      	cmp	r3, #19
 800ce44:	d806      	bhi.n	800ce54 <tcp_write_checks+0x74>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d909      	bls.n	800ce68 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	7e9b      	ldrb	r3, [r3, #26]
 800ce58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ce62:	f04f 33ff 	mov.w	r3, #4294967295
 800ce66:	e024      	b.n	800ceb2 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00f      	beq.n	800ce92 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d11a      	bne.n	800ceb0 <tcp_write_checks+0xd0>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d116      	bne.n	800ceb0 <tcp_write_checks+0xd0>
 800ce82:	4b0e      	ldr	r3, [pc, #56]	; (800cebc <tcp_write_checks+0xdc>)
 800ce84:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800ce88:	490d      	ldr	r1, [pc, #52]	; (800cec0 <tcp_write_checks+0xe0>)
 800ce8a:	480e      	ldr	r0, [pc, #56]	; (800cec4 <tcp_write_checks+0xe4>)
 800ce8c:	f008 ffa6 	bl	8015ddc <iprintf>
 800ce90:	e00e      	b.n	800ceb0 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d103      	bne.n	800cea2 <tcp_write_checks+0xc2>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d006      	beq.n	800ceb0 <tcp_write_checks+0xd0>
 800cea2:	4b06      	ldr	r3, [pc, #24]	; (800cebc <tcp_write_checks+0xdc>)
 800cea4:	f240 1259 	movw	r2, #345	; 0x159
 800cea8:	4907      	ldr	r1, [pc, #28]	; (800cec8 <tcp_write_checks+0xe8>)
 800ceaa:	4806      	ldr	r0, [pc, #24]	; (800cec4 <tcp_write_checks+0xe4>)
 800ceac:	f008 ff96 	bl	8015ddc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	08019470 	.word	0x08019470
 800cec0:	08019528 	.word	0x08019528
 800cec4:	080194d4 	.word	0x080194d4
 800cec8:	08019564 	.word	0x08019564

0800cecc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cecc:	b590      	push	{r4, r7, lr}
 800cece:	b09b      	sub	sp, #108	; 0x6c
 800ced0:	af04      	add	r7, sp, #16
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	4611      	mov	r1, r2
 800ced8:	461a      	mov	r2, r3
 800ceda:	460b      	mov	r3, r1
 800cedc:	80fb      	strh	r3, [r7, #6]
 800cede:	4613      	mov	r3, r2
 800cee0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cee2:	2300      	movs	r3, #0
 800cee4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	653b      	str	r3, [r7, #80]	; 0x50
 800ceea:	2300      	movs	r3, #0
 800ceec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceee:	2300      	movs	r3, #0
 800cef0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cef2:	2300      	movs	r3, #0
 800cef4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cef6:	2300      	movs	r3, #0
 800cef8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf1a:	085b      	lsrs	r3, r3, #1
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf22:	4293      	cmp	r3, r2
 800cf24:	bf28      	it	cs
 800cf26:	4613      	movcs	r3, r2
 800cf28:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d102      	bne.n	800cf36 <tcp_write+0x6a>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf34:	e000      	b.n	800cf38 <tcp_write+0x6c>
 800cf36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf38:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d109      	bne.n	800cf54 <tcp_write+0x88>
 800cf40:	4b92      	ldr	r3, [pc, #584]	; (800d18c <tcp_write+0x2c0>)
 800cf42:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cf46:	4992      	ldr	r1, [pc, #584]	; (800d190 <tcp_write+0x2c4>)
 800cf48:	4892      	ldr	r0, [pc, #584]	; (800d194 <tcp_write+0x2c8>)
 800cf4a:	f008 ff47 	bl	8015ddc <iprintf>
 800cf4e:	f06f 030f 	mvn.w	r3, #15
 800cf52:	e30a      	b.n	800d56a <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800cf54:	88fb      	ldrh	r3, [r7, #6]
 800cf56:	4619      	mov	r1, r3
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff ff41 	bl	800cde0 <tcp_write_checks>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800cf64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <tcp_write+0xa6>
    return err;
 800cf6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf70:	e2fb      	b.n	800d56a <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f000 80f5 	beq.w	800d170 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf8a:	653b      	str	r3, [r7, #80]	; 0x50
 800cf8c:	e002      	b.n	800cf94 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1f8      	bne.n	800cf8e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800cf9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf9e:	7a9b      	ldrb	r3, [r3, #10]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cfaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfae:	891b      	ldrh	r3, [r3, #8]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	8c3b      	ldrh	r3, [r7, #32]
 800cfb4:	440b      	add	r3, r1
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	da06      	bge.n	800cfc8 <tcp_write+0xfc>
 800cfba:	4b74      	ldr	r3, [pc, #464]	; (800d18c <tcp_write+0x2c0>)
 800cfbc:	f240 12c7 	movw	r2, #455	; 0x1c7
 800cfc0:	4975      	ldr	r1, [pc, #468]	; (800d198 <tcp_write+0x2cc>)
 800cfc2:	4874      	ldr	r0, [pc, #464]	; (800d194 <tcp_write+0x2c8>)
 800cfc4:	f008 ff0a 	bl	8015ddc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cfc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfca:	891a      	ldrh	r2, [r3, #8]
 800cfcc:	8c3b      	ldrh	r3, [r7, #32]
 800cfce:	4413      	add	r3, r2
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cfde:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800cfe0:	8a7b      	ldrh	r3, [r7, #18]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d027      	beq.n	800d036 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cfe6:	8a7b      	ldrh	r3, [r7, #18]
 800cfe8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d206      	bcs.n	800cffc <tcp_write+0x130>
 800cfee:	4b67      	ldr	r3, [pc, #412]	; (800d18c <tcp_write+0x2c0>)
 800cff0:	f240 12d9 	movw	r2, #473	; 0x1d9
 800cff4:	4969      	ldr	r1, [pc, #420]	; (800d19c <tcp_write+0x2d0>)
 800cff6:	4867      	ldr	r0, [pc, #412]	; (800d194 <tcp_write+0x2c8>)
 800cff8:	f008 fef0 	bl	8015ddc <iprintf>
      seg = last_unsent;
 800cffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d000:	8a7b      	ldrh	r3, [r7, #18]
 800d002:	88fa      	ldrh	r2, [r7, #6]
 800d004:	429a      	cmp	r2, r3
 800d006:	d901      	bls.n	800d00c <tcp_write+0x140>
 800d008:	8a7b      	ldrh	r3, [r7, #18]
 800d00a:	e000      	b.n	800d00e <tcp_write+0x142>
 800d00c:	88fb      	ldrh	r3, [r7, #6]
 800d00e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d010:	4293      	cmp	r3, r2
 800d012:	bfa8      	it	ge
 800d014:	4613      	movge	r3, r2
 800d016:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d018:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d01c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d01e:	4413      	add	r3, r2
 800d020:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d024:	8a7a      	ldrh	r2, [r7, #18]
 800d026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d02e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d030:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d036:	8a7b      	ldrh	r3, [r7, #18]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <tcp_write+0x188>
 800d03c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d040:	88fb      	ldrh	r3, [r7, #6]
 800d042:	429a      	cmp	r2, r3
 800d044:	d006      	beq.n	800d054 <tcp_write+0x188>
 800d046:	4b51      	ldr	r3, [pc, #324]	; (800d18c <tcp_write+0x2c0>)
 800d048:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d04c:	4954      	ldr	r1, [pc, #336]	; (800d1a0 <tcp_write+0x2d4>)
 800d04e:	4851      	ldr	r0, [pc, #324]	; (800d194 <tcp_write+0x2c8>)
 800d050:	f008 fec4 	bl	8015ddc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d054:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	f080 8168 	bcs.w	800d330 <tcp_write+0x464>
 800d060:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 8164 	beq.w	800d330 <tcp_write+0x464>
 800d068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06a:	891b      	ldrh	r3, [r3, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f000 815f 	beq.w	800d330 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d072:	88fa      	ldrh	r2, [r7, #6]
 800d074:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d078:	1ad2      	subs	r2, r2, r3
 800d07a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d07c:	4293      	cmp	r3, r2
 800d07e:	bfa8      	it	ge
 800d080:	4613      	movge	r3, r2
 800d082:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d086:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d088:	797b      	ldrb	r3, [r7, #5]
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d027      	beq.n	800d0e2 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d092:	f107 0012 	add.w	r0, r7, #18
 800d096:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d098:	8bf9      	ldrh	r1, [r7, #30]
 800d09a:	2301      	movs	r3, #1
 800d09c:	9302      	str	r3, [sp, #8]
 800d09e:	797b      	ldrb	r3, [r7, #5]
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2004      	movs	r0, #4
 800d0aa:	f7ff fe37 	bl	800cd1c <tcp_pbuf_prealloc>
 800d0ae:	6578      	str	r0, [r7, #84]	; 0x54
 800d0b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f000 8227 	beq.w	800d506 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d0b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0ba:	6858      	ldr	r0, [r3, #4]
 800d0bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	8bfa      	ldrh	r2, [r7, #30]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	f008 fa19 	bl	80154fe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d0cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d0ce:	f7fb fcaf 	bl	8008a30 <pbuf_clen>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0da:	4413      	add	r3, r2
 800d0dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d0e0:	e03f      	b.n	800d162 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e8:	e002      	b.n	800d0f0 <tcp_write+0x224>
 800d0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1f8      	bne.n	800d0ea <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fa:	7b1b      	ldrb	r3, [r3, #12]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d115      	bne.n	800d12c <tcp_write+0x260>
 800d100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d106:	8952      	ldrh	r2, [r2, #10]
 800d108:	4413      	add	r3, r2
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d10d      	bne.n	800d12c <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d110:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d114:	2b00      	cmp	r3, #0
 800d116:	d006      	beq.n	800d126 <tcp_write+0x25a>
 800d118:	4b1c      	ldr	r3, [pc, #112]	; (800d18c <tcp_write+0x2c0>)
 800d11a:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d11e:	4921      	ldr	r1, [pc, #132]	; (800d1a4 <tcp_write+0x2d8>)
 800d120:	481c      	ldr	r0, [pc, #112]	; (800d194 <tcp_write+0x2c8>)
 800d122:	f008 fe5b 	bl	8015ddc <iprintf>
          extendlen = seglen;
 800d126:	8bfb      	ldrh	r3, [r7, #30]
 800d128:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d12a:	e01a      	b.n	800d162 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d12c:	8bfb      	ldrh	r3, [r7, #30]
 800d12e:	2201      	movs	r2, #1
 800d130:	4619      	mov	r1, r3
 800d132:	2004      	movs	r0, #4
 800d134:	f7fb f876 	bl	8008224 <pbuf_alloc>
 800d138:	6578      	str	r0, [r7, #84]	; 0x54
 800d13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 81e4 	beq.w	800d50a <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800d142:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	441a      	add	r2, r3
 800d14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d14c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d14e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d150:	f7fb fc6e 	bl	8008a30 <pbuf_clen>
 800d154:	4603      	mov	r3, r0
 800d156:	461a      	mov	r2, r3
 800d158:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d15c:	4413      	add	r3, r2
 800d15e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d162:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d166:	8bfb      	ldrh	r3, [r7, #30]
 800d168:	4413      	add	r3, r2
 800d16a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d16e:	e0df      	b.n	800d330 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d176:	2b00      	cmp	r3, #0
 800d178:	f000 80da 	beq.w	800d330 <tcp_write+0x464>
 800d17c:	4b03      	ldr	r3, [pc, #12]	; (800d18c <tcp_write+0x2c0>)
 800d17e:	f240 2225 	movw	r2, #549	; 0x225
 800d182:	4909      	ldr	r1, [pc, #36]	; (800d1a8 <tcp_write+0x2dc>)
 800d184:	4803      	ldr	r0, [pc, #12]	; (800d194 <tcp_write+0x2c8>)
 800d186:	f008 fe29 	bl	8015ddc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d18a:	e0d1      	b.n	800d330 <tcp_write+0x464>
 800d18c:	08019470 	.word	0x08019470
 800d190:	08019598 	.word	0x08019598
 800d194:	080194d4 	.word	0x080194d4
 800d198:	080195cc 	.word	0x080195cc
 800d19c:	080195e4 	.word	0x080195e4
 800d1a0:	08019604 	.word	0x08019604
 800d1a4:	08019624 	.word	0x08019624
 800d1a8:	08019650 	.word	0x08019650
    struct pbuf *p;
    u16_t left = len - pos;
 800d1ac:	88fa      	ldrh	r2, [r7, #6]
 800d1ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d1c2:	8b7a      	ldrh	r2, [r7, #26]
 800d1c4:	8bbb      	ldrh	r3, [r7, #28]
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	bf28      	it	cs
 800d1ca:	4613      	movcs	r3, r2
 800d1cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d1ce:	797b      	ldrb	r3, [r7, #5]
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d036      	beq.n	800d246 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	8b3b      	ldrh	r3, [r7, #24]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	b299      	uxth	r1, r3
 800d1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	bf0c      	ite	eq
 800d1ea:	2301      	moveq	r3, #1
 800d1ec:	2300      	movne	r3, #0
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	f107 0012 	add.w	r0, r7, #18
 800d1f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1f6:	9302      	str	r3, [sp, #8]
 800d1f8:	797b      	ldrb	r3, [r7, #5]
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	4603      	mov	r3, r0
 800d202:	2000      	movs	r0, #0
 800d204:	f7ff fd8a 	bl	800cd1c <tcp_pbuf_prealloc>
 800d208:	6338      	str	r0, [r7, #48]	; 0x30
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 817e 	beq.w	800d50e <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	895b      	ldrh	r3, [r3, #10]
 800d216:	8b3a      	ldrh	r2, [r7, #24]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d906      	bls.n	800d22a <tcp_write+0x35e>
 800d21c:	4b8f      	ldr	r3, [pc, #572]	; (800d45c <tcp_write+0x590>)
 800d21e:	f240 2241 	movw	r2, #577	; 0x241
 800d222:	498f      	ldr	r1, [pc, #572]	; (800d460 <tcp_write+0x594>)
 800d224:	488f      	ldr	r0, [pc, #572]	; (800d464 <tcp_write+0x598>)
 800d226:	f008 fdd9 	bl	8015ddc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	685a      	ldr	r2, [r3, #4]
 800d22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d232:	18d0      	adds	r0, r2, r3
 800d234:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	4413      	add	r3, r2
 800d23c:	8b3a      	ldrh	r2, [r7, #24]
 800d23e:	4619      	mov	r1, r3
 800d240:	f008 f95d 	bl	80154fe <memcpy>
 800d244:	e02e      	b.n	800d2a4 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d246:	8a7b      	ldrh	r3, [r7, #18]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d006      	beq.n	800d25a <tcp_write+0x38e>
 800d24c:	4b83      	ldr	r3, [pc, #524]	; (800d45c <tcp_write+0x590>)
 800d24e:	f240 224b 	movw	r2, #587	; 0x24b
 800d252:	4985      	ldr	r1, [pc, #532]	; (800d468 <tcp_write+0x59c>)
 800d254:	4883      	ldr	r0, [pc, #524]	; (800d464 <tcp_write+0x598>)
 800d256:	f008 fdc1 	bl	8015ddc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d25a:	8b3b      	ldrh	r3, [r7, #24]
 800d25c:	2201      	movs	r2, #1
 800d25e:	4619      	mov	r1, r3
 800d260:	2000      	movs	r0, #0
 800d262:	f7fa ffdf 	bl	8008224 <pbuf_alloc>
 800d266:	6178      	str	r0, [r7, #20]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 8151 	beq.w	800d512 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800d270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d274:	68ba      	ldr	r2, [r7, #8]
 800d276:	441a      	add	r2, r3
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d280:	b29b      	uxth	r3, r3
 800d282:	2200      	movs	r2, #0
 800d284:	4619      	mov	r1, r3
 800d286:	2000      	movs	r0, #0
 800d288:	f7fa ffcc 	bl	8008224 <pbuf_alloc>
 800d28c:	6338      	str	r0, [r7, #48]	; 0x30
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	2b00      	cmp	r3, #0
 800d292:	d103      	bne.n	800d29c <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d294:	6978      	ldr	r0, [r7, #20]
 800d296:	f7fb fb37 	bl	8008908 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d29a:	e13d      	b.n	800d518 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d29c:	6979      	ldr	r1, [r7, #20]
 800d29e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a0:	f7fb fc00 	bl	8008aa4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d2a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a6:	f7fb fbc3 	bl	8008a30 <pbuf_clen>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d2b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2bc:	2b14      	cmp	r3, #20
 800d2be:	d805      	bhi.n	800d2cc <tcp_write+0x400>
 800d2c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2c4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d903      	bls.n	800d2d4 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ce:	f7fb fb1b 	bl	8008908 <pbuf_free>
      goto memerr;
 800d2d2:	e121      	b.n	800d518 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2dc:	441a      	add	r2, r3
 800d2de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f7ff fc8e 	bl	800cc0c <tcp_create_segment>
 800d2f0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 810e 	beq.w	800d516 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d2fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d102      	bne.n	800d306 <tcp_write+0x43a>
      queue = seg;
 800d300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d302:	647b      	str	r3, [r7, #68]	; 0x44
 800d304:	e00c      	b.n	800d320 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d106      	bne.n	800d31a <tcp_write+0x44e>
 800d30c:	4b53      	ldr	r3, [pc, #332]	; (800d45c <tcp_write+0x590>)
 800d30e:	f240 2285 	movw	r2, #645	; 0x285
 800d312:	4956      	ldr	r1, [pc, #344]	; (800d46c <tcp_write+0x5a0>)
 800d314:	4853      	ldr	r0, [pc, #332]	; (800d464 <tcp_write+0x598>)
 800d316:	f008 fd61 	bl	8015ddc <iprintf>
      prev_seg->next = seg;
 800d31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d31c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d31e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d322:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d328:	8b3b      	ldrh	r3, [r7, #24]
 800d32a:	4413      	add	r3, r2
 800d32c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d330:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d334:	88fb      	ldrh	r3, [r7, #6]
 800d336:	429a      	cmp	r2, r3
 800d338:	f4ff af38 	bcc.w	800d1ac <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d33c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d02c      	beq.n	800d39c <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d348:	e01e      	b.n	800d388 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	891a      	ldrh	r2, [r3, #8]
 800d34e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d350:	4413      	add	r3, r2
 800d352:	b29a      	uxth	r2, r3
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d110      	bne.n	800d382 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d366:	8952      	ldrh	r2, [r2, #10]
 800d368:	4413      	add	r3, r2
 800d36a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d36c:	68b9      	ldr	r1, [r7, #8]
 800d36e:	4618      	mov	r0, r3
 800d370:	f008 f8c5 	bl	80154fe <memcpy>
        p->len += oversize_used;
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	895a      	ldrh	r2, [r3, #10]
 800d378:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d37a:	4413      	add	r3, r2
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1dd      	bne.n	800d34a <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800d38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d390:	891a      	ldrh	r2, [r3, #8]
 800d392:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d394:	4413      	add	r3, r2
 800d396:	b29a      	uxth	r2, r3
 800d398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d39a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d39c:	8a7a      	ldrh	r2, [r7, #18]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d018      	beq.n	800d3dc <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d106      	bne.n	800d3be <tcp_write+0x4f2>
 800d3b0:	4b2a      	ldr	r3, [pc, #168]	; (800d45c <tcp_write+0x590>)
 800d3b2:	f240 22bb 	movw	r2, #699	; 0x2bb
 800d3b6:	492e      	ldr	r1, [pc, #184]	; (800d470 <tcp_write+0x5a4>)
 800d3b8:	482a      	ldr	r0, [pc, #168]	; (800d464 <tcp_write+0x598>)
 800d3ba:	f008 fd0f 	bl	8015ddc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fb fb6d 	bl	8008aa4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3cc:	891a      	ldrh	r2, [r3, #8]
 800d3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d0:	891b      	ldrh	r3, [r3, #8]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d8:	811a      	strh	r2, [r3, #8]
 800d3da:	e037      	b.n	800d44c <tcp_write+0x580>
  } else if (extendlen > 0) {
 800d3dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d034      	beq.n	800d44c <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d003      	beq.n	800d3f0 <tcp_write+0x524>
 800d3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d106      	bne.n	800d3fe <tcp_write+0x532>
 800d3f0:	4b1a      	ldr	r3, [pc, #104]	; (800d45c <tcp_write+0x590>)
 800d3f2:	f240 22c1 	movw	r2, #705	; 0x2c1
 800d3f6:	491f      	ldr	r1, [pc, #124]	; (800d474 <tcp_write+0x5a8>)
 800d3f8:	481a      	ldr	r0, [pc, #104]	; (800d464 <tcp_write+0x598>)
 800d3fa:	f008 fcef 	bl	8015ddc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	62bb      	str	r3, [r7, #40]	; 0x28
 800d404:	e009      	b.n	800d41a <tcp_write+0x54e>
      p->tot_len += extendlen;
 800d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d408:	891a      	ldrh	r2, [r3, #8]
 800d40a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d40c:	4413      	add	r3, r2
 800d40e:	b29a      	uxth	r2, r3
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	62bb      	str	r3, [r7, #40]	; 0x28
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1f1      	bne.n	800d406 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	891a      	ldrh	r2, [r3, #8]
 800d426:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d428:	4413      	add	r3, r2
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	895a      	ldrh	r2, [r3, #10]
 800d434:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d436:	4413      	add	r3, r2
 800d438:	b29a      	uxth	r2, r3
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d440:	891a      	ldrh	r2, [r3, #8]
 800d442:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d444:	4413      	add	r3, r2
 800d446:	b29a      	uxth	r2, r3
 800d448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d44a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d112      	bne.n	800d478 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d456:	669a      	str	r2, [r3, #104]	; 0x68
 800d458:	e011      	b.n	800d47e <tcp_write+0x5b2>
 800d45a:	bf00      	nop
 800d45c:	08019470 	.word	0x08019470
 800d460:	08019680 	.word	0x08019680
 800d464:	080194d4 	.word	0x080194d4
 800d468:	080196c0 	.word	0x080196c0
 800d46c:	080196d0 	.word	0x080196d0
 800d470:	080196e4 	.word	0x080196e4
 800d474:	0801971c 	.word	0x0801971c
  } else {
    last_unsent->next = queue;
 800d478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d47a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d47c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d482:	88fb      	ldrh	r3, [r7, #6]
 800d484:	441a      	add	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d490:	88fb      	ldrh	r3, [r7, #6]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	b29a      	uxth	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d4a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00e      	beq.n	800d4ce <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10a      	bne.n	800d4ce <tcp_write+0x602>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d106      	bne.n	800d4ce <tcp_write+0x602>
 800d4c0:	4b2c      	ldr	r3, [pc, #176]	; (800d574 <tcp_write+0x6a8>)
 800d4c2:	f240 22ed 	movw	r2, #749	; 0x2ed
 800d4c6:	492c      	ldr	r1, [pc, #176]	; (800d578 <tcp_write+0x6ac>)
 800d4c8:	482c      	ldr	r0, [pc, #176]	; (800d57c <tcp_write+0x6b0>)
 800d4ca:	f008 fc87 	bl	8015ddc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800d4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d016      	beq.n	800d502 <tcp_write+0x636>
 800d4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d012      	beq.n	800d502 <tcp_write+0x636>
 800d4dc:	797b      	ldrb	r3, [r7, #5]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10d      	bne.n	800d502 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	899b      	ldrh	r3, [r3, #12]
 800d4ec:	b29c      	uxth	r4, r3
 800d4ee:	2008      	movs	r0, #8
 800d4f0:	f7fa f874 	bl	80075dc <lwip_htons>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	4322      	orrs	r2, r4
 800d4fe:	b292      	uxth	r2, r2
 800d500:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	e031      	b.n	800d56a <tcp_write+0x69e>
          goto memerr;
 800d506:	bf00      	nop
 800d508:	e006      	b.n	800d518 <tcp_write+0x64c>
            goto memerr;
 800d50a:	bf00      	nop
 800d50c:	e004      	b.n	800d518 <tcp_write+0x64c>
        goto memerr;
 800d50e:	bf00      	nop
 800d510:	e002      	b.n	800d518 <tcp_write+0x64c>
        goto memerr;
 800d512:	bf00      	nop
 800d514:	e000      	b.n	800d518 <tcp_write+0x64c>
      goto memerr;
 800d516:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	7e9b      	ldrb	r3, [r3, #26]
 800d51c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d520:	b2da      	uxtb	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <tcp_write+0x666>
    pbuf_free(concat_p);
 800d52c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d52e:	f7fb f9eb 	bl	8008908 <pbuf_free>
  }
  if (queue != NULL) {
 800d532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <tcp_write+0x672>
    tcp_segs_free(queue);
 800d538:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d53a:	f7fc fcb8 	bl	8009eae <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00e      	beq.n	800d566 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10a      	bne.n	800d566 <tcp_write+0x69a>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <tcp_write+0x69a>
 800d558:	4b06      	ldr	r3, [pc, #24]	; (800d574 <tcp_write+0x6a8>)
 800d55a:	f240 3202 	movw	r2, #770	; 0x302
 800d55e:	4906      	ldr	r1, [pc, #24]	; (800d578 <tcp_write+0x6ac>)
 800d560:	4806      	ldr	r0, [pc, #24]	; (800d57c <tcp_write+0x6b0>)
 800d562:	f008 fc3b 	bl	8015ddc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	375c      	adds	r7, #92	; 0x5c
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd90      	pop	{r4, r7, pc}
 800d572:	bf00      	nop
 800d574:	08019470 	.word	0x08019470
 800d578:	08019754 	.word	0x08019754
 800d57c:	080194d4 	.word	0x080194d4

0800d580 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08a      	sub	sp, #40	; 0x28
 800d584:	af02      	add	r7, sp, #8
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	460b      	mov	r3, r1
 800d58a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d594:	78fb      	ldrb	r3, [r7, #3]
 800d596:	f003 0303 	and.w	r3, r3, #3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d106      	bne.n	800d5ac <tcp_enqueue_flags+0x2c>
 800d59e:	4b6f      	ldr	r3, [pc, #444]	; (800d75c <tcp_enqueue_flags+0x1dc>)
 800d5a0:	f240 321b 	movw	r2, #795	; 0x31b
 800d5a4:	496e      	ldr	r1, [pc, #440]	; (800d760 <tcp_enqueue_flags+0x1e0>)
 800d5a6:	486f      	ldr	r0, [pc, #444]	; (800d764 <tcp_enqueue_flags+0x1e4>)
 800d5a8:	f008 fc18 	bl	8015ddc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5b2:	2b13      	cmp	r3, #19
 800d5b4:	d806      	bhi.n	800d5c4 <tcp_enqueue_flags+0x44>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5bc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d90e      	bls.n	800d5e2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800d5c4:	78fb      	ldrb	r3, [r7, #3]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d109      	bne.n	800d5e2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	7e9b      	ldrb	r3, [r3, #26]
 800d5d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e0:	e0b7      	b.n	800d752 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800d5e2:	78fb      	ldrb	r3, [r7, #3]
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d5f0:	7ffb      	ldrb	r3, [r7, #31]
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	f003 0304 	and.w	r3, r3, #4
 800d5fa:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2200      	movs	r2, #0
 800d602:	4619      	mov	r1, r3
 800d604:	2000      	movs	r0, #0
 800d606:	f7fa fe0d 	bl	8008224 <pbuf_alloc>
 800d60a:	6138      	str	r0, [r7, #16]
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d109      	bne.n	800d626 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	7e9b      	ldrb	r3, [r3, #26]
 800d616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d620:	f04f 33ff 	mov.w	r3, #4294967295
 800d624:	e095      	b.n	800d752 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	895a      	ldrh	r2, [r3, #10]
 800d62a:	7dfb      	ldrb	r3, [r7, #23]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	429a      	cmp	r2, r3
 800d630:	d206      	bcs.n	800d640 <tcp_enqueue_flags+0xc0>
 800d632:	4b4a      	ldr	r3, [pc, #296]	; (800d75c <tcp_enqueue_flags+0x1dc>)
 800d634:	f240 3241 	movw	r2, #833	; 0x341
 800d638:	494b      	ldr	r1, [pc, #300]	; (800d768 <tcp_enqueue_flags+0x1e8>)
 800d63a:	484a      	ldr	r0, [pc, #296]	; (800d764 <tcp_enqueue_flags+0x1e4>)
 800d63c:	f008 fbce 	bl	8015ddc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d644:	78fa      	ldrb	r2, [r7, #3]
 800d646:	7ffb      	ldrb	r3, [r7, #31]
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	460b      	mov	r3, r1
 800d64c:	6939      	ldr	r1, [r7, #16]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fadc 	bl	800cc0c <tcp_create_segment>
 800d654:	60f8      	str	r0, [r7, #12]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d109      	bne.n	800d670 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7e9b      	ldrb	r3, [r3, #26]
 800d660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d664:	b2da      	uxtb	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d66a:	f04f 33ff 	mov.w	r3, #4294967295
 800d66e:	e070      	b.n	800d752 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	f003 0303 	and.w	r3, r3, #3
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d006      	beq.n	800d68a <tcp_enqueue_flags+0x10a>
 800d67c:	4b37      	ldr	r3, [pc, #220]	; (800d75c <tcp_enqueue_flags+0x1dc>)
 800d67e:	f240 3249 	movw	r2, #841	; 0x349
 800d682:	493a      	ldr	r1, [pc, #232]	; (800d76c <tcp_enqueue_flags+0x1ec>)
 800d684:	4837      	ldr	r0, [pc, #220]	; (800d764 <tcp_enqueue_flags+0x1e4>)
 800d686:	f008 fba9 	bl	8015ddc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	891b      	ldrh	r3, [r3, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d006      	beq.n	800d6a0 <tcp_enqueue_flags+0x120>
 800d692:	4b32      	ldr	r3, [pc, #200]	; (800d75c <tcp_enqueue_flags+0x1dc>)
 800d694:	f240 324a 	movw	r2, #842	; 0x34a
 800d698:	4935      	ldr	r1, [pc, #212]	; (800d770 <tcp_enqueue_flags+0x1f0>)
 800d69a:	4832      	ldr	r0, [pc, #200]	; (800d764 <tcp_enqueue_flags+0x1e4>)
 800d69c:	f008 fb9e 	bl	8015ddc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d103      	bne.n	800d6b0 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	669a      	str	r2, [r3, #104]	; 0x68
 800d6ae:	e00d      	b.n	800d6cc <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6b4:	61bb      	str	r3, [r7, #24]
 800d6b6:	e002      	b.n	800d6be <tcp_enqueue_flags+0x13e>
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	61bb      	str	r3, [r7, #24]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d1f8      	bne.n	800d6b8 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <tcp_enqueue_flags+0x168>
 800d6de:	78fb      	ldrb	r3, [r7, #3]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d004      	beq.n	800d6f2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6ec:	1c5a      	adds	r2, r3, #1
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d6f2:	78fb      	ldrb	r3, [r7, #3]
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d006      	beq.n	800d70a <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	7e9b      	ldrb	r3, [r3, #26]
 800d700:	f043 0320 	orr.w	r3, r3, #32
 800d704:	b2da      	uxtb	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fb f98e 	bl	8008a30 <pbuf_clen>
 800d714:	4603      	mov	r3, r0
 800d716:	461a      	mov	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d71e:	4413      	add	r3, r2
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00e      	beq.n	800d750 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10a      	bne.n	800d750 <tcp_enqueue_flags+0x1d0>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d106      	bne.n	800d750 <tcp_enqueue_flags+0x1d0>
 800d742:	4b06      	ldr	r3, [pc, #24]	; (800d75c <tcp_enqueue_flags+0x1dc>)
 800d744:	f240 326d 	movw	r2, #877	; 0x36d
 800d748:	490a      	ldr	r1, [pc, #40]	; (800d774 <tcp_enqueue_flags+0x1f4>)
 800d74a:	4806      	ldr	r0, [pc, #24]	; (800d764 <tcp_enqueue_flags+0x1e4>)
 800d74c:	f008 fb46 	bl	8015ddc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	08019470 	.word	0x08019470
 800d760:	08019774 	.word	0x08019774
 800d764:	080194d4 	.word	0x080194d4
 800d768:	080197cc 	.word	0x080197cc
 800d76c:	08019808 	.word	0x08019808
 800d770:	08019820 	.word	0x08019820
 800d774:	0801984c 	.word	0x0801984c

0800d778 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b08b      	sub	sp, #44	; 0x2c
 800d77c:	af04      	add	r7, sp, #16
 800d77e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800d780:	2300      	movs	r3, #0
 800d782:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d784:	7dbb      	ldrb	r3, [r7, #22]
 800d786:	b29c      	uxth	r4, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7f9 ff33 	bl	80075f8 <lwip_htonl>
 800d792:	4603      	mov	r3, r0
 800d794:	2200      	movs	r2, #0
 800d796:	4621      	mov	r1, r4
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff f97b 	bl	800ca94 <tcp_output_alloc_header>
 800d79e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7e9b      	ldrb	r3, [r3, #26]
 800d7aa:	f043 0303 	orr.w	r3, r3, #3
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d7b4:	f06f 0301 	mvn.w	r3, #1
 800d7b8:	e036      	b.n	800d828 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f004 f94c 	bl	8011a5c <ip4_route>
 800d7c4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800d7cc:	23fc      	movs	r3, #252	; 0xfc
 800d7ce:	75fb      	strb	r3, [r7, #23]
 800d7d0:	e012      	b.n	800d7f8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800d7d2:	6879      	ldr	r1, [r7, #4]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	1d18      	adds	r0, r3, #4
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7a9c      	ldrb	r4, [r3, #10]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7a5b      	ldrb	r3, [r3, #9]
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	9202      	str	r2, [sp, #8]
 800d7e4:	2206      	movs	r2, #6
 800d7e6:	9201      	str	r2, [sp, #4]
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	4623      	mov	r3, r4
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	6938      	ldr	r0, [r7, #16]
 800d7f0:	f004 fafa 	bl	8011de8 <ip4_output_if>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d7f8:	6938      	ldr	r0, [r7, #16]
 800d7fa:	f7fb f885 	bl	8008908 <pbuf_free>

  if (err != ERR_OK) {
 800d7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d007      	beq.n	800d816 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	7e9b      	ldrb	r3, [r3, #26]
 800d80a:	f043 0303 	orr.w	r3, r3, #3
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	769a      	strb	r2, [r3, #26]
 800d814:	e006      	b.n	800d824 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7e9b      	ldrb	r3, [r3, #26]
 800d81a:	f023 0303 	bic.w	r3, r3, #3
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800d824:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	371c      	adds	r7, #28
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd90      	pop	{r4, r7, pc}

0800d830 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d830:	b5b0      	push	{r4, r5, r7, lr}
 800d832:	b08a      	sub	sp, #40	; 0x28
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7d1b      	ldrb	r3, [r3, #20]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d106      	bne.n	800d84e <tcp_output+0x1e>
 800d840:	4b9b      	ldr	r3, [pc, #620]	; (800dab0 <tcp_output+0x280>)
 800d842:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800d846:	499b      	ldr	r1, [pc, #620]	; (800dab4 <tcp_output+0x284>)
 800d848:	489b      	ldr	r0, [pc, #620]	; (800dab8 <tcp_output+0x288>)
 800d84a:	f008 fac7 	bl	8015ddc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d84e:	4b9b      	ldr	r3, [pc, #620]	; (800dabc <tcp_output+0x28c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	429a      	cmp	r2, r3
 800d856:	d101      	bne.n	800d85c <tcp_output+0x2c>
    return ERR_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	e1cf      	b.n	800dbfc <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d868:	429a      	cmp	r2, r3
 800d86a:	d203      	bcs.n	800d874 <tcp_output+0x44>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d872:	e002      	b.n	800d87a <tcp_output+0x4a>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d87a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	7e9b      	ldrb	r3, [r3, #26]
 800d886:	f003 0302 	and.w	r3, r3, #2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d017      	beq.n	800d8be <tcp_output+0x8e>
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00f      	beq.n	800d8b4 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f9 feac 	bl	80075f8 <lwip_htonl>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8aa:	8912      	ldrh	r2, [r2, #8]
 800d8ac:	4413      	add	r3, r2
     (seg == NULL ||
 800d8ae:	69ba      	ldr	r2, [r7, #24]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d204      	bcs.n	800d8be <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff ff5f 	bl	800d778 <tcp_send_empty_ack>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	e19e      	b.n	800dbfc <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800d8ca:	e002      	b.n	800d8d2 <tcp_output+0xa2>
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	623b      	str	r3, [r7, #32]
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1f8      	bne.n	800d8cc <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f004 f8bc 	bl	8011a5c <ip4_route>
 800d8e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d102      	bne.n	800d8f2 <tcp_output+0xc2>
    return ERR_RTE;
 800d8ec:	f06f 0303 	mvn.w	r3, #3
 800d8f0:	e184      	b.n	800dbfc <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <tcp_output+0xd0>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d111      	bne.n	800d924 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <tcp_output+0xdc>
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	3304      	adds	r3, #4
 800d90a:	e000      	b.n	800d90e <tcp_output+0xde>
 800d90c:	2300      	movs	r3, #0
 800d90e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <tcp_output+0xec>
      return ERR_RTE;
 800d916:	f06f 0303 	mvn.w	r3, #3
 800d91a:	e16f      	b.n	800dbfc <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 813e 	beq.w	800dba8 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	4618      	mov	r0, r3
 800d934:	f7f9 fe60 	bl	80075f8 <lwip_htonl>
 800d938:	4602      	mov	r2, r0
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d942:	8912      	ldrh	r2, [r2, #8]
 800d944:	4413      	add	r3, r2
  if (seg != NULL &&
 800d946:	69ba      	ldr	r2, [r7, #24]
 800d948:	429a      	cmp	r2, r3
 800d94a:	f080 812d 	bcs.w	800dba8 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	f000 8129 	beq.w	800dba8 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d95c:	461a      	mov	r2, r3
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	4293      	cmp	r3, r2
 800d962:	f040 8121 	bne.w	800dba8 <tcp_output+0x378>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f040 811c 	bne.w	800dba8 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d976:	2b00      	cmp	r3, #0
 800d978:	f040 812b 	bne.w	800dbd2 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800d98c:	e121      	b.n	800dbd2 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	899b      	ldrh	r3, [r3, #12]
 800d994:	b29b      	uxth	r3, r3
 800d996:	4618      	mov	r0, r3
 800d998:	f7f9 fe20 	bl	80075dc <lwip_htons>
 800d99c:	4603      	mov	r3, r0
 800d99e:	f003 0304 	and.w	r3, r3, #4
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d006      	beq.n	800d9b4 <tcp_output+0x184>
 800d9a6:	4b42      	ldr	r3, [pc, #264]	; (800dab0 <tcp_output+0x280>)
 800d9a8:	f240 4246 	movw	r2, #1094	; 0x446
 800d9ac:	4944      	ldr	r1, [pc, #272]	; (800dac0 <tcp_output+0x290>)
 800d9ae:	4842      	ldr	r0, [pc, #264]	; (800dab8 <tcp_output+0x288>)
 800d9b0:	f008 fa14 	bl	8015ddc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d01f      	beq.n	800d9fc <tcp_output+0x1cc>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7e9b      	ldrb	r3, [r3, #26]
 800d9c0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d119      	bne.n	800d9fc <tcp_output+0x1cc>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00b      	beq.n	800d9e8 <tcp_output+0x1b8>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d110      	bne.n	800d9fc <tcp_output+0x1cc>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9de:	891a      	ldrh	r2, [r3, #8]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d209      	bcs.n	800d9fc <tcp_output+0x1cc>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <tcp_output+0x1cc>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9f8:	2b13      	cmp	r3, #19
 800d9fa:	d901      	bls.n	800da00 <tcp_output+0x1d0>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e000      	b.n	800da02 <tcp_output+0x1d2>
 800da00:	2300      	movs	r3, #0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	7e9b      	ldrb	r3, [r3, #26]
 800da0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 80e1 	beq.w	800dbd6 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7d1b      	ldrb	r3, [r3, #20]
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d00d      	beq.n	800da38 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	899b      	ldrh	r3, [r3, #12]
 800da22:	b29c      	uxth	r4, r3
 800da24:	2010      	movs	r0, #16
 800da26:	f7f9 fdd9 	bl	80075dc <lwip_htons>
 800da2a:	4603      	mov	r3, r0
 800da2c:	461a      	mov	r2, r3
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	4322      	orrs	r2, r4
 800da34:	b292      	uxth	r2, r2
 800da36:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da3e:	f000 f8e1 	bl	800dc04 <tcp_output_segment>
 800da42:	4603      	mov	r3, r0
 800da44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800da46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d009      	beq.n	800da62 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7e9b      	ldrb	r3, [r3, #26]
 800da52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da56:	b2da      	uxtb	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	769a      	strb	r2, [r3, #26]
      return err;
 800da5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da60:	e0cc      	b.n	800dbfc <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800da62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	7d1b      	ldrb	r3, [r3, #20]
 800da6e:	2b02      	cmp	r3, #2
 800da70:	d006      	beq.n	800da80 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	7e9b      	ldrb	r3, [r3, #26]
 800da76:	f023 0303 	bic.w	r3, r3, #3
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	4618      	mov	r0, r3
 800da88:	f7f9 fdb6 	bl	80075f8 <lwip_htonl>
 800da8c:	4604      	mov	r4, r0
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	891b      	ldrh	r3, [r3, #8]
 800da92:	461d      	mov	r5, r3
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f9 fd9d 	bl	80075dc <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	f003 0303 	and.w	r3, r3, #3
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00b      	beq.n	800dac4 <tcp_output+0x294>
 800daac:	2301      	movs	r3, #1
 800daae:	e00a      	b.n	800dac6 <tcp_output+0x296>
 800dab0:	08019470 	.word	0x08019470
 800dab4:	08019874 	.word	0x08019874
 800dab8:	080194d4 	.word	0x080194d4
 800dabc:	20007234 	.word	0x20007234
 800dac0:	0801989c 	.word	0x0801989c
 800dac4:	2300      	movs	r3, #0
 800dac6:	442b      	add	r3, r5
 800dac8:	4423      	add	r3, r4
 800daca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	da02      	bge.n	800dade <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68ba      	ldr	r2, [r7, #8]
 800dadc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	891b      	ldrh	r3, [r3, #8]
 800dae2:	461c      	mov	r4, r3
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	899b      	ldrh	r3, [r3, #12]
 800daea:	b29b      	uxth	r3, r3
 800daec:	4618      	mov	r0, r3
 800daee:	f7f9 fd75 	bl	80075dc <lwip_htons>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f003 0303 	and.w	r3, r3, #3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <tcp_output+0x2d0>
 800dafc:	2301      	movs	r3, #1
 800dafe:	e000      	b.n	800db02 <tcp_output+0x2d2>
 800db00:	2300      	movs	r3, #0
 800db02:	4423      	add	r3, r4
 800db04:	2b00      	cmp	r3, #0
 800db06:	d049      	beq.n	800db9c <tcp_output+0x36c>
      seg->next = NULL;
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	2200      	movs	r2, #0
 800db0c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db12:	2b00      	cmp	r3, #0
 800db14:	d105      	bne.n	800db22 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db1a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	623b      	str	r3, [r7, #32]
 800db20:	e03f      	b.n	800dba2 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4618      	mov	r0, r3
 800db2a:	f7f9 fd65 	bl	80075f8 <lwip_htonl>
 800db2e:	4604      	mov	r4, r0
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	4618      	mov	r0, r3
 800db38:	f7f9 fd5e 	bl	80075f8 <lwip_htonl>
 800db3c:	4603      	mov	r3, r0
 800db3e:	1ae3      	subs	r3, r4, r3
 800db40:	2b00      	cmp	r3, #0
 800db42:	da24      	bge.n	800db8e <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	336c      	adds	r3, #108	; 0x6c
 800db48:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800db4a:	e002      	b.n	800db52 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d011      	beq.n	800db7e <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	4618      	mov	r0, r3
 800db64:	f7f9 fd48 	bl	80075f8 <lwip_htonl>
 800db68:	4604      	mov	r4, r0
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	4618      	mov	r0, r3
 800db72:	f7f9 fd41 	bl	80075f8 <lwip_htonl>
 800db76:	4603      	mov	r3, r0
 800db78:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	dbe6      	blt.n	800db4c <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	e009      	b.n	800dba2 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db92:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	623b      	str	r3, [r7, #32]
 800db9a:	e002      	b.n	800dba2 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800db9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db9e:	f7fc f99a 	bl	8009ed6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dba6:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d015      	beq.n	800dbda <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7f9 fd1f 	bl	80075f8 <lwip_htonl>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbc4:	8912      	ldrh	r2, [r2, #8]
 800dbc6:	4413      	add	r3, r2
  while (seg != NULL &&
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	f4bf aedf 	bcs.w	800d98e <tcp_output+0x15e>
  }
output_done:
 800dbd0:	e003      	b.n	800dbda <tcp_output+0x3aa>
    goto output_done;
 800dbd2:	bf00      	nop
 800dbd4:	e002      	b.n	800dbdc <tcp_output+0x3ac>
      break;
 800dbd6:	bf00      	nop
 800dbd8:	e000      	b.n	800dbdc <tcp_output+0x3ac>
output_done:
 800dbda:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d103      	bne.n	800dbec <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	7e9b      	ldrb	r3, [r3, #26]
 800dbf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3728      	adds	r7, #40	; 0x28
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bdb0      	pop	{r4, r5, r7, pc}

0800dc04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dc04:	b5b0      	push	{r4, r5, r7, lr}
 800dc06:	b08c      	sub	sp, #48	; 0x30
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	89db      	ldrh	r3, [r3, #14]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d001      	beq.n	800dc1e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e08b      	b.n	800dd36 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68dc      	ldr	r4, [r3, #12]
 800dc26:	4610      	mov	r0, r2
 800dc28:	f7f9 fce6 	bl	80075f8 <lwip_htonl>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68dc      	ldr	r4, [r3, #12]
 800dc38:	4610      	mov	r0, r2
 800dc3a:	f7f9 fccf 	bl	80075dc <lwip_htons>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dc4a:	441a      	add	r2, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	3314      	adds	r3, #20
 800dc56:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	7a9b      	ldrb	r3, [r3, #10]
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d014      	beq.n	800dc8e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	3304      	adds	r3, #4
 800dc68:	4619      	mov	r1, r3
 800dc6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dc6e:	f7fc fc73 	bl	800a558 <tcp_eff_send_mss_impl>
 800dc72:	4603      	mov	r3, r0
 800dc74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dc76:	8b7b      	ldrh	r3, [r7, #26]
 800dc78:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f9 fcbb 	bl	80075f8 <lwip_htonl>
 800dc82:	4602      	mov	r2, r0
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	da02      	bge.n	800dc9e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10c      	bne.n	800dcc0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800dca6:	4b26      	ldr	r3, [pc, #152]	; (800dd40 <tcp_output_segment+0x13c>)
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7f9 fc9f 	bl	80075f8 <lwip_htonl>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	8959      	ldrh	r1, [r3, #10]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	8b3a      	ldrh	r2, [r7, #24]
 800dcdc:	1a8a      	subs	r2, r1, r2
 800dcde:	b292      	uxth	r2, r2
 800dce0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	8919      	ldrh	r1, [r3, #8]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	8b3a      	ldrh	r2, [r7, #24]
 800dcee:	1a8a      	subs	r2, r1, r2
 800dcf0:	b292      	uxth	r2, r2
 800dcf2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	68d2      	ldr	r2, [r2, #12]
 800dcfc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	2200      	movs	r2, #0
 800dd04:	741a      	strb	r2, [r3, #16]
 800dd06:	2200      	movs	r2, #0
 800dd08:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6858      	ldr	r0, [r3, #4]
 800dd0e:	68b9      	ldr	r1, [r7, #8]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	1d1c      	adds	r4, r3, #4
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	7a9d      	ldrb	r5, [r3, #10]
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	7a5b      	ldrb	r3, [r3, #9]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	9202      	str	r2, [sp, #8]
 800dd20:	2206      	movs	r2, #6
 800dd22:	9201      	str	r2, [sp, #4]
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	462b      	mov	r3, r5
 800dd28:	4622      	mov	r2, r4
 800dd2a:	f004 f85d 	bl	8011de8 <ip4_output_if>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800dd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3720      	adds	r7, #32
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20007224 	.word	0x20007224

0800dd44 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08c      	sub	sp, #48	; 0x30
 800dd48:	af04      	add	r7, sp, #16
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800dd52:	2200      	movs	r2, #0
 800dd54:	2114      	movs	r1, #20
 800dd56:	2001      	movs	r0, #1
 800dd58:	f7fa fa64 	bl	8008224 <pbuf_alloc>
 800dd5c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d059      	beq.n	800de18 <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	895b      	ldrh	r3, [r3, #10]
 800dd68:	2b13      	cmp	r3, #19
 800dd6a:	d806      	bhi.n	800dd7a <tcp_rst+0x36>
 800dd6c:	4b2c      	ldr	r3, [pc, #176]	; (800de20 <tcp_rst+0xdc>)
 800dd6e:	f240 524d 	movw	r2, #1357	; 0x54d
 800dd72:	492c      	ldr	r1, [pc, #176]	; (800de24 <tcp_rst+0xe0>)
 800dd74:	482c      	ldr	r0, [pc, #176]	; (800de28 <tcp_rst+0xe4>)
 800dd76:	f008 f831 	bl	8015ddc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800dd80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7f9 fc2a 	bl	80075dc <lwip_htons>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800dd90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f9 fc22 	bl	80075dc <lwip_htons>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f7f9 fc29 	bl	80075f8 <lwip_htonl>
 800dda6:	4602      	mov	r2, r0
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800ddac:	68b8      	ldr	r0, [r7, #8]
 800ddae:	f7f9 fc23 	bl	80075f8 <lwip_htonl>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ddb8:	f245 0014 	movw	r0, #20500	; 0x5014
 800ddbc:	f7f9 fc0e 	bl	80075dc <lwip_htons>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f042 0210 	orr.w	r2, r2, #16
 800ddd0:	739a      	strb	r2, [r3, #14]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	741a      	strb	r2, [r3, #16]
 800dddc:	2200      	movs	r2, #0
 800ddde:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	2200      	movs	r2, #0
 800dde4:	749a      	strb	r2, [r3, #18]
 800dde6:	2200      	movs	r2, #0
 800dde8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ddea:	6838      	ldr	r0, [r7, #0]
 800ddec:	f003 fe36 	bl	8011a5c <ip4_route>
 800ddf0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00b      	beq.n	800de10 <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	2306      	movs	r3, #6
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	2300      	movs	r3, #0
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	23ff      	movs	r3, #255	; 0xff
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	69f8      	ldr	r0, [r7, #28]
 800de0c:	f003 ffec 	bl	8011de8 <ip4_output_if>
  }
  pbuf_free(p);
 800de10:	69f8      	ldr	r0, [r7, #28]
 800de12:	f7fa fd79 	bl	8008908 <pbuf_free>
 800de16:	e000      	b.n	800de1a <tcp_rst+0xd6>
    return;
 800de18:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800de1a:	3720      	adds	r7, #32
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	08019470 	.word	0x08019470
 800de24:	080194a4 	.word	0x080194a4
 800de28:	080194d4 	.word	0x080194d4

0800de2c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d029      	beq.n	800de90 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	e002      	b.n	800de4a <tcp_rexmit_rto+0x1e>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	60fb      	str	r3, [r7, #12]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1f8      	bne.n	800de44 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de6e:	2bff      	cmp	r3, #255	; 0xff
 800de70:	d007      	beq.n	800de82 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de78:	3301      	adds	r3, #1
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fcd1 	bl	800d830 <tcp_output>
 800de8e:	e000      	b.n	800de92 <tcp_rexmit_rto+0x66>
    return;
 800de90:	bf00      	nop
}
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800de98:	b590      	push	{r4, r7, lr}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d043      	beq.n	800df30 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deac:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	3368      	adds	r3, #104	; 0x68
 800deba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800debc:	e002      	b.n	800dec4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d011      	beq.n	800def0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7f9 fb8f 	bl	80075f8 <lwip_htonl>
 800deda:	4604      	mov	r4, r0
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f9 fb88 	bl	80075f8 <lwip_htonl>
 800dee8:	4603      	mov	r3, r0
 800deea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800deec:	2b00      	cmp	r3, #0
 800deee:	dbe6      	blt.n	800debe <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d103      	bne.n	800df0e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df14:	2bff      	cmp	r3, #255	; 0xff
 800df16:	d007      	beq.n	800df28 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df1e:	3301      	adds	r3, #1
 800df20:	b2da      	uxtb	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	635a      	str	r2, [r3, #52]	; 0x34
 800df2e:	e000      	b.n	800df32 <tcp_rexmit+0x9a>
    return;
 800df30:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800df32:	3714      	adds	r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	bd90      	pop	{r4, r7, pc}

0800df38 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d04a      	beq.n	800dfde <tcp_rexmit_fast+0xa6>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7e9b      	ldrb	r3, [r3, #26]
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d144      	bne.n	800dfde <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff ff9f 	bl	800de98 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df66:	429a      	cmp	r2, r3
 800df68:	d207      	bcs.n	800df7a <tcp_rexmit_fast+0x42>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df70:	0fda      	lsrs	r2, r3, #31
 800df72:	4413      	add	r3, r2
 800df74:	105b      	asrs	r3, r3, #1
 800df76:	b29b      	uxth	r3, r3
 800df78:	e006      	b.n	800df88 <tcp_rexmit_fast+0x50>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df80:	0fda      	lsrs	r2, r3, #31
 800df82:	4413      	add	r3, r2
 800df84:	105b      	asrs	r3, r3, #1
 800df86:	b29b      	uxth	r3, r3
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df94:	461a      	mov	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d206      	bcs.n	800dfae <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfb8:	4619      	mov	r1, r3
 800dfba:	0049      	lsls	r1, r1, #1
 800dfbc:	440b      	add	r3, r1
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	4413      	add	r3, r2
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	7e9b      	ldrb	r3, [r3, #26]
 800dfce:	f043 0304 	orr.w	r3, r3, #4
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800dfde:	bf00      	nop
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b08a      	sub	sp, #40	; 0x28
 800dfea:	af04      	add	r7, sp, #16
 800dfec:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dff2:	3b01      	subs	r3, #1
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f9 faff 	bl	80075f8 <lwip_htonl>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2200      	movs	r2, #0
 800dffe:	2100      	movs	r1, #0
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7fe fd47 	bl	800ca94 <tcp_output_alloc_header>
 800e006:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d102      	bne.n	800e014 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e00e:	f04f 33ff 	mov.w	r3, #4294967295
 800e012:	e021      	b.n	800e058 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3304      	adds	r3, #4
 800e018:	4618      	mov	r0, r3
 800e01a:	f003 fd1f 	bl	8011a5c <ip4_route>
 800e01e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <tcp_keepalive+0x46>
    err = ERR_RTE;
 800e026:	23fc      	movs	r3, #252	; 0xfc
 800e028:	75fb      	strb	r3, [r7, #23]
 800e02a:	e010      	b.n	800e04e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	1d1a      	adds	r2, r3, #4
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7a98      	ldrb	r0, [r3, #10]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	9302      	str	r3, [sp, #8]
 800e03a:	2306      	movs	r3, #6
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	2300      	movs	r3, #0
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	4603      	mov	r3, r0
 800e044:	6938      	ldr	r0, [r7, #16]
 800e046:	f003 fecf 	bl	8011de8 <ip4_output_if>
 800e04a:	4603      	mov	r3, r0
 800e04c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e04e:	6938      	ldr	r0, [r7, #16]
 800e050:	f7fa fc5a 	bl	8008908 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b08f      	sub	sp, #60	; 0x3c
 800e064:	af04      	add	r7, sp, #16
 800e066:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e078:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	e085      	b.n	800e190 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	899b      	ldrh	r3, [r3, #12]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f9 faa5 	bl	80075dc <lwip_htons>
 800e092:	4603      	mov	r3, r0
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d005      	beq.n	800e0a8 <tcp_zero_window_probe+0x48>
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	891b      	ldrh	r3, [r3, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d101      	bne.n	800e0a8 <tcp_zero_window_probe+0x48>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <tcp_zero_window_probe+0x4a>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e0ac:	7ffb      	ldrb	r3, [r7, #31]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	bf0c      	ite	eq
 800e0b2:	2301      	moveq	r3, #1
 800e0b4:	2300      	movne	r3, #0
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	8bba      	ldrh	r2, [r7, #28]
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7fe fce5 	bl	800ca94 <tcp_output_alloc_header>
 800e0ca:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d102      	bne.n	800e0d8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d6:	e05b      	b.n	800e190 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e0de:	7ffb      	ldrb	r3, [r7, #31]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00e      	beq.n	800e102 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	899b      	ldrh	r3, [r3, #12]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0ee:	b29c      	uxth	r4, r3
 800e0f0:	2011      	movs	r0, #17
 800e0f2:	f7f9 fa73 	bl	80075dc <lwip_htons>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	4323      	orrs	r3, r4
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	819a      	strh	r2, [r3, #12]
 800e100:	e010      	b.n	800e124 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	3314      	adds	r3, #20
 800e108:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	6858      	ldr	r0, [r3, #4]
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	891a      	ldrh	r2, [r3, #8]
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	891b      	ldrh	r3, [r3, #8]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	2201      	movs	r2, #1
 800e11e:	6939      	ldr	r1, [r7, #16]
 800e120:	f7fa fdf2 	bl	8008d08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f9 fa64 	bl	80075f8 <lwip_htonl>
 800e130:	4603      	mov	r3, r0
 800e132:	3301      	adds	r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	da02      	bge.n	800e148 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4618      	mov	r0, r3
 800e14e:	f003 fc85 	bl	8011a5c <ip4_route>
 800e152:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d103      	bne.n	800e162 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800e15a:	23fc      	movs	r3, #252	; 0xfc
 800e15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e160:	e011      	b.n	800e186 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e162:	6879      	ldr	r1, [r7, #4]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	1d1a      	adds	r2, r3, #4
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7a98      	ldrb	r0, [r3, #10]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	9302      	str	r3, [sp, #8]
 800e170:	2306      	movs	r3, #6
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	2300      	movs	r3, #0
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	4603      	mov	r3, r0
 800e17a:	69b8      	ldr	r0, [r7, #24]
 800e17c:	f003 fe34 	bl	8011de8 <ip4_output_if>
 800e180:	4603      	mov	r3, r0
 800e182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800e186:	69b8      	ldr	r0, [r7, #24]
 800e188:	f7fa fbbe 	bl	8008908 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e18c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e190:	4618      	mov	r0, r3
 800e192:	372c      	adds	r7, #44	; 0x2c
 800e194:	46bd      	mov	sp, r7
 800e196:	bd90      	pop	{r4, r7, pc}

0800e198 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e1a0:	f7fa fe34 	bl	8008e0c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e1a4:	4b0a      	ldr	r3, [pc, #40]	; (800e1d0 <tcpip_tcp_timer+0x38>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d103      	bne.n	800e1b4 <tcpip_tcp_timer+0x1c>
 800e1ac:	4b09      	ldr	r3, [pc, #36]	; (800e1d4 <tcpip_tcp_timer+0x3c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d005      	beq.n	800e1c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	4908      	ldr	r1, [pc, #32]	; (800e1d8 <tcpip_tcp_timer+0x40>)
 800e1b8:	20fa      	movs	r0, #250	; 0xfa
 800e1ba:	f000 f86f 	bl	800e29c <sys_timeout>
 800e1be:	e002      	b.n	800e1c6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e1c0:	4b06      	ldr	r3, [pc, #24]	; (800e1dc <tcpip_tcp_timer+0x44>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	601a      	str	r2, [r3, #0]
  }
}
 800e1c6:	bf00      	nop
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20007220 	.word	0x20007220
 800e1d4:	20007230 	.word	0x20007230
 800e1d8:	0800e199 	.word	0x0800e199
 800e1dc:	2000075c 	.word	0x2000075c

0800e1e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e1e4:	4b0a      	ldr	r3, [pc, #40]	; (800e210 <tcp_timer_needed+0x30>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10f      	bne.n	800e20c <tcp_timer_needed+0x2c>
 800e1ec:	4b09      	ldr	r3, [pc, #36]	; (800e214 <tcp_timer_needed+0x34>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d103      	bne.n	800e1fc <tcp_timer_needed+0x1c>
 800e1f4:	4b08      	ldr	r3, [pc, #32]	; (800e218 <tcp_timer_needed+0x38>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d007      	beq.n	800e20c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e1fc:	4b04      	ldr	r3, [pc, #16]	; (800e210 <tcp_timer_needed+0x30>)
 800e1fe:	2201      	movs	r2, #1
 800e200:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e202:	2200      	movs	r2, #0
 800e204:	4905      	ldr	r1, [pc, #20]	; (800e21c <tcp_timer_needed+0x3c>)
 800e206:	20fa      	movs	r0, #250	; 0xfa
 800e208:	f000 f848 	bl	800e29c <sys_timeout>
  }
}
 800e20c:	bf00      	nop
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	2000075c 	.word	0x2000075c
 800e214:	20007220 	.word	0x20007220
 800e218:	20007230 	.word	0x20007230
 800e21c:	0800e199 	.word	0x0800e199

0800e220 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	4903      	ldr	r1, [pc, #12]	; (800e248 <cyclic_timer+0x28>)
 800e23a:	4618      	mov	r0, r3
 800e23c:	f000 f82e 	bl	800e29c <sys_timeout>
}
 800e240:	bf00      	nop
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	0800e221 	.word	0x0800e221

0800e24c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e252:	2301      	movs	r3, #1
 800e254:	607b      	str	r3, [r7, #4]
 800e256:	e00e      	b.n	800e276 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800e258:	4a0d      	ldr	r2, [pc, #52]	; (800e290 <sys_timeouts_init+0x44>)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4a0a      	ldr	r2, [pc, #40]	; (800e290 <sys_timeouts_init+0x44>)
 800e266:	4413      	add	r3, r2
 800e268:	461a      	mov	r2, r3
 800e26a:	490a      	ldr	r1, [pc, #40]	; (800e294 <sys_timeouts_init+0x48>)
 800e26c:	f000 f816 	bl	800e29c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3301      	adds	r3, #1
 800e274:	607b      	str	r3, [r7, #4]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b04      	cmp	r3, #4
 800e27a:	d9ed      	bls.n	800e258 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800e27c:	f005 fb16 	bl	80138ac <sys_now>
 800e280:	4602      	mov	r2, r0
 800e282:	4b05      	ldr	r3, [pc, #20]	; (800e298 <sys_timeouts_init+0x4c>)
 800e284:	601a      	str	r2, [r3, #0]
}
 800e286:	bf00      	nop
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	0801b808 	.word	0x0801b808
 800e294:	0800e221 	.word	0x0800e221
 800e298:	20000758 	.word	0x20000758

0800e29c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e2a8:	2006      	movs	r0, #6
 800e2aa:	f7f9 fdaf 	bl	8007e0c <memp_malloc>
 800e2ae:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10a      	bne.n	800e2cc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f040 8084 	bne.w	800e3c6 <sys_timeout+0x12a>
 800e2be:	4b44      	ldr	r3, [pc, #272]	; (800e3d0 <sys_timeout+0x134>)
 800e2c0:	22d4      	movs	r2, #212	; 0xd4
 800e2c2:	4944      	ldr	r1, [pc, #272]	; (800e3d4 <sys_timeout+0x138>)
 800e2c4:	4844      	ldr	r0, [pc, #272]	; (800e3d8 <sys_timeout+0x13c>)
 800e2c6:	f007 fd89 	bl	8015ddc <iprintf>
    return;
 800e2ca:	e07c      	b.n	800e3c6 <sys_timeout+0x12a>
  }

  now = sys_now();
 800e2cc:	f005 faee 	bl	80138ac <sys_now>
 800e2d0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800e2d2:	4b42      	ldr	r3, [pc, #264]	; (800e3dc <sys_timeout+0x140>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d105      	bne.n	800e2e6 <sys_timeout+0x4a>
    diff = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800e2de:	4a40      	ldr	r2, [pc, #256]	; (800e3e0 <sys_timeout+0x144>)
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6013      	str	r3, [r2, #0]
 800e2e4:	e004      	b.n	800e2f0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800e2e6:	4b3e      	ldr	r3, [pc, #248]	; (800e3e0 <sys_timeout+0x144>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	441a      	add	r2, r3
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e30c:	4b33      	ldr	r3, [pc, #204]	; (800e3dc <sys_timeout+0x140>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d103      	bne.n	800e31c <sys_timeout+0x80>
    next_timeout = timeout;
 800e314:	4a31      	ldr	r2, [pc, #196]	; (800e3dc <sys_timeout+0x140>)
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	6013      	str	r3, [r2, #0]
    return;
 800e31a:	e055      	b.n	800e3c8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800e31c:	4b2f      	ldr	r3, [pc, #188]	; (800e3dc <sys_timeout+0x140>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	429a      	cmp	r2, r3
 800e326:	d20f      	bcs.n	800e348 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800e328:	4b2c      	ldr	r3, [pc, #176]	; (800e3dc <sys_timeout+0x140>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	6859      	ldr	r1, [r3, #4]
 800e32e:	4b2b      	ldr	r3, [pc, #172]	; (800e3dc <sys_timeout+0x140>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	1a8a      	subs	r2, r1, r2
 800e336:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800e338:	4b28      	ldr	r3, [pc, #160]	; (800e3dc <sys_timeout+0x140>)
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e340:	4a26      	ldr	r2, [pc, #152]	; (800e3dc <sys_timeout+0x140>)
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	e03f      	b.n	800e3c8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e348:	4b24      	ldr	r3, [pc, #144]	; (800e3dc <sys_timeout+0x140>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	61fb      	str	r3, [r7, #28]
 800e34e:	e036      	b.n	800e3be <sys_timeout+0x122>
      timeout->time -= t->time;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	1ad2      	subs	r2, r2, r3
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d006      	beq.n	800e374 <sys_timeout+0xd8>
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	685a      	ldr	r2, [r3, #4]
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	429a      	cmp	r2, r3
 800e372:	d921      	bls.n	800e3b8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d009      	beq.n	800e390 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6859      	ldr	r1, [r3, #4]
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	1a8a      	subs	r2, r1, r2
 800e38c:	605a      	str	r2, [r3, #4]
 800e38e:	e00b      	b.n	800e3a8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	429a      	cmp	r2, r3
 800e398:	d206      	bcs.n	800e3a8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800e39a:	4b10      	ldr	r3, [pc, #64]	; (800e3dc <sys_timeout+0x140>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	441a      	add	r2, r3
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	601a      	str	r2, [r3, #0]
        break;
 800e3b6:	e007      	b.n	800e3c8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	61fb      	str	r3, [r7, #28]
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1c5      	bne.n	800e350 <sys_timeout+0xb4>
 800e3c4:	e000      	b.n	800e3c8 <sys_timeout+0x12c>
    return;
 800e3c6:	bf00      	nop
      }
    }
  }
}
 800e3c8:	3720      	adds	r7, #32
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	080198b4 	.word	0x080198b4
 800e3d4:	080198e8 	.word	0x080198e8
 800e3d8:	08019928 	.word	0x08019928
 800e3dc:	20000754 	.word	0x20000754
 800e3e0:	20000758 	.word	0x20000758

0800e3e4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800e3ea:	4b24      	ldr	r3, [pc, #144]	; (800e47c <sys_check_timeouts+0x98>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d040      	beq.n	800e474 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800e3f2:	f005 fa5b 	bl	80138ac <sys_now>
 800e3f6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800e3f8:	4b21      	ldr	r3, [pc, #132]	; (800e480 <sys_check_timeouts+0x9c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800e402:	4b20      	ldr	r3, [pc, #128]	; (800e484 <sys_check_timeouts+0xa0>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	b2db      	uxtb	r3, r3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <sys_check_timeouts+0x2c>
 800e40c:	f7f9 feda 	bl	80081c4 <pbuf_free_ooseq>
      had_one = 0;
 800e410:	2300      	movs	r3, #0
 800e412:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800e414:	4b19      	ldr	r3, [pc, #100]	; (800e47c <sys_check_timeouts+0x98>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d026      	beq.n	800e46e <sys_check_timeouts+0x8a>
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	429a      	cmp	r2, r3
 800e428:	d321      	bcc.n	800e46e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800e42a:	2301      	movs	r3, #1
 800e42c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4b13      	ldr	r3, [pc, #76]	; (800e480 <sys_check_timeouts+0x9c>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4413      	add	r3, r2
 800e438:	4a11      	ldr	r2, [pc, #68]	; (800e480 <sys_check_timeouts+0x9c>)
 800e43a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	697a      	ldr	r2, [r7, #20]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a0c      	ldr	r2, [pc, #48]	; (800e47c <sys_check_timeouts+0x98>)
 800e44c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	2006      	movs	r0, #6
 800e45e:	f7f9 fd21 	bl	8007ea4 <memp_free>
        if (handler != NULL) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6838      	ldr	r0, [r7, #0]
 800e46c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800e46e:	7cfb      	ldrb	r3, [r7, #19]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1c6      	bne.n	800e402 <sys_check_timeouts+0x1e>
  }
}
 800e474:	bf00      	nop
 800e476:	3718      	adds	r7, #24
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20000754 	.word	0x20000754
 800e480:	20000758 	.word	0x20000758
 800e484:	20007218 	.word	0x20007218

0800e488 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e488:	b480      	push	{r7}
 800e48a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e48c:	bf00      	nop
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
	...

0800e498 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e4a2:	4b17      	ldr	r3, [pc, #92]	; (800e500 <udp_new_port+0x68>)
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	b291      	uxth	r1, r2
 800e4aa:	4a15      	ldr	r2, [pc, #84]	; (800e500 <udp_new_port+0x68>)
 800e4ac:	8011      	strh	r1, [r2, #0]
 800e4ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d103      	bne.n	800e4be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e4b6:	4b12      	ldr	r3, [pc, #72]	; (800e500 <udp_new_port+0x68>)
 800e4b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e4bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4be:	4b11      	ldr	r3, [pc, #68]	; (800e504 <udp_new_port+0x6c>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	e011      	b.n	800e4ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	8a5a      	ldrh	r2, [r3, #18]
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	; (800e500 <udp_new_port+0x68>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d108      	bne.n	800e4e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	80fb      	strh	r3, [r7, #6]
 800e4d8:	88fb      	ldrh	r3, [r7, #6]
 800e4da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4de:	d3e0      	bcc.n	800e4a2 <udp_new_port+0xa>
        return 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e007      	b.n	800e4f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	603b      	str	r3, [r7, #0]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1ea      	bne.n	800e4c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e4f0:	4b03      	ldr	r3, [pc, #12]	; (800e500 <udp_new_port+0x68>)
 800e4f2:	881b      	ldrh	r3, [r3, #0]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	2000000c 	.word	0x2000000c
 800e504:	20007238 	.word	0x20007238

0800e508 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	4613      	mov	r3, r2
 800e514:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d018      	beq.n	800e54e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d013      	beq.n	800e54a <udp_input_local_match+0x42>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00f      	beq.n	800e54a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e52a:	4b14      	ldr	r3, [pc, #80]	; (800e57c <udp_input_local_match+0x74>)
 800e52c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e532:	d00a      	beq.n	800e54a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	4b10      	ldr	r3, [pc, #64]	; (800e57c <udp_input_local_match+0x74>)
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	405a      	eors	r2, r3
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	3308      	adds	r3, #8
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e546:	2b00      	cmp	r3, #0
 800e548:	d110      	bne.n	800e56c <udp_input_local_match+0x64>
          return 1;
 800e54a:	2301      	movs	r3, #1
 800e54c:	e00f      	b.n	800e56e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d009      	beq.n	800e568 <udp_input_local_match+0x60>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d005      	beq.n	800e568 <udp_input_local_match+0x60>
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	4b06      	ldr	r3, [pc, #24]	; (800e57c <udp_input_local_match+0x74>)
 800e562:	695b      	ldr	r3, [r3, #20]
 800e564:	429a      	cmp	r2, r3
 800e566:	d101      	bne.n	800e56c <udp_input_local_match+0x64>
      return 1;
 800e568:	2301      	movs	r3, #1
 800e56a:	e000      	b.n	800e56e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3714      	adds	r7, #20
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	20000938 	.word	0x20000938

0800e580 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e580:	b590      	push	{r4, r7, lr}
 800e582:	b08d      	sub	sp, #52	; 0x34
 800e584:	af02      	add	r7, sp, #8
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	895b      	ldrh	r3, [r3, #10]
 800e592:	2b07      	cmp	r3, #7
 800e594:	d803      	bhi.n	800e59e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7fa f9b6 	bl	8008908 <pbuf_free>
    goto end;
 800e59c:	e0c6      	b.n	800e72c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e5a4:	4b63      	ldr	r3, [pc, #396]	; (800e734 <udp_input+0x1b4>)
 800e5a6:	695a      	ldr	r2, [r3, #20]
 800e5a8:	4b62      	ldr	r3, [pc, #392]	; (800e734 <udp_input+0x1b4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f003 fcec 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f9 f80c 	bl	80075dc <lwip_htons>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	885b      	ldrh	r3, [r3, #2]
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7f9 f804 	bl	80075dc <lwip_htons>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e4:	4b54      	ldr	r3, [pc, #336]	; (800e738 <udp_input+0x1b8>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ea:	e03b      	b.n	800e664 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	8a5b      	ldrh	r3, [r3, #18]
 800e5f0:	89fa      	ldrh	r2, [r7, #14]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d131      	bne.n	800e65a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e5f6:	7cfb      	ldrb	r3, [r7, #19]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5fe:	f7ff ff83 	bl	800e508 <udp_input_local_match>
 800e602:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e604:	2b00      	cmp	r3, #0
 800e606:	d028      	beq.n	800e65a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	7c1b      	ldrb	r3, [r3, #16]
 800e60c:	f003 0304 	and.w	r3, r3, #4
 800e610:	2b00      	cmp	r3, #0
 800e612:	d104      	bne.n	800e61e <udp_input+0x9e>
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d101      	bne.n	800e61e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	8a9b      	ldrh	r3, [r3, #20]
 800e622:	8a3a      	ldrh	r2, [r7, #16]
 800e624:	429a      	cmp	r2, r3
 800e626:	d118      	bne.n	800e65a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d005      	beq.n	800e63c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	685a      	ldr	r2, [r3, #4]
 800e634:	4b3f      	ldr	r3, [pc, #252]	; (800e734 <udp_input+0x1b4>)
 800e636:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e638:	429a      	cmp	r2, r3
 800e63a:	d10e      	bne.n	800e65a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d014      	beq.n	800e66c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	68da      	ldr	r2, [r3, #12]
 800e646:	6a3b      	ldr	r3, [r7, #32]
 800e648:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e64a:	4b3b      	ldr	r3, [pc, #236]	; (800e738 <udp_input+0x1b8>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e652:	4a39      	ldr	r2, [pc, #228]	; (800e738 <udp_input+0x1b8>)
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e658:	e008      	b.n	800e66c <udp_input+0xec>
      }
    }

    prev = pcb;
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	627b      	str	r3, [r7, #36]	; 0x24
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1c0      	bne.n	800e5ec <udp_input+0x6c>
 800e66a:	e000      	b.n	800e66e <udp_input+0xee>
        break;
 800e66c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <udp_input+0xf8>
    pcb = uncon_pcb;
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <udp_input+0x104>
    for_us = 1;
 800e67e:	2301      	movs	r3, #1
 800e680:	76fb      	strb	r3, [r7, #27]
 800e682:	e00a      	b.n	800e69a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	3304      	adds	r3, #4
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	4b2a      	ldr	r3, [pc, #168]	; (800e734 <udp_input+0x1b4>)
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	429a      	cmp	r2, r3
 800e690:	bf0c      	ite	eq
 800e692:	2301      	moveq	r3, #1
 800e694:	2300      	movne	r3, #0
 800e696:	b2db      	uxtb	r3, r3
 800e698:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e69a:	7efb      	ldrb	r3, [r7, #27]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d042      	beq.n	800e726 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800e6a0:	f06f 0107 	mvn.w	r1, #7
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7fa f90b 	bl	80088c0 <pbuf_header>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00a      	beq.n	800e6c6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800e6b0:	4b22      	ldr	r3, [pc, #136]	; (800e73c <udp_input+0x1bc>)
 800e6b2:	f240 1255 	movw	r2, #341	; 0x155
 800e6b6:	4922      	ldr	r1, [pc, #136]	; (800e740 <udp_input+0x1c0>)
 800e6b8:	4822      	ldr	r0, [pc, #136]	; (800e744 <udp_input+0x1c4>)
 800e6ba:	f007 fb8f 	bl	8015ddc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7fa f922 	bl	8008908 <pbuf_free>
      goto end;
 800e6c4:	e032      	b.n	800e72c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d012      	beq.n	800e6f2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00a      	beq.n	800e6ea <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	699c      	ldr	r4, [r3, #24]
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	69d8      	ldr	r0, [r3, #28]
 800e6dc:	8a3b      	ldrh	r3, [r7, #16]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	4b19      	ldr	r3, [pc, #100]	; (800e748 <udp_input+0x1c8>)
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e6e8:	e021      	b.n	800e72e <udp_input+0x1ae>
        pbuf_free(p);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7fa f90c 	bl	8008908 <pbuf_free>
        goto end;
 800e6f0:	e01c      	b.n	800e72c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e6f2:	7cfb      	ldrb	r3, [r7, #19]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d112      	bne.n	800e71e <udp_input+0x19e>
 800e6f8:	4b0e      	ldr	r3, [pc, #56]	; (800e734 <udp_input+0x1b4>)
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e700:	2be0      	cmp	r3, #224	; 0xe0
 800e702:	d00c      	beq.n	800e71e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e704:	4b0b      	ldr	r3, [pc, #44]	; (800e734 <udp_input+0x1b4>)
 800e706:	899b      	ldrh	r3, [r3, #12]
 800e708:	3308      	adds	r3, #8
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	b21b      	sxth	r3, r3
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7fa f8e7 	bl	80088e4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e716:	2103      	movs	r1, #3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f003 f917 	bl	801194c <icmp_dest_unreach>
      pbuf_free(p);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7fa f8f2 	bl	8008908 <pbuf_free>
  return;
 800e724:	e003      	b.n	800e72e <udp_input+0x1ae>
    pbuf_free(p);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7fa f8ee 	bl	8008908 <pbuf_free>
  return;
 800e72c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e72e:	372c      	adds	r7, #44	; 0x2c
 800e730:	46bd      	mov	sp, r7
 800e732:	bd90      	pop	{r4, r7, pc}
 800e734:	20000938 	.word	0x20000938
 800e738:	20007238 	.word	0x20007238
 800e73c:	08019950 	.word	0x08019950
 800e740:	08019980 	.word	0x08019980
 800e744:	08019994 	.word	0x08019994
 800e748:	20000948 	.word	0x20000948

0800e74c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b088      	sub	sp, #32
 800e750:	af02      	add	r7, sp, #8
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <udp_sendto_if+0x1a>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d102      	bne.n	800e76c <udp_sendto_if+0x20>
    return ERR_VAL;
 800e766:	f06f 0305 	mvn.w	r3, #5
 800e76a:	e028      	b.n	800e7be <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <udp_sendto_if+0x3a>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d005      	beq.n	800e786 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e782:	2be0      	cmp	r3, #224	; 0xe0
 800e784:	d103      	bne.n	800e78e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800e786:	6a3b      	ldr	r3, [r7, #32]
 800e788:	3304      	adds	r3, #4
 800e78a:	617b      	str	r3, [r7, #20]
 800e78c:	e00b      	b.n	800e7a6 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	3304      	adds	r3, #4
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d002      	beq.n	800e7a2 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800e79c:	f06f 0303 	mvn.w	r3, #3
 800e7a0:	e00d      	b.n	800e7be <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e7a6:	887a      	ldrh	r2, [r7, #2]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	6a3b      	ldr	r3, [r7, #32]
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	68b9      	ldr	r1, [r7, #8]
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f000 f806 	bl	800e7c8 <udp_sendto_if_src>
 800e7bc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
	...

0800e7c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08c      	sub	sp, #48	; 0x30
 800e7cc:	af04      	add	r7, sp, #16
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <udp_sendto_if_src+0x1a>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d102      	bne.n	800e7e8 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800e7e2:	f06f 0305 	mvn.w	r3, #5
 800e7e6:	e07e      	b.n	800e8e6 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	8a5b      	ldrh	r3, [r3, #18]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10f      	bne.n	800e810 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e7f0:	68f9      	ldr	r1, [r7, #12]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	8a5b      	ldrh	r3, [r3, #18]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f000 f87f 	bl	800e8fc <udp_bind>
 800e7fe:	4603      	mov	r3, r0
 800e800:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e802:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e80a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e80e:	e06a      	b.n	800e8e6 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800e810:	2108      	movs	r1, #8
 800e812:	68b8      	ldr	r0, [r7, #8]
 800e814:	f7fa f854 	bl	80088c0 <pbuf_header>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d014      	beq.n	800e848 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e81e:	2200      	movs	r2, #0
 800e820:	2108      	movs	r1, #8
 800e822:	2001      	movs	r0, #1
 800e824:	f7f9 fcfe 	bl	8008224 <pbuf_alloc>
 800e828:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e830:	f04f 33ff 	mov.w	r3, #4294967295
 800e834:	e057      	b.n	800e8e6 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	891b      	ldrh	r3, [r3, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d006      	beq.n	800e84c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	69f8      	ldr	r0, [r7, #28]
 800e842:	f7fa f985 	bl	8008b50 <pbuf_chain>
 800e846:	e001      	b.n	800e84c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	895b      	ldrh	r3, [r3, #10]
 800e850:	2b07      	cmp	r3, #7
 800e852:	d806      	bhi.n	800e862 <udp_sendto_if_src+0x9a>
 800e854:	4b26      	ldr	r3, [pc, #152]	; (800e8f0 <udp_sendto_if_src+0x128>)
 800e856:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e85a:	4926      	ldr	r1, [pc, #152]	; (800e8f4 <udp_sendto_if_src+0x12c>)
 800e85c:	4826      	ldr	r0, [pc, #152]	; (800e8f8 <udp_sendto_if_src+0x130>)
 800e85e:	f007 fabd 	bl	8015ddc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	8a5b      	ldrh	r3, [r3, #18]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f8 feb5 	bl	80075dc <lwip_htons>
 800e872:	4603      	mov	r3, r0
 800e874:	461a      	mov	r2, r3
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e87a:	887b      	ldrh	r3, [r7, #2]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f8 fead 	bl	80075dc <lwip_htons>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	2200      	movs	r2, #0
 800e88e:	719a      	strb	r2, [r3, #6]
 800e890:	2200      	movs	r2, #0
 800e892:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	891b      	ldrh	r3, [r3, #8]
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f8 fe9f 	bl	80075dc <lwip_htons>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e8a6:	2311      	movs	r3, #17
 800e8a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	7a9b      	ldrb	r3, [r3, #10]
 800e8ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	7a5b      	ldrb	r3, [r3, #9]
 800e8b4:	7cb9      	ldrb	r1, [r7, #18]
 800e8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8b8:	9202      	str	r2, [sp, #8]
 800e8ba:	7cfa      	ldrb	r2, [r7, #19]
 800e8bc:	9201      	str	r2, [sp, #4]
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8c6:	69f8      	ldr	r0, [r7, #28]
 800e8c8:	f003 fab8 	bl	8011e3c <ip4_output_if_src>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e8d0:	69fa      	ldr	r2, [r7, #28]
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d004      	beq.n	800e8e2 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800e8d8:	69f8      	ldr	r0, [r7, #28]
 800e8da:	f7fa f815 	bl	8008908 <pbuf_free>
    q = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e8e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3720      	adds	r7, #32
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	08019950 	.word	0x08019950
 800e8f4:	080199bc 	.word	0x080199bc
 800e8f8:	08019994 	.word	0x08019994

0800e8fc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b086      	sub	sp, #24
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	4613      	mov	r3, r2
 800e908:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d101      	bne.n	800e914 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e910:	4b30      	ldr	r3, [pc, #192]	; (800e9d4 <udp_bind+0xd8>)
 800e912:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <udp_bind+0x24>
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <udp_bind+0x2a>
    return ERR_VAL;
 800e920:	f06f 0305 	mvn.w	r3, #5
 800e924:	e052      	b.n	800e9cc <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e926:	2300      	movs	r3, #0
 800e928:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e92a:	4b2b      	ldr	r3, [pc, #172]	; (800e9d8 <udp_bind+0xdc>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	617b      	str	r3, [r7, #20]
 800e930:	e009      	b.n	800e946 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	429a      	cmp	r2, r3
 800e938:	d102      	bne.n	800e940 <udp_bind+0x44>
      rebind = 1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	74fb      	strb	r3, [r7, #19]
      break;
 800e93e:	e005      	b.n	800e94c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	617b      	str	r3, [r7, #20]
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1f2      	bne.n	800e932 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800e94c:	88fb      	ldrh	r3, [r7, #6]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d109      	bne.n	800e966 <udp_bind+0x6a>
    port = udp_new_port();
 800e952:	f7ff fda1 	bl	800e498 <udp_new_port>
 800e956:	4603      	mov	r3, r0
 800e958:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e95a:	88fb      	ldrh	r3, [r7, #6]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d11e      	bne.n	800e99e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e960:	f06f 0307 	mvn.w	r3, #7
 800e964:	e032      	b.n	800e9cc <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e966:	4b1c      	ldr	r3, [pc, #112]	; (800e9d8 <udp_bind+0xdc>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	e014      	b.n	800e998 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	429a      	cmp	r2, r3
 800e974:	d00d      	beq.n	800e992 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	8a5b      	ldrh	r3, [r3, #18]
 800e97a:	88fa      	ldrh	r2, [r7, #6]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d108      	bne.n	800e992 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e988:	429a      	cmp	r2, r3
 800e98a:	d102      	bne.n	800e992 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e98c:	f06f 0307 	mvn.w	r3, #7
 800e990:	e01c      	b.n	800e9cc <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	617b      	str	r3, [r7, #20]
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1e7      	bne.n	800e96e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <udp_bind+0xae>
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	e000      	b.n	800e9ac <udp_bind+0xb0>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	88fa      	ldrh	r2, [r7, #6]
 800e9b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e9b6:	7cfb      	ldrb	r3, [r7, #19]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d106      	bne.n	800e9ca <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <udp_bind+0xdc>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e9c4:	4a04      	ldr	r2, [pc, #16]	; (800e9d8 <udp_bind+0xdc>)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	0801b830 	.word	0x0801b830
 800e9d8:	20007238 	.word	0x20007238

0800e9dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d002      	beq.n	800e9f6 <udp_connect+0x1a>
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d102      	bne.n	800e9fc <udp_connect+0x20>
    return ERR_VAL;
 800e9f6:	f06f 0305 	mvn.w	r3, #5
 800e9fa:	e03e      	b.n	800ea7a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	8a5b      	ldrh	r3, [r3, #18]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10f      	bne.n	800ea24 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ea04:	68f9      	ldr	r1, [r7, #12]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	8a5b      	ldrh	r3, [r3, #18]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff ff75 	bl	800e8fc <udp_bind>
 800ea12:	4603      	mov	r3, r0
 800ea14:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ea16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d002      	beq.n	800ea24 <udp_connect+0x48>
      return err;
 800ea1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea22:	e02a      	b.n	800ea7a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d002      	beq.n	800ea30 <udp_connect+0x54>
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	e000      	b.n	800ea32 <udp_connect+0x56>
 800ea30:	2300      	movs	r3, #0
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	88fa      	ldrh	r2, [r7, #6]
 800ea3a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	7c1b      	ldrb	r3, [r3, #16]
 800ea40:	f043 0304 	orr.w	r3, r3, #4
 800ea44:	b2da      	uxtb	r2, r3
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea4a:	4b0e      	ldr	r3, [pc, #56]	; (800ea84 <udp_connect+0xa8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	617b      	str	r3, [r7, #20]
 800ea50:	e008      	b.n	800ea64 <udp_connect+0x88>
    if (pcb == ipcb) {
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d101      	bne.n	800ea5e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	e00d      	b.n	800ea7a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	617b      	str	r3, [r7, #20]
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1f3      	bne.n	800ea52 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <udp_connect+0xa8>)
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ea72:	4a04      	ldr	r2, [pc, #16]	; (800ea84 <udp_connect+0xa8>)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20007238 	.word	0x20007238

0800ea88 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	61da      	str	r2, [r3, #28]
}
 800eaa0:	bf00      	nop
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800eab4:	4b15      	ldr	r3, [pc, #84]	; (800eb0c <udp_remove+0x60>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d105      	bne.n	800eaca <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800eabe:	4b13      	ldr	r3, [pc, #76]	; (800eb0c <udp_remove+0x60>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	4a11      	ldr	r2, [pc, #68]	; (800eb0c <udp_remove+0x60>)
 800eac6:	6013      	str	r3, [r2, #0]
 800eac8:	e017      	b.n	800eafa <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800eaca:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <udp_remove+0x60>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	e010      	b.n	800eaf4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d009      	beq.n	800eaee <udp_remove+0x42>
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d104      	bne.n	800eaee <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	68da      	ldr	r2, [r3, #12]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	60da      	str	r2, [r3, #12]
        break;
 800eaec:	e005      	b.n	800eafa <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	60fb      	str	r3, [r7, #12]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1eb      	bne.n	800ead2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800eafa:	6879      	ldr	r1, [r7, #4]
 800eafc:	2000      	movs	r0, #0
 800eafe:	f7f9 f9d1 	bl	8007ea4 <memp_free>
}
 800eb02:	bf00      	nop
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20007238 	.word	0x20007238

0800eb10 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7f9 f978 	bl	8007e0c <memp_malloc>
 800eb1c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d007      	beq.n	800eb34 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800eb24:	2220      	movs	r2, #32
 800eb26:	2100      	movs	r1, #0
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f006 fcf3 	bl	8015514 <memset>
    pcb->ttl = UDP_TTL;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	22ff      	movs	r2, #255	; 0xff
 800eb32:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800eb34:	687b      	ldr	r3, [r7, #4]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
	...

0800eb40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d01e      	beq.n	800eb8e <udp_netif_ip_addr_changed+0x4e>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d01a      	beq.n	800eb8e <udp_netif_ip_addr_changed+0x4e>
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d017      	beq.n	800eb8e <udp_netif_ip_addr_changed+0x4e>
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d013      	beq.n	800eb8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb66:	4b0d      	ldr	r3, [pc, #52]	; (800eb9c <udp_netif_ip_addr_changed+0x5c>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	e00c      	b.n	800eb88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d103      	bne.n	800eb82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	60fb      	str	r3, [r7, #12]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1ef      	bne.n	800eb6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800eb8e:	bf00      	nop
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	20007238 	.word	0x20007238

0800eba0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800eba4:	4b20      	ldr	r3, [pc, #128]	; (800ec28 <dhcp_inc_pcb_refcount+0x88>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d133      	bne.n	800ec14 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800ebac:	4b1f      	ldr	r3, [pc, #124]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d005      	beq.n	800ebc0 <dhcp_inc_pcb_refcount+0x20>
 800ebb4:	4b1e      	ldr	r3, [pc, #120]	; (800ec30 <dhcp_inc_pcb_refcount+0x90>)
 800ebb6:	22d9      	movs	r2, #217	; 0xd9
 800ebb8:	491e      	ldr	r1, [pc, #120]	; (800ec34 <dhcp_inc_pcb_refcount+0x94>)
 800ebba:	481f      	ldr	r0, [pc, #124]	; (800ec38 <dhcp_inc_pcb_refcount+0x98>)
 800ebbc:	f007 f90e 	bl	8015ddc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800ebc0:	f7ff ffa6 	bl	800eb10 <udp_new>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	4b19      	ldr	r3, [pc, #100]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebc8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800ebca:	4b18      	ldr	r3, [pc, #96]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d102      	bne.n	800ebd8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800ebd2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebd6:	e024      	b.n	800ec22 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800ebd8:	4b14      	ldr	r3, [pc, #80]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	7a1a      	ldrb	r2, [r3, #8]
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0220 	orr.w	r2, r2, #32
 800ebe6:	b2d2      	uxtb	r2, r2
 800ebe8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800ebea:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2244      	movs	r2, #68	; 0x44
 800ebf0:	4912      	ldr	r1, [pc, #72]	; (800ec3c <dhcp_inc_pcb_refcount+0x9c>)
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff fe82 	bl	800e8fc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800ebf8:	4b0c      	ldr	r3, [pc, #48]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2243      	movs	r2, #67	; 0x43
 800ebfe:	490f      	ldr	r1, [pc, #60]	; (800ec3c <dhcp_inc_pcb_refcount+0x9c>)
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff feeb 	bl	800e9dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ec06:	4b09      	ldr	r3, [pc, #36]	; (800ec2c <dhcp_inc_pcb_refcount+0x8c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	490c      	ldr	r1, [pc, #48]	; (800ec40 <dhcp_inc_pcb_refcount+0xa0>)
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff ff3a 	bl	800ea88 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800ec14:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <dhcp_inc_pcb_refcount+0x88>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	4b02      	ldr	r3, [pc, #8]	; (800ec28 <dhcp_inc_pcb_refcount+0x88>)
 800ec1e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000764 	.word	0x20000764
 800ec2c:	20000760 	.word	0x20000760
 800ec30:	080199ec 	.word	0x080199ec
 800ec34:	08019a24 	.word	0x08019a24
 800ec38:	08019a4c 	.word	0x08019a4c
 800ec3c:	0801b830 	.word	0x0801b830
 800ec40:	080102fd 	.word	0x080102fd

0800ec44 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800ec48:	4b0e      	ldr	r3, [pc, #56]	; (800ec84 <dhcp_dec_pcb_refcount+0x40>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d105      	bne.n	800ec5c <dhcp_dec_pcb_refcount+0x18>
 800ec50:	4b0d      	ldr	r3, [pc, #52]	; (800ec88 <dhcp_dec_pcb_refcount+0x44>)
 800ec52:	22f3      	movs	r2, #243	; 0xf3
 800ec54:	490d      	ldr	r1, [pc, #52]	; (800ec8c <dhcp_dec_pcb_refcount+0x48>)
 800ec56:	480e      	ldr	r0, [pc, #56]	; (800ec90 <dhcp_dec_pcb_refcount+0x4c>)
 800ec58:	f007 f8c0 	bl	8015ddc <iprintf>
  dhcp_pcb_refcount--;
 800ec5c:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <dhcp_dec_pcb_refcount+0x40>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	4b07      	ldr	r3, [pc, #28]	; (800ec84 <dhcp_dec_pcb_refcount+0x40>)
 800ec66:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ec68:	4b06      	ldr	r3, [pc, #24]	; (800ec84 <dhcp_dec_pcb_refcount+0x40>)
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d107      	bne.n	800ec80 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ec70:	4b08      	ldr	r3, [pc, #32]	; (800ec94 <dhcp_dec_pcb_refcount+0x50>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff ff19 	bl	800eaac <udp_remove>
    dhcp_pcb = NULL;
 800ec7a:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <dhcp_dec_pcb_refcount+0x50>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	601a      	str	r2, [r3, #0]
  }
}
 800ec80:	bf00      	nop
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	20000764 	.word	0x20000764
 800ec88:	080199ec 	.word	0x080199ec
 800ec8c:	08019a74 	.word	0x08019a74
 800ec90:	08019a4c 	.word	0x08019a4c
 800ec94:	20000760 	.word	0x20000760

0800ec98 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6a1b      	ldr	r3, [r3, #32]
 800eca4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800eca6:	210c      	movs	r1, #12
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 ff85 	bl	800fbb8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ecae:	4b06      	ldr	r3, [pc, #24]	; (800ecc8 <dhcp_handle_nak+0x30>)
 800ecb0:	4a05      	ldr	r2, [pc, #20]	; (800ecc8 <dhcp_handle_nak+0x30>)
 800ecb2:	4905      	ldr	r1, [pc, #20]	; (800ecc8 <dhcp_handle_nak+0x30>)
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7f9 f983 	bl	8007fc0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fbb6 	bl	800f42c <dhcp_discover>
}
 800ecc0:	bf00      	nop
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	0801b830 	.word	0x0801b830

0800eccc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a1b      	ldr	r3, [r3, #32]
 800ecd8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ecda:	2108      	movs	r1, #8
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f000 ff6b 	bl	800fbb8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3328      	adds	r3, #40	; 0x28
 800ece6:	2200      	movs	r2, #0
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f002 fb1e 	bl	801132c <etharp_query>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	7a9b      	ldrb	r3, [r3, #10]
 800ecf8:	2bff      	cmp	r3, #255	; 0xff
 800ecfa:	d005      	beq.n	800ed08 <dhcp_check+0x3c>
    dhcp->tries++;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	7a9b      	ldrb	r3, [r3, #10]
 800ed00:	3301      	adds	r3, #1
 800ed02:	b2da      	uxtb	r2, r3
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800ed08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ed0c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ed0e:	893b      	ldrh	r3, [r7, #8]
 800ed10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ed14:	4a06      	ldr	r2, [pc, #24]	; (800ed30 <dhcp_check+0x64>)
 800ed16:	fb82 1203 	smull	r1, r2, r2, r3
 800ed1a:	1152      	asrs	r2, r2, #5
 800ed1c:	17db      	asrs	r3, r3, #31
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800ed26:	bf00      	nop
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	10624dd3 	.word	0x10624dd3

0800ed34 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6a1b      	ldr	r3, [r3, #32]
 800ed40:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800ed42:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <dhcp_handle_offer+0x40>)
 800ed44:	789b      	ldrb	r3, [r3, #2]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00f      	beq.n	800ed6a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800ed4a:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <dhcp_handle_offer+0x44>)
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7f8 fc52 	bl	80075f8 <lwip_htonl>
 800ed54:	4602      	mov	r2, r0
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	691a      	ldr	r2, [r3, #16]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 f809 	bl	800ed7c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800ed6a:	bf00      	nop
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	2000723c 	.word	0x2000723c
 800ed78:	20007244 	.word	0x20007244

0800ed7c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af02      	add	r7, sp, #8
 800ed82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ed8a:	2101      	movs	r1, #1
 800ed8c:	6938      	ldr	r0, [r7, #16]
 800ed8e:	f000 ff13 	bl	800fbb8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800ed92:	2203      	movs	r2, #3
 800ed94:	6939      	ldr	r1, [r7, #16]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f001 fb94 	bl	80104c4 <dhcp_create_msg>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800eda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d159      	bne.n	800ee5c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800eda8:	2202      	movs	r2, #2
 800edaa:	2139      	movs	r1, #57	; 0x39
 800edac:	6938      	ldr	r0, [r7, #16]
 800edae:	f000 ff1d 	bl	800fbec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800edb6:	4619      	mov	r1, r3
 800edb8:	6938      	ldr	r0, [r7, #16]
 800edba:	f000 ff79 	bl	800fcb0 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800edbe:	2204      	movs	r2, #4
 800edc0:	2132      	movs	r1, #50	; 0x32
 800edc2:	6938      	ldr	r0, [r7, #16]
 800edc4:	f000 ff12 	bl	800fbec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edcc:	4618      	mov	r0, r3
 800edce:	f7f8 fc13 	bl	80075f8 <lwip_htonl>
 800edd2:	4603      	mov	r3, r0
 800edd4:	4619      	mov	r1, r3
 800edd6:	6938      	ldr	r0, [r7, #16]
 800edd8:	f000 ffa4 	bl	800fd24 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800eddc:	2204      	movs	r2, #4
 800edde:	2136      	movs	r1, #54	; 0x36
 800ede0:	6938      	ldr	r0, [r7, #16]
 800ede2:	f000 ff03 	bl	800fbec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edea:	4618      	mov	r0, r3
 800edec:	f7f8 fc04 	bl	80075f8 <lwip_htonl>
 800edf0:	4603      	mov	r3, r0
 800edf2:	4619      	mov	r1, r3
 800edf4:	6938      	ldr	r0, [r7, #16]
 800edf6:	f000 ff95 	bl	800fd24 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800edfa:	2203      	movs	r2, #3
 800edfc:	2137      	movs	r1, #55	; 0x37
 800edfe:	6938      	ldr	r0, [r7, #16]
 800ee00:	f000 fef4 	bl	800fbec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ee04:	2300      	movs	r3, #0
 800ee06:	75fb      	strb	r3, [r7, #23]
 800ee08:	e009      	b.n	800ee1e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
 800ee0c:	4a29      	ldr	r2, [pc, #164]	; (800eeb4 <dhcp_select+0x138>)
 800ee0e:	5cd3      	ldrb	r3, [r2, r3]
 800ee10:	4619      	mov	r1, r3
 800ee12:	6938      	ldr	r0, [r7, #16]
 800ee14:	f000 ff24 	bl	800fc60 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	75fb      	strb	r3, [r7, #23]
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d9f2      	bls.n	800ee0a <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800ee24:	6938      	ldr	r0, [r7, #16]
 800ee26:	f001 fcf1 	bl	801080c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	8a9b      	ldrh	r3, [r3, #20]
 800ee32:	33f0      	adds	r3, #240	; 0xf0
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	4619      	mov	r1, r3
 800ee38:	4610      	mov	r0, r2
 800ee3a:	f7f9 fbf1 	bl	8008620 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800ee3e:	4b1e      	ldr	r3, [pc, #120]	; (800eeb8 <dhcp_select+0x13c>)
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	68d9      	ldr	r1, [r3, #12]
 800ee46:	4b1d      	ldr	r3, [pc, #116]	; (800eebc <dhcp_select+0x140>)
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	2343      	movs	r3, #67	; 0x43
 800ee50:	4a1b      	ldr	r2, [pc, #108]	; (800eec0 <dhcp_select+0x144>)
 800ee52:	f7ff fcb9 	bl	800e7c8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800ee56:	6938      	ldr	r0, [r7, #16]
 800ee58:	f001 fc96 	bl	8010788 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	7a9b      	ldrb	r3, [r3, #10]
 800ee60:	2bff      	cmp	r3, #255	; 0xff
 800ee62:	d005      	beq.n	800ee70 <dhcp_select+0xf4>
    dhcp->tries++;
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	7a9b      	ldrb	r3, [r3, #10]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	7a9b      	ldrb	r3, [r3, #10]
 800ee74:	2b05      	cmp	r3, #5
 800ee76:	d807      	bhi.n	800ee88 <dhcp_select+0x10c>
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	7a9b      	ldrb	r3, [r3, #10]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee82:	4093      	lsls	r3, r2
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	e001      	b.n	800ee8c <dhcp_select+0x110>
 800ee88:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ee8c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ee8e:	89bb      	ldrh	r3, [r7, #12]
 800ee90:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ee94:	4a0b      	ldr	r2, [pc, #44]	; (800eec4 <dhcp_select+0x148>)
 800ee96:	fb82 1203 	smull	r1, r2, r2, r3
 800ee9a:	1152      	asrs	r2, r2, #5
 800ee9c:	17db      	asrs	r3, r3, #31
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	b29a      	uxth	r2, r3
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20000010 	.word	0x20000010
 800eeb8:	20000760 	.word	0x20000760
 800eebc:	0801b830 	.word	0x0801b830
 800eec0:	0801b834 	.word	0x0801b834
 800eec4:	10624dd3 	.word	0x10624dd3

0800eec8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800eece:	4b27      	ldr	r3, [pc, #156]	; (800ef6c <dhcp_coarse_tmr+0xa4>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800eed4:	e042      	b.n	800ef5c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6a1b      	ldr	r3, [r3, #32]
 800eeda:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d039      	beq.n	800ef56 <dhcp_coarse_tmr+0x8e>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	7a5b      	ldrb	r3, [r3, #9]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d035      	beq.n	800ef56 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d012      	beq.n	800ef18 <dhcp_coarse_tmr+0x50>
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	8c1b      	ldrh	r3, [r3, #32]
 800eef6:	3301      	adds	r3, #1
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	841a      	strh	r2, [r3, #32]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	8c1a      	ldrh	r2, [r3, #32]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d106      	bne.n	800ef18 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fd94 	bl	800fa38 <dhcp_release>
        dhcp_discover(netif);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fa8b 	bl	800f42c <dhcp_discover>
 800ef16:	e01e      	b.n	800ef56 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	8bdb      	ldrh	r3, [r3, #30]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00b      	beq.n	800ef38 <dhcp_coarse_tmr+0x70>
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	8bdb      	ldrh	r3, [r3, #30]
 800ef24:	1e5a      	subs	r2, r3, #1
 800ef26:	b291      	uxth	r1, r2
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	83d1      	strh	r1, [r2, #30]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d103      	bne.n	800ef38 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f8c6 	bl	800f0c2 <dhcp_t2_timeout>
 800ef36:	e00e      	b.n	800ef56 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	8b9b      	ldrh	r3, [r3, #28]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <dhcp_coarse_tmr+0x8e>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	8b9b      	ldrh	r3, [r3, #28]
 800ef44:	1e5a      	subs	r2, r3, #1
 800ef46:	b291      	uxth	r1, r2
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	8391      	strh	r1, [r2, #28]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d102      	bne.n	800ef56 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 f888 	bl	800f066 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1b9      	bne.n	800eed6 <dhcp_coarse_tmr+0xe>
  }
}
 800ef62:	bf00      	nop
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20007210 	.word	0x20007210

0800ef70 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800ef76:	4b16      	ldr	r3, [pc, #88]	; (800efd0 <dhcp_fine_tmr+0x60>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800ef7c:	e020      	b.n	800efc0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d017      	beq.n	800efba <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	8adb      	ldrh	r3, [r3, #22]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d906      	bls.n	800efa0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	8adb      	ldrh	r3, [r3, #22]
 800ef96:	3b01      	subs	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	82da      	strh	r2, [r3, #22]
 800ef9e:	e00c      	b.n	800efba <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	8adb      	ldrh	r3, [r3, #22]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d108      	bne.n	800efba <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	8adb      	ldrh	r3, [r3, #22]
 800efac:	3b01      	subs	r3, #1
 800efae:	b29a      	uxth	r2, r3
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f80d 	bl	800efd4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1db      	bne.n	800ef7e <dhcp_fine_tmr+0xe>
  }
}
 800efc6:	bf00      	nop
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	20007210 	.word	0x20007210

0800efd4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a1b      	ldr	r3, [r3, #32]
 800efe0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	7a5b      	ldrb	r3, [r3, #9]
 800efe6:	2b0c      	cmp	r3, #12
 800efe8:	d003      	beq.n	800eff2 <dhcp_timeout+0x1e>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	7a5b      	ldrb	r3, [r3, #9]
 800efee:	2b06      	cmp	r3, #6
 800eff0:	d103      	bne.n	800effa <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fa1a 	bl	800f42c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800eff8:	e031      	b.n	800f05e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	7a5b      	ldrb	r3, [r3, #9]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d10e      	bne.n	800f020 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	7a9b      	ldrb	r3, [r3, #10]
 800f006:	2b05      	cmp	r3, #5
 800f008:	d803      	bhi.n	800f012 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7ff feb6 	bl	800ed7c <dhcp_select>
}
 800f010:	e025      	b.n	800f05e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fd10 	bl	800fa38 <dhcp_release>
      dhcp_discover(netif);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fa07 	bl	800f42c <dhcp_discover>
}
 800f01e:	e01e      	b.n	800f05e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	7a5b      	ldrb	r3, [r3, #9]
 800f024:	2b08      	cmp	r3, #8
 800f026:	d10b      	bne.n	800f040 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	7a9b      	ldrb	r3, [r3, #10]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d803      	bhi.n	800f038 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7ff fe4b 	bl	800eccc <dhcp_check>
}
 800f036:	e012      	b.n	800f05e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 fa83 	bl	800f544 <dhcp_bind>
}
 800f03e:	e00e      	b.n	800f05e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	7a5b      	ldrb	r3, [r3, #9]
 800f044:	2b03      	cmp	r3, #3
 800f046:	d10a      	bne.n	800f05e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	7a9b      	ldrb	r3, [r3, #10]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d803      	bhi.n	800f058 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fc5d 	bl	800f910 <dhcp_reboot>
}
 800f056:	e002      	b.n	800f05e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 f9e7 	bl	800f42c <dhcp_discover>
}
 800f05e:	bf00      	nop
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b084      	sub	sp, #16
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	7a5b      	ldrb	r3, [r3, #9]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d007      	beq.n	800f08c <dhcp_t1_timeout+0x26>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	7a5b      	ldrb	r3, [r3, #9]
 800f080:	2b0a      	cmp	r3, #10
 800f082:	d003      	beq.n	800f08c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f088:	2b05      	cmp	r3, #5
 800f08a:	d116      	bne.n	800f0ba <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 fb33 	bl	800f6f8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	8b5b      	ldrh	r3, [r3, #26]
 800f096:	461a      	mov	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	8c1b      	ldrh	r3, [r3, #32]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	dd0b      	ble.n	800f0ba <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	8b5b      	ldrh	r3, [r3, #26]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	8c1b      	ldrh	r3, [r3, #32]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	0fda      	lsrs	r2, r3, #31
 800f0b0:	4413      	add	r3, r2
 800f0b2:	105b      	asrs	r3, r3, #1
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b084      	sub	sp, #16
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
 800f0ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	7a5b      	ldrb	r3, [r3, #9]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d00b      	beq.n	800f0f0 <dhcp_t2_timeout+0x2e>
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	7a5b      	ldrb	r3, [r3, #9]
 800f0dc:	2b0a      	cmp	r3, #10
 800f0de:	d007      	beq.n	800f0f0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f0e4:	2b05      	cmp	r3, #5
 800f0e6:	d003      	beq.n	800f0f0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	7a5b      	ldrb	r3, [r3, #9]
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d116      	bne.n	800f11e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 fb87 	bl	800f804 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	8c1b      	ldrh	r3, [r3, #32]
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	2b01      	cmp	r3, #1
 800f104:	dd0b      	ble.n	800f11e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f10a:	461a      	mov	r2, r3
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	8c1b      	ldrh	r3, [r3, #32]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	0fda      	lsrs	r2, r3, #31
 800f114:	4413      	add	r3, r2
 800f116:	105b      	asrs	r3, r3, #1
 800f118:	b29a      	uxth	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800f11e:	bf00      	nop
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
	...

0800f128 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6a1b      	ldr	r3, [r3, #32]
 800f134:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f142:	4b27      	ldr	r3, [pc, #156]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f144:	78db      	ldrb	r3, [r3, #3]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d003      	beq.n	800f152 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f14a:	4b26      	ldr	r3, [pc, #152]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f14c:	68da      	ldr	r2, [r3, #12]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f152:	4b23      	ldr	r3, [pc, #140]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f154:	791b      	ldrb	r3, [r3, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d004      	beq.n	800f164 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f15a:	4b22      	ldr	r3, [pc, #136]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f15c:	691a      	ldr	r2, [r3, #16]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	639a      	str	r2, [r3, #56]	; 0x38
 800f162:	e004      	b.n	800f16e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f168:	085a      	lsrs	r2, r3, #1
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f16e:	4b1c      	ldr	r3, [pc, #112]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f170:	795b      	ldrb	r3, [r3, #5]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d004      	beq.n	800f180 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f176:	4b1b      	ldr	r3, [pc, #108]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f178:	695a      	ldr	r2, [r3, #20]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	63da      	str	r2, [r3, #60]	; 0x3c
 800f17e:	e007      	b.n	800f190 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f184:	4613      	mov	r3, r2
 800f186:	00db      	lsls	r3, r3, #3
 800f188:	1a9b      	subs	r3, r3, r2
 800f18a:	08da      	lsrs	r2, r3, #3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	691a      	ldr	r2, [r3, #16]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f19a:	4b11      	ldr	r3, [pc, #68]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f19c:	799b      	ldrb	r3, [r3, #6]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00b      	beq.n	800f1ba <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f1a2:	4b10      	ldr	r3, [pc, #64]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7f8 fa26 	bl	80075f8 <lwip_htonl>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	72da      	strb	r2, [r3, #11]
 800f1b8:	e002      	b.n	800f1c0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f1c2:	79db      	ldrb	r3, [r3, #7]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d007      	beq.n	800f1d8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f1c8:	4b06      	ldr	r3, [pc, #24]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f1ca:	69db      	ldr	r3, [r3, #28]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7f8 fa13 	bl	80075f8 <lwip_htonl>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f1d8:	bf00      	nop
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	2000723c 	.word	0x2000723c
 800f1e4:	20007244 	.word	0x20007244

0800f1e8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d109      	bne.n	800f20a <dhcp_start+0x22>
 800f1f6:	4b3c      	ldr	r3, [pc, #240]	; (800f2e8 <dhcp_start+0x100>)
 800f1f8:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f1fc:	493b      	ldr	r1, [pc, #236]	; (800f2ec <dhcp_start+0x104>)
 800f1fe:	483c      	ldr	r0, [pc, #240]	; (800f2f0 <dhcp_start+0x108>)
 800f200:	f006 fdec 	bl	8015ddc <iprintf>
 800f204:	f06f 030f 	mvn.w	r3, #15
 800f208:	e069      	b.n	800f2de <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	d109      	bne.n	800f22c <dhcp_start+0x44>
 800f218:	4b33      	ldr	r3, [pc, #204]	; (800f2e8 <dhcp_start+0x100>)
 800f21a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800f21e:	4935      	ldr	r1, [pc, #212]	; (800f2f4 <dhcp_start+0x10c>)
 800f220:	4833      	ldr	r0, [pc, #204]	; (800f2f0 <dhcp_start+0x108>)
 800f222:	f006 fddb 	bl	8015ddc <iprintf>
 800f226:	f06f 030f 	mvn.w	r3, #15
 800f22a:	e058      	b.n	800f2de <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a1b      	ldr	r3, [r3, #32]
 800f230:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f236:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f23a:	d202      	bcs.n	800f242 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	e04d      	b.n	800f2de <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10d      	bne.n	800f264 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f248:	2040      	movs	r0, #64	; 0x40
 800f24a:	f7f8 fc81 	bl	8007b50 <mem_malloc>
 800f24e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d102      	bne.n	800f25c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f256:	f04f 33ff 	mov.w	r3, #4294967295
 800f25a:	e040      	b.n	800f2de <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	621a      	str	r2, [r3, #32]
 800f262:	e01b      	b.n	800f29c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d006      	beq.n	800f27a <dhcp_start+0x92>
 800f26c:	4b1e      	ldr	r3, [pc, #120]	; (800f2e8 <dhcp_start+0x100>)
 800f26e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800f272:	4921      	ldr	r1, [pc, #132]	; (800f2f8 <dhcp_start+0x110>)
 800f274:	481e      	ldr	r0, [pc, #120]	; (800f2f0 <dhcp_start+0x108>)
 800f276:	f006 fdb1 	bl	8015ddc <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d006      	beq.n	800f290 <dhcp_start+0xa8>
 800f282:	4b19      	ldr	r3, [pc, #100]	; (800f2e8 <dhcp_start+0x100>)
 800f284:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f288:	491c      	ldr	r1, [pc, #112]	; (800f2fc <dhcp_start+0x114>)
 800f28a:	4819      	ldr	r0, [pc, #100]	; (800f2f0 <dhcp_start+0x108>)
 800f28c:	f006 fda6 	bl	8015ddc <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	7a1b      	ldrb	r3, [r3, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f298:	f7ff fcd4 	bl	800ec44 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f29c:	2240      	movs	r2, #64	; 0x40
 800f29e:	2100      	movs	r1, #0
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f006 f937 	bl	8015514 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f2a6:	f7ff fc7b 	bl	800eba0 <dhcp_inc_pcb_refcount>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <dhcp_start+0xce>
    return ERR_MEM;
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b4:	e013      	b.n	800f2de <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f8b5 	bl	800f42c <dhcp_discover>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f2c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d005      	beq.n	800f2da <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 fc3a 	bl	800fb48 <dhcp_stop>
    return ERR_MEM;
 800f2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d8:	e001      	b.n	800f2de <dhcp_start+0xf6>
  }
  return result;
 800f2da:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	080199ec 	.word	0x080199ec
 800f2ec:	08019a98 	.word	0x08019a98
 800f2f0:	08019a4c 	.word	0x08019a4c
 800f2f4:	08019adc 	.word	0x08019adc
 800f2f8:	08019b00 	.word	0x08019b00
 800f2fc:	08019b18 	.word	0x08019b18

0800f300 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d107      	bne.n	800f320 <dhcp_arp_reply+0x20>
 800f310:	4b0e      	ldr	r3, [pc, #56]	; (800f34c <dhcp_arp_reply+0x4c>)
 800f312:	f240 327b 	movw	r2, #891	; 0x37b
 800f316:	490e      	ldr	r1, [pc, #56]	; (800f350 <dhcp_arp_reply+0x50>)
 800f318:	480e      	ldr	r0, [pc, #56]	; (800f354 <dhcp_arp_reply+0x54>)
 800f31a:	f006 fd5f 	bl	8015ddc <iprintf>
 800f31e:	e012      	b.n	800f346 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a1b      	ldr	r3, [r3, #32]
 800f324:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00c      	beq.n	800f346 <dhcp_arp_reply+0x46>
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	7a5b      	ldrb	r3, [r3, #9]
 800f330:	2b08      	cmp	r3, #8
 800f332:	d108      	bne.n	800f346 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d102      	bne.n	800f346 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 f809 	bl	800f358 <dhcp_decline>
    }
  }
}
 800f346:	3710      	adds	r7, #16
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	080199ec 	.word	0x080199ec
 800f350:	08019a98 	.word	0x08019a98
 800f354:	08019a4c 	.word	0x08019a4c

0800f358 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a1b      	ldr	r3, [r3, #32]
 800f364:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f36a:	210c      	movs	r1, #12
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f000 fc23 	bl	800fbb8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800f372:	2204      	movs	r2, #4
 800f374:	68f9      	ldr	r1, [r7, #12]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f001 f8a4 	bl	80104c4 <dhcp_create_msg>
 800f37c:	4603      	mov	r3, r0
 800f37e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800f380:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d12a      	bne.n	800f3de <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f388:	2204      	movs	r2, #4
 800f38a:	2132      	movs	r1, #50	; 0x32
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f000 fc2d 	bl	800fbec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f396:	4618      	mov	r0, r3
 800f398:	f7f8 f92e 	bl	80075f8 <lwip_htonl>
 800f39c:	4603      	mov	r3, r0
 800f39e:	4619      	mov	r1, r3
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f000 fcbf 	bl	800fd24 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f001 fa30 	bl	801080c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	8a9b      	ldrh	r3, [r3, #20]
 800f3b4:	33f0      	adds	r3, #240	; 0xf0
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	f7f9 f930 	bl	8008620 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f3c0:	4b16      	ldr	r3, [pc, #88]	; (800f41c <dhcp_decline+0xc4>)
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68d9      	ldr	r1, [r3, #12]
 800f3c8:	4b15      	ldr	r3, [pc, #84]	; (800f420 <dhcp_decline+0xc8>)
 800f3ca:	9301      	str	r3, [sp, #4]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	2343      	movs	r3, #67	; 0x43
 800f3d2:	4a14      	ldr	r2, [pc, #80]	; (800f424 <dhcp_decline+0xcc>)
 800f3d4:	f7ff f9f8 	bl	800e7c8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f001 f9d5 	bl	8010788 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	7a9b      	ldrb	r3, [r3, #10]
 800f3e2:	2bff      	cmp	r3, #255	; 0xff
 800f3e4:	d005      	beq.n	800f3f2 <dhcp_decline+0x9a>
    dhcp->tries++;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	7a9b      	ldrb	r3, [r3, #10]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800f3f2:	f242 7310 	movw	r3, #10000	; 0x2710
 800f3f6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f3f8:	893b      	ldrh	r3, [r7, #8]
 800f3fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f3fe:	4a0a      	ldr	r2, [pc, #40]	; (800f428 <dhcp_decline+0xd0>)
 800f400:	fb82 1203 	smull	r1, r2, r2, r3
 800f404:	1152      	asrs	r2, r2, #5
 800f406:	17db      	asrs	r3, r3, #31
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f410:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3710      	adds	r7, #16
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	20000760 	.word	0x20000760
 800f420:	0801b830 	.word	0x0801b830
 800f424:	0801b834 	.word	0x0801b834
 800f428:	10624dd3 	.word	0x10624dd3

0800f42c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b088      	sub	sp, #32
 800f430:	af02      	add	r7, sp, #8
 800f432:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a1b      	ldr	r3, [r3, #32]
 800f438:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2200      	movs	r2, #0
 800f442:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f444:	2106      	movs	r1, #6
 800f446:	6938      	ldr	r0, [r7, #16]
 800f448:	f000 fbb6 	bl	800fbb8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800f44c:	2201      	movs	r2, #1
 800f44e:	6939      	ldr	r1, [r7, #16]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f001 f837 	bl	80104c4 <dhcp_create_msg>
 800f456:	4603      	mov	r3, r0
 800f458:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d13b      	bne.n	800f4da <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f462:	2202      	movs	r2, #2
 800f464:	2139      	movs	r1, #57	; 0x39
 800f466:	6938      	ldr	r0, [r7, #16]
 800f468:	f000 fbc0 	bl	800fbec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f470:	4619      	mov	r1, r3
 800f472:	6938      	ldr	r0, [r7, #16]
 800f474:	f000 fc1c 	bl	800fcb0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f478:	2203      	movs	r2, #3
 800f47a:	2137      	movs	r1, #55	; 0x37
 800f47c:	6938      	ldr	r0, [r7, #16]
 800f47e:	f000 fbb5 	bl	800fbec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f482:	2300      	movs	r3, #0
 800f484:	75fb      	strb	r3, [r7, #23]
 800f486:	e009      	b.n	800f49c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	4a29      	ldr	r2, [pc, #164]	; (800f530 <dhcp_discover+0x104>)
 800f48c:	5cd3      	ldrb	r3, [r2, r3]
 800f48e:	4619      	mov	r1, r3
 800f490:	6938      	ldr	r0, [r7, #16]
 800f492:	f000 fbe5 	bl	800fc60 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f496:	7dfb      	ldrb	r3, [r7, #23]
 800f498:	3301      	adds	r3, #1
 800f49a:	75fb      	strb	r3, [r7, #23]
 800f49c:	7dfb      	ldrb	r3, [r7, #23]
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d9f2      	bls.n	800f488 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800f4a2:	6938      	ldr	r0, [r7, #16]
 800f4a4:	f001 f9b2 	bl	801080c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	68da      	ldr	r2, [r3, #12]
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	8a9b      	ldrh	r3, [r3, #20]
 800f4b0:	33f0      	adds	r3, #240	; 0xf0
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	f7f9 f8b2 	bl	8008620 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f4bc:	4b1d      	ldr	r3, [pc, #116]	; (800f534 <dhcp_discover+0x108>)
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	68d9      	ldr	r1, [r3, #12]
 800f4c4:	4b1c      	ldr	r3, [pc, #112]	; (800f538 <dhcp_discover+0x10c>)
 800f4c6:	9301      	str	r3, [sp, #4]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	2343      	movs	r3, #67	; 0x43
 800f4ce:	4a1b      	ldr	r2, [pc, #108]	; (800f53c <dhcp_discover+0x110>)
 800f4d0:	f7ff f97a 	bl	800e7c8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800f4d4:	6938      	ldr	r0, [r7, #16]
 800f4d6:	f001 f957 	bl	8010788 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	7a9b      	ldrb	r3, [r3, #10]
 800f4de:	2bff      	cmp	r3, #255	; 0xff
 800f4e0:	d005      	beq.n	800f4ee <dhcp_discover+0xc2>
    dhcp->tries++;
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	7a9b      	ldrb	r3, [r3, #10]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	b2da      	uxtb	r2, r3
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	7a9b      	ldrb	r3, [r3, #10]
 800f4f2:	2b05      	cmp	r3, #5
 800f4f4:	d807      	bhi.n	800f506 <dhcp_discover+0xda>
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	7a9b      	ldrb	r3, [r3, #10]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f500:	4093      	lsls	r3, r2
 800f502:	b29b      	uxth	r3, r3
 800f504:	e001      	b.n	800f50a <dhcp_discover+0xde>
 800f506:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f50a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f50c:	89bb      	ldrh	r3, [r7, #12]
 800f50e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f512:	4a0b      	ldr	r2, [pc, #44]	; (800f540 <dhcp_discover+0x114>)
 800f514:	fb82 1203 	smull	r1, r2, r2, r3
 800f518:	1152      	asrs	r2, r2, #5
 800f51a:	17db      	asrs	r3, r3, #31
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	b29a      	uxth	r2, r3
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	20000010 	.word	0x20000010
 800f534:	20000760 	.word	0x20000760
 800f538:	0801b830 	.word	0x0801b830
 800f53c:	0801b834 	.word	0x0801b834
 800f540:	10624dd3 	.word	0x10624dd3

0800f544 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d107      	bne.n	800f562 <dhcp_bind+0x1e>
 800f552:	4b64      	ldr	r3, [pc, #400]	; (800f6e4 <dhcp_bind+0x1a0>)
 800f554:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f558:	4963      	ldr	r1, [pc, #396]	; (800f6e8 <dhcp_bind+0x1a4>)
 800f55a:	4864      	ldr	r0, [pc, #400]	; (800f6ec <dhcp_bind+0x1a8>)
 800f55c:	f006 fc3e 	bl	8015ddc <iprintf>
 800f560:	e0bc      	b.n	800f6dc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a1b      	ldr	r3, [r3, #32]
 800f566:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d107      	bne.n	800f57e <dhcp_bind+0x3a>
 800f56e:	4b5d      	ldr	r3, [pc, #372]	; (800f6e4 <dhcp_bind+0x1a0>)
 800f570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f574:	495e      	ldr	r1, [pc, #376]	; (800f6f0 <dhcp_bind+0x1ac>)
 800f576:	485d      	ldr	r0, [pc, #372]	; (800f6ec <dhcp_bind+0x1a8>)
 800f578:	f006 fc30 	bl	8015ddc <iprintf>
 800f57c:	e0ae      	b.n	800f6dc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	2200      	movs	r2, #0
 800f582:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58c:	d019      	beq.n	800f5c2 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f592:	331e      	adds	r3, #30
 800f594:	4a57      	ldr	r2, [pc, #348]	; (800f6f4 <dhcp_bind+0x1b0>)
 800f596:	fba2 2303 	umull	r2, r3, r2, r3
 800f59a:	095b      	lsrs	r3, r3, #5
 800f59c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5a4:	d302      	bcc.n	800f5ac <dhcp_bind+0x68>
       timeout = 0xffff;
 800f5a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5aa:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800f5b4:	69bb      	ldr	r3, [r7, #24]
 800f5b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d102      	bne.n	800f5c2 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ca:	d01d      	beq.n	800f608 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d0:	331e      	adds	r3, #30
 800f5d2:	4a48      	ldr	r2, [pc, #288]	; (800f6f4 <dhcp_bind+0x1b0>)
 800f5d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5d8:	095b      	lsrs	r3, r3, #5
 800f5da:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5e2:	d302      	bcc.n	800f5ea <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5e8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	8b1b      	ldrh	r3, [r3, #24]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d102      	bne.n	800f600 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	8b1a      	ldrh	r2, [r3, #24]
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f610:	d01d      	beq.n	800f64e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f616:	331e      	adds	r3, #30
 800f618:	4a36      	ldr	r2, [pc, #216]	; (800f6f4 <dhcp_bind+0x1b0>)
 800f61a:	fba2 2303 	umull	r2, r3, r2, r3
 800f61e:	095b      	lsrs	r3, r3, #5
 800f620:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f628:	d302      	bcc.n	800f630 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f62a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f62e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	b29a      	uxth	r2, r3
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	8b5b      	ldrh	r3, [r3, #26]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d102      	bne.n	800f646 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	2201      	movs	r2, #1
 800f644:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	8b5a      	ldrh	r2, [r3, #26]
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	8b1a      	ldrh	r2, [r3, #24]
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	8b5b      	ldrh	r3, [r3, #26]
 800f656:	429a      	cmp	r2, r3
 800f658:	d306      	bcc.n	800f668 <dhcp_bind+0x124>
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	8b5b      	ldrh	r3, [r3, #26]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d002      	beq.n	800f668 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	2200      	movs	r2, #0
 800f666:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	7adb      	ldrb	r3, [r3, #11]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d003      	beq.n	800f678 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f674:	613b      	str	r3, [r7, #16]
 800f676:	e014      	b.n	800f6a2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	3328      	adds	r3, #40	; 0x28
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f684:	2b00      	cmp	r3, #0
 800f686:	db02      	blt.n	800f68e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f688:	23ff      	movs	r3, #255	; 0xff
 800f68a:	613b      	str	r3, [r7, #16]
 800f68c:	e009      	b.n	800f6a2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
 800f690:	2bbf      	cmp	r3, #191	; 0xbf
 800f692:	d903      	bls.n	800f69c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f694:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	e002      	b.n	800f6a2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f69c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6a0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d108      	bne.n	800f6c0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	4013      	ands	r3, r2
 800f6b6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f6be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f6c0:	210a      	movs	r1, #10
 800f6c2:	69b8      	ldr	r0, [r7, #24]
 800f6c4:	f000 fa78 	bl	800fbb8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f6ce:	f107 030c 	add.w	r3, r7, #12
 800f6d2:	f107 0210 	add.w	r2, r7, #16
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f7f8 fc72 	bl	8007fc0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f6dc:	3720      	adds	r7, #32
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	080199ec 	.word	0x080199ec
 800f6e8:	08019b2c 	.word	0x08019b2c
 800f6ec:	08019a4c 	.word	0x08019a4c
 800f6f0:	08019b48 	.word	0x08019b48
 800f6f4:	88888889 	.word	0x88888889

0800f6f8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a1b      	ldr	r3, [r3, #32]
 800f704:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f706:	2105      	movs	r1, #5
 800f708:	6938      	ldr	r0, [r7, #16]
 800f70a:	f000 fa55 	bl	800fbb8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f70e:	2203      	movs	r2, #3
 800f710:	6939      	ldr	r1, [r7, #16]
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fed6 	bl	80104c4 <dhcp_create_msg>
 800f718:	4603      	mov	r3, r0
 800f71a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d13b      	bne.n	800f79c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f724:	2202      	movs	r2, #2
 800f726:	2139      	movs	r1, #57	; 0x39
 800f728:	6938      	ldr	r0, [r7, #16]
 800f72a:	f000 fa5f 	bl	800fbec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f732:	4619      	mov	r1, r3
 800f734:	6938      	ldr	r0, [r7, #16]
 800f736:	f000 fabb 	bl	800fcb0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f73a:	2203      	movs	r2, #3
 800f73c:	2137      	movs	r1, #55	; 0x37
 800f73e:	6938      	ldr	r0, [r7, #16]
 800f740:	f000 fa54 	bl	800fbec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f744:	2300      	movs	r3, #0
 800f746:	75fb      	strb	r3, [r7, #23]
 800f748:	e009      	b.n	800f75e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f74a:	7dfb      	ldrb	r3, [r7, #23]
 800f74c:	4a2a      	ldr	r2, [pc, #168]	; (800f7f8 <dhcp_renew+0x100>)
 800f74e:	5cd3      	ldrb	r3, [r2, r3]
 800f750:	4619      	mov	r1, r3
 800f752:	6938      	ldr	r0, [r7, #16]
 800f754:	f000 fa84 	bl	800fc60 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f758:	7dfb      	ldrb	r3, [r7, #23]
 800f75a:	3301      	adds	r3, #1
 800f75c:	75fb      	strb	r3, [r7, #23]
 800f75e:	7dfb      	ldrb	r3, [r7, #23]
 800f760:	2b02      	cmp	r3, #2
 800f762:	d9f2      	bls.n	800f74a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800f764:	6938      	ldr	r0, [r7, #16]
 800f766:	f001 f851 	bl	801080c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	68da      	ldr	r2, [r3, #12]
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	8a9b      	ldrh	r3, [r3, #20]
 800f772:	33f0      	adds	r3, #240	; 0xf0
 800f774:	b29b      	uxth	r3, r3
 800f776:	4619      	mov	r1, r3
 800f778:	4610      	mov	r0, r2
 800f77a:	f7f8 ff51 	bl	8008620 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800f77e:	4b1f      	ldr	r3, [pc, #124]	; (800f7fc <dhcp_renew+0x104>)
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	68d9      	ldr	r1, [r3, #12]
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	2343      	movs	r3, #67	; 0x43
 800f792:	f7fe ffdb 	bl	800e74c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f796:	6938      	ldr	r0, [r7, #16]
 800f798:	f000 fff6 	bl	8010788 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	7a9b      	ldrb	r3, [r3, #10]
 800f7a0:	2bff      	cmp	r3, #255	; 0xff
 800f7a2:	d005      	beq.n	800f7b0 <dhcp_renew+0xb8>
    dhcp->tries++;
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	7a9b      	ldrb	r3, [r3, #10]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	7a9b      	ldrb	r3, [r3, #10]
 800f7b4:	2b09      	cmp	r3, #9
 800f7b6:	d80a      	bhi.n	800f7ce <dhcp_renew+0xd6>
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	7a9b      	ldrb	r3, [r3, #10]
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	461a      	mov	r2, r3
 800f7c0:	0152      	lsls	r2, r2, #5
 800f7c2:	1ad2      	subs	r2, r2, r3
 800f7c4:	0092      	lsls	r2, r2, #2
 800f7c6:	4413      	add	r3, r2
 800f7c8:	011b      	lsls	r3, r3, #4
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	e001      	b.n	800f7d2 <dhcp_renew+0xda>
 800f7ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f7d2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f7d4:	89bb      	ldrh	r3, [r7, #12]
 800f7d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f7da:	4a09      	ldr	r2, [pc, #36]	; (800f800 <dhcp_renew+0x108>)
 800f7dc:	fb82 1203 	smull	r1, r2, r2, r3
 800f7e0:	1152      	asrs	r2, r2, #5
 800f7e2:	17db      	asrs	r3, r3, #31
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f7ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	20000010 	.word	0x20000010
 800f7fc:	20000760 	.word	0x20000760
 800f800:	10624dd3 	.word	0x10624dd3

0800f804 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af02      	add	r7, sp, #8
 800f80a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a1b      	ldr	r3, [r3, #32]
 800f810:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f812:	2104      	movs	r1, #4
 800f814:	6938      	ldr	r0, [r7, #16]
 800f816:	f000 f9cf 	bl	800fbb8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f81a:	2203      	movs	r2, #3
 800f81c:	6939      	ldr	r1, [r7, #16]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fe50 	bl	80104c4 <dhcp_create_msg>
 800f824:	4603      	mov	r3, r0
 800f826:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d139      	bne.n	800f8a4 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f830:	2202      	movs	r2, #2
 800f832:	2139      	movs	r1, #57	; 0x39
 800f834:	6938      	ldr	r0, [r7, #16]
 800f836:	f000 f9d9 	bl	800fbec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f83e:	4619      	mov	r1, r3
 800f840:	6938      	ldr	r0, [r7, #16]
 800f842:	f000 fa35 	bl	800fcb0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f846:	2203      	movs	r2, #3
 800f848:	2137      	movs	r1, #55	; 0x37
 800f84a:	6938      	ldr	r0, [r7, #16]
 800f84c:	f000 f9ce 	bl	800fbec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f850:	2300      	movs	r3, #0
 800f852:	75fb      	strb	r3, [r7, #23]
 800f854:	e009      	b.n	800f86a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f856:	7dfb      	ldrb	r3, [r7, #23]
 800f858:	4a29      	ldr	r2, [pc, #164]	; (800f900 <dhcp_rebind+0xfc>)
 800f85a:	5cd3      	ldrb	r3, [r2, r3]
 800f85c:	4619      	mov	r1, r3
 800f85e:	6938      	ldr	r0, [r7, #16]
 800f860:	f000 f9fe 	bl	800fc60 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f864:	7dfb      	ldrb	r3, [r7, #23]
 800f866:	3301      	adds	r3, #1
 800f868:	75fb      	strb	r3, [r7, #23]
 800f86a:	7dfb      	ldrb	r3, [r7, #23]
 800f86c:	2b02      	cmp	r3, #2
 800f86e:	d9f2      	bls.n	800f856 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f870:	6938      	ldr	r0, [r7, #16]
 800f872:	f000 ffcb 	bl	801080c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	68da      	ldr	r2, [r3, #12]
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	8a9b      	ldrh	r3, [r3, #20]
 800f87e:	33f0      	adds	r3, #240	; 0xf0
 800f880:	b29b      	uxth	r3, r3
 800f882:	4619      	mov	r1, r3
 800f884:	4610      	mov	r0, r2
 800f886:	f7f8 fecb 	bl	8008620 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800f88a:	4b1e      	ldr	r3, [pc, #120]	; (800f904 <dhcp_rebind+0x100>)
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	68d9      	ldr	r1, [r3, #12]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	2343      	movs	r3, #67	; 0x43
 800f898:	4a1b      	ldr	r2, [pc, #108]	; (800f908 <dhcp_rebind+0x104>)
 800f89a:	f7fe ff57 	bl	800e74c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f89e:	6938      	ldr	r0, [r7, #16]
 800f8a0:	f000 ff72 	bl	8010788 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	7a9b      	ldrb	r3, [r3, #10]
 800f8a8:	2bff      	cmp	r3, #255	; 0xff
 800f8aa:	d005      	beq.n	800f8b8 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	7a9b      	ldrb	r3, [r3, #10]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	7a9b      	ldrb	r3, [r3, #10]
 800f8bc:	2b09      	cmp	r3, #9
 800f8be:	d80a      	bhi.n	800f8d6 <dhcp_rebind+0xd2>
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	7a9b      	ldrb	r3, [r3, #10]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	0152      	lsls	r2, r2, #5
 800f8ca:	1ad2      	subs	r2, r2, r3
 800f8cc:	0092      	lsls	r2, r2, #2
 800f8ce:	4413      	add	r3, r2
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	e001      	b.n	800f8da <dhcp_rebind+0xd6>
 800f8d6:	f242 7310 	movw	r3, #10000	; 0x2710
 800f8da:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f8dc:	89bb      	ldrh	r3, [r7, #12]
 800f8de:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f8e2:	4a0a      	ldr	r2, [pc, #40]	; (800f90c <dhcp_rebind+0x108>)
 800f8e4:	fb82 1203 	smull	r1, r2, r2, r3
 800f8e8:	1152      	asrs	r2, r2, #5
 800f8ea:	17db      	asrs	r3, r3, #31
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3718      	adds	r7, #24
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	20000010 	.word	0x20000010
 800f904:	20000760 	.word	0x20000760
 800f908:	0801b834 	.word	0x0801b834
 800f90c:	10624dd3 	.word	0x10624dd3

0800f910 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b088      	sub	sp, #32
 800f914:	af02      	add	r7, sp, #8
 800f916:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a1b      	ldr	r3, [r3, #32]
 800f91c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f91e:	2103      	movs	r1, #3
 800f920:	6938      	ldr	r0, [r7, #16]
 800f922:	f000 f949 	bl	800fbb8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f926:	2203      	movs	r2, #3
 800f928:	6939      	ldr	r1, [r7, #16]
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fdca 	bl	80104c4 <dhcp_create_msg>
 800f930:	4603      	mov	r3, r0
 800f932:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d147      	bne.n	800f9cc <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f93c:	2202      	movs	r2, #2
 800f93e:	2139      	movs	r1, #57	; 0x39
 800f940:	6938      	ldr	r0, [r7, #16]
 800f942:	f000 f953 	bl	800fbec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f946:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f94a:	6938      	ldr	r0, [r7, #16]
 800f94c:	f000 f9b0 	bl	800fcb0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f950:	2204      	movs	r2, #4
 800f952:	2132      	movs	r1, #50	; 0x32
 800f954:	6938      	ldr	r0, [r7, #16]
 800f956:	f000 f949 	bl	800fbec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f7 fe4a 	bl	80075f8 <lwip_htonl>
 800f964:	4603      	mov	r3, r0
 800f966:	4619      	mov	r1, r3
 800f968:	6938      	ldr	r0, [r7, #16]
 800f96a:	f000 f9db 	bl	800fd24 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f96e:	2203      	movs	r2, #3
 800f970:	2137      	movs	r1, #55	; 0x37
 800f972:	6938      	ldr	r0, [r7, #16]
 800f974:	f000 f93a 	bl	800fbec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f978:	2300      	movs	r3, #0
 800f97a:	75fb      	strb	r3, [r7, #23]
 800f97c:	e009      	b.n	800f992 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f97e:	7dfb      	ldrb	r3, [r7, #23]
 800f980:	4a29      	ldr	r2, [pc, #164]	; (800fa28 <dhcp_reboot+0x118>)
 800f982:	5cd3      	ldrb	r3, [r2, r3]
 800f984:	4619      	mov	r1, r3
 800f986:	6938      	ldr	r0, [r7, #16]
 800f988:	f000 f96a 	bl	800fc60 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f98c:	7dfb      	ldrb	r3, [r7, #23]
 800f98e:	3301      	adds	r3, #1
 800f990:	75fb      	strb	r3, [r7, #23]
 800f992:	7dfb      	ldrb	r3, [r7, #23]
 800f994:	2b02      	cmp	r3, #2
 800f996:	d9f2      	bls.n	800f97e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800f998:	6938      	ldr	r0, [r7, #16]
 800f99a:	f000 ff37 	bl	801080c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	68da      	ldr	r2, [r3, #12]
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	8a9b      	ldrh	r3, [r3, #20]
 800f9a6:	33f0      	adds	r3, #240	; 0xf0
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	f7f8 fe37 	bl	8008620 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800f9b2:	4b1e      	ldr	r3, [pc, #120]	; (800fa2c <dhcp_reboot+0x11c>)
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	68d9      	ldr	r1, [r3, #12]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	2343      	movs	r3, #67	; 0x43
 800f9c0:	4a1b      	ldr	r2, [pc, #108]	; (800fa30 <dhcp_reboot+0x120>)
 800f9c2:	f7fe fec3 	bl	800e74c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f9c6:	6938      	ldr	r0, [r7, #16]
 800f9c8:	f000 fede 	bl	8010788 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	7a9b      	ldrb	r3, [r3, #10]
 800f9d0:	2bff      	cmp	r3, #255	; 0xff
 800f9d2:	d005      	beq.n	800f9e0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	7a9b      	ldrb	r3, [r3, #10]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	b2da      	uxtb	r2, r3
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	7a9b      	ldrb	r3, [r3, #10]
 800f9e4:	2b09      	cmp	r3, #9
 800f9e6:	d80a      	bhi.n	800f9fe <dhcp_reboot+0xee>
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	7a9b      	ldrb	r3, [r3, #10]
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	0152      	lsls	r2, r2, #5
 800f9f2:	1ad2      	subs	r2, r2, r3
 800f9f4:	0092      	lsls	r2, r2, #2
 800f9f6:	4413      	add	r3, r2
 800f9f8:	00db      	lsls	r3, r3, #3
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	e001      	b.n	800fa02 <dhcp_reboot+0xf2>
 800f9fe:	f242 7310 	movw	r3, #10000	; 0x2710
 800fa02:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fa04:	89bb      	ldrh	r3, [r7, #12]
 800fa06:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fa0a:	4a0a      	ldr	r2, [pc, #40]	; (800fa34 <dhcp_reboot+0x124>)
 800fa0c:	fb82 1203 	smull	r1, r2, r2, r3
 800fa10:	1152      	asrs	r2, r2, #5
 800fa12:	17db      	asrs	r3, r3, #31
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fa1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	20000010 	.word	0x20000010
 800fa2c:	20000760 	.word	0x20000760
 800fa30:	0801b834 	.word	0x0801b834
 800fa34:	10624dd3 	.word	0x10624dd3

0800fa38 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b088      	sub	sp, #32
 800fa3c:	af02      	add	r7, sp, #8
 800fa3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d102      	bne.n	800fa52 <dhcp_release+0x1a>
    return ERR_ARG;
 800fa4c:	f06f 030f 	mvn.w	r3, #15
 800fa50:	e072      	b.n	800fb38 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa56:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 ff31 	bl	80108c0 <dhcp_supplied_address>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fa62:	2100      	movs	r1, #0
 800fa64:	6978      	ldr	r0, [r7, #20]
 800fa66:	f000 f8a7 	bl	800fbb8 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	2200      	movs	r2, #0
 800fa74:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2200      	movs	r2, #0
 800fa86:	63da      	str	r2, [r3, #60]	; 0x3c
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	639a      	str	r2, [r3, #56]	; 0x38
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	845a      	strh	r2, [r3, #34]	; 0x22
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	841a      	strh	r2, [r3, #32]
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	8c1a      	ldrh	r2, [r3, #32]
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	83da      	strh	r2, [r3, #30]
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	8bda      	ldrh	r2, [r3, #30]
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800fab6:	7cfb      	ldrb	r3, [r7, #19]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d101      	bne.n	800fac0 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800fabc:	2300      	movs	r3, #0
 800fabe:	e03b      	b.n	800fb38 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800fac0:	2207      	movs	r2, #7
 800fac2:	6979      	ldr	r1, [r7, #20]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fcfd 	bl	80104c4 <dhcp_create_msg>
 800faca:	4603      	mov	r3, r0
 800facc:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800face:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d128      	bne.n	800fb28 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800fad6:	2204      	movs	r2, #4
 800fad8:	2136      	movs	r1, #54	; 0x36
 800fada:	6978      	ldr	r0, [r7, #20]
 800fadc:	f000 f886 	bl	800fbec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7f7 fd88 	bl	80075f8 <lwip_htonl>
 800fae8:	4603      	mov	r3, r0
 800faea:	4619      	mov	r1, r3
 800faec:	6978      	ldr	r0, [r7, #20]
 800faee:	f000 f919 	bl	800fd24 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800faf2:	6978      	ldr	r0, [r7, #20]
 800faf4:	f000 fe8a 	bl	801080c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	68da      	ldr	r2, [r3, #12]
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	8a9b      	ldrh	r3, [r3, #20]
 800fb00:	33f0      	adds	r3, #240	; 0xf0
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	4619      	mov	r1, r3
 800fb06:	4610      	mov	r0, r2
 800fb08:	f7f8 fd8a 	bl	8008620 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800fb0c:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <dhcp_release+0x108>)
 800fb0e:	6818      	ldr	r0, [r3, #0]
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	68d9      	ldr	r1, [r3, #12]
 800fb14:	f107 020c 	add.w	r2, r7, #12
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	2343      	movs	r3, #67	; 0x43
 800fb1e:	f7fe fe15 	bl	800e74c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fb22:	6978      	ldr	r0, [r7, #20]
 800fb24:	f000 fe30 	bl	8010788 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb28:	4b06      	ldr	r3, [pc, #24]	; (800fb44 <dhcp_release+0x10c>)
 800fb2a:	4a06      	ldr	r2, [pc, #24]	; (800fb44 <dhcp_release+0x10c>)
 800fb2c:	4905      	ldr	r1, [pc, #20]	; (800fb44 <dhcp_release+0x10c>)
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7f8 fa46 	bl	8007fc0 <netif_set_addr>

  return result;
 800fb34:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	20000760 	.word	0x20000760
 800fb44:	0801b830 	.word	0x0801b830

0800fb48 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d107      	bne.n	800fb66 <dhcp_stop+0x1e>
 800fb56:	4b14      	ldr	r3, [pc, #80]	; (800fba8 <dhcp_stop+0x60>)
 800fb58:	f240 5242 	movw	r2, #1346	; 0x542
 800fb5c:	4913      	ldr	r1, [pc, #76]	; (800fbac <dhcp_stop+0x64>)
 800fb5e:	4814      	ldr	r0, [pc, #80]	; (800fbb0 <dhcp_stop+0x68>)
 800fb60:	f006 f93c 	bl	8015ddc <iprintf>
 800fb64:	e01d      	b.n	800fba2 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d017      	beq.n	800fba2 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d006      	beq.n	800fb88 <dhcp_stop+0x40>
 800fb7a:	4b0b      	ldr	r3, [pc, #44]	; (800fba8 <dhcp_stop+0x60>)
 800fb7c:	f240 524f 	movw	r2, #1359	; 0x54f
 800fb80:	490c      	ldr	r1, [pc, #48]	; (800fbb4 <dhcp_stop+0x6c>)
 800fb82:	480b      	ldr	r0, [pc, #44]	; (800fbb0 <dhcp_stop+0x68>)
 800fb84:	f006 f92a 	bl	8015ddc <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fb88:	2100      	movs	r1, #0
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f000 f814 	bl	800fbb8 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	7a1b      	ldrb	r3, [r3, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d004      	beq.n	800fba2 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fb98:	f7ff f854 	bl	800ec44 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800fba2:	3710      	adds	r7, #16
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	080199ec 	.word	0x080199ec
 800fbac:	08019b60 	.word	0x08019b60
 800fbb0:	08019a4c 	.word	0x08019a4c
 800fbb4:	08019b18 	.word	0x08019b18

0800fbb8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	7a5b      	ldrb	r3, [r3, #9]
 800fbc8:	78fa      	ldrb	r2, [r7, #3]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d008      	beq.n	800fbe0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	78fa      	ldrb	r2, [r7, #3]
 800fbd2:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	82da      	strh	r2, [r3, #22]
  }
}
 800fbe0:	bf00      	nop
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	8a9b      	ldrh	r3, [r3, #20]
 800fc00:	461a      	mov	r2, r3
 800fc02:	78bb      	ldrb	r3, [r7, #2]
 800fc04:	4413      	add	r3, r2
 800fc06:	3302      	adds	r3, #2
 800fc08:	2b44      	cmp	r3, #68	; 0x44
 800fc0a:	d906      	bls.n	800fc1a <dhcp_option+0x2e>
 800fc0c:	4b11      	ldr	r3, [pc, #68]	; (800fc54 <dhcp_option+0x68>)
 800fc0e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800fc12:	4911      	ldr	r1, [pc, #68]	; (800fc58 <dhcp_option+0x6c>)
 800fc14:	4811      	ldr	r0, [pc, #68]	; (800fc5c <dhcp_option+0x70>)
 800fc16:	f006 f8e1 	bl	8015ddc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	691a      	ldr	r2, [r3, #16]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	8a9b      	ldrh	r3, [r3, #20]
 800fc22:	1c59      	adds	r1, r3, #1
 800fc24:	b288      	uxth	r0, r1
 800fc26:	6879      	ldr	r1, [r7, #4]
 800fc28:	8288      	strh	r0, [r1, #20]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	78fa      	ldrb	r2, [r7, #3]
 800fc2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	691a      	ldr	r2, [r3, #16]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	8a9b      	ldrh	r3, [r3, #20]
 800fc3a:	1c59      	adds	r1, r3, #1
 800fc3c:	b288      	uxth	r0, r1
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	8288      	strh	r0, [r1, #20]
 800fc42:	4413      	add	r3, r2
 800fc44:	78ba      	ldrb	r2, [r7, #2]
 800fc46:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fc4a:	bf00      	nop
 800fc4c:	3708      	adds	r7, #8
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	080199ec 	.word	0x080199ec
 800fc58:	08019b7c 	.word	0x08019b7c
 800fc5c:	08019a4c 	.word	0x08019a4c

0800fc60 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8a9b      	ldrh	r3, [r3, #20]
 800fc70:	2b43      	cmp	r3, #67	; 0x43
 800fc72:	d906      	bls.n	800fc82 <dhcp_option_byte+0x22>
 800fc74:	4b0b      	ldr	r3, [pc, #44]	; (800fca4 <dhcp_option_byte+0x44>)
 800fc76:	f240 527b 	movw	r2, #1403	; 0x57b
 800fc7a:	490b      	ldr	r1, [pc, #44]	; (800fca8 <dhcp_option_byte+0x48>)
 800fc7c:	480b      	ldr	r0, [pc, #44]	; (800fcac <dhcp_option_byte+0x4c>)
 800fc7e:	f006 f8ad 	bl	8015ddc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	691a      	ldr	r2, [r3, #16]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	8a9b      	ldrh	r3, [r3, #20]
 800fc8a:	1c59      	adds	r1, r3, #1
 800fc8c:	b288      	uxth	r0, r1
 800fc8e:	6879      	ldr	r1, [r7, #4]
 800fc90:	8288      	strh	r0, [r1, #20]
 800fc92:	4413      	add	r3, r2
 800fc94:	78fa      	ldrb	r2, [r7, #3]
 800fc96:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	080199ec 	.word	0x080199ec
 800fca8:	08019bc4 	.word	0x08019bc4
 800fcac:	08019a4c 	.word	0x08019a4c

0800fcb0 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800fcb0:	b590      	push	{r4, r7, lr}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	460b      	mov	r3, r1
 800fcba:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	8a9b      	ldrh	r3, [r3, #20]
 800fcc0:	3302      	adds	r3, #2
 800fcc2:	2b44      	cmp	r3, #68	; 0x44
 800fcc4:	d906      	bls.n	800fcd4 <dhcp_option_short+0x24>
 800fcc6:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <dhcp_option_short+0x68>)
 800fcc8:	f240 5282 	movw	r2, #1410	; 0x582
 800fccc:	4913      	ldr	r1, [pc, #76]	; (800fd1c <dhcp_option_short+0x6c>)
 800fcce:	4814      	ldr	r0, [pc, #80]	; (800fd20 <dhcp_option_short+0x70>)
 800fcd0:	f006 f884 	bl	8015ddc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fcd4:	887b      	ldrh	r3, [r7, #2]
 800fcd6:	0a1b      	lsrs	r3, r3, #8
 800fcd8:	b298      	uxth	r0, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	691a      	ldr	r2, [r3, #16]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	8a9b      	ldrh	r3, [r3, #20]
 800fce2:	1c59      	adds	r1, r3, #1
 800fce4:	b28c      	uxth	r4, r1
 800fce6:	6879      	ldr	r1, [r7, #4]
 800fce8:	828c      	strh	r4, [r1, #20]
 800fcea:	b2c1      	uxtb	r1, r0
 800fcec:	4413      	add	r3, r2
 800fcee:	460a      	mov	r2, r1
 800fcf0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	691a      	ldr	r2, [r3, #16]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	8a9b      	ldrh	r3, [r3, #20]
 800fcfc:	1c59      	adds	r1, r3, #1
 800fcfe:	b288      	uxth	r0, r1
 800fd00:	6879      	ldr	r1, [r7, #4]
 800fd02:	8288      	strh	r0, [r1, #20]
 800fd04:	8879      	ldrh	r1, [r7, #2]
 800fd06:	b2c9      	uxtb	r1, r1
 800fd08:	4413      	add	r3, r2
 800fd0a:	460a      	mov	r2, r1
 800fd0c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd90      	pop	{r4, r7, pc}
 800fd18:	080199ec 	.word	0x080199ec
 800fd1c:	08019c00 	.word	0x08019c00
 800fd20:	08019a4c 	.word	0x08019a4c

0800fd24 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800fd24:	b590      	push	{r4, r7, lr}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	8a9b      	ldrh	r3, [r3, #20]
 800fd32:	3304      	adds	r3, #4
 800fd34:	2b44      	cmp	r3, #68	; 0x44
 800fd36:	d906      	bls.n	800fd46 <dhcp_option_long+0x22>
 800fd38:	4b22      	ldr	r3, [pc, #136]	; (800fdc4 <dhcp_option_long+0xa0>)
 800fd3a:	f240 528a 	movw	r2, #1418	; 0x58a
 800fd3e:	4922      	ldr	r1, [pc, #136]	; (800fdc8 <dhcp_option_long+0xa4>)
 800fd40:	4822      	ldr	r0, [pc, #136]	; (800fdcc <dhcp_option_long+0xa8>)
 800fd42:	f006 f84b 	bl	8015ddc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	0e18      	lsrs	r0, r3, #24
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	691a      	ldr	r2, [r3, #16]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8a9b      	ldrh	r3, [r3, #20]
 800fd52:	1c59      	adds	r1, r3, #1
 800fd54:	b28c      	uxth	r4, r1
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	828c      	strh	r4, [r1, #20]
 800fd5a:	b2c1      	uxtb	r1, r0
 800fd5c:	4413      	add	r3, r2
 800fd5e:	460a      	mov	r2, r1
 800fd60:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	0c18      	lsrs	r0, r3, #16
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	691a      	ldr	r2, [r3, #16]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	8a9b      	ldrh	r3, [r3, #20]
 800fd70:	1c59      	adds	r1, r3, #1
 800fd72:	b28c      	uxth	r4, r1
 800fd74:	6879      	ldr	r1, [r7, #4]
 800fd76:	828c      	strh	r4, [r1, #20]
 800fd78:	b2c1      	uxtb	r1, r0
 800fd7a:	4413      	add	r3, r2
 800fd7c:	460a      	mov	r2, r1
 800fd7e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	0a18      	lsrs	r0, r3, #8
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	691a      	ldr	r2, [r3, #16]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	8a9b      	ldrh	r3, [r3, #20]
 800fd8e:	1c59      	adds	r1, r3, #1
 800fd90:	b28c      	uxth	r4, r1
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	828c      	strh	r4, [r1, #20]
 800fd96:	b2c1      	uxtb	r1, r0
 800fd98:	4413      	add	r3, r2
 800fd9a:	460a      	mov	r2, r1
 800fd9c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691a      	ldr	r2, [r3, #16]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	8a9b      	ldrh	r3, [r3, #20]
 800fda8:	1c59      	adds	r1, r3, #1
 800fdaa:	b288      	uxth	r0, r1
 800fdac:	6879      	ldr	r1, [r7, #4]
 800fdae:	8288      	strh	r0, [r1, #20]
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	b2c9      	uxtb	r1, r1
 800fdb4:	4413      	add	r3, r2
 800fdb6:	460a      	mov	r2, r1
 800fdb8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd90      	pop	{r4, r7, pc}
 800fdc4:	080199ec 	.word	0x080199ec
 800fdc8:	08019c44 	.word	0x08019c44
 800fdcc:	08019a4c 	.word	0x08019a4c

0800fdd0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b08e      	sub	sp, #56	; 0x38
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fde2:	2208      	movs	r2, #8
 800fde4:	2100      	movs	r1, #0
 800fde6:	48b3      	ldr	r0, [pc, #716]	; (80100b4 <dhcp_parse_reply+0x2e4>)
 800fde8:	f005 fb94 	bl	8015514 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	895b      	ldrh	r3, [r3, #10]
 800fdf0:	2b2b      	cmp	r3, #43	; 0x2b
 800fdf2:	d802      	bhi.n	800fdfa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fdf4:	f06f 0301 	mvn.w	r3, #1
 800fdf8:	e26a      	b.n	80102d0 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800fe02:	23f0      	movs	r3, #240	; 0xf0
 800fe04:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	891b      	ldrh	r3, [r3, #8]
 800fe0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800fe10:	e00c      	b.n	800fe2c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	895b      	ldrh	r3, [r3, #10]
 800fe16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800fe1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1e:	895b      	ldrh	r3, [r3, #10]
 800fe20:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800fe26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d004      	beq.n	800fe3c <dhcp_parse_reply+0x6c>
 800fe32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe34:	895b      	ldrh	r3, [r3, #10]
 800fe36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d2ea      	bcs.n	800fe12 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800fe3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d102      	bne.n	800fe48 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800fe42:	f06f 0301 	mvn.w	r3, #1
 800fe46:	e243      	b.n	80102d0 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800fe48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe4a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800fe4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fe4e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fe56:	e1fb      	b.n	8010250 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800fe58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fe5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe5c:	4413      	add	r3, r2
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800fe66:	f04f 33ff 	mov.w	r3, #4294967295
 800fe6a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800fe6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fe6e:	3302      	adds	r3, #2
 800fe70:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800fe72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fe74:	3301      	adds	r3, #1
 800fe76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe78:	8952      	ldrh	r2, [r2, #10]
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	da06      	bge.n	800fe8c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800fe7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fe80:	3301      	adds	r3, #1
 800fe82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe84:	4413      	add	r3, r2
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	77fb      	strb	r3, [r7, #31]
 800fe8a:	e00a      	b.n	800fea2 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d004      	beq.n	800fe9e <dhcp_parse_reply+0xce>
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	e000      	b.n	800fea0 <dhcp_parse_reply+0xd0>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fea2:	7ffb      	ldrb	r3, [r7, #31]
 800fea4:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800fea6:	7d7b      	ldrb	r3, [r7, #21]
 800fea8:	2b3b      	cmp	r3, #59	; 0x3b
 800feaa:	f200 8121 	bhi.w	80100f0 <dhcp_parse_reply+0x320>
 800feae:	a201      	add	r2, pc, #4	; (adr r2, 800feb4 <dhcp_parse_reply+0xe4>)
 800feb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb4:	0800ffa5 	.word	0x0800ffa5
 800feb8:	0800ffb5 	.word	0x0800ffb5
 800febc:	080100f1 	.word	0x080100f1
 800fec0:	0800ffd5 	.word	0x0800ffd5
 800fec4:	080100f1 	.word	0x080100f1
 800fec8:	080100f1 	.word	0x080100f1
 800fecc:	080100f1 	.word	0x080100f1
 800fed0:	080100f1 	.word	0x080100f1
 800fed4:	080100f1 	.word	0x080100f1
 800fed8:	080100f1 	.word	0x080100f1
 800fedc:	080100f1 	.word	0x080100f1
 800fee0:	080100f1 	.word	0x080100f1
 800fee4:	080100f1 	.word	0x080100f1
 800fee8:	080100f1 	.word	0x080100f1
 800feec:	080100f1 	.word	0x080100f1
 800fef0:	080100f1 	.word	0x080100f1
 800fef4:	080100f1 	.word	0x080100f1
 800fef8:	080100f1 	.word	0x080100f1
 800fefc:	080100f1 	.word	0x080100f1
 800ff00:	080100f1 	.word	0x080100f1
 800ff04:	080100f1 	.word	0x080100f1
 800ff08:	080100f1 	.word	0x080100f1
 800ff0c:	080100f1 	.word	0x080100f1
 800ff10:	080100f1 	.word	0x080100f1
 800ff14:	080100f1 	.word	0x080100f1
 800ff18:	080100f1 	.word	0x080100f1
 800ff1c:	080100f1 	.word	0x080100f1
 800ff20:	080100f1 	.word	0x080100f1
 800ff24:	080100f1 	.word	0x080100f1
 800ff28:	080100f1 	.word	0x080100f1
 800ff2c:	080100f1 	.word	0x080100f1
 800ff30:	080100f1 	.word	0x080100f1
 800ff34:	080100f1 	.word	0x080100f1
 800ff38:	080100f1 	.word	0x080100f1
 800ff3c:	080100f1 	.word	0x080100f1
 800ff40:	080100f1 	.word	0x080100f1
 800ff44:	080100f1 	.word	0x080100f1
 800ff48:	080100f1 	.word	0x080100f1
 800ff4c:	080100f1 	.word	0x080100f1
 800ff50:	080100f1 	.word	0x080100f1
 800ff54:	080100f1 	.word	0x080100f1
 800ff58:	080100f1 	.word	0x080100f1
 800ff5c:	080100f1 	.word	0x080100f1
 800ff60:	080100f1 	.word	0x080100f1
 800ff64:	080100f1 	.word	0x080100f1
 800ff68:	080100f1 	.word	0x080100f1
 800ff6c:	080100f1 	.word	0x080100f1
 800ff70:	080100f1 	.word	0x080100f1
 800ff74:	080100f1 	.word	0x080100f1
 800ff78:	080100f1 	.word	0x080100f1
 800ff7c:	080100f1 	.word	0x080100f1
 800ff80:	0800fffb 	.word	0x0800fffb
 800ff84:	0801001b 	.word	0x0801001b
 800ff88:	08010055 	.word	0x08010055
 800ff8c:	08010075 	.word	0x08010075
 800ff90:	080100f1 	.word	0x080100f1
 800ff94:	080100f1 	.word	0x080100f1
 800ff98:	080100f1 	.word	0x080100f1
 800ff9c:	08010095 	.word	0x08010095
 800ffa0:	080100d1 	.word	0x080100d1
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	77fb      	strb	r3, [r7, #31]
 800ffa8:	7ffb      	ldrb	r3, [r7, #31]
 800ffaa:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800ffac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800ffb2:	e0a0      	b.n	80100f6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ffb4:	7ffb      	ldrb	r3, [r7, #31]
 800ffb6:	2b04      	cmp	r3, #4
 800ffb8:	d009      	beq.n	800ffce <dhcp_parse_reply+0x1fe>
 800ffba:	4b3f      	ldr	r3, [pc, #252]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 800ffbc:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800ffc0:	493e      	ldr	r1, [pc, #248]	; (80100bc <dhcp_parse_reply+0x2ec>)
 800ffc2:	483f      	ldr	r0, [pc, #252]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 800ffc4:	f005 ff0a 	bl	8015ddc <iprintf>
 800ffc8:	f06f 0305 	mvn.w	r3, #5
 800ffcc:	e180      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ffce:	2306      	movs	r3, #6
 800ffd0:	61bb      	str	r3, [r7, #24]
        break;
 800ffd2:	e090      	b.n	80100f6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ffd4:	2304      	movs	r3, #4
 800ffd6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ffd8:	7ffa      	ldrb	r2, [r7, #31]
 800ffda:	7fbb      	ldrb	r3, [r7, #30]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d209      	bcs.n	800fff4 <dhcp_parse_reply+0x224>
 800ffe0:	4b35      	ldr	r3, [pc, #212]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 800ffe2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800ffe6:	4937      	ldr	r1, [pc, #220]	; (80100c4 <dhcp_parse_reply+0x2f4>)
 800ffe8:	4835      	ldr	r0, [pc, #212]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 800ffea:	f005 fef7 	bl	8015ddc <iprintf>
 800ffee:	f06f 0305 	mvn.w	r3, #5
 800fff2:	e16d      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800fff4:	2307      	movs	r3, #7
 800fff6:	61bb      	str	r3, [r7, #24]
        break;
 800fff8:	e07d      	b.n	80100f6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fffa:	7ffb      	ldrb	r3, [r7, #31]
 800fffc:	2b04      	cmp	r3, #4
 800fffe:	d009      	beq.n	8010014 <dhcp_parse_reply+0x244>
 8010000:	4b2d      	ldr	r3, [pc, #180]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 8010002:	f240 6209 	movw	r2, #1545	; 0x609
 8010006:	492d      	ldr	r1, [pc, #180]	; (80100bc <dhcp_parse_reply+0x2ec>)
 8010008:	482d      	ldr	r0, [pc, #180]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 801000a:	f005 fee7 	bl	8015ddc <iprintf>
 801000e:	f06f 0305 	mvn.w	r3, #5
 8010012:	e15d      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010014:	2303      	movs	r3, #3
 8010016:	61bb      	str	r3, [r7, #24]
        break;
 8010018:	e06d      	b.n	80100f6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801001a:	7ffb      	ldrb	r3, [r7, #31]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d009      	beq.n	8010034 <dhcp_parse_reply+0x264>
 8010020:	4b25      	ldr	r3, [pc, #148]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 8010022:	f240 6217 	movw	r2, #1559	; 0x617
 8010026:	4928      	ldr	r1, [pc, #160]	; (80100c8 <dhcp_parse_reply+0x2f8>)
 8010028:	4825      	ldr	r0, [pc, #148]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 801002a:	f005 fed7 	bl	8015ddc <iprintf>
 801002e:	f06f 0305 	mvn.w	r3, #5
 8010032:	e14d      	b.n	80102d0 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010036:	2bf0      	cmp	r3, #240	; 0xf0
 8010038:	d009      	beq.n	801004e <dhcp_parse_reply+0x27e>
 801003a:	4b1f      	ldr	r3, [pc, #124]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 801003c:	f240 6219 	movw	r2, #1561	; 0x619
 8010040:	4922      	ldr	r1, [pc, #136]	; (80100cc <dhcp_parse_reply+0x2fc>)
 8010042:	481f      	ldr	r0, [pc, #124]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 8010044:	f005 feca 	bl	8015ddc <iprintf>
 8010048:	f06f 0305 	mvn.w	r3, #5
 801004c:	e140      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801004e:	2300      	movs	r3, #0
 8010050:	61bb      	str	r3, [r7, #24]
        break;
 8010052:	e050      	b.n	80100f6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010054:	7ffb      	ldrb	r3, [r7, #31]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d009      	beq.n	801006e <dhcp_parse_reply+0x29e>
 801005a:	4b17      	ldr	r3, [pc, #92]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 801005c:	f240 621d 	movw	r2, #1565	; 0x61d
 8010060:	4919      	ldr	r1, [pc, #100]	; (80100c8 <dhcp_parse_reply+0x2f8>)
 8010062:	4817      	ldr	r0, [pc, #92]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 8010064:	f005 feba 	bl	8015ddc <iprintf>
 8010068:	f06f 0305 	mvn.w	r3, #5
 801006c:	e130      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801006e:	2301      	movs	r3, #1
 8010070:	61bb      	str	r3, [r7, #24]
        break;
 8010072:	e040      	b.n	80100f6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010074:	7ffb      	ldrb	r3, [r7, #31]
 8010076:	2b04      	cmp	r3, #4
 8010078:	d009      	beq.n	801008e <dhcp_parse_reply+0x2be>
 801007a:	4b0f      	ldr	r3, [pc, #60]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 801007c:	f240 6221 	movw	r2, #1569	; 0x621
 8010080:	490e      	ldr	r1, [pc, #56]	; (80100bc <dhcp_parse_reply+0x2ec>)
 8010082:	480f      	ldr	r0, [pc, #60]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 8010084:	f005 feaa 	bl	8015ddc <iprintf>
 8010088:	f06f 0305 	mvn.w	r3, #5
 801008c:	e120      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801008e:	2302      	movs	r3, #2
 8010090:	61bb      	str	r3, [r7, #24]
        break;
 8010092:	e030      	b.n	80100f6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010094:	7ffb      	ldrb	r3, [r7, #31]
 8010096:	2b04      	cmp	r3, #4
 8010098:	d009      	beq.n	80100ae <dhcp_parse_reply+0x2de>
 801009a:	4b07      	ldr	r3, [pc, #28]	; (80100b8 <dhcp_parse_reply+0x2e8>)
 801009c:	f240 6225 	movw	r2, #1573	; 0x625
 80100a0:	4906      	ldr	r1, [pc, #24]	; (80100bc <dhcp_parse_reply+0x2ec>)
 80100a2:	4807      	ldr	r0, [pc, #28]	; (80100c0 <dhcp_parse_reply+0x2f0>)
 80100a4:	f005 fe9a 	bl	8015ddc <iprintf>
 80100a8:	f06f 0305 	mvn.w	r3, #5
 80100ac:	e110      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 80100ae:	2304      	movs	r3, #4
 80100b0:	61bb      	str	r3, [r7, #24]
        break;
 80100b2:	e020      	b.n	80100f6 <dhcp_parse_reply+0x326>
 80100b4:	2000723c 	.word	0x2000723c
 80100b8:	080199ec 	.word	0x080199ec
 80100bc:	08019c84 	.word	0x08019c84
 80100c0:	08019a4c 	.word	0x08019a4c
 80100c4:	08019c90 	.word	0x08019c90
 80100c8:	08019ca4 	.word	0x08019ca4
 80100cc:	08019cb0 	.word	0x08019cb0
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80100d0:	7ffb      	ldrb	r3, [r7, #31]
 80100d2:	2b04      	cmp	r3, #4
 80100d4:	d009      	beq.n	80100ea <dhcp_parse_reply+0x31a>
 80100d6:	4b80      	ldr	r3, [pc, #512]	; (80102d8 <dhcp_parse_reply+0x508>)
 80100d8:	f240 6229 	movw	r2, #1577	; 0x629
 80100dc:	497f      	ldr	r1, [pc, #508]	; (80102dc <dhcp_parse_reply+0x50c>)
 80100de:	4880      	ldr	r0, [pc, #512]	; (80102e0 <dhcp_parse_reply+0x510>)
 80100e0:	f005 fe7c 	bl	8015ddc <iprintf>
 80100e4:	f06f 0305 	mvn.w	r3, #5
 80100e8:	e0f2      	b.n	80102d0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 80100ea:	2305      	movs	r3, #5
 80100ec:	61bb      	str	r3, [r7, #24]
        break;
 80100ee:	e002      	b.n	80100f6 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80100f4:	bf00      	nop
    }
    offset += len + 2;
 80100f6:	7ffb      	ldrb	r3, [r7, #31]
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80100fc:	4413      	add	r3, r2
 80100fe:	b29b      	uxth	r3, r3
 8010100:	3302      	adds	r3, #2
 8010102:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8010104:	7fbb      	ldrb	r3, [r7, #30]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d079      	beq.n	80101fe <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	2b00      	cmp	r3, #0
 8010112:	db02      	blt.n	801011a <dhcp_parse_reply+0x34a>
 8010114:	69bb      	ldr	r3, [r7, #24]
 8010116:	2b07      	cmp	r3, #7
 8010118:	dd06      	ble.n	8010128 <dhcp_parse_reply+0x358>
 801011a:	4b6f      	ldr	r3, [pc, #444]	; (80102d8 <dhcp_parse_reply+0x508>)
 801011c:	f240 6236 	movw	r2, #1590	; 0x636
 8010120:	4970      	ldr	r1, [pc, #448]	; (80102e4 <dhcp_parse_reply+0x514>)
 8010122:	486f      	ldr	r0, [pc, #444]	; (80102e0 <dhcp_parse_reply+0x510>)
 8010124:	f005 fe5a 	bl	8015ddc <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8010128:	4a6f      	ldr	r2, [pc, #444]	; (80102e8 <dhcp_parse_reply+0x518>)
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	4413      	add	r3, r2
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d164      	bne.n	80101fe <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8010134:	7fbb      	ldrb	r3, [r7, #30]
 8010136:	2b04      	cmp	r3, #4
 8010138:	bf28      	it	cs
 801013a:	2304      	movcs	r3, #4
 801013c:	b2db      	uxtb	r3, r3
 801013e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010140:	8afb      	ldrh	r3, [r7, #22]
 8010142:	8a7a      	ldrh	r2, [r7, #18]
 8010144:	f107 0108 	add.w	r1, r7, #8
 8010148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801014a:	f7f8 fddd 	bl	8008d08 <pbuf_copy_partial>
 801014e:	4603      	mov	r3, r0
 8010150:	461a      	mov	r2, r3
 8010152:	8a7b      	ldrh	r3, [r7, #18]
 8010154:	4293      	cmp	r3, r2
 8010156:	d002      	beq.n	801015e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8010158:	f06f 0301 	mvn.w	r3, #1
 801015c:	e0b8      	b.n	80102d0 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801015e:	7fbb      	ldrb	r3, [r7, #30]
 8010160:	2b04      	cmp	r3, #4
 8010162:	d927      	bls.n	80101b4 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010164:	7fbb      	ldrb	r3, [r7, #30]
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	d009      	beq.n	8010184 <dhcp_parse_reply+0x3b4>
 8010170:	4b59      	ldr	r3, [pc, #356]	; (80102d8 <dhcp_parse_reply+0x508>)
 8010172:	f240 623e 	movw	r2, #1598	; 0x63e
 8010176:	495d      	ldr	r1, [pc, #372]	; (80102ec <dhcp_parse_reply+0x51c>)
 8010178:	4859      	ldr	r0, [pc, #356]	; (80102e0 <dhcp_parse_reply+0x510>)
 801017a:	f005 fe2f 	bl	8015ddc <iprintf>
 801017e:	f06f 0305 	mvn.w	r3, #5
 8010182:	e0a5      	b.n	80102d0 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8010184:	4a58      	ldr	r2, [pc, #352]	; (80102e8 <dhcp_parse_reply+0x518>)
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	4413      	add	r3, r2
 801018a:	2201      	movs	r2, #1
 801018c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	4618      	mov	r0, r3
 8010192:	f7f7 fa31 	bl	80075f8 <lwip_htonl>
 8010196:	4601      	mov	r1, r0
 8010198:	4a55      	ldr	r2, [pc, #340]	; (80102f0 <dhcp_parse_reply+0x520>)
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 80101a0:	7fbb      	ldrb	r3, [r7, #30]
 80101a2:	3b04      	subs	r3, #4
 80101a4:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 80101a6:	8afb      	ldrh	r3, [r7, #22]
 80101a8:	3304      	adds	r3, #4
 80101aa:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	3301      	adds	r3, #1
 80101b0:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 80101b2:	e7ac      	b.n	801010e <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 80101b4:	7fbb      	ldrb	r3, [r7, #30]
 80101b6:	2b04      	cmp	r3, #4
 80101b8:	d106      	bne.n	80101c8 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7f7 fa1b 	bl	80075f8 <lwip_htonl>
 80101c2:	4603      	mov	r3, r0
 80101c4:	60bb      	str	r3, [r7, #8]
 80101c6:	e010      	b.n	80101ea <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80101c8:	7fbb      	ldrb	r3, [r7, #30]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d009      	beq.n	80101e2 <dhcp_parse_reply+0x412>
 80101ce:	4b42      	ldr	r3, [pc, #264]	; (80102d8 <dhcp_parse_reply+0x508>)
 80101d0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80101d4:	4947      	ldr	r1, [pc, #284]	; (80102f4 <dhcp_parse_reply+0x524>)
 80101d6:	4842      	ldr	r0, [pc, #264]	; (80102e0 <dhcp_parse_reply+0x510>)
 80101d8:	f005 fe00 	bl	8015ddc <iprintf>
 80101dc:	f06f 0305 	mvn.w	r3, #5
 80101e0:	e076      	b.n	80102d0 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 80101e2:	f107 0308 	add.w	r3, r7, #8
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80101ea:	4a3f      	ldr	r2, [pc, #252]	; (80102e8 <dhcp_parse_reply+0x518>)
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	4413      	add	r3, r2
 80101f0:	2201      	movs	r2, #1
 80101f2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	493e      	ldr	r1, [pc, #248]	; (80102f0 <dhcp_parse_reply+0x520>)
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80101fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010200:	895b      	ldrh	r3, [r3, #10]
 8010202:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010204:	429a      	cmp	r2, r3
 8010206:	d323      	bcc.n	8010250 <dhcp_parse_reply+0x480>
      offset -= q->len;
 8010208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020a:	895b      	ldrh	r3, [r3, #10]
 801020c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8010212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010214:	895b      	ldrh	r3, [r3, #10]
 8010216:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 801021c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801021e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010220:	429a      	cmp	r2, r3
 8010222:	d223      	bcs.n	801026c <dhcp_parse_reply+0x49c>
 8010224:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010226:	2b00      	cmp	r3, #0
 8010228:	d020      	beq.n	801026c <dhcp_parse_reply+0x49c>
        q = q->next;
 801022a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8010230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010232:	2b00      	cmp	r3, #0
 8010234:	d109      	bne.n	801024a <dhcp_parse_reply+0x47a>
 8010236:	4b28      	ldr	r3, [pc, #160]	; (80102d8 <dhcp_parse_reply+0x508>)
 8010238:	f240 6254 	movw	r2, #1620	; 0x654
 801023c:	492e      	ldr	r1, [pc, #184]	; (80102f8 <dhcp_parse_reply+0x528>)
 801023e:	4828      	ldr	r0, [pc, #160]	; (80102e0 <dhcp_parse_reply+0x510>)
 8010240:	f005 fdcc 	bl	8015ddc <iprintf>
 8010244:	f06f 0305 	mvn.w	r3, #5
 8010248:	e042      	b.n	80102d0 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00a      	beq.n	801026c <dhcp_parse_reply+0x49c>
 8010256:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010258:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801025a:	429a      	cmp	r2, r3
 801025c:	d206      	bcs.n	801026c <dhcp_parse_reply+0x49c>
 801025e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010262:	4413      	add	r3, r2
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2bff      	cmp	r3, #255	; 0xff
 8010268:	f47f adf6 	bne.w	800fe58 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801026c:	4b1e      	ldr	r3, [pc, #120]	; (80102e8 <dhcp_parse_reply+0x518>)
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d018      	beq.n	80102a6 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010274:	4b1e      	ldr	r3, [pc, #120]	; (80102f0 <dhcp_parse_reply+0x520>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801027a:	4b1b      	ldr	r3, [pc, #108]	; (80102e8 <dhcp_parse_reply+0x518>)
 801027c:	2200      	movs	r2, #0
 801027e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b01      	cmp	r3, #1
 8010284:	d102      	bne.n	801028c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8010286:	2301      	movs	r3, #1
 8010288:	627b      	str	r3, [r7, #36]	; 0x24
 801028a:	e00c      	b.n	80102a6 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2b02      	cmp	r3, #2
 8010290:	d102      	bne.n	8010298 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8010292:	2301      	movs	r3, #1
 8010294:	623b      	str	r3, [r7, #32]
 8010296:	e006      	b.n	80102a6 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2b03      	cmp	r3, #3
 801029c:	d103      	bne.n	80102a6 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801029e:	2301      	movs	r3, #1
 80102a0:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 80102a2:	2301      	movs	r3, #1
 80102a4:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d006      	beq.n	80102ba <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 80102b0:	236c      	movs	r3, #108	; 0x6c
 80102b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80102b4:	23ec      	movs	r3, #236	; 0xec
 80102b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80102b8:	e5a8      	b.n	800fe0c <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d006      	beq.n	80102ce <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 80102c4:	232c      	movs	r3, #44	; 0x2c
 80102c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80102c8:	236c      	movs	r3, #108	; 0x6c
 80102ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80102cc:	e59e      	b.n	800fe0c <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 80102ce:	2300      	movs	r3, #0
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3738      	adds	r7, #56	; 0x38
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	080199ec 	.word	0x080199ec
 80102dc:	08019c84 	.word	0x08019c84
 80102e0:	08019a4c 	.word	0x08019a4c
 80102e4:	08019cc8 	.word	0x08019cc8
 80102e8:	2000723c 	.word	0x2000723c
 80102ec:	08019cdc 	.word	0x08019cdc
 80102f0:	20007244 	.word	0x20007244
 80102f4:	08019cf4 	.word	0x08019cf4
 80102f8:	08019d08 	.word	0x08019d08

080102fc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b08a      	sub	sp, #40	; 0x28
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801030a:	4b68      	ldr	r3, [pc, #416]	; (80104ac <dhcp_recv+0x1b0>)
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010310:	6a3b      	ldr	r3, [r7, #32]
 8010312:	6a1b      	ldr	r3, [r3, #32]
 8010314:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 80a9 	beq.w	8010476 <dhcp_recv+0x17a>
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	7a1b      	ldrb	r3, [r3, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	f000 80a4 	beq.w	8010476 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d006      	beq.n	8010344 <dhcp_recv+0x48>
 8010336:	4b5e      	ldr	r3, [pc, #376]	; (80104b0 <dhcp_recv+0x1b4>)
 8010338:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 801033c:	495d      	ldr	r1, [pc, #372]	; (80104b4 <dhcp_recv+0x1b8>)
 801033e:	485e      	ldr	r0, [pc, #376]	; (80104b8 <dhcp_recv+0x1bc>)
 8010340:	f005 fd4c 	bl	8015ddc <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	895b      	ldrh	r3, [r3, #10]
 8010348:	2b2b      	cmp	r3, #43	; 0x2b
 801034a:	f240 8096 	bls.w	801047a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	2b02      	cmp	r3, #2
 8010354:	f040 8093 	bne.w	801047e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8010358:	2300      	movs	r3, #0
 801035a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801035e:	e012      	b.n	8010386 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010364:	6a3a      	ldr	r2, [r7, #32]
 8010366:	4413      	add	r3, r2
 8010368:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801036c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010370:	69b9      	ldr	r1, [r7, #24]
 8010372:	440b      	add	r3, r1
 8010374:	7f1b      	ldrb	r3, [r3, #28]
 8010376:	429a      	cmp	r2, r3
 8010378:	f040 8083 	bne.w	8010482 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801037c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010380:	3301      	adds	r3, #1
 8010382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801038c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010390:	429a      	cmp	r2, r3
 8010392:	d207      	bcs.n	80103a4 <dhcp_recv+0xa8>
 8010394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010398:	2b05      	cmp	r3, #5
 801039a:	d803      	bhi.n	80103a4 <dhcp_recv+0xa8>
 801039c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103a0:	2b0f      	cmp	r3, #15
 80103a2:	d9dd      	bls.n	8010360 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7f7 f925 	bl	80075f8 <lwip_htonl>
 80103ae:	4602      	mov	r2, r0
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d166      	bne.n	8010486 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 80103b8:	6879      	ldr	r1, [r7, #4]
 80103ba:	69f8      	ldr	r0, [r7, #28]
 80103bc:	f7ff fd08 	bl	800fdd0 <dhcp_parse_reply>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d161      	bne.n	801048a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80103c6:	4b3d      	ldr	r3, [pc, #244]	; (80104bc <dhcp_recv+0x1c0>)
 80103c8:	785b      	ldrb	r3, [r3, #1]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d05f      	beq.n	801048e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80103ce:	4b3c      	ldr	r3, [pc, #240]	; (80104c0 <dhcp_recv+0x1c4>)
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80103d4:	7dfb      	ldrb	r3, [r7, #23]
 80103d6:	2b05      	cmp	r3, #5
 80103d8:	d128      	bne.n	801042c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	7a5b      	ldrb	r3, [r3, #9]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d111      	bne.n	8010406 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 80103e2:	6a38      	ldr	r0, [r7, #32]
 80103e4:	f7fe fea0 	bl	800f128 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80103e8:	6a3b      	ldr	r3, [r7, #32]
 80103ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80103ee:	f003 0308 	and.w	r3, r3, #8
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d003      	beq.n	80103fe <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80103f6:	6a38      	ldr	r0, [r7, #32]
 80103f8:	f7fe fc68 	bl	800eccc <dhcp_check>
 80103fc:	e048      	b.n	8010490 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80103fe:	6a38      	ldr	r0, [r7, #32]
 8010400:	f7ff f8a0 	bl	800f544 <dhcp_bind>
 8010404:	e044      	b.n	8010490 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	7a5b      	ldrb	r3, [r3, #9]
 801040a:	2b03      	cmp	r3, #3
 801040c:	d007      	beq.n	801041e <dhcp_recv+0x122>
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	7a5b      	ldrb	r3, [r3, #9]
 8010412:	2b04      	cmp	r3, #4
 8010414:	d003      	beq.n	801041e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801041a:	2b05      	cmp	r3, #5
 801041c:	d138      	bne.n	8010490 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 801041e:	6a38      	ldr	r0, [r7, #32]
 8010420:	f7fe fe82 	bl	800f128 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010424:	6a38      	ldr	r0, [r7, #32]
 8010426:	f7ff f88d 	bl	800f544 <dhcp_bind>
 801042a:	e031      	b.n	8010490 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801042c:	7dfb      	ldrb	r3, [r7, #23]
 801042e:	2b06      	cmp	r3, #6
 8010430:	d113      	bne.n	801045a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8010436:	2b03      	cmp	r3, #3
 8010438:	d00b      	beq.n	8010452 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	7a5b      	ldrb	r3, [r3, #9]
 801043e:	2b01      	cmp	r3, #1
 8010440:	d007      	beq.n	8010452 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010446:	2b04      	cmp	r3, #4
 8010448:	d003      	beq.n	8010452 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	7a5b      	ldrb	r3, [r3, #9]
 801044e:	2b05      	cmp	r3, #5
 8010450:	d103      	bne.n	801045a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8010452:	6a38      	ldr	r0, [r7, #32]
 8010454:	f7fe fc20 	bl	800ec98 <dhcp_handle_nak>
 8010458:	e01a      	b.n	8010490 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801045a:	7dfb      	ldrb	r3, [r7, #23]
 801045c:	2b02      	cmp	r3, #2
 801045e:	d10a      	bne.n	8010476 <dhcp_recv+0x17a>
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	7a5b      	ldrb	r3, [r3, #9]
 8010464:	2b06      	cmp	r3, #6
 8010466:	d106      	bne.n	8010476 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	2200      	movs	r2, #0
 801046c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801046e:	6a38      	ldr	r0, [r7, #32]
 8010470:	f7fe fc60 	bl	800ed34 <dhcp_handle_offer>
 8010474:	e00c      	b.n	8010490 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8010476:	bf00      	nop
 8010478:	e00a      	b.n	8010490 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801047a:	bf00      	nop
 801047c:	e008      	b.n	8010490 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801047e:	bf00      	nop
 8010480:	e006      	b.n	8010490 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8010482:	bf00      	nop
 8010484:	e004      	b.n	8010490 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8010486:	bf00      	nop
 8010488:	e002      	b.n	8010490 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801048a:	bf00      	nop
 801048c:	e000      	b.n	8010490 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801048e:	bf00      	nop
  if (dhcp != NULL) {
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d002      	beq.n	801049c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	2200      	movs	r2, #0
 801049a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7f8 fa33 	bl	8008908 <pbuf_free>
}
 80104a2:	bf00      	nop
 80104a4:	3728      	adds	r7, #40	; 0x28
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	20000938 	.word	0x20000938
 80104b0:	080199ec 	.word	0x080199ec
 80104b4:	08019b18 	.word	0x08019b18
 80104b8:	08019a4c 	.word	0x08019a4c
 80104bc:	2000723c 	.word	0x2000723c
 80104c0:	20007244 	.word	0x20007244

080104c4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80104c4:	b590      	push	{r4, r7, lr}
 80104c6:	b087      	sub	sp, #28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	4613      	mov	r3, r2
 80104d0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d109      	bne.n	80104ec <dhcp_create_msg+0x28>
 80104d8:	4ba3      	ldr	r3, [pc, #652]	; (8010768 <dhcp_create_msg+0x2a4>)
 80104da:	f240 721d 	movw	r2, #1821	; 0x71d
 80104de:	49a3      	ldr	r1, [pc, #652]	; (801076c <dhcp_create_msg+0x2a8>)
 80104e0:	48a3      	ldr	r0, [pc, #652]	; (8010770 <dhcp_create_msg+0x2ac>)
 80104e2:	f005 fc7b 	bl	8015ddc <iprintf>
 80104e6:	f06f 030f 	mvn.w	r3, #15
 80104ea:	e138      	b.n	801075e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d109      	bne.n	8010506 <dhcp_create_msg+0x42>
 80104f2:	4b9d      	ldr	r3, [pc, #628]	; (8010768 <dhcp_create_msg+0x2a4>)
 80104f4:	f240 721e 	movw	r2, #1822	; 0x71e
 80104f8:	499e      	ldr	r1, [pc, #632]	; (8010774 <dhcp_create_msg+0x2b0>)
 80104fa:	489d      	ldr	r0, [pc, #628]	; (8010770 <dhcp_create_msg+0x2ac>)
 80104fc:	f005 fc6e 	bl	8015ddc <iprintf>
 8010500:	f06f 0305 	mvn.w	r3, #5
 8010504:	e12b      	b.n	801075e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <dhcp_create_msg+0x58>
 801050e:	4b96      	ldr	r3, [pc, #600]	; (8010768 <dhcp_create_msg+0x2a4>)
 8010510:	f240 721f 	movw	r2, #1823	; 0x71f
 8010514:	4998      	ldr	r1, [pc, #608]	; (8010778 <dhcp_create_msg+0x2b4>)
 8010516:	4896      	ldr	r0, [pc, #600]	; (8010770 <dhcp_create_msg+0x2ac>)
 8010518:	f005 fc60 	bl	8015ddc <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d006      	beq.n	8010532 <dhcp_create_msg+0x6e>
 8010524:	4b90      	ldr	r3, [pc, #576]	; (8010768 <dhcp_create_msg+0x2a4>)
 8010526:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 801052a:	4994      	ldr	r1, [pc, #592]	; (801077c <dhcp_create_msg+0x2b8>)
 801052c:	4890      	ldr	r0, [pc, #576]	; (8010770 <dhcp_create_msg+0x2ac>)
 801052e:	f005 fc55 	bl	8015ddc <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010532:	2200      	movs	r2, #0
 8010534:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010538:	2000      	movs	r0, #0
 801053a:	f7f7 fe73 	bl	8008224 <pbuf_alloc>
 801053e:	4602      	mov	r2, r0
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d102      	bne.n	8010552 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801054c:	f04f 33ff 	mov.w	r3, #4294967295
 8010550:	e105      	b.n	801075e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	895b      	ldrh	r3, [r3, #10]
 8010558:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801055c:	d206      	bcs.n	801056c <dhcp_create_msg+0xa8>
 801055e:	4b82      	ldr	r3, [pc, #520]	; (8010768 <dhcp_create_msg+0x2a4>)
 8010560:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010564:	4986      	ldr	r1, [pc, #536]	; (8010780 <dhcp_create_msg+0x2bc>)
 8010566:	4882      	ldr	r0, [pc, #520]	; (8010770 <dhcp_create_msg+0x2ac>)
 8010568:	f005 fc38 	bl	8015ddc <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801056c:	79fb      	ldrb	r3, [r7, #7]
 801056e:	2b03      	cmp	r3, #3
 8010570:	d103      	bne.n	801057a <dhcp_create_msg+0xb6>
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	7a5b      	ldrb	r3, [r3, #9]
 8010576:	2b03      	cmp	r3, #3
 8010578:	d10d      	bne.n	8010596 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	7a9b      	ldrb	r3, [r3, #10]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d105      	bne.n	801058e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010582:	f005 fc43 	bl	8015e0c <rand>
 8010586:	4603      	mov	r3, r0
 8010588:	461a      	mov	r2, r3
 801058a:	4b7e      	ldr	r3, [pc, #504]	; (8010784 <dhcp_create_msg+0x2c0>)
 801058c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801058e:	4b7d      	ldr	r3, [pc, #500]	; (8010784 <dhcp_create_msg+0x2c0>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	691b      	ldr	r3, [r3, #16]
 80105a4:	2201      	movs	r2, #1
 80105a6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	691b      	ldr	r3, [r3, #16]
 80105ac:	2201      	movs	r2, #1
 80105ae:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80105ba:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	2200      	movs	r2, #0
 80105c2:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	691c      	ldr	r4, [r3, #16]
 80105cc:	4610      	mov	r0, r2
 80105ce:	f7f7 f813 	bl	80075f8 <lwip_htonl>
 80105d2:	4603      	mov	r3, r0
 80105d4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	691b      	ldr	r3, [r3, #16]
 80105da:	2200      	movs	r2, #0
 80105dc:	721a      	strb	r2, [r3, #8]
 80105de:	2200      	movs	r2, #0
 80105e0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	2200      	movs	r2, #0
 80105e8:	729a      	strb	r2, [r3, #10]
 80105ea:	2200      	movs	r2, #0
 80105ec:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	2200      	movs	r2, #0
 80105f4:	731a      	strb	r2, [r3, #12]
 80105f6:	2200      	movs	r2, #0
 80105f8:	735a      	strb	r2, [r3, #13]
 80105fa:	2200      	movs	r2, #0
 80105fc:	739a      	strb	r2, [r3, #14]
 80105fe:	2200      	movs	r2, #0
 8010600:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010602:	79fb      	ldrb	r3, [r7, #7]
 8010604:	2b08      	cmp	r3, #8
 8010606:	d010      	beq.n	801062a <dhcp_create_msg+0x166>
 8010608:	79fb      	ldrb	r3, [r7, #7]
 801060a:	2b04      	cmp	r3, #4
 801060c:	d00d      	beq.n	801062a <dhcp_create_msg+0x166>
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	2b07      	cmp	r3, #7
 8010612:	d00a      	beq.n	801062a <dhcp_create_msg+0x166>
 8010614:	79fb      	ldrb	r3, [r7, #7]
 8010616:	2b03      	cmp	r3, #3
 8010618:	d10d      	bne.n	8010636 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801061e:	2b05      	cmp	r3, #5
 8010620:	d003      	beq.n	801062a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	7a5b      	ldrb	r3, [r3, #9]
 8010626:	2b04      	cmp	r3, #4
 8010628:	d105      	bne.n	8010636 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	1d1a      	adds	r2, r3, #4
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	6812      	ldr	r2, [r2, #0]
 8010634:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	2200      	movs	r2, #0
 801063c:	741a      	strb	r2, [r3, #16]
 801063e:	2200      	movs	r2, #0
 8010640:	745a      	strb	r2, [r3, #17]
 8010642:	2200      	movs	r2, #0
 8010644:	749a      	strb	r2, [r3, #18]
 8010646:	2200      	movs	r2, #0
 8010648:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	691b      	ldr	r3, [r3, #16]
 801064e:	2200      	movs	r2, #0
 8010650:	751a      	strb	r2, [r3, #20]
 8010652:	2200      	movs	r2, #0
 8010654:	755a      	strb	r2, [r3, #21]
 8010656:	2200      	movs	r2, #0
 8010658:	759a      	strb	r2, [r3, #22]
 801065a:	2200      	movs	r2, #0
 801065c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	691b      	ldr	r3, [r3, #16]
 8010662:	2200      	movs	r2, #0
 8010664:	761a      	strb	r2, [r3, #24]
 8010666:	2200      	movs	r2, #0
 8010668:	765a      	strb	r2, [r3, #25]
 801066a:	2200      	movs	r2, #0
 801066c:	769a      	strb	r2, [r3, #26]
 801066e:	2200      	movs	r2, #0
 8010670:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8010672:	2300      	movs	r3, #0
 8010674:	82fb      	strh	r3, [r7, #22]
 8010676:	e019      	b.n	80106ac <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801067e:	b29b      	uxth	r3, r3
 8010680:	8afa      	ldrh	r2, [r7, #22]
 8010682:	429a      	cmp	r2, r3
 8010684:	d208      	bcs.n	8010698 <dhcp_create_msg+0x1d4>
 8010686:	8afb      	ldrh	r3, [r7, #22]
 8010688:	2b05      	cmp	r3, #5
 801068a:	d805      	bhi.n	8010698 <dhcp_create_msg+0x1d4>
 801068c:	8afb      	ldrh	r3, [r7, #22]
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	4413      	add	r3, r2
 8010692:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8010696:	e000      	b.n	801069a <dhcp_create_msg+0x1d6>
 8010698:	2100      	movs	r1, #0
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	691a      	ldr	r2, [r3, #16]
 801069e:	8afb      	ldrh	r3, [r7, #22]
 80106a0:	4413      	add	r3, r2
 80106a2:	460a      	mov	r2, r1
 80106a4:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80106a6:	8afb      	ldrh	r3, [r7, #22]
 80106a8:	3301      	adds	r3, #1
 80106aa:	82fb      	strh	r3, [r7, #22]
 80106ac:	8afb      	ldrh	r3, [r7, #22]
 80106ae:	2b0f      	cmp	r3, #15
 80106b0:	d9e2      	bls.n	8010678 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80106b2:	2300      	movs	r3, #0
 80106b4:	82fb      	strh	r3, [r7, #22]
 80106b6:	e009      	b.n	80106cc <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	691a      	ldr	r2, [r3, #16]
 80106bc:	8afb      	ldrh	r3, [r7, #22]
 80106be:	4413      	add	r3, r2
 80106c0:	2200      	movs	r2, #0
 80106c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80106c6:	8afb      	ldrh	r3, [r7, #22]
 80106c8:	3301      	adds	r3, #1
 80106ca:	82fb      	strh	r3, [r7, #22]
 80106cc:	8afb      	ldrh	r3, [r7, #22]
 80106ce:	2b3f      	cmp	r3, #63	; 0x3f
 80106d0:	d9f2      	bls.n	80106b8 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80106d2:	2300      	movs	r3, #0
 80106d4:	82fb      	strh	r3, [r7, #22]
 80106d6:	e009      	b.n	80106ec <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	691a      	ldr	r2, [r3, #16]
 80106dc:	8afb      	ldrh	r3, [r7, #22]
 80106de:	4413      	add	r3, r2
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80106e6:	8afb      	ldrh	r3, [r7, #22]
 80106e8:	3301      	adds	r3, #1
 80106ea:	82fb      	strh	r3, [r7, #22]
 80106ec:	8afb      	ldrh	r3, [r7, #22]
 80106ee:	2b7f      	cmp	r3, #127	; 0x7f
 80106f0:	d9f2      	bls.n	80106d8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80106fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010700:	2200      	movs	r2, #0
 8010702:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010706:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801070a:	2200      	movs	r2, #0
 801070c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010710:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010714:	2200      	movs	r2, #0
 8010716:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801071a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	2200      	movs	r2, #0
 8010722:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010724:	2300      	movs	r3, #0
 8010726:	82fb      	strh	r3, [r7, #22]
 8010728:	e00b      	b.n	8010742 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	691a      	ldr	r2, [r3, #16]
 801072e:	8afb      	ldrh	r3, [r7, #22]
 8010730:	8af9      	ldrh	r1, [r7, #22]
 8010732:	b2c9      	uxtb	r1, r1
 8010734:	4413      	add	r3, r2
 8010736:	460a      	mov	r2, r1
 8010738:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801073c:	8afb      	ldrh	r3, [r7, #22]
 801073e:	3301      	adds	r3, #1
 8010740:	82fb      	strh	r3, [r7, #22]
 8010742:	8afb      	ldrh	r3, [r7, #22]
 8010744:	2b43      	cmp	r3, #67	; 0x43
 8010746:	d9f0      	bls.n	801072a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8010748:	2201      	movs	r2, #1
 801074a:	2135      	movs	r1, #53	; 0x35
 801074c:	68b8      	ldr	r0, [r7, #8]
 801074e:	f7ff fa4d 	bl	800fbec <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8010752:	79fb      	ldrb	r3, [r7, #7]
 8010754:	4619      	mov	r1, r3
 8010756:	68b8      	ldr	r0, [r7, #8]
 8010758:	f7ff fa82 	bl	800fc60 <dhcp_option_byte>
  return ERR_OK;
 801075c:	2300      	movs	r3, #0
}
 801075e:	4618      	mov	r0, r3
 8010760:	371c      	adds	r7, #28
 8010762:	46bd      	mov	sp, r7
 8010764:	bd90      	pop	{r4, r7, pc}
 8010766:	bf00      	nop
 8010768:	080199ec 	.word	0x080199ec
 801076c:	08019d1c 	.word	0x08019d1c
 8010770:	08019a4c 	.word	0x08019a4c
 8010774:	08019d3c 	.word	0x08019d3c
 8010778:	08019d5c 	.word	0x08019d5c
 801077c:	08019d84 	.word	0x08019d84
 8010780:	08019dac 	.word	0x08019dac
 8010784:	20000768 	.word	0x20000768

08010788 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d107      	bne.n	80107a6 <dhcp_delete_msg+0x1e>
 8010796:	4b18      	ldr	r3, [pc, #96]	; (80107f8 <dhcp_delete_msg+0x70>)
 8010798:	f240 726d 	movw	r2, #1901	; 0x76d
 801079c:	4917      	ldr	r1, [pc, #92]	; (80107fc <dhcp_delete_msg+0x74>)
 801079e:	4818      	ldr	r0, [pc, #96]	; (8010800 <dhcp_delete_msg+0x78>)
 80107a0:	f005 fb1c 	bl	8015ddc <iprintf>
 80107a4:	e024      	b.n	80107f0 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d106      	bne.n	80107bc <dhcp_delete_msg+0x34>
 80107ae:	4b12      	ldr	r3, [pc, #72]	; (80107f8 <dhcp_delete_msg+0x70>)
 80107b0:	f240 726e 	movw	r2, #1902	; 0x76e
 80107b4:	4913      	ldr	r1, [pc, #76]	; (8010804 <dhcp_delete_msg+0x7c>)
 80107b6:	4812      	ldr	r0, [pc, #72]	; (8010800 <dhcp_delete_msg+0x78>)
 80107b8:	f005 fb10 	bl	8015ddc <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d106      	bne.n	80107d2 <dhcp_delete_msg+0x4a>
 80107c4:	4b0c      	ldr	r3, [pc, #48]	; (80107f8 <dhcp_delete_msg+0x70>)
 80107c6:	f240 726f 	movw	r2, #1903	; 0x76f
 80107ca:	490f      	ldr	r1, [pc, #60]	; (8010808 <dhcp_delete_msg+0x80>)
 80107cc:	480c      	ldr	r0, [pc, #48]	; (8010800 <dhcp_delete_msg+0x78>)
 80107ce:	f005 fb05 	bl	8015ddc <iprintf>
  if (dhcp->p_out != NULL) {
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d004      	beq.n	80107e4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f8 f892 	bl	8008908 <pbuf_free>
  }
  dhcp->p_out = NULL;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	611a      	str	r2, [r3, #16]
}
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	080199ec 	.word	0x080199ec
 80107fc:	08019dec 	.word	0x08019dec
 8010800:	08019a4c 	.word	0x08019a4c
 8010804:	08019e0c 	.word	0x08019e0c
 8010808:	08019e34 	.word	0x08019e34

0801080c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d107      	bne.n	801082a <dhcp_option_trailer+0x1e>
 801081a:	4b24      	ldr	r3, [pc, #144]	; (80108ac <dhcp_option_trailer+0xa0>)
 801081c:	f240 7282 	movw	r2, #1922	; 0x782
 8010820:	4923      	ldr	r1, [pc, #140]	; (80108b0 <dhcp_option_trailer+0xa4>)
 8010822:	4824      	ldr	r0, [pc, #144]	; (80108b4 <dhcp_option_trailer+0xa8>)
 8010824:	f005 fada 	bl	8015ddc <iprintf>
 8010828:	e03c      	b.n	80108a4 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <dhcp_option_trailer+0x34>
 8010832:	4b1e      	ldr	r3, [pc, #120]	; (80108ac <dhcp_option_trailer+0xa0>)
 8010834:	f240 7283 	movw	r2, #1923	; 0x783
 8010838:	491f      	ldr	r1, [pc, #124]	; (80108b8 <dhcp_option_trailer+0xac>)
 801083a:	481e      	ldr	r0, [pc, #120]	; (80108b4 <dhcp_option_trailer+0xa8>)
 801083c:	f005 face 	bl	8015ddc <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	8a9b      	ldrh	r3, [r3, #20]
 8010844:	2b43      	cmp	r3, #67	; 0x43
 8010846:	d906      	bls.n	8010856 <dhcp_option_trailer+0x4a>
 8010848:	4b18      	ldr	r3, [pc, #96]	; (80108ac <dhcp_option_trailer+0xa0>)
 801084a:	f240 7284 	movw	r2, #1924	; 0x784
 801084e:	491b      	ldr	r1, [pc, #108]	; (80108bc <dhcp_option_trailer+0xb0>)
 8010850:	4818      	ldr	r0, [pc, #96]	; (80108b4 <dhcp_option_trailer+0xa8>)
 8010852:	f005 fac3 	bl	8015ddc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	691a      	ldr	r2, [r3, #16]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	8a9b      	ldrh	r3, [r3, #20]
 801085e:	1c59      	adds	r1, r3, #1
 8010860:	b288      	uxth	r0, r1
 8010862:	6879      	ldr	r1, [r7, #4]
 8010864:	8288      	strh	r0, [r1, #20]
 8010866:	4413      	add	r3, r2
 8010868:	22ff      	movs	r2, #255	; 0xff
 801086a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801086e:	e00b      	b.n	8010888 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	691a      	ldr	r2, [r3, #16]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	8a9b      	ldrh	r3, [r3, #20]
 8010878:	1c59      	adds	r1, r3, #1
 801087a:	b288      	uxth	r0, r1
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	8288      	strh	r0, [r1, #20]
 8010880:	4413      	add	r3, r2
 8010882:	2200      	movs	r2, #0
 8010884:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	8a9b      	ldrh	r3, [r3, #20]
 801088c:	2b43      	cmp	r3, #67	; 0x43
 801088e:	d905      	bls.n	801089c <dhcp_option_trailer+0x90>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	8a9b      	ldrh	r3, [r3, #20]
 8010894:	f003 0303 	and.w	r3, r3, #3
 8010898:	2b00      	cmp	r3, #0
 801089a:	d003      	beq.n	80108a4 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80108a0:	2b43      	cmp	r3, #67	; 0x43
 80108a2:	d9e5      	bls.n	8010870 <dhcp_option_trailer+0x64>
  }
}
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	080199ec 	.word	0x080199ec
 80108b0:	08019e5c 	.word	0x08019e5c
 80108b4:	08019a4c 	.word	0x08019a4c
 80108b8:	08019e80 	.word	0x08019e80
 80108bc:	08019eac 	.word	0x08019eac

080108c0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d017      	beq.n	80108fe <dhcp_supplied_address+0x3e>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6a1b      	ldr	r3, [r3, #32]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d013      	beq.n	80108fe <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6a1b      	ldr	r3, [r3, #32]
 80108da:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	7a5b      	ldrb	r3, [r3, #9]
 80108e0:	2b0a      	cmp	r3, #10
 80108e2:	d007      	beq.n	80108f4 <dhcp_supplied_address+0x34>
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	7a5b      	ldrb	r3, [r3, #9]
 80108e8:	2b05      	cmp	r3, #5
 80108ea:	d003      	beq.n	80108f4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80108f0:	2b04      	cmp	r3, #4
 80108f2:	d101      	bne.n	80108f8 <dhcp_supplied_address+0x38>
 80108f4:	2301      	movs	r3, #1
 80108f6:	e000      	b.n	80108fa <dhcp_supplied_address+0x3a>
 80108f8:	2300      	movs	r3, #0
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	e000      	b.n	8010900 <dhcp_supplied_address+0x40>
  }
  return 0;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010914:	4915      	ldr	r1, [pc, #84]	; (801096c <etharp_free_entry+0x60>)
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	4613      	mov	r3, r2
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	4413      	add	r3, r2
 801091e:	00db      	lsls	r3, r3, #3
 8010920:	440b      	add	r3, r1
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d013      	beq.n	8010950 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010928:	4910      	ldr	r1, [pc, #64]	; (801096c <etharp_free_entry+0x60>)
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	4613      	mov	r3, r2
 801092e:	005b      	lsls	r3, r3, #1
 8010930:	4413      	add	r3, r2
 8010932:	00db      	lsls	r3, r3, #3
 8010934:	440b      	add	r3, r1
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4618      	mov	r0, r3
 801093a:	f7f7 ffe5 	bl	8008908 <pbuf_free>
    arp_table[i].q = NULL;
 801093e:	490b      	ldr	r1, [pc, #44]	; (801096c <etharp_free_entry+0x60>)
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	4613      	mov	r3, r2
 8010944:	005b      	lsls	r3, r3, #1
 8010946:	4413      	add	r3, r2
 8010948:	00db      	lsls	r3, r3, #3
 801094a:	440b      	add	r3, r1
 801094c:	2200      	movs	r2, #0
 801094e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010950:	4906      	ldr	r1, [pc, #24]	; (801096c <etharp_free_entry+0x60>)
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	4613      	mov	r3, r2
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	4413      	add	r3, r2
 801095a:	00db      	lsls	r3, r3, #3
 801095c:	440b      	add	r3, r1
 801095e:	3314      	adds	r3, #20
 8010960:	2200      	movs	r2, #0
 8010962:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010964:	bf00      	nop
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	2000076c 	.word	0x2000076c

08010970 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010976:	2300      	movs	r3, #0
 8010978:	71fb      	strb	r3, [r7, #7]
 801097a:	e096      	b.n	8010aaa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801097c:	79fa      	ldrb	r2, [r7, #7]
 801097e:	494f      	ldr	r1, [pc, #316]	; (8010abc <etharp_tmr+0x14c>)
 8010980:	4613      	mov	r3, r2
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	4413      	add	r3, r2
 8010986:	00db      	lsls	r3, r3, #3
 8010988:	440b      	add	r3, r1
 801098a:	3314      	adds	r3, #20
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8010990:	79bb      	ldrb	r3, [r7, #6]
 8010992:	2b00      	cmp	r3, #0
 8010994:	f000 8086 	beq.w	8010aa4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8010998:	79fa      	ldrb	r2, [r7, #7]
 801099a:	4948      	ldr	r1, [pc, #288]	; (8010abc <etharp_tmr+0x14c>)
 801099c:	4613      	mov	r3, r2
 801099e:	005b      	lsls	r3, r3, #1
 80109a0:	4413      	add	r3, r2
 80109a2:	00db      	lsls	r3, r3, #3
 80109a4:	440b      	add	r3, r1
 80109a6:	3312      	adds	r3, #18
 80109a8:	881b      	ldrh	r3, [r3, #0]
 80109aa:	3301      	adds	r3, #1
 80109ac:	b298      	uxth	r0, r3
 80109ae:	4943      	ldr	r1, [pc, #268]	; (8010abc <etharp_tmr+0x14c>)
 80109b0:	4613      	mov	r3, r2
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	4413      	add	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	440b      	add	r3, r1
 80109ba:	3312      	adds	r3, #18
 80109bc:	4602      	mov	r2, r0
 80109be:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80109c0:	79fa      	ldrb	r2, [r7, #7]
 80109c2:	493e      	ldr	r1, [pc, #248]	; (8010abc <etharp_tmr+0x14c>)
 80109c4:	4613      	mov	r3, r2
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	4413      	add	r3, r2
 80109ca:	00db      	lsls	r3, r3, #3
 80109cc:	440b      	add	r3, r1
 80109ce:	3312      	adds	r3, #18
 80109d0:	881b      	ldrh	r3, [r3, #0]
 80109d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80109d6:	d215      	bcs.n	8010a04 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80109d8:	79fa      	ldrb	r2, [r7, #7]
 80109da:	4938      	ldr	r1, [pc, #224]	; (8010abc <etharp_tmr+0x14c>)
 80109dc:	4613      	mov	r3, r2
 80109de:	005b      	lsls	r3, r3, #1
 80109e0:	4413      	add	r3, r2
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	440b      	add	r3, r1
 80109e6:	3314      	adds	r3, #20
 80109e8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d10f      	bne.n	8010a0e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80109ee:	79fa      	ldrb	r2, [r7, #7]
 80109f0:	4932      	ldr	r1, [pc, #200]	; (8010abc <etharp_tmr+0x14c>)
 80109f2:	4613      	mov	r3, r2
 80109f4:	005b      	lsls	r3, r3, #1
 80109f6:	4413      	add	r3, r2
 80109f8:	00db      	lsls	r3, r3, #3
 80109fa:	440b      	add	r3, r1
 80109fc:	3312      	adds	r3, #18
 80109fe:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010a00:	2b04      	cmp	r3, #4
 8010a02:	d904      	bls.n	8010a0e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010a04:	79fb      	ldrb	r3, [r7, #7]
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7ff ff80 	bl	801090c <etharp_free_entry>
 8010a0c:	e04a      	b.n	8010aa4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010a0e:	79fa      	ldrb	r2, [r7, #7]
 8010a10:	492a      	ldr	r1, [pc, #168]	; (8010abc <etharp_tmr+0x14c>)
 8010a12:	4613      	mov	r3, r2
 8010a14:	005b      	lsls	r3, r3, #1
 8010a16:	4413      	add	r3, r2
 8010a18:	00db      	lsls	r3, r3, #3
 8010a1a:	440b      	add	r3, r1
 8010a1c:	3314      	adds	r3, #20
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	2b03      	cmp	r3, #3
 8010a22:	d10a      	bne.n	8010a3a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010a24:	79fa      	ldrb	r2, [r7, #7]
 8010a26:	4925      	ldr	r1, [pc, #148]	; (8010abc <etharp_tmr+0x14c>)
 8010a28:	4613      	mov	r3, r2
 8010a2a:	005b      	lsls	r3, r3, #1
 8010a2c:	4413      	add	r3, r2
 8010a2e:	00db      	lsls	r3, r3, #3
 8010a30:	440b      	add	r3, r1
 8010a32:	3314      	adds	r3, #20
 8010a34:	2204      	movs	r2, #4
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	e034      	b.n	8010aa4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010a3a:	79fa      	ldrb	r2, [r7, #7]
 8010a3c:	491f      	ldr	r1, [pc, #124]	; (8010abc <etharp_tmr+0x14c>)
 8010a3e:	4613      	mov	r3, r2
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	4413      	add	r3, r2
 8010a44:	00db      	lsls	r3, r3, #3
 8010a46:	440b      	add	r3, r1
 8010a48:	3314      	adds	r3, #20
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	d10a      	bne.n	8010a66 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010a50:	79fa      	ldrb	r2, [r7, #7]
 8010a52:	491a      	ldr	r1, [pc, #104]	; (8010abc <etharp_tmr+0x14c>)
 8010a54:	4613      	mov	r3, r2
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	4413      	add	r3, r2
 8010a5a:	00db      	lsls	r3, r3, #3
 8010a5c:	440b      	add	r3, r1
 8010a5e:	3314      	adds	r3, #20
 8010a60:	2202      	movs	r2, #2
 8010a62:	701a      	strb	r2, [r3, #0]
 8010a64:	e01e      	b.n	8010aa4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010a66:	79fa      	ldrb	r2, [r7, #7]
 8010a68:	4914      	ldr	r1, [pc, #80]	; (8010abc <etharp_tmr+0x14c>)
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	4413      	add	r3, r2
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	440b      	add	r3, r1
 8010a74:	3314      	adds	r3, #20
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d113      	bne.n	8010aa4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	490f      	ldr	r1, [pc, #60]	; (8010abc <etharp_tmr+0x14c>)
 8010a80:	4613      	mov	r3, r2
 8010a82:	005b      	lsls	r3, r3, #1
 8010a84:	4413      	add	r3, r2
 8010a86:	00db      	lsls	r3, r3, #3
 8010a88:	440b      	add	r3, r1
 8010a8a:	3308      	adds	r3, #8
 8010a8c:	6818      	ldr	r0, [r3, #0]
 8010a8e:	79fa      	ldrb	r2, [r7, #7]
 8010a90:	4613      	mov	r3, r2
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	4a08      	ldr	r2, [pc, #32]	; (8010abc <etharp_tmr+0x14c>)
 8010a9a:	4413      	add	r3, r2
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	f000 fe3c 	bl	801171c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	71fb      	strb	r3, [r7, #7]
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	2b09      	cmp	r3, #9
 8010aae:	f67f af65 	bls.w	801097c <etharp_tmr+0xc>
      }
    }
  }
}
 8010ab2:	bf00      	nop
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	2000076c 	.word	0x2000076c

08010ac0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b088      	sub	sp, #32
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	607a      	str	r2, [r7, #4]
 8010acc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010ace:	230a      	movs	r3, #10
 8010ad0:	77fb      	strb	r3, [r7, #31]
 8010ad2:	230a      	movs	r3, #10
 8010ad4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8010ad6:	230a      	movs	r3, #10
 8010ad8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8010ada:	2300      	movs	r3, #0
 8010adc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8010ade:	230a      	movs	r3, #10
 8010ae0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	833b      	strh	r3, [r7, #24]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	82fb      	strh	r3, [r7, #22]
 8010aea:	2300      	movs	r3, #0
 8010aec:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010aee:	2300      	movs	r3, #0
 8010af0:	773b      	strb	r3, [r7, #28]
 8010af2:	e093      	b.n	8010c1c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010af4:	7f3a      	ldrb	r2, [r7, #28]
 8010af6:	4990      	ldr	r1, [pc, #576]	; (8010d38 <etharp_find_entry+0x278>)
 8010af8:	4613      	mov	r3, r2
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	4413      	add	r3, r2
 8010afe:	00db      	lsls	r3, r3, #3
 8010b00:	440b      	add	r3, r1
 8010b02:	3314      	adds	r3, #20
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010b08:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010b0c:	2b0a      	cmp	r3, #10
 8010b0e:	d105      	bne.n	8010b1c <etharp_find_entry+0x5c>
 8010b10:	7cfb      	ldrb	r3, [r7, #19]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d102      	bne.n	8010b1c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8010b16:	7f3b      	ldrb	r3, [r7, #28]
 8010b18:	777b      	strb	r3, [r7, #29]
 8010b1a:	e07c      	b.n	8010c16 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010b1c:	7cfb      	ldrb	r3, [r7, #19]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d079      	beq.n	8010c16 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010b22:	7cfb      	ldrb	r3, [r7, #19]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d009      	beq.n	8010b3c <etharp_find_entry+0x7c>
 8010b28:	7cfb      	ldrb	r3, [r7, #19]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d806      	bhi.n	8010b3c <etharp_find_entry+0x7c>
 8010b2e:	4b83      	ldr	r3, [pc, #524]	; (8010d3c <etharp_find_entry+0x27c>)
 8010b30:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010b34:	4982      	ldr	r1, [pc, #520]	; (8010d40 <etharp_find_entry+0x280>)
 8010b36:	4883      	ldr	r0, [pc, #524]	; (8010d44 <etharp_find_entry+0x284>)
 8010b38:	f005 f950 	bl	8015ddc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00f      	beq.n	8010b62 <etharp_find_entry+0xa2>
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	6819      	ldr	r1, [r3, #0]
 8010b46:	7f3a      	ldrb	r2, [r7, #28]
 8010b48:	487b      	ldr	r0, [pc, #492]	; (8010d38 <etharp_find_entry+0x278>)
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4413      	add	r3, r2
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	4403      	add	r3, r0
 8010b54:	3304      	adds	r3, #4
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4299      	cmp	r1, r3
 8010b5a:	d102      	bne.n	8010b62 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010b5c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010b60:	e0e5      	b.n	8010d2e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010b62:	7cfb      	ldrb	r3, [r7, #19]
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d13b      	bne.n	8010be0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010b68:	7f3a      	ldrb	r2, [r7, #28]
 8010b6a:	4973      	ldr	r1, [pc, #460]	; (8010d38 <etharp_find_entry+0x278>)
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	4413      	add	r3, r2
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	440b      	add	r3, r1
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d018      	beq.n	8010bae <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8010b7c:	7f3a      	ldrb	r2, [r7, #28]
 8010b7e:	496e      	ldr	r1, [pc, #440]	; (8010d38 <etharp_find_entry+0x278>)
 8010b80:	4613      	mov	r3, r2
 8010b82:	005b      	lsls	r3, r3, #1
 8010b84:	4413      	add	r3, r2
 8010b86:	00db      	lsls	r3, r3, #3
 8010b88:	440b      	add	r3, r1
 8010b8a:	3312      	adds	r3, #18
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	8b3a      	ldrh	r2, [r7, #24]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d840      	bhi.n	8010c16 <etharp_find_entry+0x156>
            old_queue = i;
 8010b94:	7f3b      	ldrb	r3, [r7, #28]
 8010b96:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8010b98:	7f3a      	ldrb	r2, [r7, #28]
 8010b9a:	4967      	ldr	r1, [pc, #412]	; (8010d38 <etharp_find_entry+0x278>)
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	005b      	lsls	r3, r3, #1
 8010ba0:	4413      	add	r3, r2
 8010ba2:	00db      	lsls	r3, r3, #3
 8010ba4:	440b      	add	r3, r1
 8010ba6:	3312      	adds	r3, #18
 8010ba8:	881b      	ldrh	r3, [r3, #0]
 8010baa:	833b      	strh	r3, [r7, #24]
 8010bac:	e033      	b.n	8010c16 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010bae:	7f3a      	ldrb	r2, [r7, #28]
 8010bb0:	4961      	ldr	r1, [pc, #388]	; (8010d38 <etharp_find_entry+0x278>)
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	005b      	lsls	r3, r3, #1
 8010bb6:	4413      	add	r3, r2
 8010bb8:	00db      	lsls	r3, r3, #3
 8010bba:	440b      	add	r3, r1
 8010bbc:	3312      	adds	r3, #18
 8010bbe:	881b      	ldrh	r3, [r3, #0]
 8010bc0:	8afa      	ldrh	r2, [r7, #22]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d827      	bhi.n	8010c16 <etharp_find_entry+0x156>
            old_pending = i;
 8010bc6:	7f3b      	ldrb	r3, [r7, #28]
 8010bc8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8010bca:	7f3a      	ldrb	r2, [r7, #28]
 8010bcc:	495a      	ldr	r1, [pc, #360]	; (8010d38 <etharp_find_entry+0x278>)
 8010bce:	4613      	mov	r3, r2
 8010bd0:	005b      	lsls	r3, r3, #1
 8010bd2:	4413      	add	r3, r2
 8010bd4:	00db      	lsls	r3, r3, #3
 8010bd6:	440b      	add	r3, r1
 8010bd8:	3312      	adds	r3, #18
 8010bda:	881b      	ldrh	r3, [r3, #0]
 8010bdc:	82fb      	strh	r3, [r7, #22]
 8010bde:	e01a      	b.n	8010c16 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010be0:	7cfb      	ldrb	r3, [r7, #19]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d917      	bls.n	8010c16 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010be6:	7f3a      	ldrb	r2, [r7, #28]
 8010be8:	4953      	ldr	r1, [pc, #332]	; (8010d38 <etharp_find_entry+0x278>)
 8010bea:	4613      	mov	r3, r2
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	4413      	add	r3, r2
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	440b      	add	r3, r1
 8010bf4:	3312      	adds	r3, #18
 8010bf6:	881b      	ldrh	r3, [r3, #0]
 8010bf8:	8aba      	ldrh	r2, [r7, #20]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d80b      	bhi.n	8010c16 <etharp_find_entry+0x156>
            old_stable = i;
 8010bfe:	7f3b      	ldrb	r3, [r7, #28]
 8010c00:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010c02:	7f3a      	ldrb	r2, [r7, #28]
 8010c04:	494c      	ldr	r1, [pc, #304]	; (8010d38 <etharp_find_entry+0x278>)
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	440b      	add	r3, r1
 8010c10:	3312      	adds	r3, #18
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c16:	7f3b      	ldrb	r3, [r7, #28]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	773b      	strb	r3, [r7, #28]
 8010c1c:	7f3b      	ldrb	r3, [r7, #28]
 8010c1e:	2b09      	cmp	r3, #9
 8010c20:	f67f af68 	bls.w	8010af4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010c24:	7afb      	ldrb	r3, [r7, #11]
 8010c26:	f003 0302 	and.w	r3, r3, #2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d108      	bne.n	8010c40 <etharp_find_entry+0x180>
 8010c2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010c32:	2b0a      	cmp	r3, #10
 8010c34:	d107      	bne.n	8010c46 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010c36:	7afb      	ldrb	r3, [r7, #11]
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010c40:	f04f 33ff 	mov.w	r3, #4294967295
 8010c44:	e073      	b.n	8010d2e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010c46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010c4a:	2b09      	cmp	r3, #9
 8010c4c:	dc02      	bgt.n	8010c54 <etharp_find_entry+0x194>
    i = empty;
 8010c4e:	7f7b      	ldrb	r3, [r7, #29]
 8010c50:	773b      	strb	r3, [r7, #28]
 8010c52:	e036      	b.n	8010cc2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010c54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010c58:	2b09      	cmp	r3, #9
 8010c5a:	dc13      	bgt.n	8010c84 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8010c5c:	7fbb      	ldrb	r3, [r7, #30]
 8010c5e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010c60:	7f3a      	ldrb	r2, [r7, #28]
 8010c62:	4935      	ldr	r1, [pc, #212]	; (8010d38 <etharp_find_entry+0x278>)
 8010c64:	4613      	mov	r3, r2
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	4413      	add	r3, r2
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	440b      	add	r3, r1
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d018      	beq.n	8010ca6 <etharp_find_entry+0x1e6>
 8010c74:	4b31      	ldr	r3, [pc, #196]	; (8010d3c <etharp_find_entry+0x27c>)
 8010c76:	f240 126f 	movw	r2, #367	; 0x16f
 8010c7a:	4933      	ldr	r1, [pc, #204]	; (8010d48 <etharp_find_entry+0x288>)
 8010c7c:	4831      	ldr	r0, [pc, #196]	; (8010d44 <etharp_find_entry+0x284>)
 8010c7e:	f005 f8ad 	bl	8015ddc <iprintf>
 8010c82:	e010      	b.n	8010ca6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c88:	2b09      	cmp	r3, #9
 8010c8a:	dc02      	bgt.n	8010c92 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8010c8c:	7ffb      	ldrb	r3, [r7, #31]
 8010c8e:	773b      	strb	r3, [r7, #28]
 8010c90:	e009      	b.n	8010ca6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010c92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010c96:	2b09      	cmp	r3, #9
 8010c98:	dc02      	bgt.n	8010ca0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010c9a:	7efb      	ldrb	r3, [r7, #27]
 8010c9c:	773b      	strb	r3, [r7, #28]
 8010c9e:	e002      	b.n	8010ca6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8010ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca4:	e043      	b.n	8010d2e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010ca6:	7f3b      	ldrb	r3, [r7, #28]
 8010ca8:	2b09      	cmp	r3, #9
 8010caa:	d906      	bls.n	8010cba <etharp_find_entry+0x1fa>
 8010cac:	4b23      	ldr	r3, [pc, #140]	; (8010d3c <etharp_find_entry+0x27c>)
 8010cae:	f240 1281 	movw	r2, #385	; 0x181
 8010cb2:	4926      	ldr	r1, [pc, #152]	; (8010d4c <etharp_find_entry+0x28c>)
 8010cb4:	4823      	ldr	r0, [pc, #140]	; (8010d44 <etharp_find_entry+0x284>)
 8010cb6:	f005 f891 	bl	8015ddc <iprintf>
    etharp_free_entry(i);
 8010cba:	7f3b      	ldrb	r3, [r7, #28]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff fe25 	bl	801090c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010cc2:	7f3b      	ldrb	r3, [r7, #28]
 8010cc4:	2b09      	cmp	r3, #9
 8010cc6:	d906      	bls.n	8010cd6 <etharp_find_entry+0x216>
 8010cc8:	4b1c      	ldr	r3, [pc, #112]	; (8010d3c <etharp_find_entry+0x27c>)
 8010cca:	f240 1285 	movw	r2, #389	; 0x185
 8010cce:	491f      	ldr	r1, [pc, #124]	; (8010d4c <etharp_find_entry+0x28c>)
 8010cd0:	481c      	ldr	r0, [pc, #112]	; (8010d44 <etharp_find_entry+0x284>)
 8010cd2:	f005 f883 	bl	8015ddc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010cd6:	7f3a      	ldrb	r2, [r7, #28]
 8010cd8:	4917      	ldr	r1, [pc, #92]	; (8010d38 <etharp_find_entry+0x278>)
 8010cda:	4613      	mov	r3, r2
 8010cdc:	005b      	lsls	r3, r3, #1
 8010cde:	4413      	add	r3, r2
 8010ce0:	00db      	lsls	r3, r3, #3
 8010ce2:	440b      	add	r3, r1
 8010ce4:	3314      	adds	r3, #20
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d006      	beq.n	8010cfa <etharp_find_entry+0x23a>
 8010cec:	4b13      	ldr	r3, [pc, #76]	; (8010d3c <etharp_find_entry+0x27c>)
 8010cee:	f240 1287 	movw	r2, #391	; 0x187
 8010cf2:	4917      	ldr	r1, [pc, #92]	; (8010d50 <etharp_find_entry+0x290>)
 8010cf4:	4813      	ldr	r0, [pc, #76]	; (8010d44 <etharp_find_entry+0x284>)
 8010cf6:	f005 f871 	bl	8015ddc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00a      	beq.n	8010d16 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010d00:	7f3a      	ldrb	r2, [r7, #28]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	6819      	ldr	r1, [r3, #0]
 8010d06:	480c      	ldr	r0, [pc, #48]	; (8010d38 <etharp_find_entry+0x278>)
 8010d08:	4613      	mov	r3, r2
 8010d0a:	005b      	lsls	r3, r3, #1
 8010d0c:	4413      	add	r3, r2
 8010d0e:	00db      	lsls	r3, r3, #3
 8010d10:	4403      	add	r3, r0
 8010d12:	3304      	adds	r3, #4
 8010d14:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010d16:	7f3a      	ldrb	r2, [r7, #28]
 8010d18:	4907      	ldr	r1, [pc, #28]	; (8010d38 <etharp_find_entry+0x278>)
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	4413      	add	r3, r2
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	440b      	add	r3, r1
 8010d24:	3312      	adds	r3, #18
 8010d26:	2200      	movs	r2, #0
 8010d28:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8010d2a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3720      	adds	r7, #32
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	2000076c 	.word	0x2000076c
 8010d3c:	08019eec 	.word	0x08019eec
 8010d40:	08019f24 	.word	0x08019f24
 8010d44:	08019f64 	.word	0x08019f64
 8010d48:	08019f8c 	.word	0x08019f8c
 8010d4c:	08019fa4 	.word	0x08019fa4
 8010d50:	08019fb8 	.word	0x08019fb8

08010d54 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af02      	add	r7, sp, #8
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
 8010d60:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d68:	2b06      	cmp	r3, #6
 8010d6a:	d006      	beq.n	8010d7a <etharp_update_arp_entry+0x26>
 8010d6c:	4b48      	ldr	r3, [pc, #288]	; (8010e90 <etharp_update_arp_entry+0x13c>)
 8010d6e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010d72:	4948      	ldr	r1, [pc, #288]	; (8010e94 <etharp_update_arp_entry+0x140>)
 8010d74:	4848      	ldr	r0, [pc, #288]	; (8010e98 <etharp_update_arp_entry+0x144>)
 8010d76:	f005 f831 	bl	8015ddc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d012      	beq.n	8010da6 <etharp_update_arp_entry+0x52>
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d00e      	beq.n	8010da6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	68f9      	ldr	r1, [r7, #12]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f001 f8fc 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 8010d94:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d105      	bne.n	8010da6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010da2:	2be0      	cmp	r3, #224	; 0xe0
 8010da4:	d102      	bne.n	8010dac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010da6:	f06f 030f 	mvn.w	r3, #15
 8010daa:	e06c      	b.n	8010e86 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010dac:	78fb      	ldrb	r3, [r7, #3]
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	4619      	mov	r1, r3
 8010db2:	68b8      	ldr	r0, [r7, #8]
 8010db4:	f7ff fe84 	bl	8010ac0 <etharp_find_entry>
 8010db8:	4603      	mov	r3, r0
 8010dba:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	da02      	bge.n	8010dca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010dc8:	e05d      	b.n	8010e86 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010dca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010dce:	4933      	ldr	r1, [pc, #204]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	4413      	add	r3, r2
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	440b      	add	r3, r1
 8010dda:	3314      	adds	r3, #20
 8010ddc:	2202      	movs	r2, #2
 8010dde:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010de0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010de4:	492d      	ldr	r1, [pc, #180]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010de6:	4613      	mov	r3, r2
 8010de8:	005b      	lsls	r3, r3, #1
 8010dea:	4413      	add	r3, r2
 8010dec:	00db      	lsls	r3, r3, #3
 8010dee:	440b      	add	r3, r1
 8010df0:	3308      	adds	r3, #8
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8010df6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4413      	add	r3, r2
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	3308      	adds	r3, #8
 8010e04:	4a25      	ldr	r2, [pc, #148]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010e06:	4413      	add	r3, r2
 8010e08:	3304      	adds	r3, #4
 8010e0a:	2206      	movs	r2, #6
 8010e0c:	6879      	ldr	r1, [r7, #4]
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f004 fb75 	bl	80154fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010e14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010e18:	4920      	ldr	r1, [pc, #128]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	440b      	add	r3, r1
 8010e24:	3312      	adds	r3, #18
 8010e26:	2200      	movs	r2, #0
 8010e28:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010e2a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010e2e:	491b      	ldr	r1, [pc, #108]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010e30:	4613      	mov	r3, r2
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	4413      	add	r3, r2
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	440b      	add	r3, r1
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d021      	beq.n	8010e84 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010e40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010e44:	4915      	ldr	r1, [pc, #84]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010e46:	4613      	mov	r3, r2
 8010e48:	005b      	lsls	r3, r3, #1
 8010e4a:	4413      	add	r3, r2
 8010e4c:	00db      	lsls	r3, r3, #3
 8010e4e:	440b      	add	r3, r1
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010e54:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010e58:	4910      	ldr	r1, [pc, #64]	; (8010e9c <etharp_update_arp_entry+0x148>)
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	005b      	lsls	r3, r3, #1
 8010e5e:	4413      	add	r3, r2
 8010e60:	00db      	lsls	r3, r3, #3
 8010e62:	440b      	add	r3, r1
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e72:	9300      	str	r3, [sp, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6939      	ldr	r1, [r7, #16]
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f001 ff29 	bl	8012cd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010e7e:	6938      	ldr	r0, [r7, #16]
 8010e80:	f7f7 fd42 	bl	8008908 <pbuf_free>
  }
  return ERR_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	08019eec 	.word	0x08019eec
 8010e94:	08019fe4 	.word	0x08019fe4
 8010e98:	08019f64 	.word	0x08019f64
 8010e9c:	2000076c 	.word	0x2000076c

08010ea0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	73fb      	strb	r3, [r7, #15]
 8010eac:	e01f      	b.n	8010eee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8010eae:	7bfa      	ldrb	r2, [r7, #15]
 8010eb0:	4912      	ldr	r1, [pc, #72]	; (8010efc <etharp_cleanup_netif+0x5c>)
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	4413      	add	r3, r2
 8010eb8:	00db      	lsls	r3, r3, #3
 8010eba:	440b      	add	r3, r1
 8010ebc:	3314      	adds	r3, #20
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010ec2:	7bbb      	ldrb	r3, [r7, #14]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00f      	beq.n	8010ee8 <etharp_cleanup_netif+0x48>
 8010ec8:	7bfa      	ldrb	r2, [r7, #15]
 8010eca:	490c      	ldr	r1, [pc, #48]	; (8010efc <etharp_cleanup_netif+0x5c>)
 8010ecc:	4613      	mov	r3, r2
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	4413      	add	r3, r2
 8010ed2:	00db      	lsls	r3, r3, #3
 8010ed4:	440b      	add	r3, r1
 8010ed6:	3308      	adds	r3, #8
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d103      	bne.n	8010ee8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8010ee0:	7bfb      	ldrb	r3, [r7, #15]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7ff fd12 	bl	801090c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ee8:	7bfb      	ldrb	r3, [r7, #15]
 8010eea:	3301      	adds	r3, #1
 8010eec:	73fb      	strb	r3, [r7, #15]
 8010eee:	7bfb      	ldrb	r3, [r7, #15]
 8010ef0:	2b09      	cmp	r3, #9
 8010ef2:	d9dc      	bls.n	8010eae <etharp_cleanup_netif+0xe>
    }
  }
}
 8010ef4:	bf00      	nop
 8010ef6:	3710      	adds	r7, #16
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	2000076c 	.word	0x2000076c

08010f00 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010f00:	b5b0      	push	{r4, r5, r7, lr}
 8010f02:	b08a      	sub	sp, #40	; 0x28
 8010f04:	af04      	add	r7, sp, #16
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d107      	bne.n	8010f20 <etharp_input+0x20>
 8010f10:	4b3f      	ldr	r3, [pc, #252]	; (8011010 <etharp_input+0x110>)
 8010f12:	f44f 7222 	mov.w	r2, #648	; 0x288
 8010f16:	493f      	ldr	r1, [pc, #252]	; (8011014 <etharp_input+0x114>)
 8010f18:	483f      	ldr	r0, [pc, #252]	; (8011018 <etharp_input+0x118>)
 8010f1a:	f004 ff5f 	bl	8015ddc <iprintf>
 8010f1e:	e074      	b.n	801100a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f30:	d10c      	bne.n	8010f4c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010f36:	2b06      	cmp	r3, #6
 8010f38:	d108      	bne.n	8010f4c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010f3e:	2b04      	cmp	r3, #4
 8010f40:	d104      	bne.n	8010f4c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	885b      	ldrh	r3, [r3, #2]
 8010f46:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010f48:	2b08      	cmp	r3, #8
 8010f4a:	d003      	beq.n	8010f54 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7f7 fcdb 	bl	8008908 <pbuf_free>
    return;
 8010f52:	e05a      	b.n	801100a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	330e      	adds	r3, #14
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	3318      	adds	r3, #24
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	3304      	adds	r3, #4
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d102      	bne.n	8010f74 <etharp_input+0x74>
    for_us = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	75fb      	strb	r3, [r7, #23]
 8010f72:	e009      	b.n	8010f88 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	3304      	adds	r3, #4
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	bf0c      	ite	eq
 8010f80:	2301      	moveq	r3, #1
 8010f82:	2300      	movne	r3, #0
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	f103 0208 	add.w	r2, r3, #8
 8010f8e:	7dfb      	ldrb	r3, [r7, #23]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d001      	beq.n	8010f98 <etharp_input+0x98>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <etharp_input+0x9a>
 8010f98:	2302      	movs	r3, #2
 8010f9a:	f107 010c 	add.w	r1, r7, #12
 8010f9e:	6838      	ldr	r0, [r7, #0]
 8010fa0:	f7ff fed8 	bl	8010d54 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	88db      	ldrh	r3, [r3, #6]
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fae:	d003      	beq.n	8010fb8 <etharp_input+0xb8>
 8010fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fb4:	d01e      	beq.n	8010ff4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8010fb6:	e025      	b.n	8011004 <etharp_input+0x104>
    if (for_us) {
 8010fb8:	7dfb      	ldrb	r3, [r7, #23]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d021      	beq.n	8011002 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8010fd4:	693a      	ldr	r2, [r7, #16]
 8010fd6:	3208      	adds	r2, #8
      etharp_raw(netif,
 8010fd8:	2102      	movs	r1, #2
 8010fda:	9103      	str	r1, [sp, #12]
 8010fdc:	f107 010c 	add.w	r1, r7, #12
 8010fe0:	9102      	str	r1, [sp, #8]
 8010fe2:	9201      	str	r2, [sp, #4]
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	462b      	mov	r3, r5
 8010fe8:	4622      	mov	r2, r4
 8010fea:	4601      	mov	r1, r0
 8010fec:	6838      	ldr	r0, [r7, #0]
 8010fee:	f000 fae7 	bl	80115c0 <etharp_raw>
    break;
 8010ff2:	e006      	b.n	8011002 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8010ff4:	f107 030c 	add.w	r3, r7, #12
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6838      	ldr	r0, [r7, #0]
 8010ffc:	f7fe f980 	bl	800f300 <dhcp_arp_reply>
    break;
 8011000:	e000      	b.n	8011004 <etharp_input+0x104>
    break;
 8011002:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7f7 fc7f 	bl	8008908 <pbuf_free>
}
 801100a:	3718      	adds	r7, #24
 801100c:	46bd      	mov	sp, r7
 801100e:	bdb0      	pop	{r4, r5, r7, pc}
 8011010:	08019eec 	.word	0x08019eec
 8011014:	0801a03c 	.word	0x0801a03c
 8011018:	08019f64 	.word	0x08019f64

0801101c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b086      	sub	sp, #24
 8011020:	af02      	add	r7, sp, #8
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	4613      	mov	r3, r2
 8011028:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801102a:	79fa      	ldrb	r2, [r7, #7]
 801102c:	4944      	ldr	r1, [pc, #272]	; (8011140 <etharp_output_to_arp_index+0x124>)
 801102e:	4613      	mov	r3, r2
 8011030:	005b      	lsls	r3, r3, #1
 8011032:	4413      	add	r3, r2
 8011034:	00db      	lsls	r3, r3, #3
 8011036:	440b      	add	r3, r1
 8011038:	3314      	adds	r3, #20
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	2b01      	cmp	r3, #1
 801103e:	d806      	bhi.n	801104e <etharp_output_to_arp_index+0x32>
 8011040:	4b40      	ldr	r3, [pc, #256]	; (8011144 <etharp_output_to_arp_index+0x128>)
 8011042:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011046:	4940      	ldr	r1, [pc, #256]	; (8011148 <etharp_output_to_arp_index+0x12c>)
 8011048:	4840      	ldr	r0, [pc, #256]	; (801114c <etharp_output_to_arp_index+0x130>)
 801104a:	f004 fec7 	bl	8015ddc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801104e:	79fa      	ldrb	r2, [r7, #7]
 8011050:	493b      	ldr	r1, [pc, #236]	; (8011140 <etharp_output_to_arp_index+0x124>)
 8011052:	4613      	mov	r3, r2
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	4413      	add	r3, r2
 8011058:	00db      	lsls	r3, r3, #3
 801105a:	440b      	add	r3, r1
 801105c:	3314      	adds	r3, #20
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	2b02      	cmp	r3, #2
 8011062:	d153      	bne.n	801110c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011064:	79fa      	ldrb	r2, [r7, #7]
 8011066:	4936      	ldr	r1, [pc, #216]	; (8011140 <etharp_output_to_arp_index+0x124>)
 8011068:	4613      	mov	r3, r2
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	4413      	add	r3, r2
 801106e:	00db      	lsls	r3, r3, #3
 8011070:	440b      	add	r3, r1
 8011072:	3312      	adds	r3, #18
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801107a:	d919      	bls.n	80110b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801107c:	79fa      	ldrb	r2, [r7, #7]
 801107e:	4613      	mov	r3, r2
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	4413      	add	r3, r2
 8011084:	00db      	lsls	r3, r3, #3
 8011086:	4a2e      	ldr	r2, [pc, #184]	; (8011140 <etharp_output_to_arp_index+0x124>)
 8011088:	4413      	add	r3, r2
 801108a:	3304      	adds	r3, #4
 801108c:	4619      	mov	r1, r3
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 fb44 	bl	801171c <etharp_request>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d138      	bne.n	801110c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801109a:	79fa      	ldrb	r2, [r7, #7]
 801109c:	4928      	ldr	r1, [pc, #160]	; (8011140 <etharp_output_to_arp_index+0x124>)
 801109e:	4613      	mov	r3, r2
 80110a0:	005b      	lsls	r3, r3, #1
 80110a2:	4413      	add	r3, r2
 80110a4:	00db      	lsls	r3, r3, #3
 80110a6:	440b      	add	r3, r1
 80110a8:	3314      	adds	r3, #20
 80110aa:	2203      	movs	r2, #3
 80110ac:	701a      	strb	r2, [r3, #0]
 80110ae:	e02d      	b.n	801110c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80110b0:	79fa      	ldrb	r2, [r7, #7]
 80110b2:	4923      	ldr	r1, [pc, #140]	; (8011140 <etharp_output_to_arp_index+0x124>)
 80110b4:	4613      	mov	r3, r2
 80110b6:	005b      	lsls	r3, r3, #1
 80110b8:	4413      	add	r3, r2
 80110ba:	00db      	lsls	r3, r3, #3
 80110bc:	440b      	add	r3, r1
 80110be:	3312      	adds	r3, #18
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80110c6:	d321      	bcc.n	801110c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80110c8:	79fa      	ldrb	r2, [r7, #7]
 80110ca:	4613      	mov	r3, r2
 80110cc:	005b      	lsls	r3, r3, #1
 80110ce:	4413      	add	r3, r2
 80110d0:	00db      	lsls	r3, r3, #3
 80110d2:	4a1b      	ldr	r2, [pc, #108]	; (8011140 <etharp_output_to_arp_index+0x124>)
 80110d4:	4413      	add	r3, r2
 80110d6:	1d19      	adds	r1, r3, #4
 80110d8:	79fa      	ldrb	r2, [r7, #7]
 80110da:	4613      	mov	r3, r2
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	4413      	add	r3, r2
 80110e0:	00db      	lsls	r3, r3, #3
 80110e2:	3308      	adds	r3, #8
 80110e4:	4a16      	ldr	r2, [pc, #88]	; (8011140 <etharp_output_to_arp_index+0x124>)
 80110e6:	4413      	add	r3, r2
 80110e8:	3304      	adds	r3, #4
 80110ea:	461a      	mov	r2, r3
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 faf3 	bl	80116d8 <etharp_request_dst>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d109      	bne.n	801110c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80110f8:	79fa      	ldrb	r2, [r7, #7]
 80110fa:	4911      	ldr	r1, [pc, #68]	; (8011140 <etharp_output_to_arp_index+0x124>)
 80110fc:	4613      	mov	r3, r2
 80110fe:	005b      	lsls	r3, r3, #1
 8011100:	4413      	add	r3, r2
 8011102:	00db      	lsls	r3, r3, #3
 8011104:	440b      	add	r3, r1
 8011106:	3314      	adds	r3, #20
 8011108:	2203      	movs	r2, #3
 801110a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8011112:	79fa      	ldrb	r2, [r7, #7]
 8011114:	4613      	mov	r3, r2
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	4413      	add	r3, r2
 801111a:	00db      	lsls	r3, r3, #3
 801111c:	3308      	adds	r3, #8
 801111e:	4a08      	ldr	r2, [pc, #32]	; (8011140 <etharp_output_to_arp_index+0x124>)
 8011120:	4413      	add	r3, r2
 8011122:	1d1a      	adds	r2, r3, #4
 8011124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	4613      	mov	r3, r2
 801112c:	460a      	mov	r2, r1
 801112e:	68b9      	ldr	r1, [r7, #8]
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f001 fdcd 	bl	8012cd0 <ethernet_output>
 8011136:	4603      	mov	r3, r0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	2000076c 	.word	0x2000076c
 8011144:	08019eec 	.word	0x08019eec
 8011148:	0801a05c 	.word	0x0801a05c
 801114c:	08019f64 	.word	0x08019f64

08011150 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b08a      	sub	sp, #40	; 0x28
 8011154:	af02      	add	r7, sp, #8
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d106      	bne.n	8011174 <etharp_output+0x24>
 8011166:	4b69      	ldr	r3, [pc, #420]	; (801130c <etharp_output+0x1bc>)
 8011168:	f240 321b 	movw	r2, #795	; 0x31b
 801116c:	4968      	ldr	r1, [pc, #416]	; (8011310 <etharp_output+0x1c0>)
 801116e:	4869      	ldr	r0, [pc, #420]	; (8011314 <etharp_output+0x1c4>)
 8011170:	f004 fe34 	bl	8015ddc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d106      	bne.n	8011188 <etharp_output+0x38>
 801117a:	4b64      	ldr	r3, [pc, #400]	; (801130c <etharp_output+0x1bc>)
 801117c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011180:	4965      	ldr	r1, [pc, #404]	; (8011318 <etharp_output+0x1c8>)
 8011182:	4864      	ldr	r0, [pc, #400]	; (8011314 <etharp_output+0x1c4>)
 8011184:	f004 fe2a 	bl	8015ddc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <etharp_output+0x4c>
 801118e:	4b5f      	ldr	r3, [pc, #380]	; (801130c <etharp_output+0x1bc>)
 8011190:	f240 321d 	movw	r2, #797	; 0x31d
 8011194:	4961      	ldr	r1, [pc, #388]	; (801131c <etharp_output+0x1cc>)
 8011196:	485f      	ldr	r0, [pc, #380]	; (8011314 <etharp_output+0x1c4>)
 8011198:	f004 fe20 	bl	8015ddc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	68f9      	ldr	r1, [r7, #12]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f000 fef2 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d002      	beq.n	80111b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80111ae:	4b5c      	ldr	r3, [pc, #368]	; (8011320 <etharp_output+0x1d0>)
 80111b0:	61fb      	str	r3, [r7, #28]
 80111b2:	e09b      	b.n	80112ec <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80111bc:	2be0      	cmp	r3, #224	; 0xe0
 80111be:	d118      	bne.n	80111f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80111c0:	2301      	movs	r3, #1
 80111c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80111c4:	2300      	movs	r3, #0
 80111c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80111c8:	235e      	movs	r3, #94	; 0x5e
 80111ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	3301      	adds	r3, #1
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3302      	adds	r3, #2
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	3303      	adds	r3, #3
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80111ea:	f107 0310 	add.w	r3, r7, #16
 80111ee:	61fb      	str	r3, [r7, #28]
 80111f0:	e07c      	b.n	80112ec <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	3304      	adds	r3, #4
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	405a      	eors	r2, r3
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	3308      	adds	r3, #8
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	4013      	ands	r3, r2
 8011206:	2b00      	cmp	r3, #0
 8011208:	d012      	beq.n	8011230 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011210:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011214:	4293      	cmp	r3, r2
 8011216:	d00b      	beq.n	8011230 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	330c      	adds	r3, #12
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d003      	beq.n	801122a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	330c      	adds	r3, #12
 8011226:	61bb      	str	r3, [r7, #24]
 8011228:	e002      	b.n	8011230 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801122a:	f06f 0303 	mvn.w	r3, #3
 801122e:	e069      	b.n	8011304 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011230:	4b3c      	ldr	r3, [pc, #240]	; (8011324 <etharp_output+0x1d4>)
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	4619      	mov	r1, r3
 8011236:	4a3c      	ldr	r2, [pc, #240]	; (8011328 <etharp_output+0x1d8>)
 8011238:	460b      	mov	r3, r1
 801123a:	005b      	lsls	r3, r3, #1
 801123c:	440b      	add	r3, r1
 801123e:	00db      	lsls	r3, r3, #3
 8011240:	4413      	add	r3, r2
 8011242:	3314      	adds	r3, #20
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	2b01      	cmp	r3, #1
 8011248:	d917      	bls.n	801127a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	4b35      	ldr	r3, [pc, #212]	; (8011324 <etharp_output+0x1d4>)
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	4618      	mov	r0, r3
 8011254:	4934      	ldr	r1, [pc, #208]	; (8011328 <etharp_output+0x1d8>)
 8011256:	4603      	mov	r3, r0
 8011258:	005b      	lsls	r3, r3, #1
 801125a:	4403      	add	r3, r0
 801125c:	00db      	lsls	r3, r3, #3
 801125e:	440b      	add	r3, r1
 8011260:	3304      	adds	r3, #4
 8011262:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011264:	429a      	cmp	r2, r3
 8011266:	d108      	bne.n	801127a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011268:	4b2e      	ldr	r3, [pc, #184]	; (8011324 <etharp_output+0x1d4>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	461a      	mov	r2, r3
 801126e:	68b9      	ldr	r1, [r7, #8]
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f7ff fed3 	bl	801101c <etharp_output_to_arp_index>
 8011276:	4603      	mov	r3, r0
 8011278:	e044      	b.n	8011304 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801127a:	2300      	movs	r3, #0
 801127c:	75fb      	strb	r3, [r7, #23]
 801127e:	e02a      	b.n	80112d6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011280:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011284:	4928      	ldr	r1, [pc, #160]	; (8011328 <etharp_output+0x1d8>)
 8011286:	4613      	mov	r3, r2
 8011288:	005b      	lsls	r3, r3, #1
 801128a:	4413      	add	r3, r2
 801128c:	00db      	lsls	r3, r3, #3
 801128e:	440b      	add	r3, r1
 8011290:	3314      	adds	r3, #20
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d918      	bls.n	80112ca <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	6819      	ldr	r1, [r3, #0]
 801129c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80112a0:	4821      	ldr	r0, [pc, #132]	; (8011328 <etharp_output+0x1d8>)
 80112a2:	4613      	mov	r3, r2
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	4413      	add	r3, r2
 80112a8:	00db      	lsls	r3, r3, #3
 80112aa:	4403      	add	r3, r0
 80112ac:	3304      	adds	r3, #4
 80112ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80112b0:	4299      	cmp	r1, r3
 80112b2:	d10a      	bne.n	80112ca <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80112b4:	7dfa      	ldrb	r2, [r7, #23]
 80112b6:	4b1b      	ldr	r3, [pc, #108]	; (8011324 <etharp_output+0x1d4>)
 80112b8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80112ba:	7dfb      	ldrb	r3, [r7, #23]
 80112bc:	461a      	mov	r2, r3
 80112be:	68b9      	ldr	r1, [r7, #8]
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f7ff feab 	bl	801101c <etharp_output_to_arp_index>
 80112c6:	4603      	mov	r3, r0
 80112c8:	e01c      	b.n	8011304 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80112ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	3301      	adds	r3, #1
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	75fb      	strb	r3, [r7, #23]
 80112d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112da:	2b09      	cmp	r3, #9
 80112dc:	ddd0      	ble.n	8011280 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	69b9      	ldr	r1, [r7, #24]
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f000 f822 	bl	801132c <etharp_query>
 80112e8:	4603      	mov	r3, r0
 80112ea:	e00b      	b.n	8011304 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80112f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	68b9      	ldr	r1, [r7, #8]
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f001 fce7 	bl	8012cd0 <ethernet_output>
 8011302:	4603      	mov	r3, r0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3720      	adds	r7, #32
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	08019eec 	.word	0x08019eec
 8011310:	0801a03c 	.word	0x0801a03c
 8011314:	08019f64 	.word	0x08019f64
 8011318:	0801a08c 	.word	0x0801a08c
 801131c:	0801a02c 	.word	0x0801a02c
 8011320:	0801b838 	.word	0x0801b838
 8011324:	2000085c 	.word	0x2000085c
 8011328:	2000076c 	.word	0x2000076c

0801132c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08c      	sub	sp, #48	; 0x30
 8011330:	af02      	add	r7, sp, #8
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	3329      	adds	r3, #41	; 0x29
 801133c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801133e:	23ff      	movs	r3, #255	; 0xff
 8011340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011344:	2300      	movs	r3, #0
 8011346:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	68f9      	ldr	r1, [r7, #12]
 801134e:	4618      	mov	r0, r3
 8011350:	f000 fe1c 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10c      	bne.n	8011374 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011362:	2be0      	cmp	r3, #224	; 0xe0
 8011364:	d006      	beq.n	8011374 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d003      	beq.n	8011374 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d102      	bne.n	801137a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011374:	f06f 030f 	mvn.w	r3, #15
 8011378:	e10f      	b.n	801159a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801137a:	68fa      	ldr	r2, [r7, #12]
 801137c:	2101      	movs	r1, #1
 801137e:	68b8      	ldr	r0, [r7, #8]
 8011380:	f7ff fb9e 	bl	8010ac0 <etharp_find_entry>
 8011384:	4603      	mov	r3, r0
 8011386:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8011388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801138c:	2b00      	cmp	r3, #0
 801138e:	da02      	bge.n	8011396 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8011390:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011394:	e101      	b.n	801159a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011396:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801139a:	4982      	ldr	r1, [pc, #520]	; (80115a4 <etharp_query+0x278>)
 801139c:	4613      	mov	r3, r2
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	4413      	add	r3, r2
 80113a2:	00db      	lsls	r3, r3, #3
 80113a4:	440b      	add	r3, r1
 80113a6:	3314      	adds	r3, #20
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d117      	bne.n	80113de <etharp_query+0xb2>
    is_new_entry = 1;
 80113ae:	2301      	movs	r3, #1
 80113b0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80113b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113b6:	497b      	ldr	r1, [pc, #492]	; (80115a4 <etharp_query+0x278>)
 80113b8:	4613      	mov	r3, r2
 80113ba:	005b      	lsls	r3, r3, #1
 80113bc:	4413      	add	r3, r2
 80113be:	00db      	lsls	r3, r3, #3
 80113c0:	440b      	add	r3, r1
 80113c2:	3314      	adds	r3, #20
 80113c4:	2201      	movs	r2, #1
 80113c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80113c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113cc:	4975      	ldr	r1, [pc, #468]	; (80115a4 <etharp_query+0x278>)
 80113ce:	4613      	mov	r3, r2
 80113d0:	005b      	lsls	r3, r3, #1
 80113d2:	4413      	add	r3, r2
 80113d4:	00db      	lsls	r3, r3, #3
 80113d6:	440b      	add	r3, r1
 80113d8:	3308      	adds	r3, #8
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80113de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113e2:	4970      	ldr	r1, [pc, #448]	; (80115a4 <etharp_query+0x278>)
 80113e4:	4613      	mov	r3, r2
 80113e6:	005b      	lsls	r3, r3, #1
 80113e8:	4413      	add	r3, r2
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	440b      	add	r3, r1
 80113ee:	3314      	adds	r3, #20
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d012      	beq.n	801141c <etharp_query+0xf0>
 80113f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113fa:	496a      	ldr	r1, [pc, #424]	; (80115a4 <etharp_query+0x278>)
 80113fc:	4613      	mov	r3, r2
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	4413      	add	r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	440b      	add	r3, r1
 8011406:	3314      	adds	r3, #20
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	2b01      	cmp	r3, #1
 801140c:	d806      	bhi.n	801141c <etharp_query+0xf0>
 801140e:	4b66      	ldr	r3, [pc, #408]	; (80115a8 <etharp_query+0x27c>)
 8011410:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011414:	4965      	ldr	r1, [pc, #404]	; (80115ac <etharp_query+0x280>)
 8011416:	4866      	ldr	r0, [pc, #408]	; (80115b0 <etharp_query+0x284>)
 8011418:	f004 fce0 	bl	8015ddc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801141c:	6a3b      	ldr	r3, [r7, #32]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d102      	bne.n	8011428 <etharp_query+0xfc>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10c      	bne.n	8011442 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011428:	68b9      	ldr	r1, [r7, #8]
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f000 f976 	bl	801171c <etharp_request>
 8011430:	4603      	mov	r3, r0
 8011432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d102      	bne.n	8011442 <etharp_query+0x116>
      return result;
 801143c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011440:	e0ab      	b.n	801159a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d106      	bne.n	8011456 <etharp_query+0x12a>
 8011448:	4b57      	ldr	r3, [pc, #348]	; (80115a8 <etharp_query+0x27c>)
 801144a:	f240 32db 	movw	r2, #987	; 0x3db
 801144e:	4959      	ldr	r1, [pc, #356]	; (80115b4 <etharp_query+0x288>)
 8011450:	4857      	ldr	r0, [pc, #348]	; (80115b0 <etharp_query+0x284>)
 8011452:	f004 fcc3 	bl	8015ddc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011456:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801145a:	4952      	ldr	r1, [pc, #328]	; (80115a4 <etharp_query+0x278>)
 801145c:	4613      	mov	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	4413      	add	r3, r2
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	440b      	add	r3, r1
 8011466:	3314      	adds	r3, #20
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	2b01      	cmp	r3, #1
 801146c:	d919      	bls.n	80114a2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801146e:	7cfa      	ldrb	r2, [r7, #19]
 8011470:	4b51      	ldr	r3, [pc, #324]	; (80115b8 <etharp_query+0x28c>)
 8011472:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011474:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011478:	4613      	mov	r3, r2
 801147a:	005b      	lsls	r3, r3, #1
 801147c:	4413      	add	r3, r2
 801147e:	00db      	lsls	r3, r3, #3
 8011480:	3308      	adds	r3, #8
 8011482:	4a48      	ldr	r2, [pc, #288]	; (80115a4 <etharp_query+0x278>)
 8011484:	4413      	add	r3, r2
 8011486:	1d1a      	adds	r2, r3, #4
 8011488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	4613      	mov	r3, r2
 8011490:	697a      	ldr	r2, [r7, #20]
 8011492:	6879      	ldr	r1, [r7, #4]
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f001 fc1b 	bl	8012cd0 <ethernet_output>
 801149a:	4603      	mov	r3, r0
 801149c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80114a0:	e079      	b.n	8011596 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80114a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80114a6:	493f      	ldr	r1, [pc, #252]	; (80115a4 <etharp_query+0x278>)
 80114a8:	4613      	mov	r3, r2
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	4413      	add	r3, r2
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	440b      	add	r3, r1
 80114b2:	3314      	adds	r3, #20
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d16d      	bne.n	8011596 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80114c2:	e01a      	b.n	80114fa <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	895a      	ldrh	r2, [r3, #10]
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	891b      	ldrh	r3, [r3, #8]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d10a      	bne.n	80114e6 <etharp_query+0x1ba>
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d006      	beq.n	80114e6 <etharp_query+0x1ba>
 80114d8:	4b33      	ldr	r3, [pc, #204]	; (80115a8 <etharp_query+0x27c>)
 80114da:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80114de:	4937      	ldr	r1, [pc, #220]	; (80115bc <etharp_query+0x290>)
 80114e0:	4833      	ldr	r0, [pc, #204]	; (80115b0 <etharp_query+0x284>)
 80114e2:	f004 fc7b 	bl	8015ddc <iprintf>
      if (p->type != PBUF_ROM) {
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	7b1b      	ldrb	r3, [r3, #12]
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d002      	beq.n	80114f4 <etharp_query+0x1c8>
        copy_needed = 1;
 80114ee:	2301      	movs	r3, #1
 80114f0:	61bb      	str	r3, [r7, #24]
        break;
 80114f2:	e005      	b.n	8011500 <etharp_query+0x1d4>
      }
      p = p->next;
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1e1      	bne.n	80114c4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d017      	beq.n	8011536 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	891b      	ldrh	r3, [r3, #8]
 801150a:	2200      	movs	r2, #0
 801150c:	4619      	mov	r1, r3
 801150e:	2002      	movs	r0, #2
 8011510:	f7f6 fe88 	bl	8008224 <pbuf_alloc>
 8011514:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d011      	beq.n	8011540 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801151c:	6879      	ldr	r1, [r7, #4]
 801151e:	69f8      	ldr	r0, [r7, #28]
 8011520:	f7f7 fb26 	bl	8008b70 <pbuf_copy>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00a      	beq.n	8011540 <etharp_query+0x214>
          pbuf_free(p);
 801152a:	69f8      	ldr	r0, [r7, #28]
 801152c:	f7f7 f9ec 	bl	8008908 <pbuf_free>
          p = NULL;
 8011530:	2300      	movs	r3, #0
 8011532:	61fb      	str	r3, [r7, #28]
 8011534:	e004      	b.n	8011540 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801153a:	69f8      	ldr	r0, [r7, #28]
 801153c:	f7f7 fa90 	bl	8008a60 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011540:	69fb      	ldr	r3, [r7, #28]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d024      	beq.n	8011590 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011546:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801154a:	4916      	ldr	r1, [pc, #88]	; (80115a4 <etharp_query+0x278>)
 801154c:	4613      	mov	r3, r2
 801154e:	005b      	lsls	r3, r3, #1
 8011550:	4413      	add	r3, r2
 8011552:	00db      	lsls	r3, r3, #3
 8011554:	440b      	add	r3, r1
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00b      	beq.n	8011574 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801155c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011560:	4910      	ldr	r1, [pc, #64]	; (80115a4 <etharp_query+0x278>)
 8011562:	4613      	mov	r3, r2
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	4413      	add	r3, r2
 8011568:	00db      	lsls	r3, r3, #3
 801156a:	440b      	add	r3, r1
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4618      	mov	r0, r3
 8011570:	f7f7 f9ca 	bl	8008908 <pbuf_free>
      }
      arp_table[i].q = p;
 8011574:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011578:	490a      	ldr	r1, [pc, #40]	; (80115a4 <etharp_query+0x278>)
 801157a:	4613      	mov	r3, r2
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	4413      	add	r3, r2
 8011580:	00db      	lsls	r3, r3, #3
 8011582:	440b      	add	r3, r1
 8011584:	69fa      	ldr	r2, [r7, #28]
 8011586:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011588:	2300      	movs	r3, #0
 801158a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801158e:	e002      	b.n	8011596 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011590:	23ff      	movs	r3, #255	; 0xff
 8011592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011596:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801159a:	4618      	mov	r0, r3
 801159c:	3728      	adds	r7, #40	; 0x28
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	2000076c 	.word	0x2000076c
 80115a8:	08019eec 	.word	0x08019eec
 80115ac:	0801a098 	.word	0x0801a098
 80115b0:	08019f64 	.word	0x08019f64
 80115b4:	0801a08c 	.word	0x0801a08c
 80115b8:	2000085c 	.word	0x2000085c
 80115bc:	0801a0c0 	.word	0x0801a0c0

080115c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08a      	sub	sp, #40	; 0x28
 80115c4:	af02      	add	r7, sp, #8
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
 80115cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d106      	bne.n	80115e6 <etharp_raw+0x26>
 80115d8:	4b3a      	ldr	r3, [pc, #232]	; (80116c4 <etharp_raw+0x104>)
 80115da:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80115de:	493a      	ldr	r1, [pc, #232]	; (80116c8 <etharp_raw+0x108>)
 80115e0:	483a      	ldr	r0, [pc, #232]	; (80116cc <etharp_raw+0x10c>)
 80115e2:	f004 fbfb 	bl	8015ddc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80115e6:	2200      	movs	r2, #0
 80115e8:	211c      	movs	r1, #28
 80115ea:	2002      	movs	r0, #2
 80115ec:	f7f6 fe1a 	bl	8008224 <pbuf_alloc>
 80115f0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d102      	bne.n	80115fe <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80115f8:	f04f 33ff 	mov.w	r3, #4294967295
 80115fc:	e05d      	b.n	80116ba <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	895b      	ldrh	r3, [r3, #10]
 8011602:	2b1b      	cmp	r3, #27
 8011604:	d806      	bhi.n	8011614 <etharp_raw+0x54>
 8011606:	4b2f      	ldr	r3, [pc, #188]	; (80116c4 <etharp_raw+0x104>)
 8011608:	f240 4264 	movw	r2, #1124	; 0x464
 801160c:	4930      	ldr	r1, [pc, #192]	; (80116d0 <etharp_raw+0x110>)
 801160e:	482f      	ldr	r0, [pc, #188]	; (80116cc <etharp_raw+0x10c>)
 8011610:	f004 fbe4 	bl	8015ddc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801161a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801161c:	4618      	mov	r0, r3
 801161e:	f7f5 ffdd 	bl	80075dc <lwip_htons>
 8011622:	4603      	mov	r3, r0
 8011624:	461a      	mov	r2, r3
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011630:	2b06      	cmp	r3, #6
 8011632:	d006      	beq.n	8011642 <etharp_raw+0x82>
 8011634:	4b23      	ldr	r3, [pc, #140]	; (80116c4 <etharp_raw+0x104>)
 8011636:	f240 426b 	movw	r2, #1131	; 0x46b
 801163a:	4926      	ldr	r1, [pc, #152]	; (80116d4 <etharp_raw+0x114>)
 801163c:	4823      	ldr	r0, [pc, #140]	; (80116cc <etharp_raw+0x10c>)
 801163e:	f004 fbcd 	bl	8015ddc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	3308      	adds	r3, #8
 8011646:	2206      	movs	r2, #6
 8011648:	6839      	ldr	r1, [r7, #0]
 801164a:	4618      	mov	r0, r3
 801164c:	f003 ff57 	bl	80154fe <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	3312      	adds	r3, #18
 8011654:	2206      	movs	r2, #6
 8011656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011658:	4618      	mov	r0, r3
 801165a:	f003 ff50 	bl	80154fe <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	330e      	adds	r3, #14
 8011662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011664:	6812      	ldr	r2, [r2, #0]
 8011666:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	3318      	adds	r3, #24
 801166c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801166e:	6812      	ldr	r2, [r2, #0]
 8011670:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	2200      	movs	r2, #0
 8011676:	701a      	strb	r2, [r3, #0]
 8011678:	2200      	movs	r2, #0
 801167a:	f042 0201 	orr.w	r2, r2, #1
 801167e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	2200      	movs	r2, #0
 8011684:	f042 0208 	orr.w	r2, r2, #8
 8011688:	709a      	strb	r2, [r3, #2]
 801168a:	2200      	movs	r2, #0
 801168c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	2206      	movs	r2, #6
 8011692:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	2204      	movs	r2, #4
 8011698:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801169a:	f640 0306 	movw	r3, #2054	; 0x806
 801169e:	9300      	str	r3, [sp, #0]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	69b9      	ldr	r1, [r7, #24]
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	f001 fb12 	bl	8012cd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80116ac:	69b8      	ldr	r0, [r7, #24]
 80116ae:	f7f7 f92b 	bl	8008908 <pbuf_free>
  p = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80116b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3720      	adds	r7, #32
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	08019eec 	.word	0x08019eec
 80116c8:	0801a03c 	.word	0x0801a03c
 80116cc:	08019f64 	.word	0x08019f64
 80116d0:	0801a0dc 	.word	0x0801a0dc
 80116d4:	0801a110 	.word	0x0801a110

080116d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b088      	sub	sp, #32
 80116dc:	af04      	add	r7, sp, #16
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116f4:	2201      	movs	r2, #1
 80116f6:	9203      	str	r2, [sp, #12]
 80116f8:	68ba      	ldr	r2, [r7, #8]
 80116fa:	9202      	str	r2, [sp, #8]
 80116fc:	4a06      	ldr	r2, [pc, #24]	; (8011718 <etharp_request_dst+0x40>)
 80116fe:	9201      	str	r2, [sp, #4]
 8011700:	9300      	str	r3, [sp, #0]
 8011702:	4603      	mov	r3, r0
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f7ff ff5a 	bl	80115c0 <etharp_raw>
 801170c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	0801b840 	.word	0x0801b840

0801171c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011726:	4a05      	ldr	r2, [pc, #20]	; (801173c <etharp_request+0x20>)
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f7ff ffd4 	bl	80116d8 <etharp_request_dst>
 8011730:	4603      	mov	r3, r0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	0801b838 	.word	0x0801b838

08011740 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b08e      	sub	sp, #56	; 0x38
 8011744:	af04      	add	r7, sp, #16
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801174a:	4b7a      	ldr	r3, [pc, #488]	; (8011934 <icmp_input+0x1f4>)
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	b29b      	uxth	r3, r3
 8011756:	f003 030f 	and.w	r3, r3, #15
 801175a:	b29b      	uxth	r3, r3
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011762:	2b13      	cmp	r3, #19
 8011764:	f240 80d1 	bls.w	801190a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	895b      	ldrh	r3, [r3, #10]
 801176c:	2b03      	cmp	r3, #3
 801176e:	f240 80ce 	bls.w	801190e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801177c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011780:	2b00      	cmp	r3, #0
 8011782:	f000 80bb 	beq.w	80118fc <icmp_input+0x1bc>
 8011786:	2b08      	cmp	r3, #8
 8011788:	f040 80bb 	bne.w	8011902 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801178c:	4b6a      	ldr	r3, [pc, #424]	; (8011938 <icmp_input+0x1f8>)
 801178e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011790:	4b68      	ldr	r3, [pc, #416]	; (8011934 <icmp_input+0x1f4>)
 8011792:	695b      	ldr	r3, [r3, #20]
 8011794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011798:	2be0      	cmp	r3, #224	; 0xe0
 801179a:	f000 80bf 	beq.w	801191c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801179e:	4b65      	ldr	r3, [pc, #404]	; (8011934 <icmp_input+0x1f4>)
 80117a0:	695a      	ldr	r2, [r3, #20]
 80117a2:	4b64      	ldr	r3, [pc, #400]	; (8011934 <icmp_input+0x1f4>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4619      	mov	r1, r3
 80117a8:	4610      	mov	r0, r2
 80117aa:	f000 fbef 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f040 80b5 	bne.w	8011920 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	891b      	ldrh	r3, [r3, #8]
 80117ba:	2b07      	cmp	r3, #7
 80117bc:	f240 80a9 	bls.w	8011912 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80117c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117c2:	330e      	adds	r3, #14
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	b21b      	sxth	r3, r3
 80117c8:	4619      	mov	r1, r3
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f7f7 f878 	bl	80088c0 <pbuf_header>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d046      	beq.n	8011864 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	891a      	ldrh	r2, [r3, #8]
 80117da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117dc:	4413      	add	r3, r2
 80117de:	b29b      	uxth	r3, r3
 80117e0:	2200      	movs	r2, #0
 80117e2:	4619      	mov	r1, r3
 80117e4:	2002      	movs	r0, #2
 80117e6:	f7f6 fd1d 	bl	8008224 <pbuf_alloc>
 80117ea:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80117ec:	69bb      	ldr	r3, [r7, #24]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f000 8098 	beq.w	8011924 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80117f4:	69bb      	ldr	r3, [r7, #24]
 80117f6:	895b      	ldrh	r3, [r3, #10]
 80117f8:	461a      	mov	r2, r3
 80117fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117fc:	3308      	adds	r3, #8
 80117fe:	429a      	cmp	r2, r3
 8011800:	d203      	bcs.n	801180a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011802:	69b8      	ldr	r0, [r7, #24]
 8011804:	f7f7 f880 	bl	8008908 <pbuf_free>
        goto icmperr;
 8011808:	e08d      	b.n	8011926 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011812:	4618      	mov	r0, r3
 8011814:	f003 fe73 	bl	80154fe <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8011818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801181a:	425b      	negs	r3, r3
 801181c:	b29b      	uxth	r3, r3
 801181e:	b21b      	sxth	r3, r3
 8011820:	4619      	mov	r1, r3
 8011822:	69b8      	ldr	r0, [r7, #24]
 8011824:	f7f7 f84c 	bl	80088c0 <pbuf_header>
 8011828:	4603      	mov	r3, r0
 801182a:	2b00      	cmp	r3, #0
 801182c:	d009      	beq.n	8011842 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801182e:	4b43      	ldr	r3, [pc, #268]	; (801193c <icmp_input+0x1fc>)
 8011830:	22af      	movs	r2, #175	; 0xaf
 8011832:	4943      	ldr	r1, [pc, #268]	; (8011940 <icmp_input+0x200>)
 8011834:	4843      	ldr	r0, [pc, #268]	; (8011944 <icmp_input+0x204>)
 8011836:	f004 fad1 	bl	8015ddc <iprintf>
        pbuf_free(r);
 801183a:	69b8      	ldr	r0, [r7, #24]
 801183c:	f7f7 f864 	bl	8008908 <pbuf_free>
        goto icmperr;
 8011840:	e071      	b.n	8011926 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011842:	6879      	ldr	r1, [r7, #4]
 8011844:	69b8      	ldr	r0, [r7, #24]
 8011846:	f7f7 f993 	bl	8008b70 <pbuf_copy>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d003      	beq.n	8011858 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011850:	69b8      	ldr	r0, [r7, #24]
 8011852:	f7f7 f859 	bl	8008908 <pbuf_free>
        goto icmperr;
 8011856:	e066      	b.n	8011926 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7f7 f855 	bl	8008908 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	607b      	str	r3, [r7, #4]
 8011862:	e015      	b.n	8011890 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011866:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801186a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801186e:	33f2      	adds	r3, #242	; 0xf2
 8011870:	b29b      	uxth	r3, r3
 8011872:	b21b      	sxth	r3, r3
 8011874:	4619      	mov	r1, r3
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7f7 f822 	bl	80088c0 <pbuf_header>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d006      	beq.n	8011890 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011882:	4b2e      	ldr	r3, [pc, #184]	; (801193c <icmp_input+0x1fc>)
 8011884:	22c0      	movs	r2, #192	; 0xc0
 8011886:	4930      	ldr	r1, [pc, #192]	; (8011948 <icmp_input+0x208>)
 8011888:	482e      	ldr	r0, [pc, #184]	; (8011944 <icmp_input+0x204>)
 801188a:	f004 faa7 	bl	8015ddc <iprintf>
        goto icmperr;
 801188e:	e04a      	b.n	8011926 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8011896:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801189a:	4619      	mov	r1, r3
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7f7 f80f 	bl	80088c0 <pbuf_header>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d12b      	bne.n	8011900 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80118b6:	4b1f      	ldr	r3, [pc, #124]	; (8011934 <icmp_input+0x1f4>)
 80118b8:	691a      	ldr	r2, [r3, #16]
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	2200      	movs	r2, #0
 80118c2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	2200      	movs	r2, #0
 80118c8:	709a      	strb	r2, [r3, #2]
 80118ca:	2200      	movs	r2, #0
 80118cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	22ff      	movs	r2, #255	; 0xff
 80118d2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	2200      	movs	r2, #0
 80118d8:	729a      	strb	r2, [r3, #10]
 80118da:	2200      	movs	r2, #0
 80118dc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	9302      	str	r3, [sp, #8]
 80118e2:	2301      	movs	r3, #1
 80118e4:	9301      	str	r3, [sp, #4]
 80118e6:	2300      	movs	r3, #0
 80118e8:	9300      	str	r3, [sp, #0]
 80118ea:	23ff      	movs	r3, #255	; 0xff
 80118ec:	2200      	movs	r2, #0
 80118ee:	69f9      	ldr	r1, [r7, #28]
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fa79 	bl	8011de8 <ip4_output_if>
 80118f6:	4603      	mov	r3, r0
 80118f8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80118fa:	e001      	b.n	8011900 <icmp_input+0x1c0>
    break;
 80118fc:	bf00      	nop
 80118fe:	e000      	b.n	8011902 <icmp_input+0x1c2>
    break;
 8011900:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7f7 f800 	bl	8008908 <pbuf_free>
  return;
 8011908:	e011      	b.n	801192e <icmp_input+0x1ee>
    goto lenerr;
 801190a:	bf00      	nop
 801190c:	e002      	b.n	8011914 <icmp_input+0x1d4>
    goto lenerr;
 801190e:	bf00      	nop
 8011910:	e000      	b.n	8011914 <icmp_input+0x1d4>
      goto lenerr;
 8011912:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f7f6 fff7 	bl	8008908 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801191a:	e008      	b.n	801192e <icmp_input+0x1ee>
      goto icmperr;
 801191c:	bf00      	nop
 801191e:	e002      	b.n	8011926 <icmp_input+0x1e6>
      goto icmperr;
 8011920:	bf00      	nop
 8011922:	e000      	b.n	8011926 <icmp_input+0x1e6>
        goto icmperr;
 8011924:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7f6 ffee 	bl	8008908 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801192c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801192e:	3728      	adds	r7, #40	; 0x28
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	20000938 	.word	0x20000938
 8011938:	2000094c 	.word	0x2000094c
 801193c:	0801a154 	.word	0x0801a154
 8011940:	0801a18c 	.word	0x0801a18c
 8011944:	0801a1c4 	.word	0x0801a1c4
 8011948:	0801a1ec 	.word	0x0801a1ec

0801194c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011958:	78fb      	ldrb	r3, [r7, #3]
 801195a:	461a      	mov	r2, r3
 801195c:	2103      	movs	r1, #3
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f000 f814 	bl	801198c <icmp_send_response>
}
 8011964:	bf00      	nop
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	460b      	mov	r3, r1
 8011976:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011978:	78fb      	ldrb	r3, [r7, #3]
 801197a:	461a      	mov	r2, r3
 801197c:	210b      	movs	r1, #11
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f000 f804 	bl	801198c <icmp_send_response>
}
 8011984:	bf00      	nop
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b08c      	sub	sp, #48	; 0x30
 8011990:	af04      	add	r7, sp, #16
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	460b      	mov	r3, r1
 8011996:	70fb      	strb	r3, [r7, #3]
 8011998:	4613      	mov	r3, r2
 801199a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801199c:	2200      	movs	r2, #0
 801199e:	2124      	movs	r1, #36	; 0x24
 80119a0:	2001      	movs	r0, #1
 80119a2:	f7f6 fc3f 	bl	8008224 <pbuf_alloc>
 80119a6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d04c      	beq.n	8011a48 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	895b      	ldrh	r3, [r3, #10]
 80119b2:	2b23      	cmp	r3, #35	; 0x23
 80119b4:	d806      	bhi.n	80119c4 <icmp_send_response+0x38>
 80119b6:	4b26      	ldr	r3, [pc, #152]	; (8011a50 <icmp_send_response+0xc4>)
 80119b8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80119bc:	4925      	ldr	r1, [pc, #148]	; (8011a54 <icmp_send_response+0xc8>)
 80119be:	4826      	ldr	r0, [pc, #152]	; (8011a58 <icmp_send_response+0xcc>)
 80119c0:	f004 fa0c 	bl	8015ddc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	78fa      	ldrb	r2, [r7, #3]
 80119d4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	78ba      	ldrb	r2, [r7, #2]
 80119da:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	2200      	movs	r2, #0
 80119e0:	711a      	strb	r2, [r3, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2200      	movs	r2, #0
 80119ea:	719a      	strb	r2, [r3, #6]
 80119ec:	2200      	movs	r2, #0
 80119ee:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	f103 0008 	add.w	r0, r3, #8
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	221c      	movs	r2, #28
 80119fe:	4619      	mov	r1, r3
 8011a00:	f003 fd7d 	bl	80154fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011a0a:	f107 030c 	add.w	r3, r7, #12
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f000 f824 	bl	8011a5c <ip4_route>
 8011a14:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d011      	beq.n	8011a40 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	709a      	strb	r2, [r3, #2]
 8011a22:	2200      	movs	r2, #0
 8011a24:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011a26:	f107 020c 	add.w	r2, r7, #12
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	9302      	str	r3, [sp, #8]
 8011a2e:	2301      	movs	r3, #1
 8011a30:	9301      	str	r3, [sp, #4]
 8011a32:	2300      	movs	r3, #0
 8011a34:	9300      	str	r3, [sp, #0]
 8011a36:	23ff      	movs	r3, #255	; 0xff
 8011a38:	2100      	movs	r1, #0
 8011a3a:	69f8      	ldr	r0, [r7, #28]
 8011a3c:	f000 f9d4 	bl	8011de8 <ip4_output_if>
  }
  pbuf_free(q);
 8011a40:	69f8      	ldr	r0, [r7, #28]
 8011a42:	f7f6 ff61 	bl	8008908 <pbuf_free>
 8011a46:	e000      	b.n	8011a4a <icmp_send_response+0xbe>
    return;
 8011a48:	bf00      	nop
}
 8011a4a:	3720      	adds	r7, #32
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	0801a154 	.word	0x0801a154
 8011a54:	0801a220 	.word	0x0801a220
 8011a58:	0801a1c4 	.word	0x0801a1c4

08011a5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b085      	sub	sp, #20
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011a64:	4b30      	ldr	r3, [pc, #192]	; (8011b28 <ip4_route+0xcc>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	e036      	b.n	8011ada <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a72:	f003 0301 	and.w	r3, r3, #1
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d02b      	beq.n	8011ad4 <ip4_route+0x78>
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a82:	089b      	lsrs	r3, r3, #2
 8011a84:	f003 0301 	and.w	r3, r3, #1
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d022      	beq.n	8011ad4 <ip4_route+0x78>
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	3304      	adds	r3, #4
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d01d      	beq.n	8011ad4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	405a      	eors	r2, r3
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	3308      	adds	r3, #8
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4013      	ands	r3, r2
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	e033      	b.n	8011b1c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011aba:	f003 0302 	and.w	r3, r3, #2
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d108      	bne.n	8011ad4 <ip4_route+0x78>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	330c      	adds	r3, #12
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d101      	bne.n	8011ad4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	e023      	b.n	8011b1c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	60fb      	str	r3, [r7, #12]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d1c5      	bne.n	8011a6c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ae0:	4b12      	ldr	r3, [pc, #72]	; (8011b2c <ip4_route+0xd0>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d015      	beq.n	8011b14 <ip4_route+0xb8>
 8011ae8:	4b10      	ldr	r3, [pc, #64]	; (8011b2c <ip4_route+0xd0>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011af0:	f003 0301 	and.w	r3, r3, #1
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00d      	beq.n	8011b14 <ip4_route+0xb8>
 8011af8:	4b0c      	ldr	r3, [pc, #48]	; (8011b2c <ip4_route+0xd0>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011b00:	f003 0304 	and.w	r3, r3, #4
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d005      	beq.n	8011b14 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8011b08:	4b08      	ldr	r3, [pc, #32]	; (8011b2c <ip4_route+0xd0>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	3304      	adds	r3, #4
 8011b0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d101      	bne.n	8011b18 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011b14:	2300      	movs	r3, #0
 8011b16:	e001      	b.n	8011b1c <ip4_route+0xc0>
  }

  return netif_default;
 8011b18:	4b04      	ldr	r3, [pc, #16]	; (8011b2c <ip4_route+0xd0>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3714      	adds	r7, #20
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr
 8011b28:	20007210 	.word	0x20007210
 8011b2c:	20007214 	.word	0x20007214

08011b30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b088      	sub	sp, #32
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	091b      	lsrs	r3, r3, #4
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d004      	beq.n	8011b5a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f7f6 fed9 	bl	8008908 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011b56:	2300      	movs	r3, #0
 8011b58:	e13e      	b.n	8011dd8 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	f003 030f 	and.w	r3, r3, #15
 8011b64:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8011b66:	89fb      	ldrh	r3, [r7, #14]
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	885b      	ldrh	r3, [r3, #2]
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7f5 fd32 	bl	80075dc <lwip_htons>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	891b      	ldrh	r3, [r3, #8]
 8011b80:	89ba      	ldrh	r2, [r7, #12]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d204      	bcs.n	8011b90 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8011b86:	89bb      	ldrh	r3, [r7, #12]
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7f6 fd48 	bl	8008620 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	895b      	ldrh	r3, [r3, #10]
 8011b94:	89fa      	ldrh	r2, [r7, #14]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d807      	bhi.n	8011baa <ip4_input+0x7a>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	891b      	ldrh	r3, [r3, #8]
 8011b9e:	89ba      	ldrh	r2, [r7, #12]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d802      	bhi.n	8011baa <ip4_input+0x7a>
 8011ba4:	89fb      	ldrh	r3, [r7, #14]
 8011ba6:	2b13      	cmp	r3, #19
 8011ba8:	d804      	bhi.n	8011bb4 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7f6 feac 	bl	8008908 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	e111      	b.n	8011dd8 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	691b      	ldr	r3, [r3, #16]
 8011bb8:	4a89      	ldr	r2, [pc, #548]	; (8011de0 <ip4_input+0x2b0>)
 8011bba:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	4a87      	ldr	r2, [pc, #540]	; (8011de0 <ip4_input+0x2b0>)
 8011bc2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011bc4:	4b86      	ldr	r3, [pc, #536]	; (8011de0 <ip4_input+0x2b0>)
 8011bc6:	695b      	ldr	r3, [r3, #20]
 8011bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bcc:	2be0      	cmp	r3, #224	; 0xe0
 8011bce:	d112      	bne.n	8011bf6 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011bd6:	f003 0301 	and.w	r3, r3, #1
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d007      	beq.n	8011bf0 <ip4_input+0xc0>
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	3304      	adds	r3, #4
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <ip4_input+0xc0>
      netif = inp;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	61bb      	str	r3, [r7, #24]
 8011bee:	e041      	b.n	8011c74 <ip4_input+0x144>
    } else {
      netif = NULL;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	61bb      	str	r3, [r7, #24]
 8011bf4:	e03e      	b.n	8011c74 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	613b      	str	r3, [r7, #16]
    netif = inp;
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011c04:	f003 0301 	and.w	r3, r3, #1
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d014      	beq.n	8011c38 <ip4_input+0x108>
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	3304      	adds	r3, #4
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d00f      	beq.n	8011c38 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011c18:	4b71      	ldr	r3, [pc, #452]	; (8011de0 <ip4_input+0x2b0>)
 8011c1a:	695a      	ldr	r2, [r3, #20]
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	3304      	adds	r3, #4
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d026      	beq.n	8011c74 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011c26:	4b6e      	ldr	r3, [pc, #440]	; (8011de0 <ip4_input+0x2b0>)
 8011c28:	695b      	ldr	r3, [r3, #20]
 8011c2a:	69b9      	ldr	r1, [r7, #24]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f000 f9ad 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 8011c32:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d11d      	bne.n	8011c74 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00d      	beq.n	8011c5a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011c3e:	4b68      	ldr	r3, [pc, #416]	; (8011de0 <ip4_input+0x2b0>)
 8011c40:	695b      	ldr	r3, [r3, #20]
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	2b7f      	cmp	r3, #127	; 0x7f
 8011c46:	d102      	bne.n	8011c4e <ip4_input+0x11e>
          netif = NULL;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	61bb      	str	r3, [r7, #24]
          break;
 8011c4c:	e012      	b.n	8011c74 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8011c52:	4b64      	ldr	r3, [pc, #400]	; (8011de4 <ip4_input+0x2b4>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	61bb      	str	r3, [r7, #24]
 8011c58:	e002      	b.n	8011c60 <ip4_input+0x130>
      } else {
        netif = netif->next;
 8011c5a:	69bb      	ldr	r3, [r7, #24]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8011c60:	69ba      	ldr	r2, [r7, #24]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d102      	bne.n	8011c6e <ip4_input+0x13e>
        netif = netif->next;
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d1c4      	bne.n	8011bfe <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d111      	bne.n	8011c9e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011c7a:	69fb      	ldr	r3, [r7, #28]
 8011c7c:	7a5b      	ldrb	r3, [r3, #9]
 8011c7e:	2b11      	cmp	r3, #17
 8011c80:	d10d      	bne.n	8011c9e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8011c82:	89fb      	ldrh	r3, [r7, #14]
 8011c84:	69fa      	ldr	r2, [r7, #28]
 8011c86:	4413      	add	r3, r2
 8011c88:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	885b      	ldrh	r3, [r3, #2]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011c94:	d103      	bne.n	8011c9e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d017      	beq.n	8011cd4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011ca4:	4b4e      	ldr	r3, [pc, #312]	; (8011de0 <ip4_input+0x2b0>)
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d013      	beq.n	8011cd4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011cac:	4b4c      	ldr	r3, [pc, #304]	; (8011de0 <ip4_input+0x2b0>)
 8011cae:	691b      	ldr	r3, [r3, #16]
 8011cb0:	6839      	ldr	r1, [r7, #0]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f000 f96a 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d105      	bne.n	8011cca <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011cbe:	4b48      	ldr	r3, [pc, #288]	; (8011de0 <ip4_input+0x2b0>)
 8011cc0:	691b      	ldr	r3, [r3, #16]
 8011cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011cc6:	2be0      	cmp	r3, #224	; 0xe0
 8011cc8:	d104      	bne.n	8011cd4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7f6 fe1c 	bl	8008908 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e081      	b.n	8011dd8 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d104      	bne.n	8011ce4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7f6 fe14 	bl	8008908 <pbuf_free>
    return ERR_OK;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	e079      	b.n	8011dd8 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	88db      	ldrh	r3, [r3, #6]
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	461a      	mov	r2, r3
 8011cec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011cf0:	4013      	ands	r3, r2
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d00b      	beq.n	8011d0e <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 fc8e 	bl	8012618 <ip4_reass>
 8011cfc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <ip4_input+0x1d8>
      return ERR_OK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	e067      	b.n	8011dd8 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011d0e:	4a34      	ldr	r2, [pc, #208]	; (8011de0 <ip4_input+0x2b0>)
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011d14:	4a32      	ldr	r2, [pc, #200]	; (8011de0 <ip4_input+0x2b0>)
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011d1a:	4a31      	ldr	r2, [pc, #196]	; (8011de0 <ip4_input+0x2b0>)
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	f003 030f 	and.w	r3, r3, #15
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	4b2b      	ldr	r3, [pc, #172]	; (8011de0 <ip4_input+0x2b0>)
 8011d32:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011d34:	89fb      	ldrh	r3, [r7, #14]
 8011d36:	425b      	negs	r3, r3
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	b21b      	sxth	r3, r3
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f7f6 fdbe 	bl	80088c0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	7a5b      	ldrb	r3, [r3, #9]
 8011d48:	2b06      	cmp	r3, #6
 8011d4a:	d009      	beq.n	8011d60 <ip4_input+0x230>
 8011d4c:	2b11      	cmp	r3, #17
 8011d4e:	d002      	beq.n	8011d56 <ip4_input+0x226>
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d00a      	beq.n	8011d6a <ip4_input+0x23a>
 8011d54:	e00e      	b.n	8011d74 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7fc fc11 	bl	800e580 <udp_input>
      break;
 8011d5e:	e028      	b.n	8011db2 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7f8 fc7e 	bl	800a664 <tcp_input>
      break;
 8011d68:	e023      	b.n	8011db2 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8011d6a:	6839      	ldr	r1, [r7, #0]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7ff fce7 	bl	8011740 <icmp_input>
      break;
 8011d72:	e01e      	b.n	8011db2 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d74:	4b1a      	ldr	r3, [pc, #104]	; (8011de0 <ip4_input+0x2b0>)
 8011d76:	695b      	ldr	r3, [r3, #20]
 8011d78:	69b9      	ldr	r1, [r7, #24]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 f906 	bl	8011f8c <ip4_addr_isbroadcast_u32>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d112      	bne.n	8011dac <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d86:	4b16      	ldr	r3, [pc, #88]	; (8011de0 <ip4_input+0x2b0>)
 8011d88:	695b      	ldr	r3, [r3, #20]
 8011d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d8e:	2be0      	cmp	r3, #224	; 0xe0
 8011d90:	d00c      	beq.n	8011dac <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8011d92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011d96:	4619      	mov	r1, r3
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7f6 fda3 	bl	80088e4 <pbuf_header_force>
        p->payload = iphdr;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	69fa      	ldr	r2, [r7, #28]
 8011da2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011da4:	2102      	movs	r1, #2
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7ff fdd0 	bl	801194c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7f6 fdab 	bl	8008908 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011db2:	4b0b      	ldr	r3, [pc, #44]	; (8011de0 <ip4_input+0x2b0>)
 8011db4:	2200      	movs	r2, #0
 8011db6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011db8:	4b09      	ldr	r3, [pc, #36]	; (8011de0 <ip4_input+0x2b0>)
 8011dba:	2200      	movs	r2, #0
 8011dbc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011dbe:	4b08      	ldr	r3, [pc, #32]	; (8011de0 <ip4_input+0x2b0>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011dc4:	4b06      	ldr	r3, [pc, #24]	; (8011de0 <ip4_input+0x2b0>)
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011dca:	4b05      	ldr	r3, [pc, #20]	; (8011de0 <ip4_input+0x2b0>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011dd0:	4b03      	ldr	r3, [pc, #12]	; (8011de0 <ip4_input+0x2b0>)
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3720      	adds	r7, #32
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	20000938 	.word	0x20000938
 8011de4:	20007210 	.word	0x20007210

08011de8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08a      	sub	sp, #40	; 0x28
 8011dec:	af04      	add	r7, sp, #16
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d009      	beq.n	8011e14 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d003      	beq.n	8011e0e <ip4_output_if+0x26>
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d102      	bne.n	8011e14 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e10:	3304      	adds	r3, #4
 8011e12:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011e14:	78fa      	ldrb	r2, [r7, #3]
 8011e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e18:	9302      	str	r3, [sp, #8]
 8011e1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e1e:	9301      	str	r3, [sp, #4]
 8011e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	4613      	mov	r3, r2
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	6979      	ldr	r1, [r7, #20]
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f000 f805 	bl	8011e3c <ip4_output_if_src>
 8011e32:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3718      	adds	r7, #24
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b088      	sub	sp, #32
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	89db      	ldrh	r3, [r3, #14]
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d006      	beq.n	8011e60 <ip4_output_if_src+0x24>
 8011e52:	4b48      	ldr	r3, [pc, #288]	; (8011f74 <ip4_output_if_src+0x138>)
 8011e54:	f240 3233 	movw	r2, #819	; 0x333
 8011e58:	4947      	ldr	r1, [pc, #284]	; (8011f78 <ip4_output_if_src+0x13c>)
 8011e5a:	4848      	ldr	r0, [pc, #288]	; (8011f7c <ip4_output_if_src+0x140>)
 8011e5c:	f003 ffbe 	bl	8015ddc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d060      	beq.n	8011f28 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011e66:	2314      	movs	r3, #20
 8011e68:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8011e6a:	2114      	movs	r1, #20
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f7f6 fd27 	bl	80088c0 <pbuf_header>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d002      	beq.n	8011e7e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011e78:	f06f 0301 	mvn.w	r3, #1
 8011e7c:	e075      	b.n	8011f6a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	895b      	ldrh	r3, [r3, #10]
 8011e88:	2b13      	cmp	r3, #19
 8011e8a:	d806      	bhi.n	8011e9a <ip4_output_if_src+0x5e>
 8011e8c:	4b39      	ldr	r3, [pc, #228]	; (8011f74 <ip4_output_if_src+0x138>)
 8011e8e:	f240 3261 	movw	r2, #865	; 0x361
 8011e92:	493b      	ldr	r1, [pc, #236]	; (8011f80 <ip4_output_if_src+0x144>)
 8011e94:	4839      	ldr	r0, [pc, #228]	; (8011f7c <ip4_output_if_src+0x140>)
 8011e96:	f003 ffa1 	bl	8015ddc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011e9a:	69fb      	ldr	r3, [r7, #28]
 8011e9c:	78fa      	ldrb	r2, [r7, #3]
 8011e9e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011ea6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011eb0:	8b7b      	ldrh	r3, [r7, #26]
 8011eb2:	089b      	lsrs	r3, r3, #2
 8011eb4:	b29b      	uxth	r3, r3
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ebc:	b2da      	uxtb	r2, r3
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ec8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	891b      	ldrh	r3, [r3, #8]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7f5 fb84 	bl	80075dc <lwip_htons>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	719a      	strb	r2, [r3, #6]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011ee6:	4b27      	ldr	r3, [pc, #156]	; (8011f84 <ip4_output_if_src+0x148>)
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7f5 fb76 	bl	80075dc <lwip_htons>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011ef8:	4b22      	ldr	r3, [pc, #136]	; (8011f84 <ip4_output_if_src+0x148>)
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	3301      	adds	r3, #1
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	4b20      	ldr	r3, [pc, #128]	; (8011f84 <ip4_output_if_src+0x148>)
 8011f02:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d104      	bne.n	8011f14 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011f0a:	4b1f      	ldr	r3, [pc, #124]	; (8011f88 <ip4_output_if_src+0x14c>)
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	60da      	str	r2, [r3, #12]
 8011f12:	e003      	b.n	8011f1c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	681a      	ldr	r2, [r3, #0]
 8011f18:	69fb      	ldr	r3, [r7, #28]
 8011f1a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	729a      	strb	r2, [r3, #10]
 8011f22:	2200      	movs	r2, #0
 8011f24:	72da      	strb	r2, [r3, #11]
 8011f26:	e008      	b.n	8011f3a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011f34:	f107 0314 	add.w	r3, r7, #20
 8011f38:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d00c      	beq.n	8011f5c <ip4_output_if_src+0x120>
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	891a      	ldrh	r2, [r3, #8]
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d906      	bls.n	8011f5c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	f000 fd0a 	bl	801296c <ip4_frag>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	e006      	b.n	8011f6a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5e:	695b      	ldr	r3, [r3, #20]
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	68f9      	ldr	r1, [r7, #12]
 8011f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f66:	4798      	blx	r3
 8011f68:	4603      	mov	r3, r0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3720      	adds	r7, #32
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	0801a24c 	.word	0x0801a24c
 8011f78:	0801a280 	.word	0x0801a280
 8011f7c:	0801a28c 	.word	0x0801a28c
 8011f80:	0801a2b4 	.word	0x0801a2b4
 8011f84:	2000085e 	.word	0x2000085e
 8011f88:	0801b830 	.word	0x0801b830

08011f8c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa0:	d002      	beq.n	8011fa8 <ip4_addr_isbroadcast_u32+0x1c>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d101      	bne.n	8011fac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e02a      	b.n	8012002 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011fb2:	f003 0302 	and.w	r3, r3, #2
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d101      	bne.n	8011fbe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e021      	b.n	8012002 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	3304      	adds	r3, #4
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d101      	bne.n	8011fce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e019      	b.n	8012002 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	405a      	eors	r2, r3
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	3308      	adds	r3, #8
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4013      	ands	r3, r2
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10d      	bne.n	8012000 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	43da      	mvns	r2, r3
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	3308      	adds	r3, #8
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d101      	bne.n	8012000 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e000      	b.n	8012002 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012000:	2300      	movs	r3, #0
  }
}
 8012002:	4618      	mov	r0, r3
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
	...

08012010 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012016:	2300      	movs	r3, #0
 8012018:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801201a:	4b12      	ldr	r3, [pc, #72]	; (8012064 <ip_reass_tmr+0x54>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012020:	e018      	b.n	8012054 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	7fdb      	ldrb	r3, [r3, #31]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00b      	beq.n	8012042 <ip_reass_tmr+0x32>
      r->timer--;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	7fdb      	ldrb	r3, [r3, #31]
 801202e:	3b01      	subs	r3, #1
 8012030:	b2da      	uxtb	r2, r3
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	60fb      	str	r3, [r7, #12]
 8012040:	e008      	b.n	8012054 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801204c:	68b9      	ldr	r1, [r7, #8]
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f80a 	bl	8012068 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1e3      	bne.n	8012022 <ip_reass_tmr+0x12>
     }
   }
}
 801205a:	bf00      	nop
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	20000860 	.word	0x20000860

08012068 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b088      	sub	sp, #32
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012072:	2300      	movs	r3, #0
 8012074:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012076:	683a      	ldr	r2, [r7, #0]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	429a      	cmp	r2, r3
 801207c:	d105      	bne.n	801208a <ip_reass_free_complete_datagram+0x22>
 801207e:	4b45      	ldr	r3, [pc, #276]	; (8012194 <ip_reass_free_complete_datagram+0x12c>)
 8012080:	22ab      	movs	r2, #171	; 0xab
 8012082:	4945      	ldr	r1, [pc, #276]	; (8012198 <ip_reass_free_complete_datagram+0x130>)
 8012084:	4845      	ldr	r0, [pc, #276]	; (801219c <ip_reass_free_complete_datagram+0x134>)
 8012086:	f003 fea9 	bl	8015ddc <iprintf>
  if (prev != NULL) {
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00a      	beq.n	80120a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	429a      	cmp	r2, r3
 8012098:	d005      	beq.n	80120a6 <ip_reass_free_complete_datagram+0x3e>
 801209a:	4b3e      	ldr	r3, [pc, #248]	; (8012194 <ip_reass_free_complete_datagram+0x12c>)
 801209c:	22ad      	movs	r2, #173	; 0xad
 801209e:	4940      	ldr	r1, [pc, #256]	; (80121a0 <ip_reass_free_complete_datagram+0x138>)
 80120a0:	483e      	ldr	r0, [pc, #248]	; (801219c <ip_reass_free_complete_datagram+0x134>)
 80120a2:	f003 fe9b 	bl	8015ddc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	889b      	ldrh	r3, [r3, #4]
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d12a      	bne.n	801210e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	6858      	ldr	r0, [r3, #4]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	3308      	adds	r3, #8
 80120ce:	2214      	movs	r2, #20
 80120d0:	4619      	mov	r1, r3
 80120d2:	f003 fa14 	bl	80154fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80120d6:	2101      	movs	r1, #1
 80120d8:	69b8      	ldr	r0, [r7, #24]
 80120da:	f7ff fc47 	bl	801196c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80120de:	69b8      	ldr	r0, [r7, #24]
 80120e0:	f7f6 fca6 	bl	8008a30 <pbuf_clen>
 80120e4:	4603      	mov	r3, r0
 80120e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80120e8:	8bfa      	ldrh	r2, [r7, #30]
 80120ea:	8a7b      	ldrh	r3, [r7, #18]
 80120ec:	4413      	add	r3, r2
 80120ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120f2:	db05      	blt.n	8012100 <ip_reass_free_complete_datagram+0x98>
 80120f4:	4b27      	ldr	r3, [pc, #156]	; (8012194 <ip_reass_free_complete_datagram+0x12c>)
 80120f6:	22bc      	movs	r2, #188	; 0xbc
 80120f8:	492a      	ldr	r1, [pc, #168]	; (80121a4 <ip_reass_free_complete_datagram+0x13c>)
 80120fa:	4828      	ldr	r0, [pc, #160]	; (801219c <ip_reass_free_complete_datagram+0x134>)
 80120fc:	f003 fe6e 	bl	8015ddc <iprintf>
    pbufs_freed += clen;
 8012100:	8bfa      	ldrh	r2, [r7, #30]
 8012102:	8a7b      	ldrh	r3, [r7, #18]
 8012104:	4413      	add	r3, r2
 8012106:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012108:	69b8      	ldr	r0, [r7, #24]
 801210a:	f7f6 fbfd 	bl	8008908 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012114:	e01f      	b.n	8012156 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7f6 fc82 	bl	8008a30 <pbuf_clen>
 801212c:	4603      	mov	r3, r0
 801212e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012130:	8bfa      	ldrh	r2, [r7, #30]
 8012132:	8a7b      	ldrh	r3, [r7, #18]
 8012134:	4413      	add	r3, r2
 8012136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801213a:	db05      	blt.n	8012148 <ip_reass_free_complete_datagram+0xe0>
 801213c:	4b15      	ldr	r3, [pc, #84]	; (8012194 <ip_reass_free_complete_datagram+0x12c>)
 801213e:	22cc      	movs	r2, #204	; 0xcc
 8012140:	4918      	ldr	r1, [pc, #96]	; (80121a4 <ip_reass_free_complete_datagram+0x13c>)
 8012142:	4816      	ldr	r0, [pc, #88]	; (801219c <ip_reass_free_complete_datagram+0x134>)
 8012144:	f003 fe4a 	bl	8015ddc <iprintf>
    pbufs_freed += clen;
 8012148:	8bfa      	ldrh	r2, [r7, #30]
 801214a:	8a7b      	ldrh	r3, [r7, #18]
 801214c:	4413      	add	r3, r2
 801214e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7f6 fbd9 	bl	8008908 <pbuf_free>
  while (p != NULL) {
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1dc      	bne.n	8012116 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 f8c2 	bl	80122e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8012164:	4b10      	ldr	r3, [pc, #64]	; (80121a8 <ip_reass_free_complete_datagram+0x140>)
 8012166:	881b      	ldrh	r3, [r3, #0]
 8012168:	8bfa      	ldrh	r2, [r7, #30]
 801216a:	429a      	cmp	r2, r3
 801216c:	d905      	bls.n	801217a <ip_reass_free_complete_datagram+0x112>
 801216e:	4b09      	ldr	r3, [pc, #36]	; (8012194 <ip_reass_free_complete_datagram+0x12c>)
 8012170:	22d2      	movs	r2, #210	; 0xd2
 8012172:	490e      	ldr	r1, [pc, #56]	; (80121ac <ip_reass_free_complete_datagram+0x144>)
 8012174:	4809      	ldr	r0, [pc, #36]	; (801219c <ip_reass_free_complete_datagram+0x134>)
 8012176:	f003 fe31 	bl	8015ddc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801217a:	4b0b      	ldr	r3, [pc, #44]	; (80121a8 <ip_reass_free_complete_datagram+0x140>)
 801217c:	881a      	ldrh	r2, [r3, #0]
 801217e:	8bfb      	ldrh	r3, [r7, #30]
 8012180:	1ad3      	subs	r3, r2, r3
 8012182:	b29a      	uxth	r2, r3
 8012184:	4b08      	ldr	r3, [pc, #32]	; (80121a8 <ip_reass_free_complete_datagram+0x140>)
 8012186:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012188:	8bfb      	ldrh	r3, [r7, #30]
}
 801218a:	4618      	mov	r0, r3
 801218c:	3720      	adds	r7, #32
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	0801a2e4 	.word	0x0801a2e4
 8012198:	0801a320 	.word	0x0801a320
 801219c:	0801a32c 	.word	0x0801a32c
 80121a0:	0801a354 	.word	0x0801a354
 80121a4:	0801a368 	.word	0x0801a368
 80121a8:	20000864 	.word	0x20000864
 80121ac:	0801a388 	.word	0x0801a388

080121b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08a      	sub	sp, #40	; 0x28
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80121ba:	2300      	movs	r3, #0
 80121bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80121be:	2300      	movs	r3, #0
 80121c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80121c2:	2300      	movs	r3, #0
 80121c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80121c6:	2300      	movs	r3, #0
 80121c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80121ca:	2300      	movs	r3, #0
 80121cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80121ce:	4b28      	ldr	r3, [pc, #160]	; (8012270 <ip_reass_remove_oldest_datagram+0xc0>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80121d4:	e030      	b.n	8012238 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	695a      	ldr	r2, [r3, #20]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d10c      	bne.n	80121fc <ip_reass_remove_oldest_datagram+0x4c>
 80121e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e4:	699a      	ldr	r2, [r3, #24]
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d106      	bne.n	80121fc <ip_reass_remove_oldest_datagram+0x4c>
 80121ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f0:	899a      	ldrh	r2, [r3, #12]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	889b      	ldrh	r3, [r3, #4]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d014      	beq.n	8012226 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	3301      	adds	r3, #1
 8012200:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012202:	6a3b      	ldr	r3, [r7, #32]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d104      	bne.n	8012212 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	61bb      	str	r3, [r7, #24]
 8012210:	e009      	b.n	8012226 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012214:	7fda      	ldrb	r2, [r3, #31]
 8012216:	6a3b      	ldr	r3, [r7, #32]
 8012218:	7fdb      	ldrb	r3, [r3, #31]
 801221a:	429a      	cmp	r2, r3
 801221c:	d803      	bhi.n	8012226 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012220:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d001      	beq.n	8012232 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012230:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	2b00      	cmp	r3, #0
 801223c:	d1cb      	bne.n	80121d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801223e:	6a3b      	ldr	r3, [r7, #32]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d008      	beq.n	8012256 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012244:	69b9      	ldr	r1, [r7, #24]
 8012246:	6a38      	ldr	r0, [r7, #32]
 8012248:	f7ff ff0e 	bl	8012068 <ip_reass_free_complete_datagram>
 801224c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801224e:	697a      	ldr	r2, [r7, #20]
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	4413      	add	r3, r2
 8012254:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012256:	697a      	ldr	r2, [r7, #20]
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	da02      	bge.n	8012264 <ip_reass_remove_oldest_datagram+0xb4>
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	2b01      	cmp	r3, #1
 8012262:	dcac      	bgt.n	80121be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012264:	697b      	ldr	r3, [r7, #20]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3728      	adds	r7, #40	; 0x28
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	20000860 	.word	0x20000860

08012274 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801227e:	2004      	movs	r0, #4
 8012280:	f7f5 fdc4 	bl	8007e0c <memp_malloc>
 8012284:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d110      	bne.n	80122ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7ff ff8e 	bl	80121b0 <ip_reass_remove_oldest_datagram>
 8012294:	4602      	mov	r2, r0
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	4293      	cmp	r3, r2
 801229a:	dc03      	bgt.n	80122a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801229c:	2004      	movs	r0, #4
 801229e:	f7f5 fdb5 	bl	8007e0c <memp_malloc>
 80122a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d101      	bne.n	80122ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80122aa:	2300      	movs	r3, #0
 80122ac:	e016      	b.n	80122dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80122ae:	2220      	movs	r2, #32
 80122b0:	2100      	movs	r1, #0
 80122b2:	68f8      	ldr	r0, [r7, #12]
 80122b4:	f003 f92e 	bl	8015514 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2203      	movs	r2, #3
 80122bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80122be:	4b09      	ldr	r3, [pc, #36]	; (80122e4 <ip_reass_enqueue_new_datagram+0x70>)
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80122c6:	4a07      	ldr	r2, [pc, #28]	; (80122e4 <ip_reass_enqueue_new_datagram+0x70>)
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	3308      	adds	r3, #8
 80122d0:	2214      	movs	r2, #20
 80122d2:	6879      	ldr	r1, [r7, #4]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f003 f912 	bl	80154fe <memcpy>
  return ipr;
 80122da:	68fb      	ldr	r3, [r7, #12]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3710      	adds	r7, #16
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	20000860 	.word	0x20000860

080122e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80122f2:	4b10      	ldr	r3, [pc, #64]	; (8012334 <ip_reass_dequeue_datagram+0x4c>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d104      	bne.n	8012306 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4a0c      	ldr	r2, [pc, #48]	; (8012334 <ip_reass_dequeue_datagram+0x4c>)
 8012302:	6013      	str	r3, [r2, #0]
 8012304:	e00d      	b.n	8012322 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d106      	bne.n	801231a <ip_reass_dequeue_datagram+0x32>
 801230c:	4b0a      	ldr	r3, [pc, #40]	; (8012338 <ip_reass_dequeue_datagram+0x50>)
 801230e:	f240 1245 	movw	r2, #325	; 0x145
 8012312:	490a      	ldr	r1, [pc, #40]	; (801233c <ip_reass_dequeue_datagram+0x54>)
 8012314:	480a      	ldr	r0, [pc, #40]	; (8012340 <ip_reass_dequeue_datagram+0x58>)
 8012316:	f003 fd61 	bl	8015ddc <iprintf>
    prev->next = ipr->next;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012322:	6879      	ldr	r1, [r7, #4]
 8012324:	2004      	movs	r0, #4
 8012326:	f7f5 fdbd 	bl	8007ea4 <memp_free>
}
 801232a:	bf00      	nop
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	20000860 	.word	0x20000860
 8012338:	0801a2e4 	.word	0x0801a2e4
 801233c:	0801a3a4 	.word	0x0801a3a4
 8012340:	0801a32c 	.word	0x0801a32c

08012344 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b08c      	sub	sp, #48	; 0x30
 8012348:	af00      	add	r7, sp, #0
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8012350:	2300      	movs	r3, #0
 8012352:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012354:	2301      	movs	r3, #1
 8012356:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	885b      	ldrh	r3, [r3, #2]
 8012362:	b29b      	uxth	r3, r3
 8012364:	4618      	mov	r0, r3
 8012366:	f7f5 f939 	bl	80075dc <lwip_htons>
 801236a:	4603      	mov	r3, r0
 801236c:	461a      	mov	r2, r3
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	b29b      	uxth	r3, r3
 8012374:	f003 030f 	and.w	r3, r3, #15
 8012378:	b29b      	uxth	r3, r3
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	b29b      	uxth	r3, r3
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	88db      	ldrh	r3, [r3, #6]
 8012386:	b29b      	uxth	r3, r3
 8012388:	4618      	mov	r0, r3
 801238a:	f7f5 f927 	bl	80075dc <lwip_htons>
 801238e:	4603      	mov	r3, r0
 8012390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012394:	b29b      	uxth	r3, r3
 8012396:	00db      	lsls	r3, r3, #3
 8012398:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	2200      	movs	r2, #0
 80123a4:	701a      	strb	r2, [r3, #0]
 80123a6:	2200      	movs	r2, #0
 80123a8:	705a      	strb	r2, [r3, #1]
 80123aa:	2200      	movs	r2, #0
 80123ac:	709a      	strb	r2, [r3, #2]
 80123ae:	2200      	movs	r2, #0
 80123b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80123b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b4:	8b3a      	ldrh	r2, [r7, #24]
 80123b6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80123b8:	8b3a      	ldrh	r2, [r7, #24]
 80123ba:	8b7b      	ldrh	r3, [r7, #26]
 80123bc:	4413      	add	r3, r2
 80123be:	b29a      	uxth	r2, r3
 80123c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	627b      	str	r3, [r7, #36]	; 0x24
 80123ca:	e061      	b.n	8012490 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80123d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d4:	889b      	ldrh	r3, [r3, #4]
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	889b      	ldrh	r3, [r3, #4]
 80123dc:	b29b      	uxth	r3, r3
 80123de:	429a      	cmp	r2, r3
 80123e0:	d232      	bcs.n	8012448 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80123e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123e6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80123e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d01f      	beq.n	801242e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80123ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f0:	889b      	ldrh	r3, [r3, #4]
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f6:	88db      	ldrh	r3, [r3, #6]
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	429a      	cmp	r2, r3
 80123fc:	f0c0 80e3 	bcc.w	80125c6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8012400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012402:	88db      	ldrh	r3, [r3, #6]
 8012404:	b29a      	uxth	r2, r3
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	889b      	ldrh	r3, [r3, #4]
 801240a:	b29b      	uxth	r3, r3
 801240c:	429a      	cmp	r2, r3
 801240e:	f200 80da 	bhi.w	80125c6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241a:	88db      	ldrh	r3, [r3, #6]
 801241c:	b29a      	uxth	r2, r3
 801241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012420:	889b      	ldrh	r3, [r3, #4]
 8012422:	b29b      	uxth	r3, r3
 8012424:	429a      	cmp	r2, r3
 8012426:	d037      	beq.n	8012498 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012428:	2300      	movs	r3, #0
 801242a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801242c:	e034      	b.n	8012498 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012430:	88db      	ldrh	r3, [r3, #6]
 8012432:	b29a      	uxth	r2, r3
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	889b      	ldrh	r3, [r3, #4]
 8012438:	b29b      	uxth	r3, r3
 801243a:	429a      	cmp	r2, r3
 801243c:	f200 80c5 	bhi.w	80125ca <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	605a      	str	r2, [r3, #4]
      break;
 8012446:	e027      	b.n	8012498 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	889b      	ldrh	r3, [r3, #4]
 801244c:	b29a      	uxth	r2, r3
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	889b      	ldrh	r3, [r3, #4]
 8012452:	b29b      	uxth	r3, r3
 8012454:	429a      	cmp	r2, r3
 8012456:	f000 80ba 	beq.w	80125ce <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245c:	889b      	ldrh	r3, [r3, #4]
 801245e:	b29a      	uxth	r2, r3
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	88db      	ldrh	r3, [r3, #6]
 8012464:	b29b      	uxth	r3, r3
 8012466:	429a      	cmp	r2, r3
 8012468:	f0c0 80b3 	bcc.w	80125d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246e:	2b00      	cmp	r3, #0
 8012470:	d009      	beq.n	8012486 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8012472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012474:	88db      	ldrh	r3, [r3, #6]
 8012476:	b29a      	uxth	r2, r3
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	889b      	ldrh	r3, [r3, #4]
 801247c:	b29b      	uxth	r3, r3
 801247e:	429a      	cmp	r2, r3
 8012480:	d001      	beq.n	8012486 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012482:	2300      	movs	r3, #0
 8012484:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012492:	2b00      	cmp	r3, #0
 8012494:	d19a      	bne.n	80123cc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8012496:	e000      	b.n	801249a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8012498:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	2b00      	cmp	r3, #0
 801249e:	d12d      	bne.n	80124fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80124a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d01c      	beq.n	80124e0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80124a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a8:	88db      	ldrh	r3, [r3, #6]
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ae:	889b      	ldrh	r3, [r3, #4]
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d906      	bls.n	80124c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80124b6:	4b51      	ldr	r3, [pc, #324]	; (80125fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80124b8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80124bc:	4950      	ldr	r1, [pc, #320]	; (8012600 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80124be:	4851      	ldr	r0, [pc, #324]	; (8012604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80124c0:	f003 fc8c 	bl	8015ddc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80124c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80124ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124cc:	88db      	ldrh	r3, [r3, #6]
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d2:	889b      	ldrh	r3, [r3, #4]
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d010      	beq.n	80124fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	623b      	str	r3, [r7, #32]
 80124de:	e00d      	b.n	80124fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d006      	beq.n	80124f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80124e8:	4b44      	ldr	r3, [pc, #272]	; (80125fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80124ea:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80124ee:	4946      	ldr	r1, [pc, #280]	; (8012608 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80124f0:	4844      	ldr	r0, [pc, #272]	; (8012604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80124f2:	f003 fc73 	bl	8015ddc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	68ba      	ldr	r2, [r7, #8]
 80124fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d105      	bne.n	801250e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	7f9b      	ldrb	r3, [r3, #30]
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	d059      	beq.n	80125c2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801250e:	6a3b      	ldr	r3, [r7, #32]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d04f      	beq.n	80125b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d006      	beq.n	801252a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	889b      	ldrh	r3, [r3, #4]
 8012524:	b29b      	uxth	r3, r3
 8012526:	2b00      	cmp	r3, #0
 8012528:	d002      	beq.n	8012530 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	623b      	str	r3, [r7, #32]
 801252e:	e041      	b.n	80125b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801253a:	e012      	b.n	8012562 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012544:	88db      	ldrh	r3, [r3, #6]
 8012546:	b29a      	uxth	r2, r3
 8012548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254a:	889b      	ldrh	r3, [r3, #4]
 801254c:	b29b      	uxth	r3, r3
 801254e:	429a      	cmp	r2, r3
 8012550:	d002      	beq.n	8012558 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	623b      	str	r3, [r7, #32]
            break;
 8012556:	e007      	b.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8012558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1e9      	bne.n	801253c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012568:	6a3b      	ldr	r3, [r7, #32]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d022      	beq.n	80125b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d106      	bne.n	8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8012576:	4b21      	ldr	r3, [pc, #132]	; (80125fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012578:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801257c:	4923      	ldr	r1, [pc, #140]	; (801260c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801257e:	4821      	ldr	r0, [pc, #132]	; (8012604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012580:	f003 fc2c 	bl	8015ddc <iprintf>
          LWIP_ASSERT("sanity check",
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801258c:	429a      	cmp	r2, r3
 801258e:	d106      	bne.n	801259e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8012590:	4b1a      	ldr	r3, [pc, #104]	; (80125fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012592:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012596:	491d      	ldr	r1, [pc, #116]	; (801260c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012598:	481a      	ldr	r0, [pc, #104]	; (8012604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801259a:	f003 fc1f 	bl	8015ddc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d006      	beq.n	80125b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80125a6:	4b15      	ldr	r3, [pc, #84]	; (80125fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80125a8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80125ac:	4918      	ldr	r1, [pc, #96]	; (8012610 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80125ae:	4815      	ldr	r0, [pc, #84]	; (8012604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80125b0:	f003 fc14 	bl	8015ddc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	bf14      	ite	ne
 80125ba:	2301      	movne	r3, #1
 80125bc:	2300      	moveq	r3, #0
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	e018      	b.n	80125f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80125c2:	2300      	movs	r3, #0
 80125c4:	e016      	b.n	80125f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80125c6:	bf00      	nop
 80125c8:	e004      	b.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80125ca:	bf00      	nop
 80125cc:	e002      	b.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80125ce:	bf00      	nop
 80125d0:	e000      	b.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80125d2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80125d4:	68b8      	ldr	r0, [r7, #8]
 80125d6:	f7f6 fa2b 	bl	8008a30 <pbuf_clen>
 80125da:	4603      	mov	r3, r0
 80125dc:	461a      	mov	r2, r3
 80125de:	4b0d      	ldr	r3, [pc, #52]	; (8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80125e0:	881b      	ldrh	r3, [r3, #0]
 80125e2:	1a9b      	subs	r3, r3, r2
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	4b0b      	ldr	r3, [pc, #44]	; (8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80125e8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80125ea:	68b8      	ldr	r0, [r7, #8]
 80125ec:	f7f6 f98c 	bl	8008908 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125f0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3730      	adds	r7, #48	; 0x30
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	0801a2e4 	.word	0x0801a2e4
 8012600:	0801a3c0 	.word	0x0801a3c0
 8012604:	0801a32c 	.word	0x0801a32c
 8012608:	0801a3e0 	.word	0x0801a3e0
 801260c:	0801a418 	.word	0x0801a418
 8012610:	0801a428 	.word	0x0801a428
 8012614:	20000864 	.word	0x20000864

08012618 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b08e      	sub	sp, #56	; 0x38
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8012626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	f003 030f 	and.w	r3, r3, #15
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	2b14      	cmp	r3, #20
 8012632:	f040 8131 	bne.w	8012898 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012638:	88db      	ldrh	r3, [r3, #6]
 801263a:	b29b      	uxth	r3, r3
 801263c:	4618      	mov	r0, r3
 801263e:	f7f4 ffcd 	bl	80075dc <lwip_htons>
 8012642:	4603      	mov	r3, r0
 8012644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012648:	b29b      	uxth	r3, r3
 801264a:	00db      	lsls	r3, r3, #3
 801264c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012650:	885b      	ldrh	r3, [r3, #2]
 8012652:	b29b      	uxth	r3, r3
 8012654:	4618      	mov	r0, r3
 8012656:	f7f4 ffc1 	bl	80075dc <lwip_htons>
 801265a:	4603      	mov	r3, r0
 801265c:	461a      	mov	r2, r3
 801265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	b29b      	uxth	r3, r3
 8012664:	f003 030f 	and.w	r3, r3, #15
 8012668:	b29b      	uxth	r3, r3
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	b29b      	uxth	r3, r3
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7f6 f9dc 	bl	8008a30 <pbuf_clen>
 8012678:	4603      	mov	r3, r0
 801267a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801267c:	4b8d      	ldr	r3, [pc, #564]	; (80128b4 <ip4_reass+0x29c>)
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	461a      	mov	r2, r3
 8012682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012684:	4413      	add	r3, r2
 8012686:	2b0a      	cmp	r3, #10
 8012688:	dd10      	ble.n	80126ac <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801268a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801268c:	4619      	mov	r1, r3
 801268e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012690:	f7ff fd8e 	bl	80121b0 <ip_reass_remove_oldest_datagram>
 8012694:	4603      	mov	r3, r0
 8012696:	2b00      	cmp	r3, #0
 8012698:	f000 8100 	beq.w	801289c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801269c:	4b85      	ldr	r3, [pc, #532]	; (80128b4 <ip4_reass+0x29c>)
 801269e:	881b      	ldrh	r3, [r3, #0]
 80126a0:	461a      	mov	r2, r3
 80126a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126a4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80126a6:	2b0a      	cmp	r3, #10
 80126a8:	f300 80f8 	bgt.w	801289c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80126ac:	4b82      	ldr	r3, [pc, #520]	; (80128b8 <ip4_reass+0x2a0>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	633b      	str	r3, [r7, #48]	; 0x30
 80126b2:	e015      	b.n	80126e0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80126b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b6:	695a      	ldr	r2, [r3, #20]
 80126b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	429a      	cmp	r2, r3
 80126be:	d10c      	bne.n	80126da <ip4_reass+0xc2>
 80126c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c2:	699a      	ldr	r2, [r3, #24]
 80126c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c6:	691b      	ldr	r3, [r3, #16]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d106      	bne.n	80126da <ip4_reass+0xc2>
 80126cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ce:	899a      	ldrh	r2, [r3, #12]
 80126d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d2:	889b      	ldrh	r3, [r3, #4]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d006      	beq.n	80126e8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80126da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	633b      	str	r3, [r7, #48]	; 0x30
 80126e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1e6      	bne.n	80126b4 <ip4_reass+0x9c>
 80126e6:	e000      	b.n	80126ea <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80126e8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80126ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d109      	bne.n	8012704 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80126f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126f2:	4619      	mov	r1, r3
 80126f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f6:	f7ff fdbd 	bl	8012274 <ip_reass_enqueue_new_datagram>
 80126fa:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80126fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d11c      	bne.n	801273c <ip4_reass+0x124>
      goto nullreturn;
 8012702:	e0ce      	b.n	80128a2 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012706:	88db      	ldrh	r3, [r3, #6]
 8012708:	b29b      	uxth	r3, r3
 801270a:	4618      	mov	r0, r3
 801270c:	f7f4 ff66 	bl	80075dc <lwip_htons>
 8012710:	4603      	mov	r3, r0
 8012712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012716:	2b00      	cmp	r3, #0
 8012718:	d110      	bne.n	801273c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271c:	89db      	ldrh	r3, [r3, #14]
 801271e:	4618      	mov	r0, r3
 8012720:	f7f4 ff5c 	bl	80075dc <lwip_htons>
 8012724:	4603      	mov	r3, r0
 8012726:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801272a:	2b00      	cmp	r3, #0
 801272c:	d006      	beq.n	801273c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012730:	3308      	adds	r3, #8
 8012732:	2214      	movs	r2, #20
 8012734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012736:	4618      	mov	r0, r3
 8012738:	f002 fee1 	bl	80154fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273e:	88db      	ldrh	r3, [r3, #6]
 8012740:	b29b      	uxth	r3, r3
 8012742:	f003 0320 	and.w	r3, r3, #32
 8012746:	2b00      	cmp	r3, #0
 8012748:	bf0c      	ite	eq
 801274a:	2301      	moveq	r3, #1
 801274c:	2300      	movne	r3, #0
 801274e:	b2db      	uxtb	r3, r3
 8012750:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00e      	beq.n	8012776 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8012758:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801275a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801275c:	4413      	add	r3, r2
 801275e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012760:	8b7a      	ldrh	r2, [r7, #26]
 8012762:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012764:	429a      	cmp	r2, r3
 8012766:	f0c0 8099 	bcc.w	801289c <ip4_reass+0x284>
 801276a:	8b7b      	ldrh	r3, [r7, #26]
 801276c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012770:	4293      	cmp	r3, r2
 8012772:	f200 8093 	bhi.w	801289c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012776:	69fa      	ldr	r2, [r7, #28]
 8012778:	6879      	ldr	r1, [r7, #4]
 801277a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801277c:	f7ff fde2 	bl	8012344 <ip_reass_chain_frag_into_datagram_and_validate>
 8012780:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012788:	f000 808a 	beq.w	80128a0 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801278c:	4b49      	ldr	r3, [pc, #292]	; (80128b4 <ip4_reass+0x29c>)
 801278e:	881a      	ldrh	r2, [r3, #0]
 8012790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012792:	4413      	add	r3, r2
 8012794:	b29a      	uxth	r2, r3
 8012796:	4b47      	ldr	r3, [pc, #284]	; (80128b4 <ip4_reass+0x29c>)
 8012798:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00d      	beq.n	80127bc <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80127a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80127a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127a4:	4413      	add	r3, r2
 80127a6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80127a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127aa:	8a7a      	ldrh	r2, [r7, #18]
 80127ac:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b0:	7f9b      	ldrb	r3, [r3, #30]
 80127b2:	f043 0301 	orr.w	r3, r3, #1
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ba:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d168      	bne.n	8012894 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80127c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c4:	8b9b      	ldrh	r3, [r3, #28]
 80127c6:	3314      	adds	r3, #20
 80127c8:	b29a      	uxth	r2, r3
 80127ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127cc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80127ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80127d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80127e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e2:	3308      	adds	r3, #8
 80127e4:	2214      	movs	r2, #20
 80127e6:	4619      	mov	r1, r3
 80127e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127ea:	f002 fe88 	bl	80154fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	8b9b      	ldrh	r3, [r3, #28]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7f4 fef2 	bl	80075dc <lwip_htons>
 80127f8:	4603      	mov	r3, r0
 80127fa:	461a      	mov	r2, r3
 80127fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012802:	2200      	movs	r2, #0
 8012804:	719a      	strb	r2, [r3, #6]
 8012806:	2200      	movs	r2, #0
 8012808:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	2200      	movs	r2, #0
 801280e:	729a      	strb	r2, [r3, #10]
 8012810:	2200      	movs	r2, #0
 8012812:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801281a:	e00e      	b.n	801283a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012822:	f06f 0113 	mvn.w	r1, #19
 8012826:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012828:	f7f6 f84a 	bl	80088c0 <pbuf_header>
      pbuf_cat(p, r);
 801282c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7f6 f938 	bl	8008aa4 <pbuf_cat>
      r = iprh->next_pbuf;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801283c:	2b00      	cmp	r3, #0
 801283e:	d1ed      	bne.n	801281c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012840:	4b1d      	ldr	r3, [pc, #116]	; (80128b8 <ip4_reass+0x2a0>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012846:	429a      	cmp	r2, r3
 8012848:	d102      	bne.n	8012850 <ip4_reass+0x238>
      ipr_prev = NULL;
 801284a:	2300      	movs	r3, #0
 801284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801284e:	e010      	b.n	8012872 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012850:	4b19      	ldr	r3, [pc, #100]	; (80128b8 <ip4_reass+0x2a0>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012856:	e007      	b.n	8012868 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8012858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801285e:	429a      	cmp	r2, r3
 8012860:	d006      	beq.n	8012870 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1f4      	bne.n	8012858 <ip4_reass+0x240>
 801286e:	e000      	b.n	8012872 <ip4_reass+0x25a>
          break;
 8012870:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012876:	f7ff fd37 	bl	80122e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7f6 f8d8 	bl	8008a30 <pbuf_clen>
 8012880:	4603      	mov	r3, r0
 8012882:	461a      	mov	r2, r3
 8012884:	4b0b      	ldr	r3, [pc, #44]	; (80128b4 <ip4_reass+0x29c>)
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	1a9b      	subs	r3, r3, r2
 801288a:	b29a      	uxth	r2, r3
 801288c:	4b09      	ldr	r3, [pc, #36]	; (80128b4 <ip4_reass+0x29c>)
 801288e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	e00a      	b.n	80128aa <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012894:	2300      	movs	r3, #0
 8012896:	e008      	b.n	80128aa <ip4_reass+0x292>
    goto nullreturn;
 8012898:	bf00      	nop
 801289a:	e002      	b.n	80128a2 <ip4_reass+0x28a>

nullreturn:
 801289c:	bf00      	nop
 801289e:	e000      	b.n	80128a2 <ip4_reass+0x28a>
    goto nullreturn;
 80128a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f7f6 f830 	bl	8008908 <pbuf_free>
  return NULL;
 80128a8:	2300      	movs	r3, #0
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3738      	adds	r7, #56	; 0x38
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	20000864 	.word	0x20000864
 80128b8:	20000860 	.word	0x20000860

080128bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80128c0:	2005      	movs	r0, #5
 80128c2:	f7f5 faa3 	bl	8007e0c <memp_malloc>
 80128c6:	4603      	mov	r3, r0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	bd80      	pop	{r7, pc}

080128cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d106      	bne.n	80128e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80128da:	4b07      	ldr	r3, [pc, #28]	; (80128f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80128dc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80128e0:	4906      	ldr	r1, [pc, #24]	; (80128fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80128e2:	4807      	ldr	r0, [pc, #28]	; (8012900 <ip_frag_free_pbuf_custom_ref+0x34>)
 80128e4:	f003 fa7a 	bl	8015ddc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80128e8:	6879      	ldr	r1, [r7, #4]
 80128ea:	2005      	movs	r0, #5
 80128ec:	f7f5 fada 	bl	8007ea4 <memp_free>
}
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	0801a2e4 	.word	0x0801a2e4
 80128fc:	0801a44c 	.word	0x0801a44c
 8012900:	0801a32c 	.word	0x0801a32c

08012904 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <ipfrag_free_pbuf_custom+0x20>
 8012916:	4b11      	ldr	r3, [pc, #68]	; (801295c <ipfrag_free_pbuf_custom+0x58>)
 8012918:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801291c:	4910      	ldr	r1, [pc, #64]	; (8012960 <ipfrag_free_pbuf_custom+0x5c>)
 801291e:	4811      	ldr	r0, [pc, #68]	; (8012964 <ipfrag_free_pbuf_custom+0x60>)
 8012920:	f003 fa5c 	bl	8015ddc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	429a      	cmp	r2, r3
 801292a:	d006      	beq.n	801293a <ipfrag_free_pbuf_custom+0x36>
 801292c:	4b0b      	ldr	r3, [pc, #44]	; (801295c <ipfrag_free_pbuf_custom+0x58>)
 801292e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012932:	490d      	ldr	r1, [pc, #52]	; (8012968 <ipfrag_free_pbuf_custom+0x64>)
 8012934:	480b      	ldr	r0, [pc, #44]	; (8012964 <ipfrag_free_pbuf_custom+0x60>)
 8012936:	f003 fa51 	bl	8015ddc <iprintf>
  if (pcr->original != NULL) {
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	695b      	ldr	r3, [r3, #20]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d004      	beq.n	801294c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	695b      	ldr	r3, [r3, #20]
 8012946:	4618      	mov	r0, r3
 8012948:	f7f5 ffde 	bl	8008908 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f7ff ffbd 	bl	80128cc <ip_frag_free_pbuf_custom_ref>
}
 8012952:	bf00      	nop
 8012954:	3710      	adds	r7, #16
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	0801a2e4 	.word	0x0801a2e4
 8012960:	0801a458 	.word	0x0801a458
 8012964:	0801a32c 	.word	0x0801a32c
 8012968:	0801a464 	.word	0x0801a464

0801296c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b092      	sub	sp, #72	; 0x48
 8012970:	af02      	add	r7, sp, #8
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012978:	2300      	movs	r3, #0
 801297a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012980:	3b14      	subs	r3, #20
 8012982:	2b00      	cmp	r3, #0
 8012984:	da00      	bge.n	8012988 <ip4_frag+0x1c>
 8012986:	3307      	adds	r3, #7
 8012988:	10db      	asrs	r3, r3, #3
 801298a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801298c:	2314      	movs	r3, #20
 801298e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8012996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012998:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	f003 030f 	and.w	r3, r3, #15
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	2b14      	cmp	r3, #20
 80129a6:	d009      	beq.n	80129bc <ip4_frag+0x50>
 80129a8:	4b79      	ldr	r3, [pc, #484]	; (8012b90 <ip4_frag+0x224>)
 80129aa:	f240 22e1 	movw	r2, #737	; 0x2e1
 80129ae:	4979      	ldr	r1, [pc, #484]	; (8012b94 <ip4_frag+0x228>)
 80129b0:	4879      	ldr	r0, [pc, #484]	; (8012b98 <ip4_frag+0x22c>)
 80129b2:	f003 fa13 	bl	8015ddc <iprintf>
 80129b6:	f06f 0305 	mvn.w	r3, #5
 80129ba:	e0e5      	b.n	8012b88 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80129bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129be:	88db      	ldrh	r3, [r3, #6]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f4 fe0a 	bl	80075dc <lwip_htons>
 80129c8:	4603      	mov	r3, r0
 80129ca:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80129cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80129ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129d2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80129d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80129d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d009      	beq.n	80129f2 <ip4_frag+0x86>
 80129de:	4b6c      	ldr	r3, [pc, #432]	; (8012b90 <ip4_frag+0x224>)
 80129e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80129e4:	496d      	ldr	r1, [pc, #436]	; (8012b9c <ip4_frag+0x230>)
 80129e6:	486c      	ldr	r0, [pc, #432]	; (8012b98 <ip4_frag+0x22c>)
 80129e8:	f003 f9f8 	bl	8015ddc <iprintf>
 80129ec:	f06f 0305 	mvn.w	r3, #5
 80129f0:	e0ca      	b.n	8012b88 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	891b      	ldrh	r3, [r3, #8]
 80129f6:	3b14      	subs	r3, #20
 80129f8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80129fa:	e0bc      	b.n	8012b76 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80129fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80129fe:	00da      	lsls	r2, r3, #3
 8012a00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a02:	4293      	cmp	r3, r2
 8012a04:	bfa8      	it	ge
 8012a06:	4613      	movge	r3, r2
 8012a08:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2114      	movs	r1, #20
 8012a0e:	2002      	movs	r0, #2
 8012a10:	f7f5 fc08 	bl	8008224 <pbuf_alloc>
 8012a14:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8012a16:	6a3b      	ldr	r3, [r7, #32]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f000 80b2 	beq.w	8012b82 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	895b      	ldrh	r3, [r3, #10]
 8012a22:	2b13      	cmp	r3, #19
 8012a24:	d806      	bhi.n	8012a34 <ip4_frag+0xc8>
 8012a26:	4b5a      	ldr	r3, [pc, #360]	; (8012b90 <ip4_frag+0x224>)
 8012a28:	f240 3209 	movw	r2, #777	; 0x309
 8012a2c:	495c      	ldr	r1, [pc, #368]	; (8012ba0 <ip4_frag+0x234>)
 8012a2e:	485a      	ldr	r0, [pc, #360]	; (8012b98 <ip4_frag+0x22c>)
 8012a30:	f003 f9d4 	bl	8015ddc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012a34:	6a3b      	ldr	r3, [r7, #32]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	2214      	movs	r2, #20
 8012a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f002 fd5e 	bl	80154fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012a42:	6a3b      	ldr	r3, [r7, #32]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8012a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8012a4c:	e04f      	b.n	8012aee <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	895a      	ldrh	r2, [r3, #10]
 8012a52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012a58:	8b7a      	ldrh	r2, [r7, #26]
 8012a5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	bf28      	it	cs
 8012a60:	4613      	movcs	r3, r2
 8012a62:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012a64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d105      	bne.n	8012a76 <ip4_frag+0x10a>
        poff = 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	60fb      	str	r3, [r7, #12]
        continue;
 8012a74:	e03b      	b.n	8012aee <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012a76:	f7ff ff21 	bl	80128bc <ip_frag_alloc_pbuf_custom_ref>
 8012a7a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d103      	bne.n	8012a8a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8012a82:	6a38      	ldr	r0, [r7, #32]
 8012a84:	f7f5 ff40 	bl	8008908 <pbuf_free>
        goto memerr;
 8012a88:	e07c      	b.n	8012b84 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012a8a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012a92:	4413      	add	r3, r2
 8012a94:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8012a96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a98:	9201      	str	r2, [sp, #4]
 8012a9a:	9300      	str	r3, [sp, #0]
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2202      	movs	r2, #2
 8012aa0:	2004      	movs	r0, #4
 8012aa2:	f7f5 fd53 	bl	800854c <pbuf_alloced_custom>
 8012aa6:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d106      	bne.n	8012abc <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012aae:	6978      	ldr	r0, [r7, #20]
 8012ab0:	f7ff ff0c 	bl	80128cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012ab4:	6a38      	ldr	r0, [r7, #32]
 8012ab6:	f7f5 ff27 	bl	8008908 <pbuf_free>
        goto memerr;
 8012aba:	e063      	b.n	8012b84 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f7f5 ffcf 	bl	8008a60 <pbuf_ref>
      pcr->original = p;
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	68fa      	ldr	r2, [r7, #12]
 8012ac6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	4a36      	ldr	r2, [pc, #216]	; (8012ba4 <ip4_frag+0x238>)
 8012acc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012ace:	6939      	ldr	r1, [r7, #16]
 8012ad0:	6a38      	ldr	r0, [r7, #32]
 8012ad2:	f7f5 ffe7 	bl	8008aa4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8012ad6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012ad8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8012ade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d004      	beq.n	8012aee <ip4_frag+0x182>
        poff = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012aee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d1ac      	bne.n	8012a4e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8012af4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012af6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012af8:	4413      	add	r3, r2
 8012afa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012afc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012b02:	3b14      	subs	r3, #20
 8012b04:	429a      	cmp	r2, r3
 8012b06:	bfd4      	ite	le
 8012b08:	2301      	movle	r3, #1
 8012b0a:	2300      	movgt	r3, #0
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012b10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012b12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b16:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d103      	bne.n	8012b26 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8012b1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b24:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012b26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7f4 fd57 	bl	80075dc <lwip_htons>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	461a      	mov	r2, r3
 8012b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b34:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8012b36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b38:	3314      	adds	r3, #20
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7f4 fd4d 	bl	80075dc <lwip_htons>
 8012b42:	4603      	mov	r3, r0
 8012b44:	461a      	mov	r2, r3
 8012b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b48:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	729a      	strb	r2, [r3, #10]
 8012b50:	2200      	movs	r2, #0
 8012b52:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	695b      	ldr	r3, [r3, #20]
 8012b58:	687a      	ldr	r2, [r7, #4]
 8012b5a:	6a39      	ldr	r1, [r7, #32]
 8012b5c:	68b8      	ldr	r0, [r7, #8]
 8012b5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012b60:	6a38      	ldr	r0, [r7, #32]
 8012b62:	f7f5 fed1 	bl	8008908 <pbuf_free>
    left -= fragsize;
 8012b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8012b6e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012b70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012b72:	4413      	add	r3, r2
 8012b74:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8012b76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	f47f af3f 	bne.w	80129fc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e002      	b.n	8012b88 <ip4_frag+0x21c>
      goto memerr;
 8012b82:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3740      	adds	r7, #64	; 0x40
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	0801a2e4 	.word	0x0801a2e4
 8012b94:	0801a470 	.word	0x0801a470
 8012b98:	0801a32c 	.word	0x0801a32c
 8012b9c:	0801a498 	.word	0x0801a498
 8012ba0:	0801a4b4 	.word	0x0801a4b4
 8012ba4:	08012905 	.word	0x08012905

08012ba8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b086      	sub	sp, #24
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8012bb2:	230e      	movs	r3, #14
 8012bb4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	895b      	ldrh	r3, [r3, #10]
 8012bba:	2b0e      	cmp	r3, #14
 8012bbc:	d977      	bls.n	8012cae <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	7b1a      	ldrb	r2, [r3, #12]
 8012bc8:	7b5b      	ldrb	r3, [r3, #13]
 8012bca:	021b      	lsls	r3, r3, #8
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d023      	beq.n	8012c24 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d10f      	bne.n	8012c04 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	785b      	ldrb	r3, [r3, #1]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d11b      	bne.n	8012c24 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012bf0:	2b5e      	cmp	r3, #94	; 0x5e
 8012bf2:	d117      	bne.n	8012c24 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	7b5b      	ldrb	r3, [r3, #13]
 8012bf8:	f043 0310 	orr.w	r3, r3, #16
 8012bfc:	b2da      	uxtb	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	735a      	strb	r2, [r3, #13]
 8012c02:	e00f      	b.n	8012c24 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	2206      	movs	r2, #6
 8012c08:	4930      	ldr	r1, [pc, #192]	; (8012ccc <ethernet_input+0x124>)
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f002 fc68 	bl	80154e0 <memcmp>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d106      	bne.n	8012c24 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	7b5b      	ldrb	r3, [r3, #13]
 8012c1a:	f043 0308 	orr.w	r3, r3, #8
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012c24:	89fb      	ldrh	r3, [r7, #14]
 8012c26:	2b08      	cmp	r3, #8
 8012c28:	d003      	beq.n	8012c32 <ethernet_input+0x8a>
 8012c2a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012c2e:	d01e      	beq.n	8012c6e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012c30:	e044      	b.n	8012cbc <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c38:	f003 0308 	and.w	r3, r3, #8
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d038      	beq.n	8012cb2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	895b      	ldrh	r3, [r3, #10]
 8012c44:	461a      	mov	r2, r3
 8012c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	db33      	blt.n	8012cb6 <ethernet_input+0x10e>
 8012c4e:	8afb      	ldrh	r3, [r7, #22]
 8012c50:	425b      	negs	r3, r3
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	b21b      	sxth	r3, r3
 8012c56:	4619      	mov	r1, r3
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7f5 fe31 	bl	80088c0 <pbuf_header>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d128      	bne.n	8012cb6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012c64:	6839      	ldr	r1, [r7, #0]
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f7fe ff62 	bl	8011b30 <ip4_input>
      break;
 8012c6c:	e01d      	b.n	8012caa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c74:	f003 0308 	and.w	r3, r3, #8
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d01e      	beq.n	8012cba <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	895b      	ldrh	r3, [r3, #10]
 8012c80:	461a      	mov	r2, r3
 8012c82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	db15      	blt.n	8012cb6 <ethernet_input+0x10e>
 8012c8a:	8afb      	ldrh	r3, [r7, #22]
 8012c8c:	425b      	negs	r3, r3
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	b21b      	sxth	r3, r3
 8012c92:	4619      	mov	r1, r3
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7f5 fe13 	bl	80088c0 <pbuf_header>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d10a      	bne.n	8012cb6 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8012ca0:	6839      	ldr	r1, [r7, #0]
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7fe f92c 	bl	8010f00 <etharp_input>
      break;
 8012ca8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012caa:	2300      	movs	r3, #0
 8012cac:	e00a      	b.n	8012cc4 <ethernet_input+0x11c>
    goto free_and_return;
 8012cae:	bf00      	nop
 8012cb0:	e004      	b.n	8012cbc <ethernet_input+0x114>
        goto free_and_return;
 8012cb2:	bf00      	nop
 8012cb4:	e002      	b.n	8012cbc <ethernet_input+0x114>

free_and_return:
 8012cb6:	bf00      	nop
 8012cb8:	e000      	b.n	8012cbc <ethernet_input+0x114>
        goto free_and_return;
 8012cba:	bf00      	nop
  pbuf_free(p);
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7f5 fe23 	bl	8008908 <pbuf_free>
  return ERR_OK;
 8012cc2:	2300      	movs	r3, #0
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	0801b838 	.word	0x0801b838

08012cd0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	60b9      	str	r1, [r7, #8]
 8012cda:	607a      	str	r2, [r7, #4]
 8012cdc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012cde:	8c3b      	ldrh	r3, [r7, #32]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f4 fc7b 	bl	80075dc <lwip_htons>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012cea:	210e      	movs	r1, #14
 8012cec:	68b8      	ldr	r0, [r7, #8]
 8012cee:	f7f5 fde7 	bl	80088c0 <pbuf_header>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d125      	bne.n	8012d44 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	8afa      	ldrh	r2, [r7, #22]
 8012d02:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	2206      	movs	r2, #6
 8012d08:	6839      	ldr	r1, [r7, #0]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f002 fbf7 	bl	80154fe <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	3306      	adds	r3, #6
 8012d14:	2206      	movs	r2, #6
 8012d16:	6879      	ldr	r1, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f002 fbf0 	bl	80154fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d24:	2b06      	cmp	r3, #6
 8012d26:	d006      	beq.n	8012d36 <ethernet_output+0x66>
 8012d28:	4b0a      	ldr	r3, [pc, #40]	; (8012d54 <ethernet_output+0x84>)
 8012d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012d2e:	490a      	ldr	r1, [pc, #40]	; (8012d58 <ethernet_output+0x88>)
 8012d30:	480a      	ldr	r0, [pc, #40]	; (8012d5c <ethernet_output+0x8c>)
 8012d32:	f003 f853 	bl	8015ddc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	699b      	ldr	r3, [r3, #24]
 8012d3a:	68b9      	ldr	r1, [r7, #8]
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	4798      	blx	r3
 8012d40:	4603      	mov	r3, r0
 8012d42:	e002      	b.n	8012d4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012d44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012d46:	f06f 0301 	mvn.w	r3, #1
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3718      	adds	r7, #24
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	0801a4d4 	.word	0x0801a4d4
 8012d58:	0801a50c 	.word	0x0801a50c
 8012d5c:	0801a540 	.word	0x0801a540

08012d60 <ADS8688_Init>:
#include "ADS8688.h"

/*
 * INITIALISATION
 */
uint8_t ADS8688_Init(ADS8688 *ads, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	807b      	strh	r3, [r7, #2]
/* Store interface parameters in struct */
	ads->spiHandle 		= spiHandle;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	68ba      	ldr	r2, [r7, #8]
 8012d72:	601a      	str	r2, [r3, #0]
	ads->csPinBank 	= csPinBank;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	605a      	str	r2, [r3, #4]
	ads->csPin 		= csPin;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	887a      	ldrh	r2, [r7, #2]
 8012d7e:	811a      	strh	r2, [r3, #8]

	uint8_t ads_data[2] = {0};
 8012d80:	2300      	movs	r3, #0
 8012d82:	82bb      	strh	r3, [r7, #20]
	uint8_t state = 0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	75fb      	strb	r3, [r7, #23]
	// reset all registers to default
	state += ADS_Cmd_Write(ads, RST, ads_data);
 8012d88:	f107 0314 	add.w	r3, r7, #20
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	2185      	movs	r1, #133	; 0x85
 8012d90:	68f8      	ldr	r0, [r7, #12]
 8012d92:	f000 f90d 	bl	8012fb0 <ADS_Cmd_Write>
 8012d96:	4603      	mov	r3, r0
 8012d98:	461a      	mov	r2, r3
 8012d9a:	7dfb      	ldrb	r3, [r7, #23]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8012da0:	2064      	movs	r0, #100	; 0x64
 8012da2:	f7ee f953 	bl	800104c <HAL_Delay>
	// send a no_op message to the ADS to enter IDLE mode
	state += ADS_Cmd_Write(ads, CONT, ads_data);
 8012da6:	f107 0314 	add.w	r3, r7, #20
 8012daa:	461a      	mov	r2, r3
 8012dac:	2100      	movs	r1, #0
 8012dae:	68f8      	ldr	r0, [r7, #12]
 8012db0:	f000 f8fe 	bl	8012fb0 <ADS_Cmd_Write>
 8012db4:	4603      	mov	r3, r0
 8012db6:	461a      	mov	r2, r3
 8012db8:	7dfb      	ldrb	r3, [r7, #23]
 8012dba:	4413      	add	r3, r2
 8012dbc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012dbe:	200a      	movs	r0, #10
 8012dc0:	f7ee f944 	bl	800104c <HAL_Delay>
	// enable auto transmit for all inputs(datasheet page 54) or as many as you want
	// if you want only some of the inputs enabled, make sure to power down the unused ones
	ads_data[0] = 0xff;
 8012dc4:	23ff      	movs	r3, #255	; 0xff
 8012dc6:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, AUTO_SEQ_EN, ads_data);
 8012dc8:	f107 0314 	add.w	r3, r7, #20
 8012dcc:	461a      	mov	r2, r3
 8012dce:	2101      	movs	r1, #1
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f000 f8b2 	bl	8012f3a <ADS_Prog_Write>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	461a      	mov	r2, r3
 8012dda:	7dfb      	ldrb	r3, [r7, #23]
 8012ddc:	4413      	add	r3, r2
 8012dde:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012de0:	200a      	movs	r0, #10
 8012de2:	f7ee f933 	bl	800104c <HAL_Delay>
	// set the desired features such as device id (if multiple devices are used), alarm enable/disable and output format
	ads_data[0] = 0x03; // here i chose id = 0, alarm = disabled and SDO_format = 3 (datasheet page 56)
 8012de6:	2303      	movs	r3, #3
 8012de8:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, FEATURE_SELECT, ads_data);
 8012dea:	f107 0314 	add.w	r3, r7, #20
 8012dee:	461a      	mov	r2, r3
 8012df0:	2103      	movs	r1, #3
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f000 f8a1 	bl	8012f3a <ADS_Prog_Write>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	7dfb      	ldrb	r3, [r7, #23]
 8012dfe:	4413      	add	r3, r2
 8012e00:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012e02:	200a      	movs	r0, #10
 8012e04:	f7ee f922 	bl	800104c <HAL_Delay>
	// set all channels ranges(page 57)
	// 0x05 -> Input range is set to 0 to 2.5 x VREF (for VREF=5 volts, this means 0-10 volts range)
	// 0x06 -> Input range is set to 0 to 1.25 x VREF (for VREF=5 volts, this means 0-5 volts range)
	// internal Vref is 4.096 Volts so the range is not actually 0-5 and 0-10 but something less
	ads_data[0] = 0x06;
 8012e08:	2306      	movs	r3, #6
 8012e0a:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_0_RANGE, ads_data);
 8012e0c:	f107 0314 	add.w	r3, r7, #20
 8012e10:	461a      	mov	r2, r3
 8012e12:	2105      	movs	r1, #5
 8012e14:	68f8      	ldr	r0, [r7, #12]
 8012e16:	f000 f890 	bl	8012f3a <ADS_Prog_Write>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	7dfb      	ldrb	r3, [r7, #23]
 8012e20:	4413      	add	r3, r2
 8012e22:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012e24:	200a      	movs	r0, #10
 8012e26:	f7ee f911 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012e2a:	2306      	movs	r3, #6
 8012e2c:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_1_RANGE, ads_data);
 8012e2e:	f107 0314 	add.w	r3, r7, #20
 8012e32:	461a      	mov	r2, r3
 8012e34:	2106      	movs	r1, #6
 8012e36:	68f8      	ldr	r0, [r7, #12]
 8012e38:	f000 f87f 	bl	8012f3a <ADS_Prog_Write>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	461a      	mov	r2, r3
 8012e40:	7dfb      	ldrb	r3, [r7, #23]
 8012e42:	4413      	add	r3, r2
 8012e44:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012e46:	200a      	movs	r0, #10
 8012e48:	f7ee f900 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012e4c:	2306      	movs	r3, #6
 8012e4e:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_2_RANGE, ads_data);
 8012e50:	f107 0314 	add.w	r3, r7, #20
 8012e54:	461a      	mov	r2, r3
 8012e56:	2107      	movs	r1, #7
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f000 f86e 	bl	8012f3a <ADS_Prog_Write>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	461a      	mov	r2, r3
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
 8012e64:	4413      	add	r3, r2
 8012e66:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012e68:	200a      	movs	r0, #10
 8012e6a:	f7ee f8ef 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012e6e:	2306      	movs	r3, #6
 8012e70:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_3_RANGE, ads_data);
 8012e72:	f107 0314 	add.w	r3, r7, #20
 8012e76:	461a      	mov	r2, r3
 8012e78:	2108      	movs	r1, #8
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f85d 	bl	8012f3a <ADS_Prog_Write>
 8012e80:	4603      	mov	r3, r0
 8012e82:	461a      	mov	r2, r3
 8012e84:	7dfb      	ldrb	r3, [r7, #23]
 8012e86:	4413      	add	r3, r2
 8012e88:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012e8a:	200a      	movs	r0, #10
 8012e8c:	f7ee f8de 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012e90:	2306      	movs	r3, #6
 8012e92:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_4_RANGE, ads_data);
 8012e94:	f107 0314 	add.w	r3, r7, #20
 8012e98:	461a      	mov	r2, r3
 8012e9a:	2109      	movs	r1, #9
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f000 f84c 	bl	8012f3a <ADS_Prog_Write>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	7dfb      	ldrb	r3, [r7, #23]
 8012ea8:	4413      	add	r3, r2
 8012eaa:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012eac:	200a      	movs	r0, #10
 8012eae:	f7ee f8cd 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012eb2:	2306      	movs	r3, #6
 8012eb4:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_5_RANGE, ads_data);
 8012eb6:	f107 0314 	add.w	r3, r7, #20
 8012eba:	461a      	mov	r2, r3
 8012ebc:	210a      	movs	r1, #10
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f000 f83b 	bl	8012f3a <ADS_Prog_Write>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	7dfb      	ldrb	r3, [r7, #23]
 8012eca:	4413      	add	r3, r2
 8012ecc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012ece:	200a      	movs	r0, #10
 8012ed0:	f7ee f8bc 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012ed4:	2306      	movs	r3, #6
 8012ed6:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_6_RANGE, ads_data);
 8012ed8:	f107 0314 	add.w	r3, r7, #20
 8012edc:	461a      	mov	r2, r3
 8012ede:	210b      	movs	r1, #11
 8012ee0:	68f8      	ldr	r0, [r7, #12]
 8012ee2:	f000 f82a 	bl	8012f3a <ADS_Prog_Write>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	461a      	mov	r2, r3
 8012eea:	7dfb      	ldrb	r3, [r7, #23]
 8012eec:	4413      	add	r3, r2
 8012eee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012ef0:	200a      	movs	r0, #10
 8012ef2:	f7ee f8ab 	bl	800104c <HAL_Delay>
	ads_data[0] = 0x06;
 8012ef6:	2306      	movs	r3, #6
 8012ef8:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHN_7_RANGE, ads_data);
 8012efa:	f107 0314 	add.w	r3, r7, #20
 8012efe:	461a      	mov	r2, r3
 8012f00:	210c      	movs	r1, #12
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f000 f819 	bl	8012f3a <ADS_Prog_Write>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	7dfb      	ldrb	r3, [r7, #23]
 8012f0e:	4413      	add	r3, r2
 8012f10:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8012f12:	200a      	movs	r0, #10
 8012f14:	f7ee f89a 	bl	800104c <HAL_Delay>
	// start the auto transmission by entering the appropriate state
	state += ADS_Cmd_Write(ads, AUTO_RST, ads_data);
 8012f18:	f107 0314 	add.w	r3, r7, #20
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	21a0      	movs	r1, #160	; 0xa0
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f000 f845 	bl	8012fb0 <ADS_Cmd_Write>
 8012f26:	4603      	mov	r3, r0
 8012f28:	461a      	mov	r2, r3
 8012f2a:	7dfb      	ldrb	r3, [r7, #23]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	75fb      	strb	r3, [r7, #23]

	return state;
 8012f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3718      	adds	r7, #24
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <ADS_Prog_Write>:
	data[1] = rxbuf[3];
	return ret;
}

// after the write, data should contain the data (byte) written to the addressed register (check equality for evaluation)
HAL_StatusTypeDef ADS_Prog_Write(ADS8688 *ads, uint8_t addr, uint8_t *data) {
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b088      	sub	sp, #32
 8012f3e:	af02      	add	r7, sp, #8
 8012f40:	60f8      	str	r0, [r7, #12]
 8012f42:	460b      	mov	r3, r1
 8012f44:	607a      	str	r2, [r7, #4]
 8012f46:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {data[0], (addr << 1 | 0x01)}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	753b      	strb	r3, [r7, #20]
 8012f4e:	7afb      	ldrb	r3, [r7, #11]
 8012f50:	005b      	lsls	r3, r3, #1
 8012f52:	b25b      	sxtb	r3, r3
 8012f54:	f043 0301 	orr.w	r3, r3, #1
 8012f58:	b25b      	sxtb	r3, r3
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	6858      	ldr	r0, [r3, #4]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	891b      	ldrh	r3, [r3, #8]
 8012f66:	2200      	movs	r2, #0
 8012f68:	4619      	mov	r1, r3
 8012f6a:	f7f1 f955 	bl	8004218 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6818      	ldr	r0, [r3, #0]
 8012f72:	f107 0210 	add.w	r2, r7, #16
 8012f76:	f107 0114 	add.w	r1, r7, #20
 8012f7a:	230a      	movs	r3, #10
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	2302      	movs	r3, #2
 8012f80:	f7f1 fe42 	bl	8004c08 <HAL_SPI_TransmitReceive>
 8012f84:	4603      	mov	r3, r0
 8012f86:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	6858      	ldr	r0, [r3, #4]
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	891b      	ldrh	r3, [r3, #8]
 8012f90:	2201      	movs	r2, #1
 8012f92:	4619      	mov	r1, r3
 8012f94:	f7f1 f940 	bl	8004218 <HAL_GPIO_WritePin>

	data[0] = rxbuf[3];
 8012f98:	7cfa      	ldrb	r2, [r7, #19]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	701a      	strb	r2, [r3, #0]
	return ret;
 8012fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3718      	adds	r7, #24
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <ADS_Cmd_Write>:

HAL_StatusTypeDef ADS_Cmd_Write(ADS8688 *ads, uint8_t cmd, uint8_t *data) {
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b088      	sub	sp, #32
 8012fb4:	af02      	add	r7, sp, #8
 8012fb6:	60f8      	str	r0, [r7, #12]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	607a      	str	r2, [r7, #4]
 8012fbc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {0x00,cmd}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	753b      	strb	r3, [r7, #20]
 8012fc2:	7afb      	ldrb	r3, [r7, #11]
 8012fc4:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	6858      	ldr	r0, [r3, #4]
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	891b      	ldrh	r3, [r3, #8]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	f7f1 f921 	bl	8004218 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	6818      	ldr	r0, [r3, #0]
 8012fda:	f107 0210 	add.w	r2, r7, #16
 8012fde:	f107 0114 	add.w	r1, r7, #20
 8012fe2:	230a      	movs	r3, #10
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	2302      	movs	r3, #2
 8012fe8:	f7f1 fe0e 	bl	8004c08 <HAL_SPI_TransmitReceive>
 8012fec:	4603      	mov	r3, r0
 8012fee:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6858      	ldr	r0, [r3, #4]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	891b      	ldrh	r3, [r3, #8]
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	f7f1 f90c 	bl	8004218 <HAL_GPIO_WritePin>

	data[0] = rxbuf[2];
 8013000:	7cba      	ldrb	r2, [r7, #18]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	701a      	strb	r2, [r3, #0]
	data[1] = rxbuf[3];
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	3301      	adds	r3, #1
 801300a:	7cfa      	ldrb	r2, [r7, #19]
 801300c:	701a      	strb	r2, [r3, #0]
	return ret;
 801300e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3718      	adds	r7, #24
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <ADS_Read_All_Raw>:

HAL_StatusTypeDef ADS_Read_All_Raw(ADS8688 *ads, uint16_t *data) {
 8013018:	b580      	push	{r7, lr}
 801301a:	b086      	sub	sp, #24
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t ads_raw[2];
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8013022:	2300      	movs	r3, #0
 8013024:	613b      	str	r3, [r7, #16]
 8013026:	e01a      	b.n	801305e <ADS_Read_All_Raw+0x46>
	  ret = ADS_Cmd_Write(ads, CONT, ads_raw);
 8013028:	f107 030c 	add.w	r3, r7, #12
 801302c:	461a      	mov	r2, r3
 801302e:	2100      	movs	r1, #0
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff ffbd 	bl	8012fb0 <ADS_Cmd_Write>
 8013036:	4603      	mov	r3, r0
 8013038:	75fb      	strb	r3, [r7, #23]
	  data[i] = (int)((uint16_t)(ads_raw[1]<<8 | ads_raw[0]) >> 4);
 801303a:	7b7b      	ldrb	r3, [r7, #13]
 801303c:	021b      	lsls	r3, r3, #8
 801303e:	b21a      	sxth	r2, r3
 8013040:	7b3b      	ldrb	r3, [r7, #12]
 8013042:	b21b      	sxth	r3, r3
 8013044:	4313      	orrs	r3, r2
 8013046:	b21b      	sxth	r3, r3
 8013048:	b29a      	uxth	r2, r3
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	6839      	ldr	r1, [r7, #0]
 8013050:	440b      	add	r3, r1
 8013052:	0912      	lsrs	r2, r2, #4
 8013054:	b292      	uxth	r2, r2
 8013056:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<CHNS_NUM_READ; i++) {
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	3301      	adds	r3, #1
 801305c:	613b      	str	r3, [r7, #16]
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	2b07      	cmp	r3, #7
 8013062:	dde1      	ble.n	8013028 <ADS_Read_All_Raw+0x10>
	}
	return ret;
 8013064:	7dfb      	ldrb	r3, [r7, #23]
}
 8013066:	4618      	mov	r0, r3
 8013068:	3718      	adds	r7, #24
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
	...

08013070 <GetSector>:
/**
  * @brief  Gets the sector of a given address
  * @param  Address, the address in flash memory
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address) {
 8013070:	b480      	push	{r7}
 8013072:	b085      	sub	sp, #20
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8013078:	2300      	movs	r3, #0
 801307a:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000)) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	4a44      	ldr	r2, [pc, #272]	; (8013190 <GetSector+0x120>)
 8013080:	4293      	cmp	r3, r2
 8013082:	d806      	bhi.n	8013092 <GetSector+0x22>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801308a:	d302      	bcc.n	8013092 <GetSector+0x22>
    sector = FLASH_SECTOR_0;
 801308c:	2300      	movs	r3, #0
 801308e:	60fb      	str	r3, [r7, #12]
 8013090:	e077      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address <  0x08007FFF) && (Address >= 0x08004000)) {
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4a3f      	ldr	r2, [pc, #252]	; (8013194 <GetSector+0x124>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d806      	bhi.n	80130a8 <GetSector+0x38>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4a3e      	ldr	r2, [pc, #248]	; (8013198 <GetSector+0x128>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d902      	bls.n	80130a8 <GetSector+0x38>
    sector = FLASH_SECTOR_1;
 80130a2:	2301      	movs	r3, #1
 80130a4:	60fb      	str	r3, [r7, #12]
 80130a6:	e06c      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000)) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	4a3c      	ldr	r2, [pc, #240]	; (801319c <GetSector+0x12c>)
 80130ac:	4293      	cmp	r3, r2
 80130ae:	d806      	bhi.n	80130be <GetSector+0x4e>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	4a3b      	ldr	r2, [pc, #236]	; (80131a0 <GetSector+0x130>)
 80130b4:	4293      	cmp	r3, r2
 80130b6:	d902      	bls.n	80130be <GetSector+0x4e>
    sector = FLASH_SECTOR_2;
 80130b8:	2302      	movs	r3, #2
 80130ba:	60fb      	str	r3, [r7, #12]
 80130bc:	e061      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000)) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4a38      	ldr	r2, [pc, #224]	; (80131a4 <GetSector+0x134>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d806      	bhi.n	80130d4 <GetSector+0x64>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4a37      	ldr	r2, [pc, #220]	; (80131a8 <GetSector+0x138>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d902      	bls.n	80130d4 <GetSector+0x64>
    sector = FLASH_SECTOR_3;
 80130ce:	2303      	movs	r3, #3
 80130d0:	60fb      	str	r3, [r7, #12]
 80130d2:	e056      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000)) {
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	4a35      	ldr	r2, [pc, #212]	; (80131ac <GetSector+0x13c>)
 80130d8:	4293      	cmp	r3, r2
 80130da:	d806      	bhi.n	80130ea <GetSector+0x7a>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4a34      	ldr	r2, [pc, #208]	; (80131b0 <GetSector+0x140>)
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d902      	bls.n	80130ea <GetSector+0x7a>
    sector = FLASH_SECTOR_4;
 80130e4:	2304      	movs	r3, #4
 80130e6:	60fb      	str	r3, [r7, #12]
 80130e8:	e04b      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000)) {
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4a31      	ldr	r2, [pc, #196]	; (80131b4 <GetSector+0x144>)
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d806      	bhi.n	8013100 <GetSector+0x90>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	4a30      	ldr	r2, [pc, #192]	; (80131b8 <GetSector+0x148>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d902      	bls.n	8013100 <GetSector+0x90>
    sector = FLASH_SECTOR_5;
 80130fa:	2305      	movs	r3, #5
 80130fc:	60fb      	str	r3, [r7, #12]
 80130fe:	e040      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000)) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4a2e      	ldr	r2, [pc, #184]	; (80131bc <GetSector+0x14c>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d806      	bhi.n	8013116 <GetSector+0xa6>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	4a2d      	ldr	r2, [pc, #180]	; (80131c0 <GetSector+0x150>)
 801310c:	4293      	cmp	r3, r2
 801310e:	d902      	bls.n	8013116 <GetSector+0xa6>
    sector = FLASH_SECTOR_6;
 8013110:	2306      	movs	r3, #6
 8013112:	60fb      	str	r3, [r7, #12]
 8013114:	e035      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address <  0x0807FFFF) && (Address >= 0x08060000)) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4a2a      	ldr	r2, [pc, #168]	; (80131c4 <GetSector+0x154>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d806      	bhi.n	801312c <GetSector+0xbc>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4a29      	ldr	r2, [pc, #164]	; (80131c8 <GetSector+0x158>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d902      	bls.n	801312c <GetSector+0xbc>
    sector = FLASH_SECTOR_7;
 8013126:	2307      	movs	r3, #7
 8013128:	60fb      	str	r3, [r7, #12]
 801312a:	e02a      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000)) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	4a27      	ldr	r2, [pc, #156]	; (80131cc <GetSector+0x15c>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d806      	bhi.n	8013142 <GetSector+0xd2>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	4a26      	ldr	r2, [pc, #152]	; (80131d0 <GetSector+0x160>)
 8013138:	4293      	cmp	r3, r2
 801313a:	d902      	bls.n	8013142 <GetSector+0xd2>
    sector = FLASH_SECTOR_8;
 801313c:	2308      	movs	r3, #8
 801313e:	60fb      	str	r3, [r7, #12]
 8013140:	e01f      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000)) {
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4a23      	ldr	r2, [pc, #140]	; (80131d4 <GetSector+0x164>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d806      	bhi.n	8013158 <GetSector+0xe8>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	4a22      	ldr	r2, [pc, #136]	; (80131d8 <GetSector+0x168>)
 801314e:	4293      	cmp	r3, r2
 8013150:	d902      	bls.n	8013158 <GetSector+0xe8>
    sector = FLASH_SECTOR_9;
 8013152:	2309      	movs	r3, #9
 8013154:	60fb      	str	r3, [r7, #12]
 8013156:	e014      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000)) {
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4a20      	ldr	r2, [pc, #128]	; (80131dc <GetSector+0x16c>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d806      	bhi.n	801316e <GetSector+0xfe>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4a1f      	ldr	r2, [pc, #124]	; (80131e0 <GetSector+0x170>)
 8013164:	4293      	cmp	r3, r2
 8013166:	d902      	bls.n	801316e <GetSector+0xfe>
    sector = FLASH_SECTOR_10;
 8013168:	230a      	movs	r3, #10
 801316a:	60fb      	str	r3, [r7, #12]
 801316c:	e009      	b.n	8013182 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000)) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	4a1c      	ldr	r2, [pc, #112]	; (80131e4 <GetSector+0x174>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d805      	bhi.n	8013182 <GetSector+0x112>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	4a1b      	ldr	r2, [pc, #108]	; (80131e8 <GetSector+0x178>)
 801317a:	4293      	cmp	r3, r2
 801317c:	d901      	bls.n	8013182 <GetSector+0x112>
    sector = FLASH_SECTOR_11;
 801317e:	230b      	movs	r3, #11
 8013180:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8013182:	68fb      	ldr	r3, [r7, #12]
}
 8013184:	4618      	mov	r0, r3
 8013186:	3714      	adds	r7, #20
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr
 8013190:	08003ffe 	.word	0x08003ffe
 8013194:	08007ffe 	.word	0x08007ffe
 8013198:	08003fff 	.word	0x08003fff
 801319c:	0800bffe 	.word	0x0800bffe
 80131a0:	08007fff 	.word	0x08007fff
 80131a4:	0800fffe 	.word	0x0800fffe
 80131a8:	0800bfff 	.word	0x0800bfff
 80131ac:	0801fffe 	.word	0x0801fffe
 80131b0:	0800ffff 	.word	0x0800ffff
 80131b4:	0803fffe 	.word	0x0803fffe
 80131b8:	0801ffff 	.word	0x0801ffff
 80131bc:	0805fffe 	.word	0x0805fffe
 80131c0:	0803ffff 	.word	0x0803ffff
 80131c4:	0807fffe 	.word	0x0807fffe
 80131c8:	0805ffff 	.word	0x0805ffff
 80131cc:	0809fffe 	.word	0x0809fffe
 80131d0:	0807ffff 	.word	0x0807ffff
 80131d4:	080bfffe 	.word	0x080bfffe
 80131d8:	0809ffff 	.word	0x0809ffff
 80131dc:	080dfffe 	.word	0x080dfffe
 80131e0:	080bffff 	.word	0x080bffff
 80131e4:	080ffffe 	.word	0x080ffffe
 80131e8:	080dffff 	.word	0x080dffff

080131ec <Flash_Write_Data>:
//  return sectorsize;
//}



uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t * DATA_32, uint32_t numberofwords) {
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b08b      	sub	sp, #44	; 0x2c
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80131f8:	2300      	movs	r3, #0
 80131fa:	627b      	str	r3, [r7, #36]	; 0x24
//	int numberofwords = (strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);

//	int numberofwords = ((sizeof(DATA_32)/sizeof(uint32_t *))/4) + (((sizeof(DATA_32)/sizeof(uint32_t *)) % 4) != 0);

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80131fc:	f7f0 fbe4 	bl	80039c8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f7ff ff35 	bl	8013070 <GetSector>
 8013206:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	4413      	add	r3, r2
 8013210:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8013212:	69f8      	ldr	r0, [r7, #28]
 8013214:	f7ff ff2c 	bl	8013070 <GetSector>
 8013218:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 801321a:	4b21      	ldr	r3, [pc, #132]	; (80132a0 <Flash_Write_Data+0xb4>)
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8013220:	4b1f      	ldr	r3, [pc, #124]	; (80132a0 <Flash_Write_Data+0xb4>)
 8013222:	2202      	movs	r2, #2
 8013224:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8013226:	4a1e      	ldr	r2, [pc, #120]	; (80132a0 <Flash_Write_Data+0xb4>)
 8013228:	6a3b      	ldr	r3, [r7, #32]
 801322a:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 801322c:	69ba      	ldr	r2, [r7, #24]
 801322e:	6a3b      	ldr	r3, [r7, #32]
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	3301      	adds	r3, #1
 8013234:	4a1a      	ldr	r2, [pc, #104]	; (80132a0 <Flash_Write_Data+0xb4>)
 8013236:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8013238:	f107 0314 	add.w	r3, r7, #20
 801323c:	4619      	mov	r1, r3
 801323e:	4818      	ldr	r0, [pc, #96]	; (80132a0 <Flash_Write_Data+0xb4>)
 8013240:	f7f0 fd2e 	bl	8003ca0 <HAL_FLASHEx_Erase>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d01e      	beq.n	8013288 <Flash_Write_Data+0x9c>
		  return HAL_FLASH_GetError ();
 801324a:	f7f0 fbef 	bl	8003a2c <HAL_FLASH_GetError>
 801324e:	4603      	mov	r3, r0
 8013250:	e021      	b.n	8013296 <Flash_Write_Data+0xaa>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords) {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, DATA_32[sofar]) == HAL_OK) {
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	68ba      	ldr	r2, [r7, #8]
 8013258:	4413      	add	r3, r2
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	f04f 0400 	mov.w	r4, #0
 8013260:	461a      	mov	r2, r3
 8013262:	4623      	mov	r3, r4
 8013264:	68f9      	ldr	r1, [r7, #12]
 8013266:	2002      	movs	r0, #2
 8013268:	f7f0 fb5a 	bl	8003920 <HAL_FLASH_Program>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d106      	bne.n	8013280 <Flash_Write_Data+0x94>
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	3304      	adds	r3, #4
 8013276:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	3301      	adds	r3, #1
 801327c:	627b      	str	r3, [r7, #36]	; 0x24
 801327e:	e003      	b.n	8013288 <Flash_Write_Data+0x9c>
	     }
	     else {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8013280:	f7f0 fbd4 	bl	8003a2c <HAL_FLASH_GetError>
 8013284:	4603      	mov	r3, r0
 8013286:	e006      	b.n	8013296 <Flash_Write_Data+0xaa>
	   while (sofar<numberofwords) {
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	429a      	cmp	r2, r3
 801328e:	d8e0      	bhi.n	8013252 <Flash_Write_Data+0x66>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8013290:	f7f0 fbbc 	bl	8003a0c <HAL_FLASH_Lock>

	   return 0;
 8013294:	2300      	movs	r3, #0
}
 8013296:	4618      	mov	r0, r3
 8013298:	372c      	adds	r7, #44	; 0x2c
 801329a:	46bd      	mov	sp, r7
 801329c:	bd90      	pop	{r4, r7, pc}
 801329e:	bf00      	nop
 80132a0:	20000868 	.word	0x20000868

080132a4 <Flash_Read_Data>:

//@todo
// here we can add another parameter to specify the length of the data we are trying to read, so we would not need the while anymore
void Flash_Read_Data (uint32_t StartSectorAddress, __IO uint32_t * DATA_32, uint32_t numberofwords) {
 80132a4:	b480      	push	{r7}
 80132a6:	b087      	sub	sp, #28
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]

	for(uint32_t i = 0; i < numberofwords; i++, StartSectorAddress += 4, DATA_32++) {
 80132b0:	2300      	movs	r3, #0
 80132b2:	617b      	str	r3, [r7, #20]
 80132b4:	e00c      	b.n	80132d0 <Flash_Read_Data+0x2c>
		*DATA_32 = *(__IO uint32_t *)StartSectorAddress;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < numberofwords; i++, StartSectorAddress += 4, DATA_32++) {
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	3301      	adds	r3, #1
 80132c2:	617b      	str	r3, [r7, #20]
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	3304      	adds	r3, #4
 80132c8:	60fb      	str	r3, [r7, #12]
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	3304      	adds	r3, #4
 80132ce:	60bb      	str	r3, [r7, #8]
 80132d0:	697a      	ldr	r2, [r7, #20]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d3ee      	bcc.n	80132b6 <Flash_Read_Data+0x12>
	}
}
 80132d8:	bf00      	nop
 80132da:	371c      	adds	r7, #28
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr

080132e4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b08e      	sub	sp, #56	; 0x38
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132f0:	2200      	movs	r2, #0
 80132f2:	601a      	str	r2, [r3, #0]
 80132f4:	605a      	str	r2, [r3, #4]
 80132f6:	609a      	str	r2, [r3, #8]
 80132f8:	60da      	str	r2, [r3, #12]
 80132fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	4a46      	ldr	r2, [pc, #280]	; (801341c <HAL_ETH_MspInit+0x138>)
 8013302:	4293      	cmp	r3, r2
 8013304:	f040 8085 	bne.w	8013412 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8013308:	2300      	movs	r3, #0
 801330a:	623b      	str	r3, [r7, #32]
 801330c:	4b44      	ldr	r3, [pc, #272]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013310:	4a43      	ldr	r2, [pc, #268]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013316:	6313      	str	r3, [r2, #48]	; 0x30
 8013318:	4b41      	ldr	r3, [pc, #260]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013320:	623b      	str	r3, [r7, #32]
 8013322:	6a3b      	ldr	r3, [r7, #32]
 8013324:	2300      	movs	r3, #0
 8013326:	61fb      	str	r3, [r7, #28]
 8013328:	4b3d      	ldr	r3, [pc, #244]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332c:	4a3c      	ldr	r2, [pc, #240]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801332e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013332:	6313      	str	r3, [r2, #48]	; 0x30
 8013334:	4b3a      	ldr	r3, [pc, #232]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801333c:	61fb      	str	r3, [r7, #28]
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	2300      	movs	r3, #0
 8013342:	61bb      	str	r3, [r7, #24]
 8013344:	4b36      	ldr	r3, [pc, #216]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013348:	4a35      	ldr	r2, [pc, #212]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801334a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801334e:	6313      	str	r3, [r2, #48]	; 0x30
 8013350:	4b33      	ldr	r3, [pc, #204]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013358:	61bb      	str	r3, [r7, #24]
 801335a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801335c:	2300      	movs	r3, #0
 801335e:	617b      	str	r3, [r7, #20]
 8013360:	4b2f      	ldr	r3, [pc, #188]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013364:	4a2e      	ldr	r2, [pc, #184]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013366:	f043 0304 	orr.w	r3, r3, #4
 801336a:	6313      	str	r3, [r2, #48]	; 0x30
 801336c:	4b2c      	ldr	r3, [pc, #176]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013370:	f003 0304 	and.w	r3, r3, #4
 8013374:	617b      	str	r3, [r7, #20]
 8013376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013378:	2300      	movs	r3, #0
 801337a:	613b      	str	r3, [r7, #16]
 801337c:	4b28      	ldr	r3, [pc, #160]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013380:	4a27      	ldr	r2, [pc, #156]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 8013382:	f043 0301 	orr.w	r3, r3, #1
 8013386:	6313      	str	r3, [r2, #48]	; 0x30
 8013388:	4b25      	ldr	r3, [pc, #148]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801338c:	f003 0301 	and.w	r3, r3, #1
 8013390:	613b      	str	r3, [r7, #16]
 8013392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013394:	2300      	movs	r3, #0
 8013396:	60fb      	str	r3, [r7, #12]
 8013398:	4b21      	ldr	r3, [pc, #132]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801339c:	4a20      	ldr	r2, [pc, #128]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 801339e:	f043 0302 	orr.w	r3, r3, #2
 80133a2:	6313      	str	r3, [r2, #48]	; 0x30
 80133a4:	4b1e      	ldr	r3, [pc, #120]	; (8013420 <HAL_ETH_MspInit+0x13c>)
 80133a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a8:	f003 0302 	and.w	r3, r3, #2
 80133ac:	60fb      	str	r3, [r7, #12]
 80133ae:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80133b0:	2332      	movs	r3, #50	; 0x32
 80133b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133b4:	2302      	movs	r3, #2
 80133b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133b8:	2300      	movs	r3, #0
 80133ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133bc:	2303      	movs	r3, #3
 80133be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80133c0:	230b      	movs	r3, #11
 80133c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80133c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133c8:	4619      	mov	r1, r3
 80133ca:	4816      	ldr	r0, [pc, #88]	; (8013424 <HAL_ETH_MspInit+0x140>)
 80133cc:	f7f0 fd8a 	bl	8003ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80133d0:	2386      	movs	r3, #134	; 0x86
 80133d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133d4:	2302      	movs	r3, #2
 80133d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133d8:	2300      	movs	r3, #0
 80133da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133dc:	2303      	movs	r3, #3
 80133de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80133e0:	230b      	movs	r3, #11
 80133e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80133e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133e8:	4619      	mov	r1, r3
 80133ea:	480f      	ldr	r0, [pc, #60]	; (8013428 <HAL_ETH_MspInit+0x144>)
 80133ec:	f7f0 fd7a 	bl	8003ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80133f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80133f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133f6:	2302      	movs	r3, #2
 80133f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133fa:	2300      	movs	r3, #0
 80133fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133fe:	2303      	movs	r3, #3
 8013400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013402:	230b      	movs	r3, #11
 8013404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801340a:	4619      	mov	r1, r3
 801340c:	4807      	ldr	r0, [pc, #28]	; (801342c <HAL_ETH_MspInit+0x148>)
 801340e:	f7f0 fd69 	bl	8003ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8013412:	bf00      	nop
 8013414:	3738      	adds	r7, #56	; 0x38
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	40028000 	.word	0x40028000
 8013420:	40023800 	.word	0x40023800
 8013424:	40020800 	.word	0x40020800
 8013428:	40020000 	.word	0x40020000
 801342c:	40020400 	.word	0x40020400

08013430 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8013438:	4b47      	ldr	r3, [pc, #284]	; (8013558 <low_level_init+0x128>)
 801343a:	4a48      	ldr	r2, [pc, #288]	; (801355c <low_level_init+0x12c>)
 801343c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801343e:	4b46      	ldr	r3, [pc, #280]	; (8013558 <low_level_init+0x128>)
 8013440:	2201      	movs	r2, #1
 8013442:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8013444:	4b44      	ldr	r3, [pc, #272]	; (8013558 <low_level_init+0x128>)
 8013446:	2201      	movs	r2, #1
 8013448:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801344a:	2300      	movs	r3, #0
 801344c:	743b      	strb	r3, [r7, #16]
  MACAddr[1] = 0x80;
 801344e:	2380      	movs	r3, #128	; 0x80
 8013450:	747b      	strb	r3, [r7, #17]
  MACAddr[2] = 0xE1;
 8013452:	23e1      	movs	r3, #225	; 0xe1
 8013454:	74bb      	strb	r3, [r7, #18]
  MACAddr[3] = 0x00;
 8013456:	2300      	movs	r3, #0
 8013458:	74fb      	strb	r3, [r7, #19]
  MACAddr[4] = 0x00;
 801345a:	2300      	movs	r3, #0
 801345c:	753b      	strb	r3, [r7, #20]
  MACAddr[5] = 0x01;
 801345e:	2301      	movs	r3, #1
 8013460:	757b      	strb	r3, [r7, #21]
  heth.Init.MACAddr = &MACAddr[0];
 8013462:	4a3d      	ldr	r2, [pc, #244]	; (8013558 <low_level_init+0x128>)
 8013464:	f107 0310 	add.w	r3, r7, #16
 8013468:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 801346a:	4b3b      	ldr	r3, [pc, #236]	; (8013558 <low_level_init+0x128>)
 801346c:	2200      	movs	r2, #0
 801346e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8013470:	4b39      	ldr	r3, [pc, #228]	; (8013558 <low_level_init+0x128>)
 8013472:	2200      	movs	r2, #0
 8013474:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013476:	4b38      	ldr	r3, [pc, #224]	; (8013558 <low_level_init+0x128>)
 8013478:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801347c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801347e:	4836      	ldr	r0, [pc, #216]	; (8013558 <low_level_init+0x128>)
 8013480:	f7ef faba 	bl	80029f8 <HAL_ETH_Init>
 8013484:	4603      	mov	r3, r0
 8013486:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8013488:	7dfb      	ldrb	r3, [r7, #23]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d108      	bne.n	80134a0 <low_level_init+0x70>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013494:	f043 0304 	orr.w	r3, r3, #4
 8013498:	b2da      	uxtb	r2, r3
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80134a0:	2304      	movs	r3, #4
 80134a2:	4a2f      	ldr	r2, [pc, #188]	; (8013560 <low_level_init+0x130>)
 80134a4:	492f      	ldr	r1, [pc, #188]	; (8013564 <low_level_init+0x134>)
 80134a6:	482c      	ldr	r0, [pc, #176]	; (8013558 <low_level_init+0x128>)
 80134a8:	f7ef fc44 	bl	8002d34 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80134ac:	2304      	movs	r3, #4
 80134ae:	4a2e      	ldr	r2, [pc, #184]	; (8013568 <low_level_init+0x138>)
 80134b0:	492e      	ldr	r1, [pc, #184]	; (801356c <low_level_init+0x13c>)
 80134b2:	4829      	ldr	r0, [pc, #164]	; (8013558 <low_level_init+0x128>)
 80134b4:	f7ef fca7 	bl	8002e06 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2206      	movs	r2, #6
 80134bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80134c0:	4b25      	ldr	r3, [pc, #148]	; (8013558 <low_level_init+0x128>)
 80134c2:	695b      	ldr	r3, [r3, #20]
 80134c4:	781a      	ldrb	r2, [r3, #0]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80134cc:	4b22      	ldr	r3, [pc, #136]	; (8013558 <low_level_init+0x128>)
 80134ce:	695b      	ldr	r3, [r3, #20]
 80134d0:	785a      	ldrb	r2, [r3, #1]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80134d8:	4b1f      	ldr	r3, [pc, #124]	; (8013558 <low_level_init+0x128>)
 80134da:	695b      	ldr	r3, [r3, #20]
 80134dc:	789a      	ldrb	r2, [r3, #2]
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80134e4:	4b1c      	ldr	r3, [pc, #112]	; (8013558 <low_level_init+0x128>)
 80134e6:	695b      	ldr	r3, [r3, #20]
 80134e8:	78da      	ldrb	r2, [r3, #3]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80134f0:	4b19      	ldr	r3, [pc, #100]	; (8013558 <low_level_init+0x128>)
 80134f2:	695b      	ldr	r3, [r3, #20]
 80134f4:	791a      	ldrb	r2, [r3, #4]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80134fc:	4b16      	ldr	r3, [pc, #88]	; (8013558 <low_level_init+0x128>)
 80134fe:	695b      	ldr	r3, [r3, #20]
 8013500:	795a      	ldrb	r2, [r3, #5]
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801350e:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013516:	f043 030a 	orr.w	r3, r3, #10
 801351a:	b2da      	uxtb	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8013522:	480d      	ldr	r0, [pc, #52]	; (8013558 <low_level_init+0x128>)
 8013524:	f7ef ff18 	bl	8003358 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
/* USER CODE END PHY_PRE_CONFIG */
  

/* USER CODE BEGIN PHY_POST_CONFIG */ 
  uint32_t regvalue = 0;
 8013528:	2300      	movs	r3, #0
 801352a:	60fb      	str	r3, [r7, #12]
  // configure RJ45 leds (Control register address: 0x19)
  HAL_ETH_ReadPHYRegister(&heth, 0x19, &regvalue);
 801352c:	f107 030c 	add.w	r3, r7, #12
 8013530:	461a      	mov	r2, r3
 8013532:	2119      	movs	r1, #25
 8013534:	4808      	ldr	r0, [pc, #32]	; (8013558 <low_level_init+0x128>)
 8013536:	f7ef fe41 	bl	80031bc <HAL_ETH_ReadPHYRegister>
  regvalue &= ~(1<<5);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f023 0320 	bic.w	r3, r3, #32
 8013540:	60fb      	str	r3, [r7, #12]
  HAL_ETH_WritePHYRegister(&heth, 0x19, regvalue);
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	461a      	mov	r2, r3
 8013546:	2119      	movs	r1, #25
 8013548:	4803      	ldr	r0, [pc, #12]	; (8013558 <low_level_init+0x128>)
 801354a:	f7ef fe9f 	bl	800328c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 801354e:	bf00      	nop
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	20008b34 	.word	0x20008b34
 801355c:	40028000 	.word	0x40028000
 8013560:	20008b7c 	.word	0x20008b7c
 8013564:	20007264 	.word	0x20007264
 8013568:	200072e4 	.word	0x200072e4
 801356c:	20008ab4 	.word	0x20008ab4

08013570 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b08a      	sub	sp, #40	; 0x28
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801357a:	4b4b      	ldr	r3, [pc, #300]	; (80136a8 <low_level_output+0x138>)
 801357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8013586:	2300      	movs	r3, #0
 8013588:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801358a:	2300      	movs	r3, #0
 801358c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 801358e:	2300      	movs	r3, #0
 8013590:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8013592:	4b45      	ldr	r3, [pc, #276]	; (80136a8 <low_level_output+0x138>)
 8013594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013596:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8013598:	2300      	movs	r3, #0
 801359a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	623b      	str	r3, [r7, #32]
 80135a0:	e05a      	b.n	8013658 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	da03      	bge.n	80135b2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80135aa:	23f8      	movs	r3, #248	; 0xf8
 80135ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80135b0:	e05c      	b.n	801366c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80135b2:	6a3b      	ldr	r3, [r7, #32]
 80135b4:	895b      	ldrh	r3, [r3, #10]
 80135b6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80135b8:	2300      	movs	r3, #0
 80135ba:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80135bc:	e02f      	b.n	801361e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80135be:	69fa      	ldr	r2, [r7, #28]
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	18d0      	adds	r0, r2, r3
 80135c4:	6a3b      	ldr	r3, [r7, #32]
 80135c6:	685a      	ldr	r2, [r3, #4]
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	18d1      	adds	r1, r2, r3
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80135d2:	3304      	adds	r3, #4
 80135d4:	461a      	mov	r2, r3
 80135d6:	f001 ff92 	bl	80154fe <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80135e0:	69bb      	ldr	r3, [r7, #24]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	da03      	bge.n	80135f0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80135e8:	23f8      	movs	r3, #248	; 0xf8
 80135ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80135ee:	e03d      	b.n	801366c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80135f0:	69bb      	ldr	r3, [r7, #24]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80135f6:	693a      	ldr	r2, [r7, #16]
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	4413      	add	r3, r2
 80135fc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013600:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8013602:	68ba      	ldr	r2, [r7, #8]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	1ad3      	subs	r3, r2, r3
 8013608:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801360c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801360e:	697a      	ldr	r2, [r7, #20]
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	1ad3      	subs	r3, r2, r3
 8013614:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013618:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801361a:	2300      	movs	r3, #0
 801361c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	4413      	add	r3, r2
 8013624:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013628:	4293      	cmp	r3, r2
 801362a:	d8c8      	bhi.n	80135be <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801362c:	69fa      	ldr	r2, [r7, #28]
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	18d0      	adds	r0, r2, r3
 8013632:	6a3b      	ldr	r3, [r7, #32]
 8013634:	685a      	ldr	r2, [r3, #4]
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	4413      	add	r3, r2
 801363a:	68fa      	ldr	r2, [r7, #12]
 801363c:	4619      	mov	r1, r3
 801363e:	f001 ff5e 	bl	80154fe <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8013642:	693a      	ldr	r2, [r7, #16]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	4413      	add	r3, r2
 8013648:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801364a:	697a      	ldr	r2, [r7, #20]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4413      	add	r3, r2
 8013650:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	623b      	str	r3, [r7, #32]
 8013658:	6a3b      	ldr	r3, [r7, #32]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d1a1      	bne.n	80135a2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 801365e:	6979      	ldr	r1, [r7, #20]
 8013660:	4811      	ldr	r0, [pc, #68]	; (80136a8 <low_level_output+0x138>)
 8013662:	f7ef fc3d 	bl	8002ee0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8013666:	2300      	movs	r3, #0
 8013668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801366c:	4b0e      	ldr	r3, [pc, #56]	; (80136a8 <low_level_output+0x138>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013674:	3314      	adds	r3, #20
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f003 0320 	and.w	r3, r3, #32
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00d      	beq.n	801369c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013680:	4b09      	ldr	r3, [pc, #36]	; (80136a8 <low_level_output+0x138>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013688:	3314      	adds	r3, #20
 801368a:	2220      	movs	r2, #32
 801368c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801368e:	4b06      	ldr	r3, [pc, #24]	; (80136a8 <low_level_output+0x138>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013696:	3304      	adds	r3, #4
 8013698:	2200      	movs	r2, #0
 801369a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 801369c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3728      	adds	r7, #40	; 0x28
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	20008b34 	.word	0x20008b34

080136ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b08c      	sub	sp, #48	; 0x30
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80136b4:	2300      	movs	r3, #0
 80136b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80136b8:	2300      	movs	r3, #0
 80136ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80136bc:	2300      	movs	r3, #0
 80136be:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80136c0:	2300      	movs	r3, #0
 80136c2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80136c8:	2300      	movs	r3, #0
 80136ca:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80136cc:	2300      	movs	r3, #0
 80136ce:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80136d0:	484e      	ldr	r0, [pc, #312]	; (801380c <low_level_input+0x160>)
 80136d2:	f7ef fcef 	bl	80030b4 <HAL_ETH_GetReceivedFrame>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d001      	beq.n	80136e0 <low_level_input+0x34>
    return NULL;
 80136dc:	2300      	movs	r3, #0
 80136de:	e091      	b.n	8013804 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80136e0:	4b4a      	ldr	r3, [pc, #296]	; (801380c <low_level_input+0x160>)
 80136e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136e4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80136e6:	4b49      	ldr	r3, [pc, #292]	; (801380c <low_level_input+0x160>)
 80136e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80136ec:	89fb      	ldrh	r3, [r7, #14]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d006      	beq.n	8013700 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80136f2:	89fb      	ldrh	r3, [r7, #14]
 80136f4:	2203      	movs	r2, #3
 80136f6:	4619      	mov	r1, r3
 80136f8:	2004      	movs	r0, #4
 80136fa:	f7f4 fd93 	bl	8008224 <pbuf_alloc>
 80136fe:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8013700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013702:	2b00      	cmp	r3, #0
 8013704:	d04b      	beq.n	801379e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013706:	4b41      	ldr	r3, [pc, #260]	; (801380c <low_level_input+0x160>)
 8013708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801370a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 801370c:	2300      	movs	r3, #0
 801370e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013712:	62bb      	str	r3, [r7, #40]	; 0x28
 8013714:	e040      	b.n	8013798 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8013716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013718:	895b      	ldrh	r3, [r3, #10]
 801371a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 801371c:	2300      	movs	r3, #0
 801371e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013720:	e021      	b.n	8013766 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013724:	685a      	ldr	r2, [r3, #4]
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	18d0      	adds	r0, r2, r3
 801372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	18d1      	adds	r1, r2, r3
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8013736:	3304      	adds	r3, #4
 8013738:	461a      	mov	r2, r3
 801373a:	f001 fee0 	bl	80154fe <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801373e:	6a3b      	ldr	r3, [r7, #32]
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013744:	6a3b      	ldr	r3, [r7, #32]
 8013746:	689b      	ldr	r3, [r3, #8]
 8013748:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801374a:	69fa      	ldr	r2, [r7, #28]
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	4413      	add	r3, r2
 8013750:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013754:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013756:	69ba      	ldr	r2, [r7, #24]
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	1ad3      	subs	r3, r2, r3
 801375c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013760:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8013762:	2300      	movs	r3, #0
 8013764:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013766:	697a      	ldr	r2, [r7, #20]
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	4413      	add	r3, r2
 801376c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013770:	4293      	cmp	r3, r2
 8013772:	d8d6      	bhi.n	8013722 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	18d0      	adds	r0, r2, r3
 801377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	4413      	add	r3, r2
 8013782:	697a      	ldr	r2, [r7, #20]
 8013784:	4619      	mov	r1, r3
 8013786:	f001 feba 	bl	80154fe <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801378a:	69fa      	ldr	r2, [r7, #28]
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	4413      	add	r3, r2
 8013790:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	62bb      	str	r3, [r7, #40]	; 0x28
 8013798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1bb      	bne.n	8013716 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801379e:	4b1b      	ldr	r3, [pc, #108]	; (801380c <low_level_input+0x160>)
 80137a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80137a4:	2300      	movs	r3, #0
 80137a6:	613b      	str	r3, [r7, #16]
 80137a8:	e00b      	b.n	80137c2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80137aa:	6a3b      	ldr	r3, [r7, #32]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80137b2:	6a3b      	ldr	r3, [r7, #32]
 80137b4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80137b6:	6a3b      	ldr	r3, [r7, #32]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	3301      	adds	r3, #1
 80137c0:	613b      	str	r3, [r7, #16]
 80137c2:	4b12      	ldr	r3, [pc, #72]	; (801380c <low_level_input+0x160>)
 80137c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137c6:	693a      	ldr	r2, [r7, #16]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d3ee      	bcc.n	80137aa <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80137cc:	4b0f      	ldr	r3, [pc, #60]	; (801380c <low_level_input+0x160>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80137d2:	4b0e      	ldr	r3, [pc, #56]	; (801380c <low_level_input+0x160>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137da:	3314      	adds	r3, #20
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d00d      	beq.n	8013802 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80137e6:	4b09      	ldr	r3, [pc, #36]	; (801380c <low_level_input+0x160>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137ee:	3314      	adds	r3, #20
 80137f0:	2280      	movs	r2, #128	; 0x80
 80137f2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80137f4:	4b05      	ldr	r3, [pc, #20]	; (801380c <low_level_input+0x160>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137fc:	3308      	adds	r3, #8
 80137fe:	2200      	movs	r2, #0
 8013800:	601a      	str	r2, [r3, #0]
  }
  return p;
 8013802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013804:	4618      	mov	r0, r3
 8013806:	3730      	adds	r7, #48	; 0x30
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	20008b34 	.word	0x20008b34

08013810 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b084      	sub	sp, #16
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f7ff ff47 	bl	80136ac <low_level_input>
 801381e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d010      	beq.n	8013848 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	6879      	ldr	r1, [r7, #4]
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	4798      	blx	r3
 8013830:	4603      	mov	r3, r0
 8013832:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8013834:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d006      	beq.n	801384a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f7f5 f863 	bl	8008908 <pbuf_free>
    p = NULL;    
 8013842:	2300      	movs	r3, #0
 8013844:	60fb      	str	r3, [r7, #12]
 8013846:	e000      	b.n	801384a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8013848:	bf00      	nop
  }
}
 801384a:	3710      	adds	r7, #16
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d106      	bne.n	801386c <ethernetif_init+0x1c>
 801385e:	4b0e      	ldr	r3, [pc, #56]	; (8013898 <ethernetif_init+0x48>)
 8013860:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8013864:	490d      	ldr	r1, [pc, #52]	; (801389c <ethernetif_init+0x4c>)
 8013866:	480e      	ldr	r0, [pc, #56]	; (80138a0 <ethernetif_init+0x50>)
 8013868:	f002 fab8 	bl	8015ddc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2273      	movs	r2, #115	; 0x73
 8013870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2274      	movs	r2, #116	; 0x74
 8013878:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	4a09      	ldr	r2, [pc, #36]	; (80138a4 <ethernetif_init+0x54>)
 8013880:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	4a08      	ldr	r2, [pc, #32]	; (80138a8 <ethernetif_init+0x58>)
 8013886:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f7ff fdd1 	bl	8013430 <low_level_init>

  return ERR_OK;
 801388e:	2300      	movs	r3, #0
}
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	0801a568 	.word	0x0801a568
 801389c:	0801a57c 	.word	0x0801a57c
 80138a0:	0801a58c 	.word	0x0801a58c
 80138a4:	08011151 	.word	0x08011151
 80138a8:	08013571 	.word	0x08013571

080138ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80138b0:	f7ed fbc0 	bl	8001034 <HAL_GetTick>
 80138b4:	4603      	mov	r3, r0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	bd80      	pop	{r7, pc}
	...

080138bc <get_my_ip>:
ip4_addr_t ipaddr;
ip4_addr_t netmask;
ip4_addr_t gw;

/* USER CODE BEGIN 2 */
uint32_t get_my_ip() {
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
	ip4_addr_t my_ip;
	my_ip = gnetif.ip_addr;
 80138c2:	4b05      	ldr	r3, [pc, #20]	; (80138d8 <get_my_ip+0x1c>)
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	607b      	str	r3, [r7, #4]
	return my_ip.addr;
 80138c8:	687b      	ldr	r3, [r7, #4]
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	370c      	adds	r7, #12
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop
 80138d8:	2000a34c 	.word	0x2000a34c

080138dc <get_my_netmask>:
uint32_t get_my_netmask() {
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
	ip4_addr_t my_net;
	my_net = gnetif.netmask;
 80138e2:	4b05      	ldr	r3, [pc, #20]	; (80138f8 <get_my_netmask+0x1c>)
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	607b      	str	r3, [r7, #4]
	return my_net.addr;
 80138e8:	687b      	ldr	r3, [r7, #4]
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	370c      	adds	r7, #12
 80138ee:	46bd      	mov	sp, r7
 80138f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	2000a34c 	.word	0x2000a34c

080138fc <get_my_gateway>:
uint32_t get_my_gateway() {
 80138fc:	b480      	push	{r7}
 80138fe:	b083      	sub	sp, #12
 8013900:	af00      	add	r7, sp, #0
	ip4_addr_t my_gw;
	my_gw = gnetif.gw;
 8013902:	4b05      	ldr	r3, [pc, #20]	; (8013918 <get_my_gateway+0x1c>)
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	607b      	str	r3, [r7, #4]
	return my_gw.addr;
 8013908:	687b      	ldr	r3, [r7, #4]
}
 801390a:	4618      	mov	r0, r3
 801390c:	370c      	adds	r7, #12
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	2000a34c 	.word	0x2000a34c

0801391c <iEthCtrl_UseStaticIP>:

void iEthCtrl_UseStaticIP(unsigned long ulIPAddress, unsigned long ulIPSubnetMask, unsigned long ulIPGateway) {
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
      // Check, if the network connection is up and DHCP is activated


	if (netif_is_link_up(&gnetif) && (netif_dhcp_data(&gnetif) != NULL)) {
 8013928:	4b15      	ldr	r3, [pc, #84]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 801392a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801392e:	089b      	lsrs	r3, r3, #2
 8013930:	f003 0301 	and.w	r3, r3, #1
 8013934:	b2db      	uxtb	r3, r3
 8013936:	2b00      	cmp	r3, #0
 8013938:	d01e      	beq.n	8013978 <iEthCtrl_UseStaticIP+0x5c>
 801393a:	4b11      	ldr	r3, [pc, #68]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 801393c:	6a1b      	ldr	r3, [r3, #32]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d01a      	beq.n	8013978 <iEthCtrl_UseStaticIP+0x5c>
		dhcp_release(&gnetif);// Release the DHCP lease (it already calls netif_set_down() function)
 8013942:	480f      	ldr	r0, [pc, #60]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 8013944:	f7fc f878 	bl	800fa38 <dhcp_release>
		dhcp_stop(&gnetif); // Stop the dhcp service
 8013948:	480d      	ldr	r0, [pc, #52]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 801394a:	f7fc f8fd 	bl	800fb48 <dhcp_stop>
		netif_set_down(&gnetif); // set the interface down
 801394e:	480c      	ldr	r0, [pc, #48]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 8013950:	f7f4 fc16 	bl	8008180 <netif_set_down>

		ipaddr.addr = ulIPAddress;
 8013954:	4a0b      	ldr	r2, [pc, #44]	; (8013984 <iEthCtrl_UseStaticIP+0x68>)
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	6013      	str	r3, [r2, #0]
		netmask.addr = ulIPSubnetMask;
 801395a:	4a0b      	ldr	r2, [pc, #44]	; (8013988 <iEthCtrl_UseStaticIP+0x6c>)
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	6013      	str	r3, [r2, #0]
		gw.addr = ulIPGateway;
 8013960:	4a0a      	ldr	r2, [pc, #40]	; (801398c <iEthCtrl_UseStaticIP+0x70>)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6013      	str	r3, [r2, #0]

		// Set the new ip address
		netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 8013966:	4b09      	ldr	r3, [pc, #36]	; (801398c <iEthCtrl_UseStaticIP+0x70>)
 8013968:	4a07      	ldr	r2, [pc, #28]	; (8013988 <iEthCtrl_UseStaticIP+0x6c>)
 801396a:	4906      	ldr	r1, [pc, #24]	; (8013984 <iEthCtrl_UseStaticIP+0x68>)
 801396c:	4804      	ldr	r0, [pc, #16]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 801396e:	f7f4 fb27 	bl	8007fc0 <netif_set_addr>


		netif_set_up(&gnetif); // Bring the interface up again
 8013972:	4803      	ldr	r0, [pc, #12]	; (8013980 <iEthCtrl_UseStaticIP+0x64>)
 8013974:	f7f4 fbc0 	bl	80080f8 <netif_set_up>
	}
}
 8013978:	bf00      	nop
 801397a:	3710      	adds	r7, #16
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}
 8013980:	2000a34c 	.word	0x2000a34c
 8013984:	2000a380 	.word	0x2000a380
 8013988:	2000a384 	.word	0x2000a384
 801398c:	2000a388 	.word	0x2000a388

08013990 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8013996:	f7f3 feb2 	bl	80076fe <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 801399a:	4b20      	ldr	r3, [pc, #128]	; (8013a1c <MX_LWIP_Init+0x8c>)
 801399c:	2200      	movs	r2, #0
 801399e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80139a0:	4b1f      	ldr	r3, [pc, #124]	; (8013a20 <MX_LWIP_Init+0x90>)
 80139a2:	2200      	movs	r2, #0
 80139a4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80139a6:	4b1f      	ldr	r3, [pc, #124]	; (8013a24 <MX_LWIP_Init+0x94>)
 80139a8:	2200      	movs	r2, #0
 80139aa:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80139ac:	4b1e      	ldr	r3, [pc, #120]	; (8013a28 <MX_LWIP_Init+0x98>)
 80139ae:	9302      	str	r3, [sp, #8]
 80139b0:	4b1e      	ldr	r3, [pc, #120]	; (8013a2c <MX_LWIP_Init+0x9c>)
 80139b2:	9301      	str	r3, [sp, #4]
 80139b4:	2300      	movs	r3, #0
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	4b1a      	ldr	r3, [pc, #104]	; (8013a24 <MX_LWIP_Init+0x94>)
 80139ba:	4a19      	ldr	r2, [pc, #100]	; (8013a20 <MX_LWIP_Init+0x90>)
 80139bc:	4917      	ldr	r1, [pc, #92]	; (8013a1c <MX_LWIP_Init+0x8c>)
 80139be:	481c      	ldr	r0, [pc, #112]	; (8013a30 <MX_LWIP_Init+0xa0>)
 80139c0:	f7f4 faa2 	bl	8007f08 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80139c4:	481a      	ldr	r0, [pc, #104]	; (8013a30 <MX_LWIP_Init+0xa0>)
 80139c6:	f7f4 fb87 	bl	80080d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80139ca:	4b19      	ldr	r3, [pc, #100]	; (8013a30 <MX_LWIP_Init+0xa0>)
 80139cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80139d0:	089b      	lsrs	r3, r3, #2
 80139d2:	f003 0301 	and.w	r3, r3, #1
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d003      	beq.n	80139e4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80139dc:	4814      	ldr	r0, [pc, #80]	; (8013a30 <MX_LWIP_Init+0xa0>)
 80139de:	f7f4 fb8b 	bl	80080f8 <netif_set_up>
 80139e2:	e002      	b.n	80139ea <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80139e4:	4812      	ldr	r0, [pc, #72]	; (8013a30 <MX_LWIP_Init+0xa0>)
 80139e6:	f7f4 fbcb 	bl	8008180 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80139ea:	4811      	ldr	r0, [pc, #68]	; (8013a30 <MX_LWIP_Init+0xa0>)
 80139ec:	f7fb fbfc 	bl	800f1e8 <dhcp_start>

/* USER CODE BEGIN 3 */
  //read the flash and first of all check if there has been a change
   Flash_Read_Data(START_F_ADDRESS_IP, fdata_rx, 5);
 80139f0:	2205      	movs	r2, #5
 80139f2:	4910      	ldr	r1, [pc, #64]	; (8013a34 <MX_LWIP_Init+0xa4>)
 80139f4:	4810      	ldr	r0, [pc, #64]	; (8013a38 <MX_LWIP_Init+0xa8>)
 80139f6:	f7ff fc55 	bl	80132a4 <Flash_Read_Data>
   if(fdata_rx[1] == 1) { // it means there has been a change, so we need to change our ip according to flash content
 80139fa:	4b0e      	ldr	r3, [pc, #56]	; (8013a34 <MX_LWIP_Init+0xa4>)
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d108      	bne.n	8013a14 <MX_LWIP_Init+0x84>
 	  iEthCtrl_UseStaticIP(fdata_rx[2], fdata_rx[3], fdata_rx[4]); // change the ip, mask and gw
 8013a02:	4b0c      	ldr	r3, [pc, #48]	; (8013a34 <MX_LWIP_Init+0xa4>)
 8013a04:	6898      	ldr	r0, [r3, #8]
 8013a06:	4b0b      	ldr	r3, [pc, #44]	; (8013a34 <MX_LWIP_Init+0xa4>)
 8013a08:	68d9      	ldr	r1, [r3, #12]
 8013a0a:	4b0a      	ldr	r3, [pc, #40]	; (8013a34 <MX_LWIP_Init+0xa4>)
 8013a0c:	691b      	ldr	r3, [r3, #16]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	f7ff ff84 	bl	801391c <iEthCtrl_UseStaticIP>
   }
/* USER CODE END 3 */
}
 8013a14:	bf00      	nop
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	2000a380 	.word	0x2000a380
 8013a20:	2000a384 	.word	0x2000a384
 8013a24:	2000a388 	.word	0x2000a388
 8013a28:	08012ba9 	.word	0x08012ba9
 8013a2c:	08013851 	.word	0x08013851
 8013a30:	2000a34c 	.word	0x2000a34c
 8013a34:	2000a38c 	.word	0x2000a38c
 8013a38:	08060000 	.word	0x08060000

08013a3c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8013a40:	4803      	ldr	r0, [pc, #12]	; (8013a50 <MX_LWIP_Process+0x14>)
 8013a42:	f7ff fee5 	bl	8013810 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8013a46:	f7fa fccd 	bl	800e3e4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8013a4a:	bf00      	nop
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	2000a34c 	.word	0x2000a34c

08013a54 <__NVIC_SystemReset>:
{
 8013a54:	b480      	push	{r7}
 8013a56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013a58:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013a5c:	4b05      	ldr	r3, [pc, #20]	; (8013a74 <__NVIC_SystemReset+0x20>)
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013a64:	4903      	ldr	r1, [pc, #12]	; (8013a74 <__NVIC_SystemReset+0x20>)
 8013a66:	4b04      	ldr	r3, [pc, #16]	; (8013a78 <__NVIC_SystemReset+0x24>)
 8013a68:	4313      	orrs	r3, r2
 8013a6a:	60cb      	str	r3, [r1, #12]
 8013a6c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8013a70:	bf00      	nop
 8013a72:	e7fd      	b.n	8013a70 <__NVIC_SystemReset+0x1c>
 8013a74:	e000ed00 	.word	0xe000ed00
 8013a78:	05fa0004 	.word	0x05fa0004
 8013a7c:	00000000 	.word	0x00000000

08013a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013a80:	b590      	push	{r4, r7, lr}
 8013a82:	b085      	sub	sp, #20
 8013a84:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013a86:	f7ed fa6f 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013a8a:	f000 f9ef 	bl	8013e6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);
 8013a8e:	20c8      	movs	r0, #200	; 0xc8
 8013a90:	f7ed fadc 	bl	800104c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013a94:	f000 fc48 	bl	8014328 <MX_GPIO_Init>
  MX_DMA_Init();
 8013a98:	f000 fc26 	bl	80142e8 <MX_DMA_Init>
  MX_CAN1_Init();
 8013a9c:	f000 faa2 	bl	8013fe4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8013aa0:	f000 fad6 	bl	8014050 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8013aa4:	f000 fba2 	bl	80141ec <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8013aa8:	f000 fb08 	bl	80140bc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8013aac:	f000 fb74 	bl	8014198 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8013ab0:	f000 fbc6 	bl	8014240 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8013ab4:	f000 fbee 	bl	8014294 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8013ab8:	f000 fa42 	bl	8013f40 <MX_ADC1_Init>
  MX_TIM6_Init();
 8013abc:	f000 fb36 	bl	801412c <MX_TIM6_Init>
  MX_LWIP_Init();
 8013ac0:	f7ff ff66 	bl	8013990 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8013ac4:	2202      	movs	r2, #2
 8013ac6:	49a4      	ldr	r1, [pc, #656]	; (8013d58 <main+0x2d8>)
 8013ac8:	48a4      	ldr	r0, [pc, #656]	; (8013d5c <main+0x2dc>)
 8013aca:	f7ed fb25 	bl	8001118 <HAL_ADC_Start_DMA>

  httpd_init();
 8013ace:	f7f3 fcc7 	bl	8007460 <httpd_init>
  myCGIinit();
 8013ad2:	f000 fee3 	bl	801489c <myCGIinit>
  mySSIinit();
 8013ad6:	f000 ffc5 	bl	8014a64 <mySSIinit>


  Flash_Read_Data(START_F_ADDRESS_IP, flash_rx_data, 5);
 8013ada:	2205      	movs	r2, #5
 8013adc:	49a0      	ldr	r1, [pc, #640]	; (8013d60 <main+0x2e0>)
 8013ade:	48a1      	ldr	r0, [pc, #644]	; (8013d64 <main+0x2e4>)
 8013ae0:	f7ff fbe0 	bl	80132a4 <Flash_Read_Data>
  print("Flash variables:\n");
 8013ae4:	48a0      	ldr	r0, [pc, #640]	; (8013d68 <main+0x2e8>)
 8013ae6:	f001 f8a5 	bl	8014c34 <print>
  for(uint8_t i=0; i<5; i++) {
 8013aea:	2300      	movs	r3, #0
 8013aec:	71fb      	strb	r3, [r7, #7]
 8013aee:	e012      	b.n	8013b16 <main+0x96>
	  print("%lu\n",flash_rx_data[i]);
 8013af0:	79fb      	ldrb	r3, [r7, #7]
 8013af2:	4a9b      	ldr	r2, [pc, #620]	; (8013d60 <main+0x2e0>)
 8013af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013af8:	4619      	mov	r1, r3
 8013afa:	489c      	ldr	r0, [pc, #624]	; (8013d6c <main+0x2ec>)
 8013afc:	f001 f89a 	bl	8014c34 <print>
	  flash_data[i] = flash_rx_data[i];
 8013b00:	79fa      	ldrb	r2, [r7, #7]
 8013b02:	79fb      	ldrb	r3, [r7, #7]
 8013b04:	4996      	ldr	r1, [pc, #600]	; (8013d60 <main+0x2e0>)
 8013b06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013b0a:	4999      	ldr	r1, [pc, #612]	; (8013d70 <main+0x2f0>)
 8013b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(uint8_t i=0; i<5; i++) {
 8013b10:	79fb      	ldrb	r3, [r7, #7]
 8013b12:	3301      	adds	r3, #1
 8013b14:	71fb      	strb	r3, [r7, #7]
 8013b16:	79fb      	ldrb	r3, [r7, #7]
 8013b18:	2b04      	cmp	r3, #4
 8013b1a:	d9e9      	bls.n	8013af0 <main+0x70>
  }
  flash_data[0]++;
 8013b1c:	4b94      	ldr	r3, [pc, #592]	; (8013d70 <main+0x2f0>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	3301      	adds	r3, #1
 8013b22:	4a93      	ldr	r2, [pc, #588]	; (8013d70 <main+0x2f0>)
 8013b24:	6013      	str	r3, [r2, #0]
  if((flash_data[1] & 0x0001) == 1) {
 8013b26:	4b92      	ldr	r3, [pc, #584]	; (8013d70 <main+0x2f0>)
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	f003 0301 	and.w	r3, r3, #1
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <main+0xb8>
	  dhcp_en = 0;
 8013b32:	4b90      	ldr	r3, [pc, #576]	; (8013d74 <main+0x2f4>)
 8013b34:	2200      	movs	r2, #0
 8013b36:	701a      	strb	r2, [r3, #0]
  }
  Flash_Write_Data(START_F_ADDRESS_IP, flash_data, 5);
 8013b38:	2205      	movs	r2, #5
 8013b3a:	498d      	ldr	r1, [pc, #564]	; (8013d70 <main+0x2f0>)
 8013b3c:	4889      	ldr	r0, [pc, #548]	; (8013d64 <main+0x2e4>)
 8013b3e:	f7ff fb55 	bl	80131ec <Flash_Write_Data>

  for(uint8_t i=0; i<numofports; i++) {
 8013b42:	2300      	movs	r3, #0
 8013b44:	71bb      	strb	r3, [r7, #6]
 8013b46:	e01e      	b.n	8013b86 <main+0x106>
	  for(uint8_t j=0; j<numofclients; j++) {
 8013b48:	2300      	movs	r3, #0
 8013b4a:	717b      	strb	r3, [r7, #5]
 8013b4c:	e015      	b.n	8013b7a <main+0xfa>
		  my_tcp_init(pcb[i][j], startport + i);
 8013b4e:	79ba      	ldrb	r2, [r7, #6]
 8013b50:	7979      	ldrb	r1, [r7, #5]
 8013b52:	4889      	ldr	r0, [pc, #548]	; (8013d78 <main+0x2f8>)
 8013b54:	4613      	mov	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4413      	add	r3, r2
 8013b5a:	440b      	add	r3, r1
 8013b5c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013b60:	79bb      	ldrb	r3, [r7, #6]
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013b68:	3308      	adds	r3, #8
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	4610      	mov	r0, r2
 8013b70:	f001 f832 	bl	8014bd8 <my_tcp_init>
	  for(uint8_t j=0; j<numofclients; j++) {
 8013b74:	797b      	ldrb	r3, [r7, #5]
 8013b76:	3301      	adds	r3, #1
 8013b78:	717b      	strb	r3, [r7, #5]
 8013b7a:	797b      	ldrb	r3, [r7, #5]
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d9e6      	bls.n	8013b4e <main+0xce>
  for(uint8_t i=0; i<numofports; i++) {
 8013b80:	79bb      	ldrb	r3, [r7, #6]
 8013b82:	3301      	adds	r3, #1
 8013b84:	71bb      	strb	r3, [r7, #6]
 8013b86:	79bb      	ldrb	r3, [r7, #6]
 8013b88:	2b09      	cmp	r3, #9
 8013b8a:	d9dd      	bls.n	8013b48 <main+0xc8>
	  }
  }
#if ETH_TCP_DEBUG
  my_tcp_init(debug_pcb, TCP_DEBUG_PORT);
 8013b8c:	4b7b      	ldr	r3, [pc, #492]	; (8013d7c <main+0x2fc>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f241 7170 	movw	r1, #6000	; 0x1770
 8013b94:	4618      	mov	r0, r3
 8013b96:	f001 f81f 	bl	8014bd8 <my_tcp_init>
#endif

  ADS8688_Init(&ads, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	4a78      	ldr	r2, [pc, #480]	; (8013d80 <main+0x300>)
 8013b9e:	4979      	ldr	r1, [pc, #484]	; (8013d84 <main+0x304>)
 8013ba0:	4879      	ldr	r0, [pc, #484]	; (8013d88 <main+0x308>)
 8013ba2:	f7ff f8dd 	bl	8012d60 <ADS8688_Init>

  HAL_GPIO_WritePin(E6_GPIO_Port, E6_Pin, GPIO_PIN_RESET);
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013bac:	4877      	ldr	r0, [pc, #476]	; (8013d8c <main+0x30c>)
 8013bae:	f7f0 fb33 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WARN_GPIO_Port, WARN_Pin, GPIO_PIN_RESET);
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	2140      	movs	r1, #64	; 0x40
 8013bb6:	4876      	ldr	r0, [pc, #472]	; (8013d90 <main+0x310>)
 8013bb8:	f7f0 fb2e 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IP_GPIO_Port, IP_Pin, GPIO_PIN_RESET);
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013bc2:	4872      	ldr	r0, [pc, #456]	; (8013d8c <main+0x30c>)
 8013bc4:	f7f0 fb28 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_RESET);
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013bce:	486f      	ldr	r0, [pc, #444]	; (8013d8c <main+0x30c>)
 8013bd0:	f7f0 fb22 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_RESET);
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2120      	movs	r1, #32
 8013bd8:	486d      	ldr	r0, [pc, #436]	; (8013d90 <main+0x310>)
 8013bda:	f7f0 fb1d 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_RESET);
 8013bde:	2200      	movs	r2, #0
 8013be0:	2104      	movs	r1, #4
 8013be2:	486c      	ldr	r0, [pc, #432]	; (8013d94 <main+0x314>)
 8013be4:	f7f0 fb18 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_RESET);
 8013be8:	2200      	movs	r2, #0
 8013bea:	2180      	movs	r1, #128	; 0x80
 8013bec:	4868      	ldr	r0, [pc, #416]	; (8013d90 <main+0x310>)
 8013bee:	f7f0 fb13 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8013bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013bf6:	f7ed fa29 	bl	800104c <HAL_Delay>
  HAL_GPIO_WritePin(E6_GPIO_Port, E6_Pin, GPIO_PIN_SET);
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013c00:	4862      	ldr	r0, [pc, #392]	; (8013d8c <main+0x30c>)
 8013c02:	f7f0 fb09 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WARN_GPIO_Port, WARN_Pin, GPIO_PIN_SET);
 8013c06:	2201      	movs	r2, #1
 8013c08:	2140      	movs	r1, #64	; 0x40
 8013c0a:	4861      	ldr	r0, [pc, #388]	; (8013d90 <main+0x310>)
 8013c0c:	f7f0 fb04 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IP_GPIO_Port, IP_Pin, GPIO_PIN_SET);
 8013c10:	2201      	movs	r2, #1
 8013c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013c16:	485d      	ldr	r0, [pc, #372]	; (8013d8c <main+0x30c>)
 8013c18:	f7f0 fafe 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_SET);
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013c22:	485a      	ldr	r0, [pc, #360]	; (8013d8c <main+0x30c>)
 8013c24:	f7f0 faf8 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERR_GPIO_Port, ERR_Pin, GPIO_PIN_SET);
 8013c28:	2201      	movs	r2, #1
 8013c2a:	2120      	movs	r1, #32
 8013c2c:	4858      	ldr	r0, [pc, #352]	; (8013d90 <main+0x310>)
 8013c2e:	f7f0 faf3 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN1_GPIO_Port, D_IN1_Pin, GPIO_PIN_SET);
 8013c32:	2201      	movs	r2, #1
 8013c34:	2104      	movs	r1, #4
 8013c36:	4857      	ldr	r0, [pc, #348]	; (8013d94 <main+0x314>)
 8013c38:	f7f0 faee 	bl	8004218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_IN2_GPIO_Port, D_IN2_Pin, GPIO_PIN_SET);
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	2180      	movs	r1, #128	; 0x80
 8013c40:	4853      	ldr	r0, [pc, #332]	; (8013d90 <main+0x310>)
 8013c42:	f7f0 fae9 	bl	8004218 <HAL_GPIO_WritePin>


  HAL_TIM_Base_Start_IT(&htim6);
 8013c46:	4854      	ldr	r0, [pc, #336]	; (8013d98 <main+0x318>)
 8013c48:	f7f1 fa57 	bl	80050fa <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  current = HAL_GetTick();
 8013c4c:	f7ed f9f2 	bl	8001034 <HAL_GetTick>
 8013c50:	4602      	mov	r2, r0
 8013c52:	4b52      	ldr	r3, [pc, #328]	; (8013d9c <main+0x31c>)
 8013c54:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 8013c56:	f7ff fef1 	bl	8013a3c <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(previous<current) {
 8013c5a:	4b51      	ldr	r3, [pc, #324]	; (8013da0 <main+0x320>)
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	4b4f      	ldr	r3, [pc, #316]	; (8013d9c <main+0x31c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d268      	bcs.n	8013d38 <main+0x2b8>
		  if(get_my_ip() != 0) {
 8013c66:	f7ff fe29 	bl	80138bc <get_my_ip>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00b      	beq.n	8013c88 <main+0x208>
			  HAL_GPIO_WritePin(IP_GPIO_Port, IP_Pin, GPIO_PIN_RESET);
 8013c70:	2200      	movs	r2, #0
 8013c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013c76:	4845      	ldr	r0, [pc, #276]	; (8013d8c <main+0x30c>)
 8013c78:	f7f0 face 	bl	8004218 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(RUN_GPIO_Port, RUN_Pin);
 8013c7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013c80:	4842      	ldr	r0, [pc, #264]	; (8013d8c <main+0x30c>)
 8013c82:	f7f0 fae2 	bl	800424a <HAL_GPIO_TogglePin>
 8013c86:	e004      	b.n	8013c92 <main+0x212>
		  }
		  else {
			  HAL_GPIO_TogglePin(IP_GPIO_Port, IP_Pin);
 8013c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013c8c:	483f      	ldr	r0, [pc, #252]	; (8013d8c <main+0x30c>)
 8013c8e:	f7f0 fadc 	bl	800424a <HAL_GPIO_TogglePin>
		  }

		  my_ip = get_my_ip();
 8013c92:	f7ff fe13 	bl	80138bc <get_my_ip>
 8013c96:	4602      	mov	r2, r0
 8013c98:	4b42      	ldr	r3, [pc, #264]	; (8013da4 <main+0x324>)
 8013c9a:	601a      	str	r2, [r3, #0]
		  print("IP = %lu.%lu.%lu.%lu\n",(my_ip & 0xff), ((my_ip >> 8) & 0xff), ((my_ip >> 16) & 0xff), (my_ip >> 24));
 8013c9c:	4b41      	ldr	r3, [pc, #260]	; (8013da4 <main+0x324>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	b2d9      	uxtb	r1, r3
 8013ca2:	4b40      	ldr	r3, [pc, #256]	; (8013da4 <main+0x324>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	0a1b      	lsrs	r3, r3, #8
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	4b3e      	ldr	r3, [pc, #248]	; (8013da4 <main+0x324>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	0c1b      	lsrs	r3, r3, #16
 8013cb0:	b2d8      	uxtb	r0, r3
 8013cb2:	4b3c      	ldr	r3, [pc, #240]	; (8013da4 <main+0x324>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	0e1b      	lsrs	r3, r3, #24
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	4603      	mov	r3, r0
 8013cbc:	483a      	ldr	r0, [pc, #232]	; (8013da8 <main+0x328>)
 8013cbe:	f000 ffb9 	bl	8014c34 <print>
		  my_net = get_my_netmask();
 8013cc2:	f7ff fe0b 	bl	80138dc <get_my_netmask>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	4b38      	ldr	r3, [pc, #224]	; (8013dac <main+0x32c>)
 8013cca:	601a      	str	r2, [r3, #0]
		  print("SUBNET = %lu.%lu.%lu.%lu\n",(my_net & 0xff), ((my_net >> 8) & 0xff), ((my_net >> 16) & 0xff), (my_net >> 24));
 8013ccc:	4b37      	ldr	r3, [pc, #220]	; (8013dac <main+0x32c>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	b2d9      	uxtb	r1, r3
 8013cd2:	4b36      	ldr	r3, [pc, #216]	; (8013dac <main+0x32c>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	0a1b      	lsrs	r3, r3, #8
 8013cd8:	b2da      	uxtb	r2, r3
 8013cda:	4b34      	ldr	r3, [pc, #208]	; (8013dac <main+0x32c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	0c1b      	lsrs	r3, r3, #16
 8013ce0:	b2d8      	uxtb	r0, r3
 8013ce2:	4b32      	ldr	r3, [pc, #200]	; (8013dac <main+0x32c>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	0e1b      	lsrs	r3, r3, #24
 8013ce8:	9300      	str	r3, [sp, #0]
 8013cea:	4603      	mov	r3, r0
 8013cec:	4830      	ldr	r0, [pc, #192]	; (8013db0 <main+0x330>)
 8013cee:	f000 ffa1 	bl	8014c34 <print>
		  my_gw = get_my_gateway();
 8013cf2:	f7ff fe03 	bl	80138fc <get_my_gateway>
 8013cf6:	4602      	mov	r2, r0
 8013cf8:	4b2e      	ldr	r3, [pc, #184]	; (8013db4 <main+0x334>)
 8013cfa:	601a      	str	r2, [r3, #0]
		  print("GATE = %lu.%lu.%lu.%lu\n",(my_gw & 0xff), ((my_gw >> 8) & 0xff), ((my_gw >> 16) & 0xff), (my_gw >> 24));
 8013cfc:	4b2d      	ldr	r3, [pc, #180]	; (8013db4 <main+0x334>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	b2d9      	uxtb	r1, r3
 8013d02:	4b2c      	ldr	r3, [pc, #176]	; (8013db4 <main+0x334>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	0a1b      	lsrs	r3, r3, #8
 8013d08:	b2da      	uxtb	r2, r3
 8013d0a:	4b2a      	ldr	r3, [pc, #168]	; (8013db4 <main+0x334>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	0c1b      	lsrs	r3, r3, #16
 8013d10:	b2d8      	uxtb	r0, r3
 8013d12:	4b28      	ldr	r3, [pc, #160]	; (8013db4 <main+0x334>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	0e1b      	lsrs	r3, r3, #24
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	4826      	ldr	r0, [pc, #152]	; (8013db8 <main+0x338>)
 8013d1e:	f000 ff89 	bl	8014c34 <print>


		  previous = current;
 8013d22:	4b1e      	ldr	r3, [pc, #120]	; (8013d9c <main+0x31c>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	4a1e      	ldr	r2, [pc, #120]	; (8013da0 <main+0x320>)
 8013d28:	6013      	str	r3, [r2, #0]
		  previous+=interval;
 8013d2a:	4b1d      	ldr	r3, [pc, #116]	; (8013da0 <main+0x320>)
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	4b23      	ldr	r3, [pc, #140]	; (8013dbc <main+0x33c>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	4413      	add	r3, r2
 8013d34:	4a1a      	ldr	r2, [pc, #104]	; (8013da0 <main+0x320>)
 8013d36:	6013      	str	r3, [r2, #0]
	  }

	  if(postPorts) {
 8013d38:	4b21      	ldr	r3, [pc, #132]	; (8013dc0 <main+0x340>)
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d084      	beq.n	8013c4c <main+0x1cc>
		  postPorts = 0;
 8013d42:	4b1f      	ldr	r3, [pc, #124]	; (8013dc0 <main+0x340>)
 8013d44:	2200      	movs	r2, #0
 8013d46:	701a      	strb	r2, [r3, #0]
		  ADS_Read_All_Raw(&ads, ads_data);
 8013d48:	491e      	ldr	r1, [pc, #120]	; (8013dc4 <main+0x344>)
 8013d4a:	480f      	ldr	r0, [pc, #60]	; (8013d88 <main+0x308>)
 8013d4c:	f7ff f964 	bl	8013018 <ADS_Read_All_Raw>

		  // convert raw measurements to voltages
		  for(int i=0; i<8; i++) {
 8013d50:	2300      	movs	r3, #0
 8013d52:	603b      	str	r3, [r7, #0]
 8013d54:	e073      	b.n	8013e3e <main+0x3be>
 8013d56:	bf00      	nop
 8013d58:	2000a710 	.word	0x2000a710
 8013d5c:	2000a50c 	.word	0x2000a50c
 8013d60:	2000a3f8 	.word	0x2000a3f8
 8013d64:	08060000 	.word	0x08060000
 8013d68:	0801a5e8 	.word	0x0801a5e8
 8013d6c:	0801a5fc 	.word	0x0801a5fc
 8013d70:	20000894 	.word	0x20000894
 8013d74:	20000018 	.word	0x20000018
 8013d78:	2000a714 	.word	0x2000a714
 8013d7c:	2000a78c 	.word	0x2000a78c
 8013d80:	40020c00 	.word	0x40020c00
 8013d84:	2000a468 	.word	0x2000a468
 8013d88:	2000a7f8 	.word	0x2000a7f8
 8013d8c:	40020800 	.word	0x40020800
 8013d90:	40021000 	.word	0x40021000
 8013d94:	40020400 	.word	0x40020400
 8013d98:	2000a624 	.word	0x2000a624
 8013d9c:	2000087c 	.word	0x2000087c
 8013da0:	20000880 	.word	0x20000880
 8013da4:	20000884 	.word	0x20000884
 8013da8:	0801a604 	.word	0x0801a604
 8013dac:	20000888 	.word	0x20000888
 8013db0:	0801a61c 	.word	0x0801a61c
 8013db4:	2000088c 	.word	0x2000088c
 8013db8:	0801a638 	.word	0x0801a638
 8013dbc:	20000014 	.word	0x20000014
 8013dc0:	200008e8 	.word	0x200008e8
 8013dc4:	2000a4c0 	.word	0x2000a4c0
			  ads_volt[i] = ((float)ads_data[i])*ADS_0_5_VOLTS/4096.0;	// 0-5 volt channels (see ads init function)
 8013dc8:	4a23      	ldr	r2, [pc, #140]	; (8013e58 <main+0x3d8>)
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dd0:	ee07 3a90 	vmov	s15, r3
 8013dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dd8:	ee17 0a90 	vmov	r0, s15
 8013ddc:	f7ec fbc4 	bl	8000568 <__aeabi_f2d>
 8013de0:	a31b      	add	r3, pc, #108	; (adr r3, 8013e50 <main+0x3d0>)
 8013de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de6:	f7ec fc17 	bl	8000618 <__aeabi_dmul>
 8013dea:	4603      	mov	r3, r0
 8013dec:	460c      	mov	r4, r1
 8013dee:	4618      	mov	r0, r3
 8013df0:	4621      	mov	r1, r4
 8013df2:	f04f 0200 	mov.w	r2, #0
 8013df6:	4b19      	ldr	r3, [pc, #100]	; (8013e5c <main+0x3dc>)
 8013df8:	f7ec fd38 	bl	800086c <__aeabi_ddiv>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	460c      	mov	r4, r1
 8013e00:	4618      	mov	r0, r3
 8013e02:	4621      	mov	r1, r4
 8013e04:	f7ec fee0 	bl	8000bc8 <__aeabi_d2f>
 8013e08:	4601      	mov	r1, r0
 8013e0a:	4a15      	ldr	r2, [pc, #84]	; (8013e60 <main+0x3e0>)
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	4413      	add	r3, r2
 8013e12:	6019      	str	r1, [r3, #0]
			  volt[i] = (int)(ads_volt[i]*100000000);
 8013e14:	4a12      	ldr	r2, [pc, #72]	; (8013e60 <main+0x3e0>)
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	009b      	lsls	r3, r3, #2
 8013e1a:	4413      	add	r3, r2
 8013e1c:	edd3 7a00 	vldr	s15, [r3]
 8013e20:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013e64 <main+0x3e4>
 8013e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e2c:	ee17 1a90 	vmov	r1, s15
 8013e30:	4a0d      	ldr	r2, [pc, #52]	; (8013e68 <main+0x3e8>)
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for(int i=0; i<8; i++) {
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	603b      	str	r3, [r7, #0]
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	2b07      	cmp	r3, #7
 8013e42:	ddc1      	ble.n	8013dc8 <main+0x348>
		  }

		  tcp_send_all();
 8013e44:	f000 fb40 	bl	80144c8 <tcp_send_all>
	  current = HAL_GetTick();
 8013e48:	e700      	b.n	8013c4c <main+0x1cc>
 8013e4a:	bf00      	nop
 8013e4c:	f3af 8000 	nop.w
 8013e50:	58000000 	.word	0x58000000
 8013e54:	40147ae1 	.word	0x40147ae1
 8013e58:	2000a4c0 	.word	0x2000a4c0
 8013e5c:	40b00000 	.word	0x40b00000
 8013e60:	200008a8 	.word	0x200008a8
 8013e64:	4cbebc20 	.word	0x4cbebc20
 8013e68:	200008c8 	.word	0x200008c8

08013e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b094      	sub	sp, #80	; 0x50
 8013e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013e72:	f107 0320 	add.w	r3, r7, #32
 8013e76:	2230      	movs	r2, #48	; 0x30
 8013e78:	2100      	movs	r1, #0
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f001 fb4a 	bl	8015514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013e80:	f107 030c 	add.w	r3, r7, #12
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	605a      	str	r2, [r3, #4]
 8013e8a:	609a      	str	r2, [r3, #8]
 8013e8c:	60da      	str	r2, [r3, #12]
 8013e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013e90:	2300      	movs	r3, #0
 8013e92:	60bb      	str	r3, [r7, #8]
 8013e94:	4b28      	ldr	r3, [pc, #160]	; (8013f38 <SystemClock_Config+0xcc>)
 8013e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e98:	4a27      	ldr	r2, [pc, #156]	; (8013f38 <SystemClock_Config+0xcc>)
 8013e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8013ea0:	4b25      	ldr	r3, [pc, #148]	; (8013f38 <SystemClock_Config+0xcc>)
 8013ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ea8:	60bb      	str	r3, [r7, #8]
 8013eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013eac:	2300      	movs	r3, #0
 8013eae:	607b      	str	r3, [r7, #4]
 8013eb0:	4b22      	ldr	r3, [pc, #136]	; (8013f3c <SystemClock_Config+0xd0>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	4a21      	ldr	r2, [pc, #132]	; (8013f3c <SystemClock_Config+0xd0>)
 8013eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013eba:	6013      	str	r3, [r2, #0]
 8013ebc:	4b1f      	ldr	r3, [pc, #124]	; (8013f3c <SystemClock_Config+0xd0>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ec4:	607b      	str	r3, [r7, #4]
 8013ec6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013ec8:	2302      	movs	r3, #2
 8013eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013ecc:	2301      	movs	r3, #1
 8013ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8013ed0:	2310      	movs	r3, #16
 8013ed2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013ed4:	2302      	movs	r3, #2
 8013ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8013edc:	2308      	movs	r3, #8
 8013ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013ee0:	23a8      	movs	r3, #168	; 0xa8
 8013ee2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013ee4:	2302      	movs	r3, #2
 8013ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8013ee8:	2304      	movs	r3, #4
 8013eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013eec:	f107 0320 	add.w	r3, r7, #32
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7f0 f9c5 	bl	8004280 <HAL_RCC_OscConfig>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d001      	beq.n	8013f00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013efc:	f000 ff04 	bl	8014d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013f00:	230f      	movs	r3, #15
 8013f02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013f04:	2302      	movs	r3, #2
 8013f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013f0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013f18:	f107 030c 	add.w	r3, r7, #12
 8013f1c:	2105      	movs	r1, #5
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7f0 fc1e 	bl	8004760 <HAL_RCC_ClockConfig>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d001      	beq.n	8013f2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8013f2a:	f000 feed 	bl	8014d08 <Error_Handler>
  }
}
 8013f2e:	bf00      	nop
 8013f30:	3750      	adds	r7, #80	; 0x50
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	40023800 	.word	0x40023800
 8013f3c:	40007000 	.word	0x40007000

08013f40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8013f46:	463b      	mov	r3, r7
 8013f48:	2200      	movs	r2, #0
 8013f4a:	601a      	str	r2, [r3, #0]
 8013f4c:	605a      	str	r2, [r3, #4]
 8013f4e:	609a      	str	r2, [r3, #8]
 8013f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8013f52:	4b21      	ldr	r3, [pc, #132]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f54:	4a21      	ldr	r2, [pc, #132]	; (8013fdc <MX_ADC1_Init+0x9c>)
 8013f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8013f58:	4b1f      	ldr	r3, [pc, #124]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013f5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8013f60:	4b1d      	ldr	r3, [pc, #116]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f62:	2200      	movs	r2, #0
 8013f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8013f66:	4b1c      	ldr	r3, [pc, #112]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8013f6c:	4b1a      	ldr	r3, [pc, #104]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f6e:	2201      	movs	r2, #1
 8013f70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8013f72:	4b19      	ldr	r3, [pc, #100]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f74:	2200      	movs	r2, #0
 8013f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013f7a:	4b17      	ldr	r3, [pc, #92]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8013f80:	4b15      	ldr	r3, [pc, #84]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f82:	4a17      	ldr	r2, [pc, #92]	; (8013fe0 <MX_ADC1_Init+0xa0>)
 8013f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013f86:	4b14      	ldr	r3, [pc, #80]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f88:	2200      	movs	r2, #0
 8013f8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8013f8c:	4b12      	ldr	r3, [pc, #72]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f8e:	2201      	movs	r2, #1
 8013f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8013f92:	4b11      	ldr	r3, [pc, #68]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f94:	2200      	movs	r2, #0
 8013f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8013f9a:	4b0f      	ldr	r3, [pc, #60]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8013fa0:	480d      	ldr	r0, [pc, #52]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013fa2:	f7ed f875 	bl	8001090 <HAL_ADC_Init>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d001      	beq.n	8013fb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8013fac:	f000 feac 	bl	8014d08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8013fb0:	2310      	movs	r3, #16
 8013fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8013fb8:	2307      	movs	r3, #7
 8013fba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8013fbc:	463b      	mov	r3, r7
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	4805      	ldr	r0, [pc, #20]	; (8013fd8 <MX_ADC1_Init+0x98>)
 8013fc2:	f7ed f9b9 	bl	8001338 <HAL_ADC_ConfigChannel>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8013fcc:	f000 fe9c 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8013fd0:	bf00      	nop
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	2000a50c 	.word	0x2000a50c
 8013fdc:	40012000 	.word	0x40012000
 8013fe0:	0f000001 	.word	0x0f000001

08013fe4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8013fe8:	4b17      	ldr	r3, [pc, #92]	; (8014048 <MX_CAN1_Init+0x64>)
 8013fea:	4a18      	ldr	r2, [pc, #96]	; (801404c <MX_CAN1_Init+0x68>)
 8013fec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8013fee:	4b16      	ldr	r3, [pc, #88]	; (8014048 <MX_CAN1_Init+0x64>)
 8013ff0:	2202      	movs	r2, #2
 8013ff2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8013ff4:	4b14      	ldr	r3, [pc, #80]	; (8014048 <MX_CAN1_Init+0x64>)
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8013ffa:	4b13      	ldr	r3, [pc, #76]	; (8014048 <MX_CAN1_Init+0x64>)
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8014000:	4b11      	ldr	r3, [pc, #68]	; (8014048 <MX_CAN1_Init+0x64>)
 8014002:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8014006:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8014008:	4b0f      	ldr	r3, [pc, #60]	; (8014048 <MX_CAN1_Init+0x64>)
 801400a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 801400e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8014010:	4b0d      	ldr	r3, [pc, #52]	; (8014048 <MX_CAN1_Init+0x64>)
 8014012:	2200      	movs	r2, #0
 8014014:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8014016:	4b0c      	ldr	r3, [pc, #48]	; (8014048 <MX_CAN1_Init+0x64>)
 8014018:	2201      	movs	r2, #1
 801401a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 801401c:	4b0a      	ldr	r3, [pc, #40]	; (8014048 <MX_CAN1_Init+0x64>)
 801401e:	2200      	movs	r2, #0
 8014020:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8014022:	4b09      	ldr	r3, [pc, #36]	; (8014048 <MX_CAN1_Init+0x64>)
 8014024:	2200      	movs	r2, #0
 8014026:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8014028:	4b07      	ldr	r3, [pc, #28]	; (8014048 <MX_CAN1_Init+0x64>)
 801402a:	2200      	movs	r2, #0
 801402c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 801402e:	4b06      	ldr	r3, [pc, #24]	; (8014048 <MX_CAN1_Init+0x64>)
 8014030:	2200      	movs	r2, #0
 8014032:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8014034:	4804      	ldr	r0, [pc, #16]	; (8014048 <MX_CAN1_Init+0x64>)
 8014036:	f7ed fc1f 	bl	8001878 <HAL_CAN_Init>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d001      	beq.n	8014044 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8014040:	f000 fe62 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8014044:	bf00      	nop
 8014046:	bd80      	pop	{r7, pc}
 8014048:	2000a7d0 	.word	0x2000a7d0
 801404c:	40006400 	.word	0x40006400

08014050 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8014054:	4b17      	ldr	r3, [pc, #92]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014056:	4a18      	ldr	r2, [pc, #96]	; (80140b8 <MX_CAN2_Init+0x68>)
 8014058:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 801405a:	4b16      	ldr	r3, [pc, #88]	; (80140b4 <MX_CAN2_Init+0x64>)
 801405c:	2202      	movs	r2, #2
 801405e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8014060:	4b14      	ldr	r3, [pc, #80]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014062:	2200      	movs	r2, #0
 8014064:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8014066:	4b13      	ldr	r3, [pc, #76]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014068:	2200      	movs	r2, #0
 801406a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 801406c:	4b11      	ldr	r3, [pc, #68]	; (80140b4 <MX_CAN2_Init+0x64>)
 801406e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8014072:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8014074:	4b0f      	ldr	r3, [pc, #60]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014076:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 801407a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 801407c:	4b0d      	ldr	r3, [pc, #52]	; (80140b4 <MX_CAN2_Init+0x64>)
 801407e:	2200      	movs	r2, #0
 8014080:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8014082:	4b0c      	ldr	r3, [pc, #48]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014084:	2201      	movs	r2, #1
 8014086:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8014088:	4b0a      	ldr	r3, [pc, #40]	; (80140b4 <MX_CAN2_Init+0x64>)
 801408a:	2200      	movs	r2, #0
 801408c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 801408e:	4b09      	ldr	r3, [pc, #36]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014090:	2200      	movs	r2, #0
 8014092:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8014094:	4b07      	ldr	r3, [pc, #28]	; (80140b4 <MX_CAN2_Init+0x64>)
 8014096:	2200      	movs	r2, #0
 8014098:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 801409a:	4b06      	ldr	r3, [pc, #24]	; (80140b4 <MX_CAN2_Init+0x64>)
 801409c:	2200      	movs	r2, #0
 801409e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80140a0:	4804      	ldr	r0, [pc, #16]	; (80140b4 <MX_CAN2_Init+0x64>)
 80140a2:	f7ed fbe9 	bl	8001878 <HAL_CAN_Init>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d001      	beq.n	80140b0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80140ac:	f000 fe2c 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80140b0:	bf00      	nop
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	2000a554 	.word	0x2000a554
 80140b8:	40006800 	.word	0x40006800

080140bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80140c0:	4b18      	ldr	r3, [pc, #96]	; (8014124 <MX_SPI3_Init+0x68>)
 80140c2:	4a19      	ldr	r2, [pc, #100]	; (8014128 <MX_SPI3_Init+0x6c>)
 80140c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80140c6:	4b17      	ldr	r3, [pc, #92]	; (8014124 <MX_SPI3_Init+0x68>)
 80140c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80140cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80140ce:	4b15      	ldr	r3, [pc, #84]	; (8014124 <MX_SPI3_Init+0x68>)
 80140d0:	2200      	movs	r2, #0
 80140d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80140d4:	4b13      	ldr	r3, [pc, #76]	; (8014124 <MX_SPI3_Init+0x68>)
 80140d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80140da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80140dc:	4b11      	ldr	r3, [pc, #68]	; (8014124 <MX_SPI3_Init+0x68>)
 80140de:	2200      	movs	r2, #0
 80140e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80140e2:	4b10      	ldr	r3, [pc, #64]	; (8014124 <MX_SPI3_Init+0x68>)
 80140e4:	2201      	movs	r2, #1
 80140e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80140e8:	4b0e      	ldr	r3, [pc, #56]	; (8014124 <MX_SPI3_Init+0x68>)
 80140ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80140f0:	4b0c      	ldr	r3, [pc, #48]	; (8014124 <MX_SPI3_Init+0x68>)
 80140f2:	2218      	movs	r2, #24
 80140f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80140f6:	4b0b      	ldr	r3, [pc, #44]	; (8014124 <MX_SPI3_Init+0x68>)
 80140f8:	2200      	movs	r2, #0
 80140fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80140fc:	4b09      	ldr	r3, [pc, #36]	; (8014124 <MX_SPI3_Init+0x68>)
 80140fe:	2200      	movs	r2, #0
 8014100:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014102:	4b08      	ldr	r3, [pc, #32]	; (8014124 <MX_SPI3_Init+0x68>)
 8014104:	2200      	movs	r2, #0
 8014106:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8014108:	4b06      	ldr	r3, [pc, #24]	; (8014124 <MX_SPI3_Init+0x68>)
 801410a:	220a      	movs	r2, #10
 801410c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801410e:	4805      	ldr	r0, [pc, #20]	; (8014124 <MX_SPI3_Init+0x68>)
 8014110:	f7f0 fd16 	bl	8004b40 <HAL_SPI_Init>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	d001      	beq.n	801411e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 801411a:	f000 fdf5 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801411e:	bf00      	nop
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	2000a468 	.word	0x2000a468
 8014128:	40003c00 	.word	0x40003c00

0801412c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014132:	463b      	mov	r3, r7
 8014134:	2200      	movs	r2, #0
 8014136:	601a      	str	r2, [r3, #0]
 8014138:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801413a:	4b15      	ldr	r3, [pc, #84]	; (8014190 <MX_TIM6_Init+0x64>)
 801413c:	4a15      	ldr	r2, [pc, #84]	; (8014194 <MX_TIM6_Init+0x68>)
 801413e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8014140:	4b13      	ldr	r3, [pc, #76]	; (8014190 <MX_TIM6_Init+0x64>)
 8014142:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8014146:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014148:	4b11      	ldr	r3, [pc, #68]	; (8014190 <MX_TIM6_Init+0x64>)
 801414a:	2200      	movs	r2, #0
 801414c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 801414e:	4b10      	ldr	r3, [pc, #64]	; (8014190 <MX_TIM6_Init+0x64>)
 8014150:	f241 3287 	movw	r2, #4999	; 0x1387
 8014154:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014156:	4b0e      	ldr	r3, [pc, #56]	; (8014190 <MX_TIM6_Init+0x64>)
 8014158:	2200      	movs	r2, #0
 801415a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801415c:	480c      	ldr	r0, [pc, #48]	; (8014190 <MX_TIM6_Init+0x64>)
 801415e:	f7f0 ffa1 	bl	80050a4 <HAL_TIM_Base_Init>
 8014162:	4603      	mov	r3, r0
 8014164:	2b00      	cmp	r3, #0
 8014166:	d001      	beq.n	801416c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8014168:	f000 fdce 	bl	8014d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801416c:	2300      	movs	r3, #0
 801416e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014170:	2300      	movs	r3, #0
 8014172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8014174:	463b      	mov	r3, r7
 8014176:	4619      	mov	r1, r3
 8014178:	4805      	ldr	r0, [pc, #20]	; (8014190 <MX_TIM6_Init+0x64>)
 801417a:	f7f1 f9b3 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8014184:	f000 fdc0 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}
 8014190:	2000a624 	.word	0x2000a624
 8014194:	40001000 	.word	0x40001000

08014198 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801419c:	4b11      	ldr	r3, [pc, #68]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 801419e:	4a12      	ldr	r2, [pc, #72]	; (80141e8 <MX_USART1_UART_Init+0x50>)
 80141a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80141a2:	4b10      	ldr	r3, [pc, #64]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80141a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80141aa:	4b0e      	ldr	r3, [pc, #56]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80141b0:	4b0c      	ldr	r3, [pc, #48]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141b2:	2200      	movs	r2, #0
 80141b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80141b6:	4b0b      	ldr	r3, [pc, #44]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141b8:	2200      	movs	r2, #0
 80141ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80141bc:	4b09      	ldr	r3, [pc, #36]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141be:	220c      	movs	r2, #12
 80141c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80141c2:	4b08      	ldr	r3, [pc, #32]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141c4:	2200      	movs	r2, #0
 80141c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80141c8:	4b06      	ldr	r3, [pc, #24]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141ca:	2200      	movs	r2, #0
 80141cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80141ce:	4805      	ldr	r0, [pc, #20]	; (80141e4 <MX_USART1_UART_Init+0x4c>)
 80141d0:	f7f1 fa18 	bl	8005604 <HAL_UART_Init>
 80141d4:	4603      	mov	r3, r0
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d001      	beq.n	80141de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80141da:	f000 fd95 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80141de:	bf00      	nop
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	2000a57c 	.word	0x2000a57c
 80141e8:	40011000 	.word	0x40011000

080141ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80141f0:	4b11      	ldr	r3, [pc, #68]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 80141f2:	4a12      	ldr	r2, [pc, #72]	; (801423c <MX_USART2_UART_Init+0x50>)
 80141f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80141f6:	4b10      	ldr	r3, [pc, #64]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 80141f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80141fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80141fe:	4b0e      	ldr	r3, [pc, #56]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 8014200:	2200      	movs	r2, #0
 8014202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8014204:	4b0c      	ldr	r3, [pc, #48]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 8014206:	2200      	movs	r2, #0
 8014208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801420a:	4b0b      	ldr	r3, [pc, #44]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 801420c:	2200      	movs	r2, #0
 801420e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8014210:	4b09      	ldr	r3, [pc, #36]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 8014212:	220c      	movs	r2, #12
 8014214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014216:	4b08      	ldr	r3, [pc, #32]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 8014218:	2200      	movs	r2, #0
 801421a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801421c:	4b06      	ldr	r3, [pc, #24]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 801421e:	2200      	movs	r2, #0
 8014220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8014222:	4805      	ldr	r0, [pc, #20]	; (8014238 <MX_USART2_UART_Init+0x4c>)
 8014224:	f7f1 f9ee 	bl	8005604 <HAL_UART_Init>
 8014228:	4603      	mov	r3, r0
 801422a:	2b00      	cmp	r3, #0
 801422c:	d001      	beq.n	8014232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801422e:	f000 fd6b 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8014232:	bf00      	nop
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	2000a790 	.word	0x2000a790
 801423c:	40004400 	.word	0x40004400

08014240 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8014244:	4b11      	ldr	r3, [pc, #68]	; (801428c <MX_USART3_UART_Init+0x4c>)
 8014246:	4a12      	ldr	r2, [pc, #72]	; (8014290 <MX_USART3_UART_Init+0x50>)
 8014248:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801424a:	4b10      	ldr	r3, [pc, #64]	; (801428c <MX_USART3_UART_Init+0x4c>)
 801424c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014250:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8014252:	4b0e      	ldr	r3, [pc, #56]	; (801428c <MX_USART3_UART_Init+0x4c>)
 8014254:	2200      	movs	r2, #0
 8014256:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8014258:	4b0c      	ldr	r3, [pc, #48]	; (801428c <MX_USART3_UART_Init+0x4c>)
 801425a:	2200      	movs	r2, #0
 801425c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801425e:	4b0b      	ldr	r3, [pc, #44]	; (801428c <MX_USART3_UART_Init+0x4c>)
 8014260:	2200      	movs	r2, #0
 8014262:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8014264:	4b09      	ldr	r3, [pc, #36]	; (801428c <MX_USART3_UART_Init+0x4c>)
 8014266:	220c      	movs	r2, #12
 8014268:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801426a:	4b08      	ldr	r3, [pc, #32]	; (801428c <MX_USART3_UART_Init+0x4c>)
 801426c:	2200      	movs	r2, #0
 801426e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8014270:	4b06      	ldr	r3, [pc, #24]	; (801428c <MX_USART3_UART_Init+0x4c>)
 8014272:	2200      	movs	r2, #0
 8014274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8014276:	4805      	ldr	r0, [pc, #20]	; (801428c <MX_USART3_UART_Init+0x4c>)
 8014278:	f7f1 f9c4 	bl	8005604 <HAL_UART_Init>
 801427c:	4603      	mov	r3, r0
 801427e:	2b00      	cmp	r3, #0
 8014280:	d001      	beq.n	8014286 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8014282:	f000 fd41 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8014286:	bf00      	nop
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	2000a3b8 	.word	0x2000a3b8
 8014290:	40004800 	.word	0x40004800

08014294 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8014298:	4b11      	ldr	r3, [pc, #68]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 801429a:	4a12      	ldr	r2, [pc, #72]	; (80142e4 <MX_USART6_UART_Init+0x50>)
 801429c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 801429e:	4b10      	ldr	r3, [pc, #64]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80142a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80142a6:	4b0e      	ldr	r3, [pc, #56]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142a8:	2200      	movs	r2, #0
 80142aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80142ac:	4b0c      	ldr	r3, [pc, #48]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142ae:	2200      	movs	r2, #0
 80142b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80142b2:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142b4:	2200      	movs	r2, #0
 80142b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80142b8:	4b09      	ldr	r3, [pc, #36]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142ba:	220c      	movs	r2, #12
 80142bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80142be:	4b08      	ldr	r3, [pc, #32]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142c0:	2200      	movs	r2, #0
 80142c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80142c4:	4b06      	ldr	r3, [pc, #24]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142c6:	2200      	movs	r2, #0
 80142c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80142ca:	4805      	ldr	r0, [pc, #20]	; (80142e0 <MX_USART6_UART_Init+0x4c>)
 80142cc:	f7f1 f99a 	bl	8005604 <HAL_UART_Init>
 80142d0:	4603      	mov	r3, r0
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d001      	beq.n	80142da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80142d6:	f000 fd17 	bl	8014d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80142da:	bf00      	nop
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	2000a664 	.word	0x2000a664
 80142e4:	40011400 	.word	0x40011400

080142e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80142ee:	2300      	movs	r3, #0
 80142f0:	607b      	str	r3, [r7, #4]
 80142f2:	4b0c      	ldr	r3, [pc, #48]	; (8014324 <MX_DMA_Init+0x3c>)
 80142f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f6:	4a0b      	ldr	r2, [pc, #44]	; (8014324 <MX_DMA_Init+0x3c>)
 80142f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80142fc:	6313      	str	r3, [r2, #48]	; 0x30
 80142fe:	4b09      	ldr	r3, [pc, #36]	; (8014324 <MX_DMA_Init+0x3c>)
 8014300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014306:	607b      	str	r3, [r7, #4]
 8014308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 801430a:	2200      	movs	r2, #0
 801430c:	2100      	movs	r1, #0
 801430e:	2038      	movs	r0, #56	; 0x38
 8014310:	f7ed ffcd 	bl	80022ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8014314:	2038      	movs	r0, #56	; 0x38
 8014316:	f7ed ffe6 	bl	80022e6 <HAL_NVIC_EnableIRQ>

}
 801431a:	bf00      	nop
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	40023800 	.word	0x40023800

08014328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b08c      	sub	sp, #48	; 0x30
 801432c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801432e:	f107 031c 	add.w	r3, r7, #28
 8014332:	2200      	movs	r2, #0
 8014334:	601a      	str	r2, [r3, #0]
 8014336:	605a      	str	r2, [r3, #4]
 8014338:	609a      	str	r2, [r3, #8]
 801433a:	60da      	str	r2, [r3, #12]
 801433c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801433e:	2300      	movs	r3, #0
 8014340:	61bb      	str	r3, [r7, #24]
 8014342:	4b5c      	ldr	r3, [pc, #368]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014346:	4a5b      	ldr	r2, [pc, #364]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014348:	f043 0310 	orr.w	r3, r3, #16
 801434c:	6313      	str	r3, [r2, #48]	; 0x30
 801434e:	4b59      	ldr	r3, [pc, #356]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014352:	f003 0310 	and.w	r3, r3, #16
 8014356:	61bb      	str	r3, [r7, #24]
 8014358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801435a:	2300      	movs	r3, #0
 801435c:	617b      	str	r3, [r7, #20]
 801435e:	4b55      	ldr	r3, [pc, #340]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014362:	4a54      	ldr	r2, [pc, #336]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014364:	f043 0304 	orr.w	r3, r3, #4
 8014368:	6313      	str	r3, [r2, #48]	; 0x30
 801436a:	4b52      	ldr	r3, [pc, #328]	; (80144b4 <MX_GPIO_Init+0x18c>)
 801436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801436e:	f003 0304 	and.w	r3, r3, #4
 8014372:	617b      	str	r3, [r7, #20]
 8014374:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014376:	2300      	movs	r3, #0
 8014378:	613b      	str	r3, [r7, #16]
 801437a:	4b4e      	ldr	r3, [pc, #312]	; (80144b4 <MX_GPIO_Init+0x18c>)
 801437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801437e:	4a4d      	ldr	r2, [pc, #308]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014384:	6313      	str	r3, [r2, #48]	; 0x30
 8014386:	4b4b      	ldr	r3, [pc, #300]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801438e:	613b      	str	r3, [r7, #16]
 8014390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014392:	2300      	movs	r3, #0
 8014394:	60fb      	str	r3, [r7, #12]
 8014396:	4b47      	ldr	r3, [pc, #284]	; (80144b4 <MX_GPIO_Init+0x18c>)
 8014398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801439a:	4a46      	ldr	r2, [pc, #280]	; (80144b4 <MX_GPIO_Init+0x18c>)
 801439c:	f043 0301 	orr.w	r3, r3, #1
 80143a0:	6313      	str	r3, [r2, #48]	; 0x30
 80143a2:	4b44      	ldr	r3, [pc, #272]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143a6:	f003 0301 	and.w	r3, r3, #1
 80143aa:	60fb      	str	r3, [r7, #12]
 80143ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80143ae:	2300      	movs	r3, #0
 80143b0:	60bb      	str	r3, [r7, #8]
 80143b2:	4b40      	ldr	r3, [pc, #256]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143b6:	4a3f      	ldr	r2, [pc, #252]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143b8:	f043 0302 	orr.w	r3, r3, #2
 80143bc:	6313      	str	r3, [r2, #48]	; 0x30
 80143be:	4b3d      	ldr	r3, [pc, #244]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143c2:	f003 0302 	and.w	r3, r3, #2
 80143c6:	60bb      	str	r3, [r7, #8]
 80143c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80143ca:	2300      	movs	r3, #0
 80143cc:	607b      	str	r3, [r7, #4]
 80143ce:	4b39      	ldr	r3, [pc, #228]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143d2:	4a38      	ldr	r2, [pc, #224]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143d4:	f043 0308 	orr.w	r3, r3, #8
 80143d8:	6313      	str	r3, [r2, #48]	; 0x30
 80143da:	4b36      	ldr	r3, [pc, #216]	; (80144b4 <MX_GPIO_Init+0x18c>)
 80143dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143de:	f003 0308 	and.w	r3, r3, #8
 80143e2:	607b      	str	r3, [r7, #4]
 80143e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ERR_Pin|WARN_Pin, GPIO_PIN_SET);
 80143e6:	2201      	movs	r2, #1
 80143e8:	2160      	movs	r1, #96	; 0x60
 80143ea:	4833      	ldr	r0, [pc, #204]	; (80144b8 <MX_GPIO_Init+0x190>)
 80143ec:	f7ef ff14 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IP_Pin|RUN_Pin|E6_Pin, GPIO_PIN_SET);
 80143f0:	2201      	movs	r2, #1
 80143f2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80143f6:	4831      	ldr	r0, [pc, #196]	; (80144bc <MX_GPIO_Init+0x194>)
 80143f8:	f7ef ff0e 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_EN_Pin|SPI3_CS_Pin, GPIO_PIN_SET);
 80143fc:	2201      	movs	r2, #1
 80143fe:	f248 0101 	movw	r1, #32769	; 0x8001
 8014402:	482f      	ldr	r0, [pc, #188]	; (80144c0 <MX_GPIO_Init+0x198>)
 8014404:	f7ef ff08 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERR_Pin WARN_Pin */
  GPIO_InitStruct.Pin = ERR_Pin|WARN_Pin;
 8014408:	2360      	movs	r3, #96	; 0x60
 801440a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801440c:	2301      	movs	r3, #1
 801440e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014410:	2300      	movs	r3, #0
 8014412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014414:	2300      	movs	r3, #0
 8014416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014418:	f107 031c 	add.w	r3, r7, #28
 801441c:	4619      	mov	r1, r3
 801441e:	4826      	ldr	r0, [pc, #152]	; (80144b8 <MX_GPIO_Init+0x190>)
 8014420:	f7ef fd60 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_Pin RUN_Pin E6_Pin */
  GPIO_InitStruct.Pin = IP_Pin|RUN_Pin|E6_Pin;
 8014424:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8014428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801442a:	2301      	movs	r3, #1
 801442c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801442e:	2300      	movs	r3, #0
 8014430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014432:	2300      	movs	r3, #0
 8014434:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014436:	f107 031c 	add.w	r3, r7, #28
 801443a:	4619      	mov	r1, r3
 801443c:	481f      	ldr	r0, [pc, #124]	; (80144bc <MX_GPIO_Init+0x194>)
 801443e:	f7ef fd51 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_IN1_Pin */
  GPIO_InitStruct.Pin = D_IN1_Pin;
 8014442:	2304      	movs	r3, #4
 8014444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014446:	2300      	movs	r3, #0
 8014448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801444a:	2302      	movs	r3, #2
 801444c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D_IN1_GPIO_Port, &GPIO_InitStruct);
 801444e:	f107 031c 	add.w	r3, r7, #28
 8014452:	4619      	mov	r1, r3
 8014454:	481b      	ldr	r0, [pc, #108]	; (80144c4 <MX_GPIO_Init+0x19c>)
 8014456:	f7ef fd45 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_IN2_Pin */
  GPIO_InitStruct.Pin = D_IN2_Pin;
 801445a:	2380      	movs	r3, #128	; 0x80
 801445c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801445e:	2300      	movs	r3, #0
 8014460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014462:	2302      	movs	r3, #2
 8014464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D_IN2_GPIO_Port, &GPIO_InitStruct);
 8014466:	f107 031c 	add.w	r3, r7, #28
 801446a:	4619      	mov	r1, r3
 801446c:	4812      	ldr	r0, [pc, #72]	; (80144b8 <MX_GPIO_Init+0x190>)
 801446e:	f7ef fd39 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 8014472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014478:	2301      	movs	r3, #1
 801447a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801447c:	2300      	movs	r3, #0
 801447e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014480:	2300      	movs	r3, #0
 8014482:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8014484:	f107 031c 	add.w	r3, r7, #28
 8014488:	4619      	mov	r1, r3
 801448a:	480d      	ldr	r0, [pc, #52]	; (80144c0 <MX_GPIO_Init+0x198>)
 801448c:	f7ef fd2a 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8014490:	2301      	movs	r3, #1
 8014492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014494:	2301      	movs	r3, #1
 8014496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014498:	2300      	movs	r3, #0
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801449c:	2302      	movs	r3, #2
 801449e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80144a0:	f107 031c 	add.w	r3, r7, #28
 80144a4:	4619      	mov	r1, r3
 80144a6:	4806      	ldr	r0, [pc, #24]	; (80144c0 <MX_GPIO_Init+0x198>)
 80144a8:	f7ef fd1c 	bl	8003ee4 <HAL_GPIO_Init>

}
 80144ac:	bf00      	nop
 80144ae:	3730      	adds	r7, #48	; 0x30
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	40023800 	.word	0x40023800
 80144b8:	40021000 	.word	0x40021000
 80144bc:	40020800 	.word	0x40020800
 80144c0:	40020c00 	.word	0x40020c00
 80144c4:	40020400 	.word	0x40020400

080144c8 <tcp_send_all>:

/* USER CODE BEGIN 4 */
void tcp_send_all() {
 80144c8:	b590      	push	{r4, r7, lr}
 80144ca:	b089      	sub	sp, #36	; 0x24
 80144cc:	af00      	add	r7, sp, #0
	  for(uint8_t i=0; i<numofports; i++) {
 80144ce:	2300      	movs	r3, #0
 80144d0:	77fb      	strb	r3, [r7, #31]
 80144d2:	e09f      	b.n	8014614 <tcp_send_all+0x14c>
		  char buf_out[30];
		  if(i<8) {
 80144d4:	7ffb      	ldrb	r3, [r7, #31]
 80144d6:	2b07      	cmp	r3, #7
 80144d8:	d810      	bhi.n	80144fc <tcp_send_all+0x34>
			  sprintf(buf_out, "%.2f\r", ads_volt[i]);
 80144da:	7ffb      	ldrb	r3, [r7, #31]
 80144dc:	4a51      	ldr	r2, [pc, #324]	; (8014624 <tcp_send_all+0x15c>)
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	4413      	add	r3, r2
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7ec f83f 	bl	8000568 <__aeabi_f2d>
 80144ea:	4603      	mov	r3, r0
 80144ec:	460c      	mov	r4, r1
 80144ee:	4638      	mov	r0, r7
 80144f0:	461a      	mov	r2, r3
 80144f2:	4623      	mov	r3, r4
 80144f4:	494c      	ldr	r1, [pc, #304]	; (8014628 <tcp_send_all+0x160>)
 80144f6:	f001 fcbd 	bl	8015e74 <siprintf>
 80144fa:	e008      	b.n	801450e <tcp_send_all+0x46>
		  }
		  else {
			  sprintf(buf_out, "this is port: %d\n", (5000 + i));
 80144fc:	7ffb      	ldrb	r3, [r7, #31]
 80144fe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8014502:	3308      	adds	r3, #8
 8014504:	4638      	mov	r0, r7
 8014506:	461a      	mov	r2, r3
 8014508:	4948      	ldr	r1, [pc, #288]	; (801462c <tcp_send_all+0x164>)
 801450a:	f001 fcb3 	bl	8015e74 <siprintf>
		  }
		  for(uint8_t j=0; j<numofclients; j++) {
 801450e:	2300      	movs	r3, #0
 8014510:	77bb      	strb	r3, [r7, #30]
 8014512:	e079      	b.n	8014608 <tcp_send_all+0x140>
			  if(accepted_pcb[i][j]) {
 8014514:	7ffa      	ldrb	r2, [r7, #31]
 8014516:	7fb9      	ldrb	r1, [r7, #30]
 8014518:	4845      	ldr	r0, [pc, #276]	; (8014630 <tcp_send_all+0x168>)
 801451a:	4613      	mov	r3, r2
 801451c:	005b      	lsls	r3, r3, #1
 801451e:	4413      	add	r3, r2
 8014520:	4403      	add	r3, r0
 8014522:	440b      	add	r3, r1
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	b2db      	uxtb	r3, r3
 8014528:	2b00      	cmp	r3, #0
 801452a:	d06a      	beq.n	8014602 <tcp_send_all+0x13a>

				  if( pcb[i][j] != NULL && pcb[i][j]->state == ESTABLISHED) {
 801452c:	7ffa      	ldrb	r2, [r7, #31]
 801452e:	7fb9      	ldrb	r1, [r7, #30]
 8014530:	4840      	ldr	r0, [pc, #256]	; (8014634 <tcp_send_all+0x16c>)
 8014532:	4613      	mov	r3, r2
 8014534:	005b      	lsls	r3, r3, #1
 8014536:	4413      	add	r3, r2
 8014538:	440b      	add	r3, r1
 801453a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d03f      	beq.n	80145c2 <tcp_send_all+0xfa>
 8014542:	7ffa      	ldrb	r2, [r7, #31]
 8014544:	7fb9      	ldrb	r1, [r7, #30]
 8014546:	483b      	ldr	r0, [pc, #236]	; (8014634 <tcp_send_all+0x16c>)
 8014548:	4613      	mov	r3, r2
 801454a:	005b      	lsls	r3, r3, #1
 801454c:	4413      	add	r3, r2
 801454e:	440b      	add	r3, r1
 8014550:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014554:	7d1b      	ldrb	r3, [r3, #20]
 8014556:	2b04      	cmp	r3, #4
 8014558:	d133      	bne.n	80145c2 <tcp_send_all+0xfa>
					  if(tcp_write(pcb[i][j], &buf_out, strlen(buf_out)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 801455a:	7ffa      	ldrb	r2, [r7, #31]
 801455c:	7fb9      	ldrb	r1, [r7, #30]
 801455e:	4835      	ldr	r0, [pc, #212]	; (8014634 <tcp_send_all+0x16c>)
 8014560:	4613      	mov	r3, r2
 8014562:	005b      	lsls	r3, r3, #1
 8014564:	4413      	add	r3, r2
 8014566:	440b      	add	r3, r1
 8014568:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801456c:	463b      	mov	r3, r7
 801456e:	4618      	mov	r0, r3
 8014570:	f7eb fe38 	bl	80001e4 <strlen>
 8014574:	4603      	mov	r3, r0
 8014576:	b29b      	uxth	r3, r3
 8014578:	3301      	adds	r3, #1
 801457a:	b29a      	uxth	r2, r3
 801457c:	4639      	mov	r1, r7
 801457e:	2301      	movs	r3, #1
 8014580:	4620      	mov	r0, r4
 8014582:	f7f8 fca3 	bl	800cecc <tcp_write>
 8014586:	4603      	mov	r3, r0
 8014588:	2b00      	cmp	r3, #0
 801458a:	d003      	beq.n	8014594 <tcp_send_all+0xcc>
						  print("----------- FAIL: write did not return ok\n");
 801458c:	482a      	ldr	r0, [pc, #168]	; (8014638 <tcp_send_all+0x170>)
 801458e:	f000 fb51 	bl	8014c34 <print>
					  if(tcp_write(pcb[i][j], &buf_out, strlen(buf_out)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8014592:	e036      	b.n	8014602 <tcp_send_all+0x13a>
//						  tcp_close(pcb[i][j]);
//						  accepted_pcb[i][j] = 0;
					  }
					  else {
						  tcp_output(pcb[i][j]);
 8014594:	7ffa      	ldrb	r2, [r7, #31]
 8014596:	7fb9      	ldrb	r1, [r7, #30]
 8014598:	4826      	ldr	r0, [pc, #152]	; (8014634 <tcp_send_all+0x16c>)
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	440b      	add	r3, r1
 80145a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7f9 f942 	bl	800d830 <tcp_output>
						  print(buf, "+++++++   WRITING on port: %d conn %d\n", startport + i, j+1);
 80145ac:	7ffb      	ldrb	r3, [r7, #31]
 80145ae:	f503 529c 	add.w	r2, r3, #4992	; 0x1380
 80145b2:	3208      	adds	r2, #8
 80145b4:	7fbb      	ldrb	r3, [r7, #30]
 80145b6:	3301      	adds	r3, #1
 80145b8:	4920      	ldr	r1, [pc, #128]	; (801463c <tcp_send_all+0x174>)
 80145ba:	4821      	ldr	r0, [pc, #132]	; (8014640 <tcp_send_all+0x178>)
 80145bc:	f000 fb3a 	bl	8014c34 <print>
					  if(tcp_write(pcb[i][j], &buf_out, strlen(buf_out)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 80145c0:	e01f      	b.n	8014602 <tcp_send_all+0x13a>
					  }
				  }
				  else {
					  print("----------- Connection closed on port: %d conn %d\n", startport + i, j+1);
 80145c2:	7ffb      	ldrb	r3, [r7, #31]
 80145c4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80145c8:	3308      	adds	r3, #8
 80145ca:	7fba      	ldrb	r2, [r7, #30]
 80145cc:	3201      	adds	r2, #1
 80145ce:	4619      	mov	r1, r3
 80145d0:	481c      	ldr	r0, [pc, #112]	; (8014644 <tcp_send_all+0x17c>)
 80145d2:	f000 fb2f 	bl	8014c34 <print>
					  tcp_close(pcb[i][j]);
 80145d6:	7ffa      	ldrb	r2, [r7, #31]
 80145d8:	7fb9      	ldrb	r1, [r7, #30]
 80145da:	4816      	ldr	r0, [pc, #88]	; (8014634 <tcp_send_all+0x16c>)
 80145dc:	4613      	mov	r3, r2
 80145de:	005b      	lsls	r3, r3, #1
 80145e0:	4413      	add	r3, r2
 80145e2:	440b      	add	r3, r1
 80145e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f4 fdc5 	bl	8009178 <tcp_close>
					  accepted_pcb[i][j] = 0;
 80145ee:	7ffa      	ldrb	r2, [r7, #31]
 80145f0:	7fb9      	ldrb	r1, [r7, #30]
 80145f2:	480f      	ldr	r0, [pc, #60]	; (8014630 <tcp_send_all+0x168>)
 80145f4:	4613      	mov	r3, r2
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	4413      	add	r3, r2
 80145fa:	4403      	add	r3, r0
 80145fc:	440b      	add	r3, r1
 80145fe:	2200      	movs	r2, #0
 8014600:	701a      	strb	r2, [r3, #0]
		  for(uint8_t j=0; j<numofclients; j++) {
 8014602:	7fbb      	ldrb	r3, [r7, #30]
 8014604:	3301      	adds	r3, #1
 8014606:	77bb      	strb	r3, [r7, #30]
 8014608:	7fbb      	ldrb	r3, [r7, #30]
 801460a:	2b02      	cmp	r3, #2
 801460c:	d982      	bls.n	8014514 <tcp_send_all+0x4c>
	  for(uint8_t i=0; i<numofports; i++) {
 801460e:	7ffb      	ldrb	r3, [r7, #31]
 8014610:	3301      	adds	r3, #1
 8014612:	77fb      	strb	r3, [r7, #31]
 8014614:	7ffb      	ldrb	r3, [r7, #31]
 8014616:	2b09      	cmp	r3, #9
 8014618:	f67f af5c 	bls.w	80144d4 <tcp_send_all+0xc>
				  }
			  }
		  }

	  }
}
 801461c:	bf00      	nop
 801461e:	3724      	adds	r7, #36	; 0x24
 8014620:	46bd      	mov	sp, r7
 8014622:	bd90      	pop	{r4, r7, pc}
 8014624:	200008a8 	.word	0x200008a8
 8014628:	0801a650 	.word	0x0801a650
 801462c:	0801a658 	.word	0x0801a658
 8014630:	2000a4d0 	.word	0x2000a4d0
 8014634:	2000a714 	.word	0x2000a714
 8014638:	0801a66c 	.word	0x0801a66c
 801463c:	0801a698 	.word	0x0801a698
 8014640:	2000a6a4 	.word	0x2000a6a4
 8014644:	0801a6c0 	.word	0x0801a6c0

08014648 <NetCGIhandler>:

const char* NetCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8014648:	b590      	push	{r4, r7, lr}
 801464a:	b087      	sub	sp, #28
 801464c:	af00      	add	r7, sp, #0
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	603b      	str	r3, [r7, #0]
	int offset = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	617b      	str	r3, [r7, #20]
	if (strcmp(pcParam[0], "dhcp") == 0) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4983      	ldr	r1, [pc, #524]	; (801486c <NetCGIhandler+0x224>)
 8014660:	4618      	mov	r0, r3
 8014662:	f7eb fdb5 	bl	80001d0 <strcmp>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	d11e      	bne.n	80146aa <NetCGIhandler+0x62>
		offset = 1;
 801466c:	2301      	movs	r3, #1
 801466e:	617b      	str	r3, [r7, #20]
		if (strcmp(pcValue[0], "1") == 0) { // submitted checked
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	497e      	ldr	r1, [pc, #504]	; (8014870 <NetCGIhandler+0x228>)
 8014676:	4618      	mov	r0, r3
 8014678:	f7eb fdaa 	bl	80001d0 <strcmp>
 801467c:	4603      	mov	r3, r0
 801467e:	2b00      	cmp	r3, #0
 8014680:	d113      	bne.n	80146aa <NetCGIhandler+0x62>
			if(!dhcp_en) { 	// this means that dhcp was disabled and we want to enable it
 8014682:	4b7c      	ldr	r3, [pc, #496]	; (8014874 <NetCGIhandler+0x22c>)
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d10f      	bne.n	80146aa <NetCGIhandler+0x62>
				print("---------------------------------------------------\n");
 801468a:	487b      	ldr	r0, [pc, #492]	; (8014878 <NetCGIhandler+0x230>)
 801468c:	f000 fad2 	bl	8014c34 <print>
				print(" -Got request to enable DHCP\n");
 8014690:	487a      	ldr	r0, [pc, #488]	; (801487c <NetCGIhandler+0x234>)
 8014692:	f000 facf 	bl	8014c34 <print>
				flash_data[1] = 0;
 8014696:	4b7a      	ldr	r3, [pc, #488]	; (8014880 <NetCGIhandler+0x238>)
 8014698:	2200      	movs	r2, #0
 801469a:	605a      	str	r2, [r3, #4]
				Flash_Write_Data(START_F_ADDRESS_IP, flash_data, 5);
 801469c:	2205      	movs	r2, #5
 801469e:	4978      	ldr	r1, [pc, #480]	; (8014880 <NetCGIhandler+0x238>)
 80146a0:	4878      	ldr	r0, [pc, #480]	; (8014884 <NetCGIhandler+0x23c>)
 80146a2:	f7fe fda3 	bl	80131ec <Flash_Write_Data>
				NVIC_SystemReset();
 80146a6:	f7ff f9d5 	bl	8013a54 <__NVIC_SystemReset>
			}
		}
	}
	if(strcmp(pcParam[0+offset], "ip_1") == 0 && !offset) {
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	4413      	add	r3, r2
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4974      	ldr	r1, [pc, #464]	; (8014888 <NetCGIhandler+0x240>)
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7eb fd8a 	bl	80001d0 <strcmp>
 80146bc:	4603      	mov	r3, r0
 80146be:	2b00      	cmp	r3, #0
 80146c0:	f040 80ce 	bne.w	8014860 <NetCGIhandler+0x218>
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	f040 80ca 	bne.w	8014860 <NetCGIhandler+0x218>
		if(iNumParams >= 12) {																	// NOT SURE IF NEDDED !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	2b0b      	cmp	r3, #11
 80146d0:	f340 80c3 	ble.w	801485a <NetCGIhandler+0x212>
			print("---------------------------------------------------\n");
 80146d4:	4868      	ldr	r0, [pc, #416]	; (8014878 <NetCGIhandler+0x230>)
 80146d6:	f000 faad 	bl	8014c34 <print>
			print(" -Got request to change network setting to:\n");
 80146da:	486c      	ldr	r0, [pc, #432]	; (801488c <NetCGIhandler+0x244>)
 80146dc:	f000 faaa 	bl	8014c34 <print>

			for(int i = 0; i < iNumParams-offset; i++) {
 80146e0:	2300      	movs	r3, #0
 80146e2:	613b      	str	r3, [r7, #16]
 80146e4:	e014      	b.n	8014710 <NetCGIhandler+0xc8>
				print("%s: %s\n", pcParam[i+offset], pcValue[i+offset]);
 80146e6:	693a      	ldr	r2, [r7, #16]
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	4413      	add	r3, r2
 80146ec:	009b      	lsls	r3, r3, #2
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	4413      	add	r3, r2
 80146f2:	6819      	ldr	r1, [r3, #0]
 80146f4:	693a      	ldr	r2, [r7, #16]
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	4413      	add	r3, r2
 80146fa:	009b      	lsls	r3, r3, #2
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	4413      	add	r3, r2
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	461a      	mov	r2, r3
 8014704:	4862      	ldr	r0, [pc, #392]	; (8014890 <NetCGIhandler+0x248>)
 8014706:	f000 fa95 	bl	8014c34 <print>
			for(int i = 0; i < iNumParams-offset; i++) {
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	3301      	adds	r3, #1
 801470e:	613b      	str	r3, [r7, #16]
 8014710:	68ba      	ldr	r2, [r7, #8]
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	1ad3      	subs	r3, r2, r3
 8014716:	693a      	ldr	r2, [r7, #16]
 8014718:	429a      	cmp	r2, r3
 801471a:	dbe4      	blt.n	80146e6 <NetCGIhandler+0x9e>
			}
			print("---------------------------------------------------\n");
 801471c:	4856      	ldr	r0, [pc, #344]	; (8014878 <NetCGIhandler+0x230>)
 801471e:	f000 fa89 	bl	8014c34 <print>

			flash_data[1] = 1;
 8014722:	4b57      	ldr	r3, [pc, #348]	; (8014880 <NetCGIhandler+0x238>)
 8014724:	2201      	movs	r2, #1
 8014726:	605a      	str	r2, [r3, #4]
			flash_data[2] = (uint32_t)(atoi(pcValue[0+offset])<<0) + (uint32_t)(atoi(pcValue[1+offset])<<8) + (uint32_t)(atoi(pcValue[2+offset])<<16) + (uint32_t)(atoi(pcValue[3+offset])<<24);
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	683a      	ldr	r2, [r7, #0]
 801472e:	4413      	add	r3, r2
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4618      	mov	r0, r3
 8014734:	f000 feab 	bl	801548e <atoi>
 8014738:	4603      	mov	r3, r0
 801473a:	461c      	mov	r4, r3
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	3301      	adds	r3, #1
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	683a      	ldr	r2, [r7, #0]
 8014744:	4413      	add	r3, r2
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	4618      	mov	r0, r3
 801474a:	f000 fea0 	bl	801548e <atoi>
 801474e:	4603      	mov	r3, r0
 8014750:	021b      	lsls	r3, r3, #8
 8014752:	441c      	add	r4, r3
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	3302      	adds	r3, #2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	683a      	ldr	r2, [r7, #0]
 801475c:	4413      	add	r3, r2
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4618      	mov	r0, r3
 8014762:	f000 fe94 	bl	801548e <atoi>
 8014766:	4603      	mov	r3, r0
 8014768:	041b      	lsls	r3, r3, #16
 801476a:	441c      	add	r4, r3
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	3303      	adds	r3, #3
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	683a      	ldr	r2, [r7, #0]
 8014774:	4413      	add	r3, r2
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	4618      	mov	r0, r3
 801477a:	f000 fe88 	bl	801548e <atoi>
 801477e:	4603      	mov	r3, r0
 8014780:	061b      	lsls	r3, r3, #24
 8014782:	4423      	add	r3, r4
 8014784:	4a3e      	ldr	r2, [pc, #248]	; (8014880 <NetCGIhandler+0x238>)
 8014786:	6093      	str	r3, [r2, #8]
			flash_data[3] = (uint32_t)(atoi(pcValue[4+offset])<<0) + (uint32_t)(atoi(pcValue[5+offset])<<8) + (uint32_t)(atoi(pcValue[6+offset])<<16) + (uint32_t)(atoi(pcValue[7+offset])<<24);
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	3304      	adds	r3, #4
 801478c:	009b      	lsls	r3, r3, #2
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	4413      	add	r3, r2
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4618      	mov	r0, r3
 8014796:	f000 fe7a 	bl	801548e <atoi>
 801479a:	4603      	mov	r3, r0
 801479c:	461c      	mov	r4, r3
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	3305      	adds	r3, #5
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	683a      	ldr	r2, [r7, #0]
 80147a6:	4413      	add	r3, r2
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4618      	mov	r0, r3
 80147ac:	f000 fe6f 	bl	801548e <atoi>
 80147b0:	4603      	mov	r3, r0
 80147b2:	021b      	lsls	r3, r3, #8
 80147b4:	441c      	add	r4, r3
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	3306      	adds	r3, #6
 80147ba:	009b      	lsls	r3, r3, #2
 80147bc:	683a      	ldr	r2, [r7, #0]
 80147be:	4413      	add	r3, r2
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	4618      	mov	r0, r3
 80147c4:	f000 fe63 	bl	801548e <atoi>
 80147c8:	4603      	mov	r3, r0
 80147ca:	041b      	lsls	r3, r3, #16
 80147cc:	441c      	add	r4, r3
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	3307      	adds	r3, #7
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	4413      	add	r3, r2
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4618      	mov	r0, r3
 80147dc:	f000 fe57 	bl	801548e <atoi>
 80147e0:	4603      	mov	r3, r0
 80147e2:	061b      	lsls	r3, r3, #24
 80147e4:	4423      	add	r3, r4
 80147e6:	4a26      	ldr	r2, [pc, #152]	; (8014880 <NetCGIhandler+0x238>)
 80147e8:	60d3      	str	r3, [r2, #12]
			flash_data[4] = (uint32_t)(atoi(pcValue[8+offset])<<0) + (uint32_t)(atoi(pcValue[9+offset])<<8) + (uint32_t)(atoi(pcValue[10+offset])<<16) + (uint32_t)(atoi(pcValue[11+offset])<<24);
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	3308      	adds	r3, #8
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	683a      	ldr	r2, [r7, #0]
 80147f2:	4413      	add	r3, r2
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 fe49 	bl	801548e <atoi>
 80147fc:	4603      	mov	r3, r0
 80147fe:	461c      	mov	r4, r3
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	3309      	adds	r3, #9
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	683a      	ldr	r2, [r7, #0]
 8014808:	4413      	add	r3, r2
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4618      	mov	r0, r3
 801480e:	f000 fe3e 	bl	801548e <atoi>
 8014812:	4603      	mov	r3, r0
 8014814:	021b      	lsls	r3, r3, #8
 8014816:	441c      	add	r4, r3
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	330a      	adds	r3, #10
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	683a      	ldr	r2, [r7, #0]
 8014820:	4413      	add	r3, r2
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	4618      	mov	r0, r3
 8014826:	f000 fe32 	bl	801548e <atoi>
 801482a:	4603      	mov	r3, r0
 801482c:	041b      	lsls	r3, r3, #16
 801482e:	441c      	add	r4, r3
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	330b      	adds	r3, #11
 8014834:	009b      	lsls	r3, r3, #2
 8014836:	683a      	ldr	r2, [r7, #0]
 8014838:	4413      	add	r3, r2
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	f000 fe26 	bl	801548e <atoi>
 8014842:	4603      	mov	r3, r0
 8014844:	061b      	lsls	r3, r3, #24
 8014846:	4423      	add	r3, r4
 8014848:	4a0d      	ldr	r2, [pc, #52]	; (8014880 <NetCGIhandler+0x238>)
 801484a:	6113      	str	r3, [r2, #16]
			Flash_Write_Data(START_F_ADDRESS_IP, flash_data, 5);
 801484c:	2205      	movs	r2, #5
 801484e:	490c      	ldr	r1, [pc, #48]	; (8014880 <NetCGIhandler+0x238>)
 8014850:	480c      	ldr	r0, [pc, #48]	; (8014884 <NetCGIhandler+0x23c>)
 8014852:	f7fe fccb 	bl	80131ec <Flash_Write_Data>
			NVIC_SystemReset();
 8014856:	f7ff f8fd 	bl	8013a54 <__NVIC_SystemReset>
		}
		else {
			print(" -Something went wrong with the parameters...they are less than 11\n");
 801485a:	480e      	ldr	r0, [pc, #56]	; (8014894 <NetCGIhandler+0x24c>)
 801485c:	f000 f9ea 	bl	8014c34 <print>
		}

	}
	return "/index.shtml";
 8014860:	4b0d      	ldr	r3, [pc, #52]	; (8014898 <NetCGIhandler+0x250>)
}
 8014862:	4618      	mov	r0, r3
 8014864:	371c      	adds	r7, #28
 8014866:	46bd      	mov	sp, r7
 8014868:	bd90      	pop	{r4, r7, pc}
 801486a:	bf00      	nop
 801486c:	0801a6f4 	.word	0x0801a6f4
 8014870:	0801a6fc 	.word	0x0801a6fc
 8014874:	20000018 	.word	0x20000018
 8014878:	0801a700 	.word	0x0801a700
 801487c:	0801a738 	.word	0x0801a738
 8014880:	20000894 	.word	0x20000894
 8014884:	08060000 	.word	0x08060000
 8014888:	0801a758 	.word	0x0801a758
 801488c:	0801a760 	.word	0x0801a760
 8014890:	0801a790 	.word	0x0801a790
 8014894:	0801a798 	.word	0x0801a798
 8014898:	0801a7dc 	.word	0x0801a7dc

0801489c <myCGIinit>:

void myCGIinit(void) {
 801489c:	b580      	push	{r7, lr}
 801489e:	af00      	add	r7, sp, #0
    //add LED control CGI to the table
    theCGItable[0] = NetCGI;
 80148a0:	4b05      	ldr	r3, [pc, #20]	; (80148b8 <myCGIinit+0x1c>)
 80148a2:	4a06      	ldr	r2, [pc, #24]	; (80148bc <myCGIinit+0x20>)
 80148a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148a8:	e883 0003 	stmia.w	r3, {r0, r1}
    //give the table to the HTTP server
    http_set_cgi_handlers(theCGItable, numCGIhandlers);
 80148ac:	2101      	movs	r1, #1
 80148ae:	4802      	ldr	r0, [pc, #8]	; (80148b8 <myCGIinit+0x1c>)
 80148b0:	f7f2 fe64 	bl	800757c <http_set_cgi_handlers>
}
 80148b4:	bf00      	nop
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	2000a61c 	.word	0x2000a61c
 80148bc:	0801b848 	.word	0x0801b848

080148c0 <mySSIHandler>:

u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 80148c0:	b590      	push	{r4, r7, lr}
 80148c2:	b095      	sub	sp, #84	; 0x54
 80148c4:	af02      	add	r7, sp, #8
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	607a      	str	r2, [r7, #4]
	char *tmp;
	tmp = "";
 80148cc:	4b5a      	ldr	r3, [pc, #360]	; (8014a38 <mySSIHandler+0x178>)
 80148ce:	647b      	str	r3, [r7, #68]	; 0x44
	if (iIndex == 0) {// dhcp status
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10c      	bne.n	80148f0 <mySSIHandler+0x30>
		if(dhcp_en) {
 80148d6:	4b59      	ldr	r3, [pc, #356]	; (8014a3c <mySSIHandler+0x17c>)
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d002      	beq.n	80148e4 <mySSIHandler+0x24>
			tmp = "ON";
 80148de:	4b58      	ldr	r3, [pc, #352]	; (8014a40 <mySSIHandler+0x180>)
 80148e0:	647b      	str	r3, [r7, #68]	; 0x44
 80148e2:	e09b      	b.n	8014a1c <mySSIHandler+0x15c>
		}
		else {
			tmp = "OFF";
 80148e4:	4b57      	ldr	r3, [pc, #348]	; (8014a44 <mySSIHandler+0x184>)
 80148e6:	647b      	str	r3, [r7, #68]	; 0x44
			request_static = 1;
 80148e8:	4b57      	ldr	r3, [pc, #348]	; (8014a48 <mySSIHandler+0x188>)
 80148ea:	2201      	movs	r2, #1
 80148ec:	701a      	strb	r2, [r3, #0]
 80148ee:	e095      	b.n	8014a1c <mySSIHandler+0x15c>
		}
	}
	else if (iIndex == 1) {	// ip address
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	d129      	bne.n	801494a <mySSIHandler+0x8a>
		my_ip = get_my_ip();
 80148f6:	f7fe ffe1 	bl	80138bc <get_my_ip>
 80148fa:	4602      	mov	r2, r0
 80148fc:	4b53      	ldr	r3, [pc, #332]	; (8014a4c <mySSIHandler+0x18c>)
 80148fe:	601a      	str	r2, [r3, #0]
		char tmp1[50];
		sprintf(tmp1, "%lu.%lu.%lu.%lu",(my_ip & 0xff), ((my_ip >> 8) & 0xff), ((my_ip >> 16) & 0xff), (my_ip >> 24));
 8014900:	4b52      	ldr	r3, [pc, #328]	; (8014a4c <mySSIHandler+0x18c>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	b2d9      	uxtb	r1, r3
 8014906:	4b51      	ldr	r3, [pc, #324]	; (8014a4c <mySSIHandler+0x18c>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	0a1b      	lsrs	r3, r3, #8
 801490c:	b2dc      	uxtb	r4, r3
 801490e:	4b4f      	ldr	r3, [pc, #316]	; (8014a4c <mySSIHandler+0x18c>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	0c1b      	lsrs	r3, r3, #16
 8014914:	b2db      	uxtb	r3, r3
 8014916:	4a4d      	ldr	r2, [pc, #308]	; (8014a4c <mySSIHandler+0x18c>)
 8014918:	6812      	ldr	r2, [r2, #0]
 801491a:	0e12      	lsrs	r2, r2, #24
 801491c:	f107 0010 	add.w	r0, r7, #16
 8014920:	9201      	str	r2, [sp, #4]
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	4623      	mov	r3, r4
 8014926:	460a      	mov	r2, r1
 8014928:	4949      	ldr	r1, [pc, #292]	; (8014a50 <mySSIHandler+0x190>)
 801492a:	f001 faa3 	bl	8015e74 <siprintf>
		strcpy(pcInsert, tmp1);
 801492e:	f107 0310 	add.w	r3, r7, #16
 8014932:	4619      	mov	r1, r3
 8014934:	68b8      	ldr	r0, [r7, #8]
 8014936:	f001 faca 	bl	8015ece <strcpy>
		return strlen(tmp1);
 801493a:	f107 0310 	add.w	r3, r7, #16
 801493e:	4618      	mov	r0, r3
 8014940:	f7eb fc50 	bl	80001e4 <strlen>
 8014944:	4603      	mov	r3, r0
 8014946:	b29b      	uxth	r3, r3
 8014948:	e071      	b.n	8014a2e <mySSIHandler+0x16e>
	}
	else if (iIndex == 2) {	// subnet mask
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2b02      	cmp	r3, #2
 801494e:	d129      	bne.n	80149a4 <mySSIHandler+0xe4>
		my_ip = get_my_netmask();
 8014950:	f7fe ffc4 	bl	80138dc <get_my_netmask>
 8014954:	4602      	mov	r2, r0
 8014956:	4b3d      	ldr	r3, [pc, #244]	; (8014a4c <mySSIHandler+0x18c>)
 8014958:	601a      	str	r2, [r3, #0]
		char tmp1[50];
		sprintf(tmp1, "%lu.%lu.%lu.%lu",(my_net & 0xff), ((my_net >> 8) & 0xff), ((my_net >> 16) & 0xff), (my_net >> 24));
 801495a:	4b3e      	ldr	r3, [pc, #248]	; (8014a54 <mySSIHandler+0x194>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	b2d9      	uxtb	r1, r3
 8014960:	4b3c      	ldr	r3, [pc, #240]	; (8014a54 <mySSIHandler+0x194>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	0a1b      	lsrs	r3, r3, #8
 8014966:	b2dc      	uxtb	r4, r3
 8014968:	4b3a      	ldr	r3, [pc, #232]	; (8014a54 <mySSIHandler+0x194>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	0c1b      	lsrs	r3, r3, #16
 801496e:	b2db      	uxtb	r3, r3
 8014970:	4a38      	ldr	r2, [pc, #224]	; (8014a54 <mySSIHandler+0x194>)
 8014972:	6812      	ldr	r2, [r2, #0]
 8014974:	0e12      	lsrs	r2, r2, #24
 8014976:	f107 0010 	add.w	r0, r7, #16
 801497a:	9201      	str	r2, [sp, #4]
 801497c:	9300      	str	r3, [sp, #0]
 801497e:	4623      	mov	r3, r4
 8014980:	460a      	mov	r2, r1
 8014982:	4933      	ldr	r1, [pc, #204]	; (8014a50 <mySSIHandler+0x190>)
 8014984:	f001 fa76 	bl	8015e74 <siprintf>
		strcpy(pcInsert, tmp1);
 8014988:	f107 0310 	add.w	r3, r7, #16
 801498c:	4619      	mov	r1, r3
 801498e:	68b8      	ldr	r0, [r7, #8]
 8014990:	f001 fa9d 	bl	8015ece <strcpy>
		return strlen(tmp1);
 8014994:	f107 0310 	add.w	r3, r7, #16
 8014998:	4618      	mov	r0, r3
 801499a:	f7eb fc23 	bl	80001e4 <strlen>
 801499e:	4603      	mov	r3, r0
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	e044      	b.n	8014a2e <mySSIHandler+0x16e>
	}
	else if (iIndex == 3) {	// default gateway
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2b03      	cmp	r3, #3
 80149a8:	d129      	bne.n	80149fe <mySSIHandler+0x13e>
		my_ip = get_my_gateway();
 80149aa:	f7fe ffa7 	bl	80138fc <get_my_gateway>
 80149ae:	4602      	mov	r2, r0
 80149b0:	4b26      	ldr	r3, [pc, #152]	; (8014a4c <mySSIHandler+0x18c>)
 80149b2:	601a      	str	r2, [r3, #0]
		char tmp1[50];
		sprintf(tmp1, "%lu.%lu.%lu.%lu",(my_gw & 0xff), ((my_gw >> 8) & 0xff), ((my_gw >> 16) & 0xff), (my_gw >> 24));
 80149b4:	4b28      	ldr	r3, [pc, #160]	; (8014a58 <mySSIHandler+0x198>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	b2d9      	uxtb	r1, r3
 80149ba:	4b27      	ldr	r3, [pc, #156]	; (8014a58 <mySSIHandler+0x198>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	0a1b      	lsrs	r3, r3, #8
 80149c0:	b2dc      	uxtb	r4, r3
 80149c2:	4b25      	ldr	r3, [pc, #148]	; (8014a58 <mySSIHandler+0x198>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	0c1b      	lsrs	r3, r3, #16
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	4a23      	ldr	r2, [pc, #140]	; (8014a58 <mySSIHandler+0x198>)
 80149cc:	6812      	ldr	r2, [r2, #0]
 80149ce:	0e12      	lsrs	r2, r2, #24
 80149d0:	f107 0010 	add.w	r0, r7, #16
 80149d4:	9201      	str	r2, [sp, #4]
 80149d6:	9300      	str	r3, [sp, #0]
 80149d8:	4623      	mov	r3, r4
 80149da:	460a      	mov	r2, r1
 80149dc:	491c      	ldr	r1, [pc, #112]	; (8014a50 <mySSIHandler+0x190>)
 80149de:	f001 fa49 	bl	8015e74 <siprintf>
		strcpy(pcInsert, tmp1);
 80149e2:	f107 0310 	add.w	r3, r7, #16
 80149e6:	4619      	mov	r1, r3
 80149e8:	68b8      	ldr	r0, [r7, #8]
 80149ea:	f001 fa70 	bl	8015ece <strcpy>
		return strlen(tmp1);
 80149ee:	f107 0310 	add.w	r3, r7, #16
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7eb fbf6 	bl	80001e4 <strlen>
 80149f8:	4603      	mov	r3, r0
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	e017      	b.n	8014a2e <mySSIHandler+0x16e>
	}
	else if (iIndex == 4) {	// dhcp checkbox
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2b04      	cmp	r3, #4
 8014a02:	d109      	bne.n	8014a18 <mySSIHandler+0x158>
		if (dhcp_en) {
 8014a04:	4b0d      	ldr	r3, [pc, #52]	; (8014a3c <mySSIHandler+0x17c>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <mySSIHandler+0x152>
			tmp = "<input value=\"1\" name=\"dhcp\" type=\"checkbox\" checked>";
 8014a0c:	4b13      	ldr	r3, [pc, #76]	; (8014a5c <mySSIHandler+0x19c>)
 8014a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8014a10:	e004      	b.n	8014a1c <mySSIHandler+0x15c>
		}
		else {
			tmp ="<input value=\"1\" name=\"dhcp\" type=\"checkbox\">";
 8014a12:	4b13      	ldr	r3, [pc, #76]	; (8014a60 <mySSIHandler+0x1a0>)
 8014a14:	647b      	str	r3, [r7, #68]	; 0x44
 8014a16:	e001      	b.n	8014a1c <mySSIHandler+0x15c>
//		else {
//			tmp = "";
//		}
//	}
	else {
		tmp = "";
 8014a18:	4b07      	ldr	r3, [pc, #28]	; (8014a38 <mySSIHandler+0x178>)
 8014a1a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	strcpy(pcInsert, tmp);
 8014a1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a1e:	68b8      	ldr	r0, [r7, #8]
 8014a20:	f001 fa55 	bl	8015ece <strcpy>
	return strlen(tmp);
 8014a24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014a26:	f7eb fbdd 	bl	80001e4 <strlen>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	b29b      	uxth	r3, r3
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	374c      	adds	r7, #76	; 0x4c
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd90      	pop	{r4, r7, pc}
 8014a36:	bf00      	nop
 8014a38:	0801a7ec 	.word	0x0801a7ec
 8014a3c:	20000018 	.word	0x20000018
 8014a40:	0801a7f0 	.word	0x0801a7f0
 8014a44:	0801a7f4 	.word	0x0801a7f4
 8014a48:	20000890 	.word	0x20000890
 8014a4c:	20000884 	.word	0x20000884
 8014a50:	0801a7f8 	.word	0x0801a7f8
 8014a54:	20000888 	.word	0x20000888
 8014a58:	2000088c 	.word	0x2000088c
 8014a5c:	0801a808 	.word	0x0801a808
 8014a60:	0801a840 	.word	0x0801a840

08014a64 <mySSIinit>:

void mySSIinit(void) {
 8014a64:	b580      	push	{r7, lr}
 8014a66:	af00      	add	r7, sp, #0
	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,numSSItags);
 8014a68:	2205      	movs	r2, #5
 8014a6a:	4903      	ldr	r1, [pc, #12]	; (8014a78 <mySSIinit+0x14>)
 8014a6c:	4803      	ldr	r0, [pc, #12]	; (8014a7c <mySSIinit+0x18>)
 8014a6e:	f7f2 fd43 	bl	80074f8 <http_set_ssi_handler>
}
 8014a72:	bf00      	nop
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	2000001c 	.word	0x2000001c
 8014a7c:	080148c1 	.word	0x080148c1

08014a80 <CAN1_Rx>:
	print("Sending Message to can 2\n");
	while(HAL_CAN_IsTxMessagePending(&hcan2, TxMailbox));
	print("Message Sent to can 2\n");
}

void CAN1_Rx() {
 8014a80:	b580      	push	{r7, lr}
 8014a82:	af00      	add	r7, sp, #0
	 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader1, r1);
 8014a84:	4b05      	ldr	r3, [pc, #20]	; (8014a9c <CAN1_Rx+0x1c>)
 8014a86:	4a06      	ldr	r2, [pc, #24]	; (8014aa0 <CAN1_Rx+0x20>)
 8014a88:	2100      	movs	r1, #0
 8014a8a:	4806      	ldr	r0, [pc, #24]	; (8014aa4 <CAN1_Rx+0x24>)
 8014a8c:	f7ec ffef 	bl	8001a6e <HAL_CAN_GetRxMessage>

	 //dont forget to add and enable filters

	 switch(RxHeader1.StdId) {
 8014a90:	4b03      	ldr	r3, [pc, #12]	; (8014aa0 <CAN1_Rx+0x20>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	2b00      	cmp	r3, #0

	 case 0x000 :

		 break;
 8014a96:	bf00      	nop
	 }

}
 8014a98:	bf00      	nop
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	2000a804 	.word	0x2000a804
 8014aa0:	2000a40c 	.word	0x2000a40c
 8014aa4:	2000a7d0 	.word	0x2000a7d0

08014aa8 <CAN2_Rx>:

void CAN2_Rx() {
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	af00      	add	r7, sp, #0
	 HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader2, r2);
 8014aac:	4b05      	ldr	r3, [pc, #20]	; (8014ac4 <CAN2_Rx+0x1c>)
 8014aae:	4a06      	ldr	r2, [pc, #24]	; (8014ac8 <CAN2_Rx+0x20>)
 8014ab0:	2100      	movs	r1, #0
 8014ab2:	4806      	ldr	r0, [pc, #24]	; (8014acc <CAN2_Rx+0x24>)
 8014ab4:	f7ec ffdb 	bl	8001a6e <HAL_CAN_GetRxMessage>

	 //dont forget to add and enable filters

	 switch(RxHeader2.StdId) {
 8014ab8:	4b03      	ldr	r3, [pc, #12]	; (8014ac8 <CAN2_Rx+0x20>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b00      	cmp	r3, #0

	 case 0x000 :

		 break;
 8014abe:	bf00      	nop
	 }

}
 8014ac0:	bf00      	nop
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	2000a708 	.word	0x2000a708
 8014ac8:	2000a4f0 	.word	0x2000a4f0
 8014acc:	2000a554 	.word	0x2000a554

08014ad0 <my_tcp_accept>:
err_t my_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b086      	sub	sp, #24
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	4613      	mov	r3, r2
 8014adc:	71fb      	strb	r3, [r7, #7]
    LWIP_UNUSED_ARG(arg);
    LWIP_UNUSED_ARG(err);

    tcp_setprio(newpcb, TCP_PRIO_NORMAL);
 8014ade:	2140      	movs	r1, #64	; 0x40
 8014ae0:	68b8      	ldr	r0, [r7, #8]
 8014ae2:	f7f5 fa10 	bl	8009f06 <tcp_setprio>
    tcp_recv(newpcb, NULL);
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	68b8      	ldr	r0, [r7, #8]
 8014aea:	f7f5 fbbf 	bl	800a26c <tcp_recv>
    tcp_err(newpcb, NULL);
 8014aee:	2100      	movs	r1, #0
 8014af0:	68b8      	ldr	r0, [r7, #8]
 8014af2:	f7f5 fbfd 	bl	800a2f0 <tcp_err>
    tcp_poll(newpcb, NULL, 4);
 8014af6:	2204      	movs	r2, #4
 8014af8:	2100      	movs	r1, #0
 8014afa:	68b8      	ldr	r0, [r7, #8]
 8014afc:	f7f5 fc32 	bl	800a364 <tcp_poll>
    uint16_t port = newpcb->local_port;
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	8adb      	ldrh	r3, [r3, #22]
 8014b04:	82bb      	strh	r3, [r7, #20]
    print("+++++ ACCEPTED  on port: %u", port);
 8014b06:	8abb      	ldrh	r3, [r7, #20]
 8014b08:	4619      	mov	r1, r3
 8014b0a:	482b      	ldr	r0, [pc, #172]	; (8014bb8 <my_tcp_accept+0xe8>)
 8014b0c:	f000 f892 	bl	8014c34 <print>
#if ETH_TCP_DEBUG
    if(port == TCP_DEBUG_PORT && !debug_port_accepted) {
 8014b10:	8abb      	ldrh	r3, [r7, #20]
 8014b12:	f241 7270 	movw	r2, #6000	; 0x1770
 8014b16:	4293      	cmp	r3, r2
 8014b18:	d10b      	bne.n	8014b32 <my_tcp_accept+0x62>
 8014b1a:	4b28      	ldr	r3, [pc, #160]	; (8014bbc <my_tcp_accept+0xec>)
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d107      	bne.n	8014b32 <my_tcp_accept+0x62>
    	debug_port_accepted = 1;
 8014b22:	4b26      	ldr	r3, [pc, #152]	; (8014bbc <my_tcp_accept+0xec>)
 8014b24:	2201      	movs	r2, #1
 8014b26:	701a      	strb	r2, [r3, #0]
    	debug_pcb = newpcb;
 8014b28:	4a25      	ldr	r2, [pc, #148]	; (8014bc0 <my_tcp_accept+0xf0>)
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	6013      	str	r3, [r2, #0]
    	return ERR_OK;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	e03e      	b.n	8014bb0 <my_tcp_accept+0xe0>
    }
#endif

    uint16_t index = port % startport;
 8014b32:	8abb      	ldrh	r3, [r7, #20]
 8014b34:	4a23      	ldr	r2, [pc, #140]	; (8014bc4 <my_tcp_accept+0xf4>)
 8014b36:	fba2 1203 	umull	r1, r2, r2, r3
 8014b3a:	0b12      	lsrs	r2, r2, #12
 8014b3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8014b40:	fb01 f202 	mul.w	r2, r1, r2
 8014b44:	1a9b      	subs	r3, r3, r2
 8014b46:	827b      	strh	r3, [r7, #18]
    for(uint8_t i=0; i<numofclients; i++) {
 8014b48:	2300      	movs	r3, #0
 8014b4a:	75fb      	strb	r3, [r7, #23]
 8014b4c:	e024      	b.n	8014b98 <my_tcp_accept+0xc8>
    	if(!accepted_pcb[index][i]) {
 8014b4e:	8a7a      	ldrh	r2, [r7, #18]
 8014b50:	7df9      	ldrb	r1, [r7, #23]
 8014b52:	481d      	ldr	r0, [pc, #116]	; (8014bc8 <my_tcp_accept+0xf8>)
 8014b54:	4613      	mov	r3, r2
 8014b56:	005b      	lsls	r3, r3, #1
 8014b58:	4413      	add	r3, r2
 8014b5a:	4403      	add	r3, r0
 8014b5c:	440b      	add	r3, r1
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	b2db      	uxtb	r3, r3
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d115      	bne.n	8014b92 <my_tcp_accept+0xc2>
    		pcb[index][i] = newpcb;
 8014b66:	8a7a      	ldrh	r2, [r7, #18]
 8014b68:	7df9      	ldrb	r1, [r7, #23]
 8014b6a:	4818      	ldr	r0, [pc, #96]	; (8014bcc <my_tcp_accept+0xfc>)
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	4413      	add	r3, r2
 8014b72:	440b      	add	r3, r1
 8014b74:	68ba      	ldr	r2, [r7, #8]
 8014b76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    		accepted_pcb[index][i] = 1;
 8014b7a:	8a7a      	ldrh	r2, [r7, #18]
 8014b7c:	7df9      	ldrb	r1, [r7, #23]
 8014b7e:	4812      	ldr	r0, [pc, #72]	; (8014bc8 <my_tcp_accept+0xf8>)
 8014b80:	4613      	mov	r3, r2
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	4413      	add	r3, r2
 8014b86:	4403      	add	r3, r0
 8014b88:	440b      	add	r3, r1
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	701a      	strb	r2, [r3, #0]
    		return ERR_OK;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	e00e      	b.n	8014bb0 <my_tcp_accept+0xe0>
    for(uint8_t i=0; i<numofclients; i++) {
 8014b92:	7dfb      	ldrb	r3, [r7, #23]
 8014b94:	3301      	adds	r3, #1
 8014b96:	75fb      	strb	r3, [r7, #23]
 8014b98:	7dfb      	ldrb	r3, [r7, #23]
 8014b9a:	2b02      	cmp	r3, #2
 8014b9c:	d9d7      	bls.n	8014b4e <my_tcp_accept+0x7e>
    	}
    }
    print("Something went wrong while connecting on port: %u",  port);
 8014b9e:	8abb      	ldrh	r3, [r7, #20]
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	480b      	ldr	r0, [pc, #44]	; (8014bd0 <my_tcp_accept+0x100>)
 8014ba4:	f000 f846 	bl	8014c34 <print>
    print("Max 3 connections at a time per port are allowed..Ignoring request\n");
 8014ba8:	480a      	ldr	r0, [pc, #40]	; (8014bd4 <my_tcp_accept+0x104>)
 8014baa:	f000 f843 	bl	8014c34 <print>
    return ERR_OK;
 8014bae:	2300      	movs	r3, #0
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0801a918 	.word	0x0801a918
 8014bbc:	200008e9 	.word	0x200008e9
 8014bc0:	2000a78c 	.word	0x2000a78c
 8014bc4:	d1b71759 	.word	0xd1b71759
 8014bc8:	2000a4d0 	.word	0x2000a4d0
 8014bcc:	2000a714 	.word	0x2000a714
 8014bd0:	0801a934 	.word	0x0801a934
 8014bd4:	0801a968 	.word	0x0801a968

08014bd8 <my_tcp_init>:

void my_tcp_init(struct tcp_pcb *pcb, uint16_t port) {
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	460b      	mov	r3, r1
 8014be2:	807b      	strh	r3, [r7, #2]
/* create new tcp pcb */
	pcb = tcp_new();
 8014be4:	f7f5 fb1a 	bl	800a21c <tcp_new>
 8014be8:	6078      	str	r0, [r7, #4]
	if (pcb != NULL) {
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d019      	beq.n	8014c24 <my_tcp_init+0x4c>
		err_t err;
		/* bind echo_pcb to port 7 (ECHO protocol) */
		err = tcp_bind(pcb, IP_ADDR_ANY, port);
 8014bf0:	887b      	ldrh	r3, [r7, #2]
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	490d      	ldr	r1, [pc, #52]	; (8014c2c <my_tcp_init+0x54>)
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f7f4 fb94 	bl	8009324 <tcp_bind>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK) {
 8014c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d109      	bne.n	8014c1c <my_tcp_init+0x44>
			/* start tcp listening for echo_pcb */
			pcb = tcp_listen(pcb);
 8014c08:	21ff      	movs	r1, #255	; 0xff
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f7f4 fc2c 	bl	8009468 <tcp_listen_with_backlog>
 8014c10:	6078      	str	r0, [r7, #4]
			/* initialize LwIP tcp_accept callback function */
			tcp_accept(pcb, my_tcp_accept);
 8014c12:	4907      	ldr	r1, [pc, #28]	; (8014c30 <my_tcp_init+0x58>)
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7f5 fb8d 	bl	800a334 <tcp_accept>
		else {
			/* deallocate the pcb */
			memp_free(MEMP_TCP_PCB, pcb);
		}
	}
}
 8014c1a:	e003      	b.n	8014c24 <my_tcp_init+0x4c>
			memp_free(MEMP_TCP_PCB, pcb);
 8014c1c:	6879      	ldr	r1, [r7, #4]
 8014c1e:	2001      	movs	r0, #1
 8014c20:	f7f3 f940 	bl	8007ea4 <memp_free>
}
 8014c24:	bf00      	nop
 8014c26:	3710      	adds	r7, #16
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	0801b830 	.word	0x0801b830
 8014c30:	08014ad1 	.word	0x08014ad1

08014c34 <print>:
	HAL_ETH_ReadPHYRegister(&heth, 0x1D, &phyreg);
	print("EDCR: "BYTE_TO_BIN_PAT" "BYTE_TO_BIN_PAT"      %#.4X\n", BYTE_TO_BIN(phyreg>>8), BYTE_TO_BIN(phyreg), phyreg);
	print("-----------------------------------------------------------\n");
}

void print(char *msg, ...) {
 8014c34:	b40f      	push	{r0, r1, r2, r3}
 8014c36:	b590      	push	{r4, r7, lr}
 8014c38:	b09b      	sub	sp, #108	; 0x6c
 8014c3a:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8014c3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014c40:	603b      	str	r3, [r7, #0]
	vsprintf(buff,msg,args);
 8014c42:	1d3b      	adds	r3, r7, #4
 8014c44:	683a      	ldr	r2, [r7, #0]
 8014c46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f001 fa01 	bl	8016050 <vsiprintf>
#if USB_DEBUG
	HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 10);
 8014c4e:	1d3b      	adds	r3, r7, #4
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7eb fac7 	bl	80001e4 <strlen>
 8014c56:	4603      	mov	r3, r0
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	1d39      	adds	r1, r7, #4
 8014c5c:	230a      	movs	r3, #10
 8014c5e:	481c      	ldr	r0, [pc, #112]	; (8014cd0 <print+0x9c>)
 8014c60:	f7f0 fd1d 	bl	800569e <HAL_UART_Transmit>
#endif
#if ETH_TCP_DEBUG
	 if(debug_port_accepted) {
 8014c64:	4b1b      	ldr	r3, [pc, #108]	; (8014cd4 <print+0xa0>)
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d029      	beq.n	8014cc0 <print+0x8c>
		  if( debug_pcb != NULL && debug_pcb->state == ESTABLISHED) {
 8014c6c:	4b1a      	ldr	r3, [pc, #104]	; (8014cd8 <print+0xa4>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d01c      	beq.n	8014cae <print+0x7a>
 8014c74:	4b18      	ldr	r3, [pc, #96]	; (8014cd8 <print+0xa4>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	7d1b      	ldrb	r3, [r3, #20]
 8014c7a:	2b04      	cmp	r3, #4
 8014c7c:	d117      	bne.n	8014cae <print+0x7a>
			  if(tcp_write(debug_pcb, &buff, strlen(buff)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8014c7e:	4b16      	ldr	r3, [pc, #88]	; (8014cd8 <print+0xa4>)
 8014c80:	681c      	ldr	r4, [r3, #0]
 8014c82:	1d3b      	adds	r3, r7, #4
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7eb faad 	bl	80001e4 <strlen>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	3301      	adds	r3, #1
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	1d39      	adds	r1, r7, #4
 8014c94:	2301      	movs	r3, #1
 8014c96:	4620      	mov	r0, r4
 8014c98:	f7f8 f918 	bl	800cecc <tcp_write>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d10e      	bne.n	8014cc0 <print+0x8c>
				  // something went wrong...
			  }
			  else {
				  tcp_output(debug_pcb);
 8014ca2:	4b0d      	ldr	r3, [pc, #52]	; (8014cd8 <print+0xa4>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7f8 fdc2 	bl	800d830 <tcp_output>
			  if(tcp_write(debug_pcb, &buff, strlen(buff)+1, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8014cac:	e008      	b.n	8014cc0 <print+0x8c>
			  }
		  }
		  else {
			  tcp_close(debug_pcb);
 8014cae:	4b0a      	ldr	r3, [pc, #40]	; (8014cd8 <print+0xa4>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7f4 fa60 	bl	8009178 <tcp_close>
			  debug_port_accepted = 0;
 8014cb8:	4b06      	ldr	r3, [pc, #24]	; (8014cd4 <print+0xa0>)
 8014cba:	2200      	movs	r2, #0
 8014cbc:	701a      	strb	r2, [r3, #0]
		  }
	 }
#endif
}
 8014cbe:	e7ff      	b.n	8014cc0 <print+0x8c>
 8014cc0:	bf00      	nop
 8014cc2:	376c      	adds	r7, #108	; 0x6c
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014cca:	b004      	add	sp, #16
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	2000a790 	.word	0x2000a790
 8014cd4:	200008e9 	.word	0x200008e9
 8014cd8:	2000a78c 	.word	0x2000a78c

08014cdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]

	if(htim == &htim6) {
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	4a06      	ldr	r2, [pc, #24]	; (8014d00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d102      	bne.n	8014cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
		postPorts = 1;
 8014cec:	4b05      	ldr	r3, [pc, #20]	; (8014d04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8014cee:	2201      	movs	r2, #1
 8014cf0:	701a      	strb	r2, [r3, #0]
	}
}
 8014cf2:	bf00      	nop
 8014cf4:	370c      	adds	r7, #12
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfc:	4770      	bx	lr
 8014cfe:	bf00      	nop
 8014d00:	2000a624 	.word	0x2000a624
 8014d04:	200008e8 	.word	0x200008e8

08014d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014d0c:	bf00      	nop
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d14:	4770      	bx	lr
	...

08014d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014d1e:	2300      	movs	r3, #0
 8014d20:	607b      	str	r3, [r7, #4]
 8014d22:	4b10      	ldr	r3, [pc, #64]	; (8014d64 <HAL_MspInit+0x4c>)
 8014d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d26:	4a0f      	ldr	r2, [pc, #60]	; (8014d64 <HAL_MspInit+0x4c>)
 8014d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8014d2e:	4b0d      	ldr	r3, [pc, #52]	; (8014d64 <HAL_MspInit+0x4c>)
 8014d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d36:	607b      	str	r3, [r7, #4]
 8014d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	603b      	str	r3, [r7, #0]
 8014d3e:	4b09      	ldr	r3, [pc, #36]	; (8014d64 <HAL_MspInit+0x4c>)
 8014d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d42:	4a08      	ldr	r2, [pc, #32]	; (8014d64 <HAL_MspInit+0x4c>)
 8014d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d48:	6413      	str	r3, [r2, #64]	; 0x40
 8014d4a:	4b06      	ldr	r3, [pc, #24]	; (8014d64 <HAL_MspInit+0x4c>)
 8014d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d52:	603b      	str	r3, [r7, #0]
 8014d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014d56:	bf00      	nop
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	40023800 	.word	0x40023800

08014d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4a22      	ldr	r2, [pc, #136]	; (8014e00 <HAL_ADC_MspInit+0x98>)
 8014d76:	4293      	cmp	r3, r2
 8014d78:	d13d      	bne.n	8014df6 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	60fb      	str	r3, [r7, #12]
 8014d7e:	4b21      	ldr	r3, [pc, #132]	; (8014e04 <HAL_ADC_MspInit+0x9c>)
 8014d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d82:	4a20      	ldr	r2, [pc, #128]	; (8014e04 <HAL_ADC_MspInit+0x9c>)
 8014d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d88:	6453      	str	r3, [r2, #68]	; 0x44
 8014d8a:	4b1e      	ldr	r3, [pc, #120]	; (8014e04 <HAL_ADC_MspInit+0x9c>)
 8014d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d92:	60fb      	str	r3, [r7, #12]
 8014d94:	68fb      	ldr	r3, [r7, #12]
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014d96:	4b1c      	ldr	r3, [pc, #112]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014d98:	4a1c      	ldr	r2, [pc, #112]	; (8014e0c <HAL_ADC_MspInit+0xa4>)
 8014d9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014d9c:	4b1a      	ldr	r3, [pc, #104]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014d9e:	2200      	movs	r2, #0
 8014da0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014da2:	4b19      	ldr	r3, [pc, #100]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014da4:	2200      	movs	r2, #0
 8014da6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014da8:	4b17      	ldr	r3, [pc, #92]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014daa:	2200      	movs	r2, #0
 8014dac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014dae:	4b16      	ldr	r3, [pc, #88]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014db4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014db6:	4b14      	ldr	r3, [pc, #80]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014dbe:	4b12      	ldr	r3, [pc, #72]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014dc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014dc6:	4b10      	ldr	r3, [pc, #64]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014dcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8014dce:	4b0e      	ldr	r3, [pc, #56]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014dd4:	4b0c      	ldr	r3, [pc, #48]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014dda:	480b      	ldr	r0, [pc, #44]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014ddc:	f7ed fa9e 	bl	800231c <HAL_DMA_Init>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d001      	beq.n	8014dea <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8014de6:	f7ff ff8f 	bl	8014d08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	4a06      	ldr	r2, [pc, #24]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014dee:	639a      	str	r2, [r3, #56]	; 0x38
 8014df0:	4a05      	ldr	r2, [pc, #20]	; (8014e08 <HAL_ADC_MspInit+0xa0>)
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014df6:	bf00      	nop
 8014df8:	3710      	adds	r7, #16
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	40012000 	.word	0x40012000
 8014e04:	40023800 	.word	0x40023800
 8014e08:	2000a5bc 	.word	0x2000a5bc
 8014e0c:	40026410 	.word	0x40026410

08014e10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b08c      	sub	sp, #48	; 0x30
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e18:	f107 031c 	add.w	r3, r7, #28
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	601a      	str	r2, [r3, #0]
 8014e20:	605a      	str	r2, [r3, #4]
 8014e22:	609a      	str	r2, [r3, #8]
 8014e24:	60da      	str	r2, [r3, #12]
 8014e26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4a4a      	ldr	r2, [pc, #296]	; (8014f58 <HAL_CAN_MspInit+0x148>)
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	d13e      	bne.n	8014eb0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8014e32:	4b4a      	ldr	r3, [pc, #296]	; (8014f5c <HAL_CAN_MspInit+0x14c>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	3301      	adds	r3, #1
 8014e38:	4a48      	ldr	r2, [pc, #288]	; (8014f5c <HAL_CAN_MspInit+0x14c>)
 8014e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8014e3c:	4b47      	ldr	r3, [pc, #284]	; (8014f5c <HAL_CAN_MspInit+0x14c>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d10d      	bne.n	8014e60 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8014e44:	2300      	movs	r3, #0
 8014e46:	61bb      	str	r3, [r7, #24]
 8014e48:	4b45      	ldr	r3, [pc, #276]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e4c:	4a44      	ldr	r2, [pc, #272]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014e52:	6413      	str	r3, [r2, #64]	; 0x40
 8014e54:	4b42      	ldr	r3, [pc, #264]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014e5c:	61bb      	str	r3, [r7, #24]
 8014e5e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e60:	2300      	movs	r3, #0
 8014e62:	617b      	str	r3, [r7, #20]
 8014e64:	4b3e      	ldr	r3, [pc, #248]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e68:	4a3d      	ldr	r2, [pc, #244]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014e6a:	f043 0301 	orr.w	r3, r3, #1
 8014e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8014e70:	4b3b      	ldr	r3, [pc, #236]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	617b      	str	r3, [r7, #20]
 8014e7a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014e7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e82:	2302      	movs	r3, #2
 8014e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e86:	2300      	movs	r3, #0
 8014e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e8a:	2303      	movs	r3, #3
 8014e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8014e8e:	2309      	movs	r3, #9
 8014e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e92:	f107 031c 	add.w	r3, r7, #28
 8014e96:	4619      	mov	r1, r3
 8014e98:	4832      	ldr	r0, [pc, #200]	; (8014f64 <HAL_CAN_MspInit+0x154>)
 8014e9a:	f7ef f823 	bl	8003ee4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	2014      	movs	r0, #20
 8014ea4:	f7ed fa03 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8014ea8:	2014      	movs	r0, #20
 8014eaa:	f7ed fa1c 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8014eae:	e04f      	b.n	8014f50 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4a2c      	ldr	r2, [pc, #176]	; (8014f68 <HAL_CAN_MspInit+0x158>)
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	d14a      	bne.n	8014f50 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8014eba:	2300      	movs	r3, #0
 8014ebc:	613b      	str	r3, [r7, #16]
 8014ebe:	4b28      	ldr	r3, [pc, #160]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ec2:	4a27      	ldr	r2, [pc, #156]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014ec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8014eca:	4b25      	ldr	r3, [pc, #148]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014ed2:	613b      	str	r3, [r7, #16]
 8014ed4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8014ed6:	4b21      	ldr	r3, [pc, #132]	; (8014f5c <HAL_CAN_MspInit+0x14c>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	3301      	adds	r3, #1
 8014edc:	4a1f      	ldr	r2, [pc, #124]	; (8014f5c <HAL_CAN_MspInit+0x14c>)
 8014ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8014ee0:	4b1e      	ldr	r3, [pc, #120]	; (8014f5c <HAL_CAN_MspInit+0x14c>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	d10d      	bne.n	8014f04 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8014ee8:	2300      	movs	r3, #0
 8014eea:	60fb      	str	r3, [r7, #12]
 8014eec:	4b1c      	ldr	r3, [pc, #112]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ef0:	4a1b      	ldr	r2, [pc, #108]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8014ef8:	4b19      	ldr	r3, [pc, #100]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f00:	60fb      	str	r3, [r7, #12]
 8014f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014f04:	2300      	movs	r3, #0
 8014f06:	60bb      	str	r3, [r7, #8]
 8014f08:	4b15      	ldr	r3, [pc, #84]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f0c:	4a14      	ldr	r2, [pc, #80]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014f0e:	f043 0302 	orr.w	r3, r3, #2
 8014f12:	6313      	str	r3, [r2, #48]	; 0x30
 8014f14:	4b12      	ldr	r3, [pc, #72]	; (8014f60 <HAL_CAN_MspInit+0x150>)
 8014f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f18:	f003 0302 	and.w	r3, r3, #2
 8014f1c:	60bb      	str	r3, [r7, #8]
 8014f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8014f20:	2360      	movs	r3, #96	; 0x60
 8014f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f24:	2302      	movs	r3, #2
 8014f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f2c:	2303      	movs	r3, #3
 8014f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8014f30:	2309      	movs	r3, #9
 8014f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014f34:	f107 031c 	add.w	r3, r7, #28
 8014f38:	4619      	mov	r1, r3
 8014f3a:	480c      	ldr	r0, [pc, #48]	; (8014f6c <HAL_CAN_MspInit+0x15c>)
 8014f3c:	f7ee ffd2 	bl	8003ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8014f40:	2200      	movs	r2, #0
 8014f42:	2100      	movs	r1, #0
 8014f44:	2040      	movs	r0, #64	; 0x40
 8014f46:	f7ed f9b2 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8014f4a:	2040      	movs	r0, #64	; 0x40
 8014f4c:	f7ed f9cb 	bl	80022e6 <HAL_NVIC_EnableIRQ>
}
 8014f50:	bf00      	nop
 8014f52:	3730      	adds	r7, #48	; 0x30
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	40006400 	.word	0x40006400
 8014f5c:	200008ec 	.word	0x200008ec
 8014f60:	40023800 	.word	0x40023800
 8014f64:	40020000 	.word	0x40020000
 8014f68:	40006800 	.word	0x40006800
 8014f6c:	40020400 	.word	0x40020400

08014f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08a      	sub	sp, #40	; 0x28
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f78:	f107 0314 	add.w	r3, r7, #20
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	601a      	str	r2, [r3, #0]
 8014f80:	605a      	str	r2, [r3, #4]
 8014f82:	609a      	str	r2, [r3, #8]
 8014f84:	60da      	str	r2, [r3, #12]
 8014f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	4a19      	ldr	r2, [pc, #100]	; (8014ff4 <HAL_SPI_MspInit+0x84>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d12c      	bne.n	8014fec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8014f92:	2300      	movs	r3, #0
 8014f94:	613b      	str	r3, [r7, #16]
 8014f96:	4b18      	ldr	r3, [pc, #96]	; (8014ff8 <HAL_SPI_MspInit+0x88>)
 8014f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f9a:	4a17      	ldr	r2, [pc, #92]	; (8014ff8 <HAL_SPI_MspInit+0x88>)
 8014f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8014fa2:	4b15      	ldr	r3, [pc, #84]	; (8014ff8 <HAL_SPI_MspInit+0x88>)
 8014fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014faa:	613b      	str	r3, [r7, #16]
 8014fac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014fae:	2300      	movs	r3, #0
 8014fb0:	60fb      	str	r3, [r7, #12]
 8014fb2:	4b11      	ldr	r3, [pc, #68]	; (8014ff8 <HAL_SPI_MspInit+0x88>)
 8014fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fb6:	4a10      	ldr	r2, [pc, #64]	; (8014ff8 <HAL_SPI_MspInit+0x88>)
 8014fb8:	f043 0304 	orr.w	r3, r3, #4
 8014fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8014fbe:	4b0e      	ldr	r3, [pc, #56]	; (8014ff8 <HAL_SPI_MspInit+0x88>)
 8014fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fc2:	f003 0304 	and.w	r3, r3, #4
 8014fc6:	60fb      	str	r3, [r7, #12]
 8014fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8014fca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fd0:	2302      	movs	r3, #2
 8014fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fd8:	2303      	movs	r3, #3
 8014fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8014fdc:	2306      	movs	r3, #6
 8014fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014fe0:	f107 0314 	add.w	r3, r7, #20
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	4805      	ldr	r0, [pc, #20]	; (8014ffc <HAL_SPI_MspInit+0x8c>)
 8014fe8:	f7ee ff7c 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8014fec:	bf00      	nop
 8014fee:	3728      	adds	r7, #40	; 0x28
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	40003c00 	.word	0x40003c00
 8014ff8:	40023800 	.word	0x40023800
 8014ffc:	40020800 	.word	0x40020800

08015000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	4a0e      	ldr	r2, [pc, #56]	; (8015048 <HAL_TIM_Base_MspInit+0x48>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d115      	bne.n	801503e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8015012:	2300      	movs	r3, #0
 8015014:	60fb      	str	r3, [r7, #12]
 8015016:	4b0d      	ldr	r3, [pc, #52]	; (801504c <HAL_TIM_Base_MspInit+0x4c>)
 8015018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801501a:	4a0c      	ldr	r2, [pc, #48]	; (801504c <HAL_TIM_Base_MspInit+0x4c>)
 801501c:	f043 0310 	orr.w	r3, r3, #16
 8015020:	6413      	str	r3, [r2, #64]	; 0x40
 8015022:	4b0a      	ldr	r3, [pc, #40]	; (801504c <HAL_TIM_Base_MspInit+0x4c>)
 8015024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015026:	f003 0310 	and.w	r3, r3, #16
 801502a:	60fb      	str	r3, [r7, #12]
 801502c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 801502e:	2200      	movs	r2, #0
 8015030:	2100      	movs	r1, #0
 8015032:	2036      	movs	r0, #54	; 0x36
 8015034:	f7ed f93b 	bl	80022ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8015038:	2036      	movs	r0, #54	; 0x36
 801503a:	f7ed f954 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801503e:	bf00      	nop
 8015040:	3710      	adds	r7, #16
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	40001000 	.word	0x40001000
 801504c:	40023800 	.word	0x40023800

08015050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b090      	sub	sp, #64	; 0x40
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801505c:	2200      	movs	r2, #0
 801505e:	601a      	str	r2, [r3, #0]
 8015060:	605a      	str	r2, [r3, #4]
 8015062:	609a      	str	r2, [r3, #8]
 8015064:	60da      	str	r2, [r3, #12]
 8015066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	4a65      	ldr	r2, [pc, #404]	; (8015204 <HAL_UART_MspInit+0x1b4>)
 801506e:	4293      	cmp	r3, r2
 8015070:	d12d      	bne.n	80150ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015072:	2300      	movs	r3, #0
 8015074:	62bb      	str	r3, [r7, #40]	; 0x28
 8015076:	4b64      	ldr	r3, [pc, #400]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801507a:	4a63      	ldr	r2, [pc, #396]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 801507c:	f043 0310 	orr.w	r3, r3, #16
 8015080:	6453      	str	r3, [r2, #68]	; 0x44
 8015082:	4b61      	ldr	r3, [pc, #388]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015086:	f003 0310 	and.w	r3, r3, #16
 801508a:	62bb      	str	r3, [r7, #40]	; 0x28
 801508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801508e:	2300      	movs	r3, #0
 8015090:	627b      	str	r3, [r7, #36]	; 0x24
 8015092:	4b5d      	ldr	r3, [pc, #372]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015096:	4a5c      	ldr	r2, [pc, #368]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015098:	f043 0301 	orr.w	r3, r3, #1
 801509c:	6313      	str	r3, [r2, #48]	; 0x30
 801509e:	4b5a      	ldr	r3, [pc, #360]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80150a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150a2:	f003 0301 	and.w	r3, r3, #1
 80150a6:	627b      	str	r3, [r7, #36]	; 0x24
 80150a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80150aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80150ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150b0:	2302      	movs	r3, #2
 80150b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80150b4:	2301      	movs	r3, #1
 80150b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80150b8:	2303      	movs	r3, #3
 80150ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80150bc:	2307      	movs	r3, #7
 80150be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80150c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150c4:	4619      	mov	r1, r3
 80150c6:	4851      	ldr	r0, [pc, #324]	; (801520c <HAL_UART_MspInit+0x1bc>)
 80150c8:	f7ee ff0c 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80150cc:	e095      	b.n	80151fa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	4a4f      	ldr	r2, [pc, #316]	; (8015210 <HAL_UART_MspInit+0x1c0>)
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d12c      	bne.n	8015132 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80150d8:	2300      	movs	r3, #0
 80150da:	623b      	str	r3, [r7, #32]
 80150dc:	4b4a      	ldr	r3, [pc, #296]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80150de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150e0:	4a49      	ldr	r2, [pc, #292]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80150e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80150e6:	6413      	str	r3, [r2, #64]	; 0x40
 80150e8:	4b47      	ldr	r3, [pc, #284]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80150ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80150f0:	623b      	str	r3, [r7, #32]
 80150f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80150f4:	2300      	movs	r3, #0
 80150f6:	61fb      	str	r3, [r7, #28]
 80150f8:	4b43      	ldr	r3, [pc, #268]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80150fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150fc:	4a42      	ldr	r2, [pc, #264]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80150fe:	f043 0308 	orr.w	r3, r3, #8
 8015102:	6313      	str	r3, [r2, #48]	; 0x30
 8015104:	4b40      	ldr	r3, [pc, #256]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015108:	f003 0308 	and.w	r3, r3, #8
 801510c:	61fb      	str	r3, [r7, #28]
 801510e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8015110:	2360      	movs	r3, #96	; 0x60
 8015112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015114:	2302      	movs	r3, #2
 8015116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015118:	2301      	movs	r3, #1
 801511a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801511c:	2303      	movs	r3, #3
 801511e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015120:	2307      	movs	r3, #7
 8015122:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015128:	4619      	mov	r1, r3
 801512a:	483a      	ldr	r0, [pc, #232]	; (8015214 <HAL_UART_MspInit+0x1c4>)
 801512c:	f7ee feda 	bl	8003ee4 <HAL_GPIO_Init>
}
 8015130:	e063      	b.n	80151fa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4a38      	ldr	r2, [pc, #224]	; (8015218 <HAL_UART_MspInit+0x1c8>)
 8015138:	4293      	cmp	r3, r2
 801513a:	d12d      	bne.n	8015198 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 801513c:	2300      	movs	r3, #0
 801513e:	61bb      	str	r3, [r7, #24]
 8015140:	4b31      	ldr	r3, [pc, #196]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015144:	4a30      	ldr	r2, [pc, #192]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801514a:	6413      	str	r3, [r2, #64]	; 0x40
 801514c:	4b2e      	ldr	r3, [pc, #184]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 801514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015154:	61bb      	str	r3, [r7, #24]
 8015156:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015158:	2300      	movs	r3, #0
 801515a:	617b      	str	r3, [r7, #20]
 801515c:	4b2a      	ldr	r3, [pc, #168]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 801515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015160:	4a29      	ldr	r2, [pc, #164]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 8015162:	f043 0308 	orr.w	r3, r3, #8
 8015166:	6313      	str	r3, [r2, #48]	; 0x30
 8015168:	4b27      	ldr	r3, [pc, #156]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 801516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801516c:	f003 0308 	and.w	r3, r3, #8
 8015170:	617b      	str	r3, [r7, #20]
 8015172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801517a:	2302      	movs	r3, #2
 801517c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801517e:	2301      	movs	r3, #1
 8015180:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015182:	2303      	movs	r3, #3
 8015184:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8015186:	2307      	movs	r3, #7
 8015188:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801518a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801518e:	4619      	mov	r1, r3
 8015190:	4820      	ldr	r0, [pc, #128]	; (8015214 <HAL_UART_MspInit+0x1c4>)
 8015192:	f7ee fea7 	bl	8003ee4 <HAL_GPIO_Init>
}
 8015196:	e030      	b.n	80151fa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4a1f      	ldr	r2, [pc, #124]	; (801521c <HAL_UART_MspInit+0x1cc>)
 801519e:	4293      	cmp	r3, r2
 80151a0:	d12b      	bne.n	80151fa <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80151a2:	2300      	movs	r3, #0
 80151a4:	613b      	str	r3, [r7, #16]
 80151a6:	4b18      	ldr	r3, [pc, #96]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80151a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151aa:	4a17      	ldr	r2, [pc, #92]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80151ac:	f043 0320 	orr.w	r3, r3, #32
 80151b0:	6453      	str	r3, [r2, #68]	; 0x44
 80151b2:	4b15      	ldr	r3, [pc, #84]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80151b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151b6:	f003 0320 	and.w	r3, r3, #32
 80151ba:	613b      	str	r3, [r7, #16]
 80151bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80151be:	2300      	movs	r3, #0
 80151c0:	60fb      	str	r3, [r7, #12]
 80151c2:	4b11      	ldr	r3, [pc, #68]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80151c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151c6:	4a10      	ldr	r2, [pc, #64]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80151c8:	f043 0304 	orr.w	r3, r3, #4
 80151cc:	6313      	str	r3, [r2, #48]	; 0x30
 80151ce:	4b0e      	ldr	r3, [pc, #56]	; (8015208 <HAL_UART_MspInit+0x1b8>)
 80151d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151d2:	f003 0304 	and.w	r3, r3, #4
 80151d6:	60fb      	str	r3, [r7, #12]
 80151d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80151da:	23c0      	movs	r3, #192	; 0xc0
 80151dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151de:	2302      	movs	r3, #2
 80151e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80151e2:	2301      	movs	r3, #1
 80151e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151e6:	2303      	movs	r3, #3
 80151e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80151ea:	2308      	movs	r3, #8
 80151ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80151ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80151f2:	4619      	mov	r1, r3
 80151f4:	480a      	ldr	r0, [pc, #40]	; (8015220 <HAL_UART_MspInit+0x1d0>)
 80151f6:	f7ee fe75 	bl	8003ee4 <HAL_GPIO_Init>
}
 80151fa:	bf00      	nop
 80151fc:	3740      	adds	r7, #64	; 0x40
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	40011000 	.word	0x40011000
 8015208:	40023800 	.word	0x40023800
 801520c:	40020000 	.word	0x40020000
 8015210:	40004400 	.word	0x40004400
 8015214:	40020c00 	.word	0x40020c00
 8015218:	40004800 	.word	0x40004800
 801521c:	40011400 	.word	0x40011400
 8015220:	40020800 	.word	0x40020800

08015224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015224:	b480      	push	{r7}
 8015226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8015228:	bf00      	nop
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr

08015232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015232:	b480      	push	{r7}
 8015234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015236:	e7fe      	b.n	8015236 <HardFault_Handler+0x4>

08015238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015238:	b480      	push	{r7}
 801523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801523c:	e7fe      	b.n	801523c <MemManage_Handler+0x4>

0801523e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801523e:	b480      	push	{r7}
 8015240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015242:	e7fe      	b.n	8015242 <BusFault_Handler+0x4>

08015244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015244:	b480      	push	{r7}
 8015246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015248:	e7fe      	b.n	8015248 <UsageFault_Handler+0x4>

0801524a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801524a:	b480      	push	{r7}
 801524c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801524e:	bf00      	nop
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr

08015258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015258:	b480      	push	{r7}
 801525a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801525c:	bf00      	nop
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr

08015266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015266:	b480      	push	{r7}
 8015268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801526a:	bf00      	nop
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr

08015274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015278:	f7eb fec8 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801527c:	bf00      	nop
 801527e:	bd80      	pop	{r7, pc}

08015280 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	CAN1_Rx();
 8015284:	f7ff fbfc 	bl	8014a80 <CAN1_Rx>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8015288:	4802      	ldr	r0, [pc, #8]	; (8015294 <CAN1_RX0_IRQHandler+0x14>)
 801528a:	f7ec fd02 	bl	8001c92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 801528e:	bf00      	nop
 8015290:	bd80      	pop	{r7, pc}
 8015292:	bf00      	nop
 8015294:	2000a7d0 	.word	0x2000a7d0

08015298 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801529c:	4802      	ldr	r0, [pc, #8]	; (80152a8 <TIM6_DAC_IRQHandler+0x10>)
 801529e:	f7ef ff50 	bl	8005142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80152a2:	bf00      	nop
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	2000a624 	.word	0x2000a624

080152ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80152b0:	4802      	ldr	r0, [pc, #8]	; (80152bc <DMA2_Stream0_IRQHandler+0x10>)
 80152b2:	f7ed f939 	bl	8002528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80152b6:	bf00      	nop
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	2000a5bc 	.word	0x2000a5bc

080152c0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	CAN2_Rx();
 80152c4:	f7ff fbf0 	bl	8014aa8 <CAN2_Rx>
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80152c8:	4802      	ldr	r0, [pc, #8]	; (80152d4 <CAN2_RX0_IRQHandler+0x14>)
 80152ca:	f7ec fce2 	bl	8001c92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80152ce:	bf00      	nop
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	2000a554 	.word	0x2000a554

080152d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b086      	sub	sp, #24
 80152dc:	af00      	add	r7, sp, #0
 80152de:	60f8      	str	r0, [r7, #12]
 80152e0:	60b9      	str	r1, [r7, #8]
 80152e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80152e4:	2300      	movs	r3, #0
 80152e6:	617b      	str	r3, [r7, #20]
 80152e8:	e00a      	b.n	8015300 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80152ea:	f3af 8000 	nop.w
 80152ee:	4601      	mov	r1, r0
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	1c5a      	adds	r2, r3, #1
 80152f4:	60ba      	str	r2, [r7, #8]
 80152f6:	b2ca      	uxtb	r2, r1
 80152f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	3301      	adds	r3, #1
 80152fe:	617b      	str	r3, [r7, #20]
 8015300:	697a      	ldr	r2, [r7, #20]
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	429a      	cmp	r2, r3
 8015306:	dbf0      	blt.n	80152ea <_read+0x12>
	}

return len;
 8015308:	687b      	ldr	r3, [r7, #4]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3718      	adds	r7, #24
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b086      	sub	sp, #24
 8015316:	af00      	add	r7, sp, #0
 8015318:	60f8      	str	r0, [r7, #12]
 801531a:	60b9      	str	r1, [r7, #8]
 801531c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801531e:	2300      	movs	r3, #0
 8015320:	617b      	str	r3, [r7, #20]
 8015322:	e009      	b.n	8015338 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	1c5a      	adds	r2, r3, #1
 8015328:	60ba      	str	r2, [r7, #8]
 801532a:	781b      	ldrb	r3, [r3, #0]
 801532c:	4618      	mov	r0, r3
 801532e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	3301      	adds	r3, #1
 8015336:	617b      	str	r3, [r7, #20]
 8015338:	697a      	ldr	r2, [r7, #20]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	429a      	cmp	r2, r3
 801533e:	dbf1      	blt.n	8015324 <_write+0x12>
	}
	return len;
 8015340:	687b      	ldr	r3, [r7, #4]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3718      	adds	r7, #24
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}

0801534a <_close>:

int _close(int file)
{
 801534a:	b480      	push	{r7}
 801534c:	b083      	sub	sp, #12
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
	return -1;
 8015352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015356:	4618      	mov	r0, r3
 8015358:	370c      	adds	r7, #12
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr

08015362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015362:	b480      	push	{r7}
 8015364:	b083      	sub	sp, #12
 8015366:	af00      	add	r7, sp, #0
 8015368:	6078      	str	r0, [r7, #4]
 801536a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015372:	605a      	str	r2, [r3, #4]
	return 0;
 8015374:	2300      	movs	r3, #0
}
 8015376:	4618      	mov	r0, r3
 8015378:	370c      	adds	r7, #12
 801537a:	46bd      	mov	sp, r7
 801537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015380:	4770      	bx	lr

08015382 <_isatty>:

int _isatty(int file)
{
 8015382:	b480      	push	{r7}
 8015384:	b083      	sub	sp, #12
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
	return 1;
 801538a:	2301      	movs	r3, #1
}
 801538c:	4618      	mov	r0, r3
 801538e:	370c      	adds	r7, #12
 8015390:	46bd      	mov	sp, r7
 8015392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015396:	4770      	bx	lr

08015398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015398:	b480      	push	{r7}
 801539a:	b085      	sub	sp, #20
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
	return 0;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr
	...

080153b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80153b4:	b480      	push	{r7}
 80153b6:	b085      	sub	sp, #20
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80153bc:	4b11      	ldr	r3, [pc, #68]	; (8015404 <_sbrk+0x50>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d102      	bne.n	80153ca <_sbrk+0x16>
		heap_end = &end;
 80153c4:	4b0f      	ldr	r3, [pc, #60]	; (8015404 <_sbrk+0x50>)
 80153c6:	4a10      	ldr	r2, [pc, #64]	; (8015408 <_sbrk+0x54>)
 80153c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80153ca:	4b0e      	ldr	r3, [pc, #56]	; (8015404 <_sbrk+0x50>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80153d0:	4b0c      	ldr	r3, [pc, #48]	; (8015404 <_sbrk+0x50>)
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	4413      	add	r3, r2
 80153d8:	466a      	mov	r2, sp
 80153da:	4293      	cmp	r3, r2
 80153dc:	d905      	bls.n	80153ea <_sbrk+0x36>
	{
		errno = ENOMEM;
 80153de:	4b0b      	ldr	r3, [pc, #44]	; (801540c <_sbrk+0x58>)
 80153e0:	220c      	movs	r2, #12
 80153e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80153e4:	f04f 33ff 	mov.w	r3, #4294967295
 80153e8:	e006      	b.n	80153f8 <_sbrk+0x44>
	}

	heap_end += incr;
 80153ea:	4b06      	ldr	r3, [pc, #24]	; (8015404 <_sbrk+0x50>)
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	4413      	add	r3, r2
 80153f2:	4a04      	ldr	r2, [pc, #16]	; (8015404 <_sbrk+0x50>)
 80153f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80153f6:	68fb      	ldr	r3, [r7, #12]
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3714      	adds	r7, #20
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	4770      	bx	lr
 8015404:	200008f0 	.word	0x200008f0
 8015408:	2000a810 	.word	0x2000a810
 801540c:	2000a80c 	.word	0x2000a80c

08015410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015410:	b480      	push	{r7}
 8015412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015414:	4b08      	ldr	r3, [pc, #32]	; (8015438 <SystemInit+0x28>)
 8015416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801541a:	4a07      	ldr	r2, [pc, #28]	; (8015438 <SystemInit+0x28>)
 801541c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8015424:	4b04      	ldr	r3, [pc, #16]	; (8015438 <SystemInit+0x28>)
 8015426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801542a:	609a      	str	r2, [r3, #8]
#endif
}
 801542c:	bf00      	nop
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop
 8015438:	e000ed00 	.word	0xe000ed00

0801543c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801543c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8015442:	e003      	b.n	801544c <LoopCopyDataInit>

08015444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8015444:	4b0c      	ldr	r3, [pc, #48]	; (8015478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8015446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801544a:	3104      	adds	r1, #4

0801544c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801544c:	480b      	ldr	r0, [pc, #44]	; (801547c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801544e:	4b0c      	ldr	r3, [pc, #48]	; (8015480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8015450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8015452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8015454:	d3f6      	bcc.n	8015444 <CopyDataInit>
  ldr  r2, =_sbss
 8015456:	4a0b      	ldr	r2, [pc, #44]	; (8015484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8015458:	e002      	b.n	8015460 <LoopFillZerobss>

0801545a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801545a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801545c:	f842 3b04 	str.w	r3, [r2], #4

08015460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015460:	4b09      	ldr	r3, [pc, #36]	; (8015488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8015462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8015464:	d3f9      	bcc.n	801545a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8015466:	f7ff ffd3 	bl	8015410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801546a:	f000 f815 	bl	8015498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801546e:	f7fe fb07 	bl	8013a80 <main>
  bx  lr    
 8015472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8015474:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8015478:	0801bb40 	.word	0x0801bb40
  ldr  r0, =_sdata
 801547c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015480:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8015484:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8015488:	2000a810 	.word	0x2000a810

0801548c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801548c:	e7fe      	b.n	801548c <ADC_IRQHandler>

0801548e <atoi>:
 801548e:	220a      	movs	r2, #10
 8015490:	2100      	movs	r1, #0
 8015492:	f000 bdb1 	b.w	8015ff8 <strtol>
	...

08015498 <__libc_init_array>:
 8015498:	b570      	push	{r4, r5, r6, lr}
 801549a:	4e0d      	ldr	r6, [pc, #52]	; (80154d0 <__libc_init_array+0x38>)
 801549c:	4c0d      	ldr	r4, [pc, #52]	; (80154d4 <__libc_init_array+0x3c>)
 801549e:	1ba4      	subs	r4, r4, r6
 80154a0:	10a4      	asrs	r4, r4, #2
 80154a2:	2500      	movs	r5, #0
 80154a4:	42a5      	cmp	r5, r4
 80154a6:	d109      	bne.n	80154bc <__libc_init_array+0x24>
 80154a8:	4e0b      	ldr	r6, [pc, #44]	; (80154d8 <__libc_init_array+0x40>)
 80154aa:	4c0c      	ldr	r4, [pc, #48]	; (80154dc <__libc_init_array+0x44>)
 80154ac:	f002 fe22 	bl	80180f4 <_init>
 80154b0:	1ba4      	subs	r4, r4, r6
 80154b2:	10a4      	asrs	r4, r4, #2
 80154b4:	2500      	movs	r5, #0
 80154b6:	42a5      	cmp	r5, r4
 80154b8:	d105      	bne.n	80154c6 <__libc_init_array+0x2e>
 80154ba:	bd70      	pop	{r4, r5, r6, pc}
 80154bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80154c0:	4798      	blx	r3
 80154c2:	3501      	adds	r5, #1
 80154c4:	e7ee      	b.n	80154a4 <__libc_init_array+0xc>
 80154c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80154ca:	4798      	blx	r3
 80154cc:	3501      	adds	r5, #1
 80154ce:	e7f2      	b.n	80154b6 <__libc_init_array+0x1e>
 80154d0:	0801bb38 	.word	0x0801bb38
 80154d4:	0801bb38 	.word	0x0801bb38
 80154d8:	0801bb38 	.word	0x0801bb38
 80154dc:	0801bb3c 	.word	0x0801bb3c

080154e0 <memcmp>:
 80154e0:	b530      	push	{r4, r5, lr}
 80154e2:	2400      	movs	r4, #0
 80154e4:	42a2      	cmp	r2, r4
 80154e6:	d101      	bne.n	80154ec <memcmp+0xc>
 80154e8:	2000      	movs	r0, #0
 80154ea:	e007      	b.n	80154fc <memcmp+0x1c>
 80154ec:	5d03      	ldrb	r3, [r0, r4]
 80154ee:	3401      	adds	r4, #1
 80154f0:	190d      	adds	r5, r1, r4
 80154f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80154f6:	42ab      	cmp	r3, r5
 80154f8:	d0f4      	beq.n	80154e4 <memcmp+0x4>
 80154fa:	1b58      	subs	r0, r3, r5
 80154fc:	bd30      	pop	{r4, r5, pc}

080154fe <memcpy>:
 80154fe:	b510      	push	{r4, lr}
 8015500:	1e43      	subs	r3, r0, #1
 8015502:	440a      	add	r2, r1
 8015504:	4291      	cmp	r1, r2
 8015506:	d100      	bne.n	801550a <memcpy+0xc>
 8015508:	bd10      	pop	{r4, pc}
 801550a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801550e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015512:	e7f7      	b.n	8015504 <memcpy+0x6>

08015514 <memset>:
 8015514:	4402      	add	r2, r0
 8015516:	4603      	mov	r3, r0
 8015518:	4293      	cmp	r3, r2
 801551a:	d100      	bne.n	801551e <memset+0xa>
 801551c:	4770      	bx	lr
 801551e:	f803 1b01 	strb.w	r1, [r3], #1
 8015522:	e7f9      	b.n	8015518 <memset+0x4>

08015524 <__cvt>:
 8015524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015528:	ec55 4b10 	vmov	r4, r5, d0
 801552c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801552e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015532:	2d00      	cmp	r5, #0
 8015534:	460e      	mov	r6, r1
 8015536:	4691      	mov	r9, r2
 8015538:	4619      	mov	r1, r3
 801553a:	bfb8      	it	lt
 801553c:	4622      	movlt	r2, r4
 801553e:	462b      	mov	r3, r5
 8015540:	f027 0720 	bic.w	r7, r7, #32
 8015544:	bfbb      	ittet	lt
 8015546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801554a:	461d      	movlt	r5, r3
 801554c:	2300      	movge	r3, #0
 801554e:	232d      	movlt	r3, #45	; 0x2d
 8015550:	bfb8      	it	lt
 8015552:	4614      	movlt	r4, r2
 8015554:	2f46      	cmp	r7, #70	; 0x46
 8015556:	700b      	strb	r3, [r1, #0]
 8015558:	d004      	beq.n	8015564 <__cvt+0x40>
 801555a:	2f45      	cmp	r7, #69	; 0x45
 801555c:	d100      	bne.n	8015560 <__cvt+0x3c>
 801555e:	3601      	adds	r6, #1
 8015560:	2102      	movs	r1, #2
 8015562:	e000      	b.n	8015566 <__cvt+0x42>
 8015564:	2103      	movs	r1, #3
 8015566:	ab03      	add	r3, sp, #12
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	ab02      	add	r3, sp, #8
 801556c:	9300      	str	r3, [sp, #0]
 801556e:	4632      	mov	r2, r6
 8015570:	4653      	mov	r3, sl
 8015572:	ec45 4b10 	vmov	d0, r4, r5
 8015576:	f000 fe03 	bl	8016180 <_dtoa_r>
 801557a:	2f47      	cmp	r7, #71	; 0x47
 801557c:	4680      	mov	r8, r0
 801557e:	d102      	bne.n	8015586 <__cvt+0x62>
 8015580:	f019 0f01 	tst.w	r9, #1
 8015584:	d026      	beq.n	80155d4 <__cvt+0xb0>
 8015586:	2f46      	cmp	r7, #70	; 0x46
 8015588:	eb08 0906 	add.w	r9, r8, r6
 801558c:	d111      	bne.n	80155b2 <__cvt+0x8e>
 801558e:	f898 3000 	ldrb.w	r3, [r8]
 8015592:	2b30      	cmp	r3, #48	; 0x30
 8015594:	d10a      	bne.n	80155ac <__cvt+0x88>
 8015596:	2200      	movs	r2, #0
 8015598:	2300      	movs	r3, #0
 801559a:	4620      	mov	r0, r4
 801559c:	4629      	mov	r1, r5
 801559e:	f7eb faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80155a2:	b918      	cbnz	r0, 80155ac <__cvt+0x88>
 80155a4:	f1c6 0601 	rsb	r6, r6, #1
 80155a8:	f8ca 6000 	str.w	r6, [sl]
 80155ac:	f8da 3000 	ldr.w	r3, [sl]
 80155b0:	4499      	add	r9, r3
 80155b2:	2200      	movs	r2, #0
 80155b4:	2300      	movs	r3, #0
 80155b6:	4620      	mov	r0, r4
 80155b8:	4629      	mov	r1, r5
 80155ba:	f7eb fa95 	bl	8000ae8 <__aeabi_dcmpeq>
 80155be:	b938      	cbnz	r0, 80155d0 <__cvt+0xac>
 80155c0:	2230      	movs	r2, #48	; 0x30
 80155c2:	9b03      	ldr	r3, [sp, #12]
 80155c4:	454b      	cmp	r3, r9
 80155c6:	d205      	bcs.n	80155d4 <__cvt+0xb0>
 80155c8:	1c59      	adds	r1, r3, #1
 80155ca:	9103      	str	r1, [sp, #12]
 80155cc:	701a      	strb	r2, [r3, #0]
 80155ce:	e7f8      	b.n	80155c2 <__cvt+0x9e>
 80155d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80155d4:	9b03      	ldr	r3, [sp, #12]
 80155d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155d8:	eba3 0308 	sub.w	r3, r3, r8
 80155dc:	4640      	mov	r0, r8
 80155de:	6013      	str	r3, [r2, #0]
 80155e0:	b004      	add	sp, #16
 80155e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080155e6 <__exponent>:
 80155e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155e8:	2900      	cmp	r1, #0
 80155ea:	4604      	mov	r4, r0
 80155ec:	bfba      	itte	lt
 80155ee:	4249      	neglt	r1, r1
 80155f0:	232d      	movlt	r3, #45	; 0x2d
 80155f2:	232b      	movge	r3, #43	; 0x2b
 80155f4:	2909      	cmp	r1, #9
 80155f6:	f804 2b02 	strb.w	r2, [r4], #2
 80155fa:	7043      	strb	r3, [r0, #1]
 80155fc:	dd20      	ble.n	8015640 <__exponent+0x5a>
 80155fe:	f10d 0307 	add.w	r3, sp, #7
 8015602:	461f      	mov	r7, r3
 8015604:	260a      	movs	r6, #10
 8015606:	fb91 f5f6 	sdiv	r5, r1, r6
 801560a:	fb06 1115 	mls	r1, r6, r5, r1
 801560e:	3130      	adds	r1, #48	; 0x30
 8015610:	2d09      	cmp	r5, #9
 8015612:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015616:	f103 32ff 	add.w	r2, r3, #4294967295
 801561a:	4629      	mov	r1, r5
 801561c:	dc09      	bgt.n	8015632 <__exponent+0x4c>
 801561e:	3130      	adds	r1, #48	; 0x30
 8015620:	3b02      	subs	r3, #2
 8015622:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015626:	42bb      	cmp	r3, r7
 8015628:	4622      	mov	r2, r4
 801562a:	d304      	bcc.n	8015636 <__exponent+0x50>
 801562c:	1a10      	subs	r0, r2, r0
 801562e:	b003      	add	sp, #12
 8015630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015632:	4613      	mov	r3, r2
 8015634:	e7e7      	b.n	8015606 <__exponent+0x20>
 8015636:	f813 2b01 	ldrb.w	r2, [r3], #1
 801563a:	f804 2b01 	strb.w	r2, [r4], #1
 801563e:	e7f2      	b.n	8015626 <__exponent+0x40>
 8015640:	2330      	movs	r3, #48	; 0x30
 8015642:	4419      	add	r1, r3
 8015644:	7083      	strb	r3, [r0, #2]
 8015646:	1d02      	adds	r2, r0, #4
 8015648:	70c1      	strb	r1, [r0, #3]
 801564a:	e7ef      	b.n	801562c <__exponent+0x46>

0801564c <_printf_float>:
 801564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015650:	b08d      	sub	sp, #52	; 0x34
 8015652:	460c      	mov	r4, r1
 8015654:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015658:	4616      	mov	r6, r2
 801565a:	461f      	mov	r7, r3
 801565c:	4605      	mov	r5, r0
 801565e:	f001 fc15 	bl	8016e8c <_localeconv_r>
 8015662:	6803      	ldr	r3, [r0, #0]
 8015664:	9304      	str	r3, [sp, #16]
 8015666:	4618      	mov	r0, r3
 8015668:	f7ea fdbc 	bl	80001e4 <strlen>
 801566c:	2300      	movs	r3, #0
 801566e:	930a      	str	r3, [sp, #40]	; 0x28
 8015670:	f8d8 3000 	ldr.w	r3, [r8]
 8015674:	9005      	str	r0, [sp, #20]
 8015676:	3307      	adds	r3, #7
 8015678:	f023 0307 	bic.w	r3, r3, #7
 801567c:	f103 0208 	add.w	r2, r3, #8
 8015680:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015684:	f8d4 b000 	ldr.w	fp, [r4]
 8015688:	f8c8 2000 	str.w	r2, [r8]
 801568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015690:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015694:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015698:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801569c:	9307      	str	r3, [sp, #28]
 801569e:	f8cd 8018 	str.w	r8, [sp, #24]
 80156a2:	f04f 32ff 	mov.w	r2, #4294967295
 80156a6:	4ba7      	ldr	r3, [pc, #668]	; (8015944 <_printf_float+0x2f8>)
 80156a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156ac:	f7eb fa4e 	bl	8000b4c <__aeabi_dcmpun>
 80156b0:	bb70      	cbnz	r0, 8015710 <_printf_float+0xc4>
 80156b2:	f04f 32ff 	mov.w	r2, #4294967295
 80156b6:	4ba3      	ldr	r3, [pc, #652]	; (8015944 <_printf_float+0x2f8>)
 80156b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156bc:	f7eb fa28 	bl	8000b10 <__aeabi_dcmple>
 80156c0:	bb30      	cbnz	r0, 8015710 <_printf_float+0xc4>
 80156c2:	2200      	movs	r2, #0
 80156c4:	2300      	movs	r3, #0
 80156c6:	4640      	mov	r0, r8
 80156c8:	4649      	mov	r1, r9
 80156ca:	f7eb fa17 	bl	8000afc <__aeabi_dcmplt>
 80156ce:	b110      	cbz	r0, 80156d6 <_printf_float+0x8a>
 80156d0:	232d      	movs	r3, #45	; 0x2d
 80156d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156d6:	4a9c      	ldr	r2, [pc, #624]	; (8015948 <_printf_float+0x2fc>)
 80156d8:	4b9c      	ldr	r3, [pc, #624]	; (801594c <_printf_float+0x300>)
 80156da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80156de:	bf8c      	ite	hi
 80156e0:	4690      	movhi	r8, r2
 80156e2:	4698      	movls	r8, r3
 80156e4:	2303      	movs	r3, #3
 80156e6:	f02b 0204 	bic.w	r2, fp, #4
 80156ea:	6123      	str	r3, [r4, #16]
 80156ec:	6022      	str	r2, [r4, #0]
 80156ee:	f04f 0900 	mov.w	r9, #0
 80156f2:	9700      	str	r7, [sp, #0]
 80156f4:	4633      	mov	r3, r6
 80156f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80156f8:	4621      	mov	r1, r4
 80156fa:	4628      	mov	r0, r5
 80156fc:	f000 f9e6 	bl	8015acc <_printf_common>
 8015700:	3001      	adds	r0, #1
 8015702:	f040 808d 	bne.w	8015820 <_printf_float+0x1d4>
 8015706:	f04f 30ff 	mov.w	r0, #4294967295
 801570a:	b00d      	add	sp, #52	; 0x34
 801570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015710:	4642      	mov	r2, r8
 8015712:	464b      	mov	r3, r9
 8015714:	4640      	mov	r0, r8
 8015716:	4649      	mov	r1, r9
 8015718:	f7eb fa18 	bl	8000b4c <__aeabi_dcmpun>
 801571c:	b110      	cbz	r0, 8015724 <_printf_float+0xd8>
 801571e:	4a8c      	ldr	r2, [pc, #560]	; (8015950 <_printf_float+0x304>)
 8015720:	4b8c      	ldr	r3, [pc, #560]	; (8015954 <_printf_float+0x308>)
 8015722:	e7da      	b.n	80156da <_printf_float+0x8e>
 8015724:	6861      	ldr	r1, [r4, #4]
 8015726:	1c4b      	adds	r3, r1, #1
 8015728:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801572c:	a80a      	add	r0, sp, #40	; 0x28
 801572e:	d13e      	bne.n	80157ae <_printf_float+0x162>
 8015730:	2306      	movs	r3, #6
 8015732:	6063      	str	r3, [r4, #4]
 8015734:	2300      	movs	r3, #0
 8015736:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801573a:	ab09      	add	r3, sp, #36	; 0x24
 801573c:	9300      	str	r3, [sp, #0]
 801573e:	ec49 8b10 	vmov	d0, r8, r9
 8015742:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015746:	6022      	str	r2, [r4, #0]
 8015748:	f8cd a004 	str.w	sl, [sp, #4]
 801574c:	6861      	ldr	r1, [r4, #4]
 801574e:	4628      	mov	r0, r5
 8015750:	f7ff fee8 	bl	8015524 <__cvt>
 8015754:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015758:	2b47      	cmp	r3, #71	; 0x47
 801575a:	4680      	mov	r8, r0
 801575c:	d109      	bne.n	8015772 <_printf_float+0x126>
 801575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015760:	1cd8      	adds	r0, r3, #3
 8015762:	db02      	blt.n	801576a <_printf_float+0x11e>
 8015764:	6862      	ldr	r2, [r4, #4]
 8015766:	4293      	cmp	r3, r2
 8015768:	dd47      	ble.n	80157fa <_printf_float+0x1ae>
 801576a:	f1aa 0a02 	sub.w	sl, sl, #2
 801576e:	fa5f fa8a 	uxtb.w	sl, sl
 8015772:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015778:	d824      	bhi.n	80157c4 <_printf_float+0x178>
 801577a:	3901      	subs	r1, #1
 801577c:	4652      	mov	r2, sl
 801577e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015782:	9109      	str	r1, [sp, #36]	; 0x24
 8015784:	f7ff ff2f 	bl	80155e6 <__exponent>
 8015788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801578a:	1813      	adds	r3, r2, r0
 801578c:	2a01      	cmp	r2, #1
 801578e:	4681      	mov	r9, r0
 8015790:	6123      	str	r3, [r4, #16]
 8015792:	dc02      	bgt.n	801579a <_printf_float+0x14e>
 8015794:	6822      	ldr	r2, [r4, #0]
 8015796:	07d1      	lsls	r1, r2, #31
 8015798:	d501      	bpl.n	801579e <_printf_float+0x152>
 801579a:	3301      	adds	r3, #1
 801579c:	6123      	str	r3, [r4, #16]
 801579e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d0a5      	beq.n	80156f2 <_printf_float+0xa6>
 80157a6:	232d      	movs	r3, #45	; 0x2d
 80157a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157ac:	e7a1      	b.n	80156f2 <_printf_float+0xa6>
 80157ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80157b2:	f000 8177 	beq.w	8015aa4 <_printf_float+0x458>
 80157b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80157ba:	d1bb      	bne.n	8015734 <_printf_float+0xe8>
 80157bc:	2900      	cmp	r1, #0
 80157be:	d1b9      	bne.n	8015734 <_printf_float+0xe8>
 80157c0:	2301      	movs	r3, #1
 80157c2:	e7b6      	b.n	8015732 <_printf_float+0xe6>
 80157c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80157c8:	d119      	bne.n	80157fe <_printf_float+0x1b2>
 80157ca:	2900      	cmp	r1, #0
 80157cc:	6863      	ldr	r3, [r4, #4]
 80157ce:	dd0c      	ble.n	80157ea <_printf_float+0x19e>
 80157d0:	6121      	str	r1, [r4, #16]
 80157d2:	b913      	cbnz	r3, 80157da <_printf_float+0x18e>
 80157d4:	6822      	ldr	r2, [r4, #0]
 80157d6:	07d2      	lsls	r2, r2, #31
 80157d8:	d502      	bpl.n	80157e0 <_printf_float+0x194>
 80157da:	3301      	adds	r3, #1
 80157dc:	440b      	add	r3, r1
 80157de:	6123      	str	r3, [r4, #16]
 80157e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80157e4:	f04f 0900 	mov.w	r9, #0
 80157e8:	e7d9      	b.n	801579e <_printf_float+0x152>
 80157ea:	b913      	cbnz	r3, 80157f2 <_printf_float+0x1a6>
 80157ec:	6822      	ldr	r2, [r4, #0]
 80157ee:	07d0      	lsls	r0, r2, #31
 80157f0:	d501      	bpl.n	80157f6 <_printf_float+0x1aa>
 80157f2:	3302      	adds	r3, #2
 80157f4:	e7f3      	b.n	80157de <_printf_float+0x192>
 80157f6:	2301      	movs	r3, #1
 80157f8:	e7f1      	b.n	80157de <_printf_float+0x192>
 80157fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80157fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015802:	4293      	cmp	r3, r2
 8015804:	db05      	blt.n	8015812 <_printf_float+0x1c6>
 8015806:	6822      	ldr	r2, [r4, #0]
 8015808:	6123      	str	r3, [r4, #16]
 801580a:	07d1      	lsls	r1, r2, #31
 801580c:	d5e8      	bpl.n	80157e0 <_printf_float+0x194>
 801580e:	3301      	adds	r3, #1
 8015810:	e7e5      	b.n	80157de <_printf_float+0x192>
 8015812:	2b00      	cmp	r3, #0
 8015814:	bfd4      	ite	le
 8015816:	f1c3 0302 	rsble	r3, r3, #2
 801581a:	2301      	movgt	r3, #1
 801581c:	4413      	add	r3, r2
 801581e:	e7de      	b.n	80157de <_printf_float+0x192>
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	055a      	lsls	r2, r3, #21
 8015824:	d407      	bmi.n	8015836 <_printf_float+0x1ea>
 8015826:	6923      	ldr	r3, [r4, #16]
 8015828:	4642      	mov	r2, r8
 801582a:	4631      	mov	r1, r6
 801582c:	4628      	mov	r0, r5
 801582e:	47b8      	blx	r7
 8015830:	3001      	adds	r0, #1
 8015832:	d12b      	bne.n	801588c <_printf_float+0x240>
 8015834:	e767      	b.n	8015706 <_printf_float+0xba>
 8015836:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801583a:	f240 80dc 	bls.w	80159f6 <_printf_float+0x3aa>
 801583e:	2200      	movs	r2, #0
 8015840:	2300      	movs	r3, #0
 8015842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015846:	f7eb f94f 	bl	8000ae8 <__aeabi_dcmpeq>
 801584a:	2800      	cmp	r0, #0
 801584c:	d033      	beq.n	80158b6 <_printf_float+0x26a>
 801584e:	2301      	movs	r3, #1
 8015850:	4a41      	ldr	r2, [pc, #260]	; (8015958 <_printf_float+0x30c>)
 8015852:	4631      	mov	r1, r6
 8015854:	4628      	mov	r0, r5
 8015856:	47b8      	blx	r7
 8015858:	3001      	adds	r0, #1
 801585a:	f43f af54 	beq.w	8015706 <_printf_float+0xba>
 801585e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015862:	429a      	cmp	r2, r3
 8015864:	db02      	blt.n	801586c <_printf_float+0x220>
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	07d8      	lsls	r0, r3, #31
 801586a:	d50f      	bpl.n	801588c <_printf_float+0x240>
 801586c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015870:	4631      	mov	r1, r6
 8015872:	4628      	mov	r0, r5
 8015874:	47b8      	blx	r7
 8015876:	3001      	adds	r0, #1
 8015878:	f43f af45 	beq.w	8015706 <_printf_float+0xba>
 801587c:	f04f 0800 	mov.w	r8, #0
 8015880:	f104 091a 	add.w	r9, r4, #26
 8015884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015886:	3b01      	subs	r3, #1
 8015888:	4543      	cmp	r3, r8
 801588a:	dc09      	bgt.n	80158a0 <_printf_float+0x254>
 801588c:	6823      	ldr	r3, [r4, #0]
 801588e:	079b      	lsls	r3, r3, #30
 8015890:	f100 8103 	bmi.w	8015a9a <_printf_float+0x44e>
 8015894:	68e0      	ldr	r0, [r4, #12]
 8015896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015898:	4298      	cmp	r0, r3
 801589a:	bfb8      	it	lt
 801589c:	4618      	movlt	r0, r3
 801589e:	e734      	b.n	801570a <_printf_float+0xbe>
 80158a0:	2301      	movs	r3, #1
 80158a2:	464a      	mov	r2, r9
 80158a4:	4631      	mov	r1, r6
 80158a6:	4628      	mov	r0, r5
 80158a8:	47b8      	blx	r7
 80158aa:	3001      	adds	r0, #1
 80158ac:	f43f af2b 	beq.w	8015706 <_printf_float+0xba>
 80158b0:	f108 0801 	add.w	r8, r8, #1
 80158b4:	e7e6      	b.n	8015884 <_printf_float+0x238>
 80158b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	dc2b      	bgt.n	8015914 <_printf_float+0x2c8>
 80158bc:	2301      	movs	r3, #1
 80158be:	4a26      	ldr	r2, [pc, #152]	; (8015958 <_printf_float+0x30c>)
 80158c0:	4631      	mov	r1, r6
 80158c2:	4628      	mov	r0, r5
 80158c4:	47b8      	blx	r7
 80158c6:	3001      	adds	r0, #1
 80158c8:	f43f af1d 	beq.w	8015706 <_printf_float+0xba>
 80158cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ce:	b923      	cbnz	r3, 80158da <_printf_float+0x28e>
 80158d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158d2:	b913      	cbnz	r3, 80158da <_printf_float+0x28e>
 80158d4:	6823      	ldr	r3, [r4, #0]
 80158d6:	07d9      	lsls	r1, r3, #31
 80158d8:	d5d8      	bpl.n	801588c <_printf_float+0x240>
 80158da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158de:	4631      	mov	r1, r6
 80158e0:	4628      	mov	r0, r5
 80158e2:	47b8      	blx	r7
 80158e4:	3001      	adds	r0, #1
 80158e6:	f43f af0e 	beq.w	8015706 <_printf_float+0xba>
 80158ea:	f04f 0900 	mov.w	r9, #0
 80158ee:	f104 0a1a 	add.w	sl, r4, #26
 80158f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158f4:	425b      	negs	r3, r3
 80158f6:	454b      	cmp	r3, r9
 80158f8:	dc01      	bgt.n	80158fe <_printf_float+0x2b2>
 80158fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158fc:	e794      	b.n	8015828 <_printf_float+0x1dc>
 80158fe:	2301      	movs	r3, #1
 8015900:	4652      	mov	r2, sl
 8015902:	4631      	mov	r1, r6
 8015904:	4628      	mov	r0, r5
 8015906:	47b8      	blx	r7
 8015908:	3001      	adds	r0, #1
 801590a:	f43f aefc 	beq.w	8015706 <_printf_float+0xba>
 801590e:	f109 0901 	add.w	r9, r9, #1
 8015912:	e7ee      	b.n	80158f2 <_printf_float+0x2a6>
 8015914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015918:	429a      	cmp	r2, r3
 801591a:	bfa8      	it	ge
 801591c:	461a      	movge	r2, r3
 801591e:	2a00      	cmp	r2, #0
 8015920:	4691      	mov	r9, r2
 8015922:	dd07      	ble.n	8015934 <_printf_float+0x2e8>
 8015924:	4613      	mov	r3, r2
 8015926:	4631      	mov	r1, r6
 8015928:	4642      	mov	r2, r8
 801592a:	4628      	mov	r0, r5
 801592c:	47b8      	blx	r7
 801592e:	3001      	adds	r0, #1
 8015930:	f43f aee9 	beq.w	8015706 <_printf_float+0xba>
 8015934:	f104 031a 	add.w	r3, r4, #26
 8015938:	f04f 0b00 	mov.w	fp, #0
 801593c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015940:	9306      	str	r3, [sp, #24]
 8015942:	e015      	b.n	8015970 <_printf_float+0x324>
 8015944:	7fefffff 	.word	0x7fefffff
 8015948:	0801b870 	.word	0x0801b870
 801594c:	0801b86c 	.word	0x0801b86c
 8015950:	0801b878 	.word	0x0801b878
 8015954:	0801b874 	.word	0x0801b874
 8015958:	0801b87c 	.word	0x0801b87c
 801595c:	2301      	movs	r3, #1
 801595e:	9a06      	ldr	r2, [sp, #24]
 8015960:	4631      	mov	r1, r6
 8015962:	4628      	mov	r0, r5
 8015964:	47b8      	blx	r7
 8015966:	3001      	adds	r0, #1
 8015968:	f43f aecd 	beq.w	8015706 <_printf_float+0xba>
 801596c:	f10b 0b01 	add.w	fp, fp, #1
 8015970:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015974:	ebaa 0309 	sub.w	r3, sl, r9
 8015978:	455b      	cmp	r3, fp
 801597a:	dcef      	bgt.n	801595c <_printf_float+0x310>
 801597c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015980:	429a      	cmp	r2, r3
 8015982:	44d0      	add	r8, sl
 8015984:	db15      	blt.n	80159b2 <_printf_float+0x366>
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	07da      	lsls	r2, r3, #31
 801598a:	d412      	bmi.n	80159b2 <_printf_float+0x366>
 801598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801598e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015990:	eba3 020a 	sub.w	r2, r3, sl
 8015994:	eba3 0a01 	sub.w	sl, r3, r1
 8015998:	4592      	cmp	sl, r2
 801599a:	bfa8      	it	ge
 801599c:	4692      	movge	sl, r2
 801599e:	f1ba 0f00 	cmp.w	sl, #0
 80159a2:	dc0e      	bgt.n	80159c2 <_printf_float+0x376>
 80159a4:	f04f 0800 	mov.w	r8, #0
 80159a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159ac:	f104 091a 	add.w	r9, r4, #26
 80159b0:	e019      	b.n	80159e6 <_printf_float+0x39a>
 80159b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159b6:	4631      	mov	r1, r6
 80159b8:	4628      	mov	r0, r5
 80159ba:	47b8      	blx	r7
 80159bc:	3001      	adds	r0, #1
 80159be:	d1e5      	bne.n	801598c <_printf_float+0x340>
 80159c0:	e6a1      	b.n	8015706 <_printf_float+0xba>
 80159c2:	4653      	mov	r3, sl
 80159c4:	4642      	mov	r2, r8
 80159c6:	4631      	mov	r1, r6
 80159c8:	4628      	mov	r0, r5
 80159ca:	47b8      	blx	r7
 80159cc:	3001      	adds	r0, #1
 80159ce:	d1e9      	bne.n	80159a4 <_printf_float+0x358>
 80159d0:	e699      	b.n	8015706 <_printf_float+0xba>
 80159d2:	2301      	movs	r3, #1
 80159d4:	464a      	mov	r2, r9
 80159d6:	4631      	mov	r1, r6
 80159d8:	4628      	mov	r0, r5
 80159da:	47b8      	blx	r7
 80159dc:	3001      	adds	r0, #1
 80159de:	f43f ae92 	beq.w	8015706 <_printf_float+0xba>
 80159e2:	f108 0801 	add.w	r8, r8, #1
 80159e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159ea:	1a9b      	subs	r3, r3, r2
 80159ec:	eba3 030a 	sub.w	r3, r3, sl
 80159f0:	4543      	cmp	r3, r8
 80159f2:	dcee      	bgt.n	80159d2 <_printf_float+0x386>
 80159f4:	e74a      	b.n	801588c <_printf_float+0x240>
 80159f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159f8:	2a01      	cmp	r2, #1
 80159fa:	dc01      	bgt.n	8015a00 <_printf_float+0x3b4>
 80159fc:	07db      	lsls	r3, r3, #31
 80159fe:	d53a      	bpl.n	8015a76 <_printf_float+0x42a>
 8015a00:	2301      	movs	r3, #1
 8015a02:	4642      	mov	r2, r8
 8015a04:	4631      	mov	r1, r6
 8015a06:	4628      	mov	r0, r5
 8015a08:	47b8      	blx	r7
 8015a0a:	3001      	adds	r0, #1
 8015a0c:	f43f ae7b 	beq.w	8015706 <_printf_float+0xba>
 8015a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a14:	4631      	mov	r1, r6
 8015a16:	4628      	mov	r0, r5
 8015a18:	47b8      	blx	r7
 8015a1a:	3001      	adds	r0, #1
 8015a1c:	f108 0801 	add.w	r8, r8, #1
 8015a20:	f43f ae71 	beq.w	8015706 <_printf_float+0xba>
 8015a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a26:	2200      	movs	r2, #0
 8015a28:	f103 3aff 	add.w	sl, r3, #4294967295
 8015a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015a30:	2300      	movs	r3, #0
 8015a32:	f7eb f859 	bl	8000ae8 <__aeabi_dcmpeq>
 8015a36:	b9c8      	cbnz	r0, 8015a6c <_printf_float+0x420>
 8015a38:	4653      	mov	r3, sl
 8015a3a:	4642      	mov	r2, r8
 8015a3c:	4631      	mov	r1, r6
 8015a3e:	4628      	mov	r0, r5
 8015a40:	47b8      	blx	r7
 8015a42:	3001      	adds	r0, #1
 8015a44:	d10e      	bne.n	8015a64 <_printf_float+0x418>
 8015a46:	e65e      	b.n	8015706 <_printf_float+0xba>
 8015a48:	2301      	movs	r3, #1
 8015a4a:	4652      	mov	r2, sl
 8015a4c:	4631      	mov	r1, r6
 8015a4e:	4628      	mov	r0, r5
 8015a50:	47b8      	blx	r7
 8015a52:	3001      	adds	r0, #1
 8015a54:	f43f ae57 	beq.w	8015706 <_printf_float+0xba>
 8015a58:	f108 0801 	add.w	r8, r8, #1
 8015a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a5e:	3b01      	subs	r3, #1
 8015a60:	4543      	cmp	r3, r8
 8015a62:	dcf1      	bgt.n	8015a48 <_printf_float+0x3fc>
 8015a64:	464b      	mov	r3, r9
 8015a66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015a6a:	e6de      	b.n	801582a <_printf_float+0x1de>
 8015a6c:	f04f 0800 	mov.w	r8, #0
 8015a70:	f104 0a1a 	add.w	sl, r4, #26
 8015a74:	e7f2      	b.n	8015a5c <_printf_float+0x410>
 8015a76:	2301      	movs	r3, #1
 8015a78:	e7df      	b.n	8015a3a <_printf_float+0x3ee>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	464a      	mov	r2, r9
 8015a7e:	4631      	mov	r1, r6
 8015a80:	4628      	mov	r0, r5
 8015a82:	47b8      	blx	r7
 8015a84:	3001      	adds	r0, #1
 8015a86:	f43f ae3e 	beq.w	8015706 <_printf_float+0xba>
 8015a8a:	f108 0801 	add.w	r8, r8, #1
 8015a8e:	68e3      	ldr	r3, [r4, #12]
 8015a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a92:	1a9b      	subs	r3, r3, r2
 8015a94:	4543      	cmp	r3, r8
 8015a96:	dcf0      	bgt.n	8015a7a <_printf_float+0x42e>
 8015a98:	e6fc      	b.n	8015894 <_printf_float+0x248>
 8015a9a:	f04f 0800 	mov.w	r8, #0
 8015a9e:	f104 0919 	add.w	r9, r4, #25
 8015aa2:	e7f4      	b.n	8015a8e <_printf_float+0x442>
 8015aa4:	2900      	cmp	r1, #0
 8015aa6:	f43f ae8b 	beq.w	80157c0 <_printf_float+0x174>
 8015aaa:	2300      	movs	r3, #0
 8015aac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ab0:	ab09      	add	r3, sp, #36	; 0x24
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	ec49 8b10 	vmov	d0, r8, r9
 8015ab8:	6022      	str	r2, [r4, #0]
 8015aba:	f8cd a004 	str.w	sl, [sp, #4]
 8015abe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	f7ff fd2e 	bl	8015524 <__cvt>
 8015ac8:	4680      	mov	r8, r0
 8015aca:	e648      	b.n	801575e <_printf_float+0x112>

08015acc <_printf_common>:
 8015acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ad0:	4691      	mov	r9, r2
 8015ad2:	461f      	mov	r7, r3
 8015ad4:	688a      	ldr	r2, [r1, #8]
 8015ad6:	690b      	ldr	r3, [r1, #16]
 8015ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015adc:	4293      	cmp	r3, r2
 8015ade:	bfb8      	it	lt
 8015ae0:	4613      	movlt	r3, r2
 8015ae2:	f8c9 3000 	str.w	r3, [r9]
 8015ae6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015aea:	4606      	mov	r6, r0
 8015aec:	460c      	mov	r4, r1
 8015aee:	b112      	cbz	r2, 8015af6 <_printf_common+0x2a>
 8015af0:	3301      	adds	r3, #1
 8015af2:	f8c9 3000 	str.w	r3, [r9]
 8015af6:	6823      	ldr	r3, [r4, #0]
 8015af8:	0699      	lsls	r1, r3, #26
 8015afa:	bf42      	ittt	mi
 8015afc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015b00:	3302      	addmi	r3, #2
 8015b02:	f8c9 3000 	strmi.w	r3, [r9]
 8015b06:	6825      	ldr	r5, [r4, #0]
 8015b08:	f015 0506 	ands.w	r5, r5, #6
 8015b0c:	d107      	bne.n	8015b1e <_printf_common+0x52>
 8015b0e:	f104 0a19 	add.w	sl, r4, #25
 8015b12:	68e3      	ldr	r3, [r4, #12]
 8015b14:	f8d9 2000 	ldr.w	r2, [r9]
 8015b18:	1a9b      	subs	r3, r3, r2
 8015b1a:	42ab      	cmp	r3, r5
 8015b1c:	dc28      	bgt.n	8015b70 <_printf_common+0xa4>
 8015b1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015b22:	6822      	ldr	r2, [r4, #0]
 8015b24:	3300      	adds	r3, #0
 8015b26:	bf18      	it	ne
 8015b28:	2301      	movne	r3, #1
 8015b2a:	0692      	lsls	r2, r2, #26
 8015b2c:	d42d      	bmi.n	8015b8a <_printf_common+0xbe>
 8015b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b32:	4639      	mov	r1, r7
 8015b34:	4630      	mov	r0, r6
 8015b36:	47c0      	blx	r8
 8015b38:	3001      	adds	r0, #1
 8015b3a:	d020      	beq.n	8015b7e <_printf_common+0xb2>
 8015b3c:	6823      	ldr	r3, [r4, #0]
 8015b3e:	68e5      	ldr	r5, [r4, #12]
 8015b40:	f8d9 2000 	ldr.w	r2, [r9]
 8015b44:	f003 0306 	and.w	r3, r3, #6
 8015b48:	2b04      	cmp	r3, #4
 8015b4a:	bf08      	it	eq
 8015b4c:	1aad      	subeq	r5, r5, r2
 8015b4e:	68a3      	ldr	r3, [r4, #8]
 8015b50:	6922      	ldr	r2, [r4, #16]
 8015b52:	bf0c      	ite	eq
 8015b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b58:	2500      	movne	r5, #0
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	bfc4      	itt	gt
 8015b5e:	1a9b      	subgt	r3, r3, r2
 8015b60:	18ed      	addgt	r5, r5, r3
 8015b62:	f04f 0900 	mov.w	r9, #0
 8015b66:	341a      	adds	r4, #26
 8015b68:	454d      	cmp	r5, r9
 8015b6a:	d11a      	bne.n	8015ba2 <_printf_common+0xd6>
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	e008      	b.n	8015b82 <_printf_common+0xb6>
 8015b70:	2301      	movs	r3, #1
 8015b72:	4652      	mov	r2, sl
 8015b74:	4639      	mov	r1, r7
 8015b76:	4630      	mov	r0, r6
 8015b78:	47c0      	blx	r8
 8015b7a:	3001      	adds	r0, #1
 8015b7c:	d103      	bne.n	8015b86 <_printf_common+0xba>
 8015b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8015b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b86:	3501      	adds	r5, #1
 8015b88:	e7c3      	b.n	8015b12 <_printf_common+0x46>
 8015b8a:	18e1      	adds	r1, r4, r3
 8015b8c:	1c5a      	adds	r2, r3, #1
 8015b8e:	2030      	movs	r0, #48	; 0x30
 8015b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b94:	4422      	add	r2, r4
 8015b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b9e:	3302      	adds	r3, #2
 8015ba0:	e7c5      	b.n	8015b2e <_printf_common+0x62>
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	4622      	mov	r2, r4
 8015ba6:	4639      	mov	r1, r7
 8015ba8:	4630      	mov	r0, r6
 8015baa:	47c0      	blx	r8
 8015bac:	3001      	adds	r0, #1
 8015bae:	d0e6      	beq.n	8015b7e <_printf_common+0xb2>
 8015bb0:	f109 0901 	add.w	r9, r9, #1
 8015bb4:	e7d8      	b.n	8015b68 <_printf_common+0x9c>
	...

08015bb8 <_printf_i>:
 8015bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015bc0:	460c      	mov	r4, r1
 8015bc2:	7e09      	ldrb	r1, [r1, #24]
 8015bc4:	b085      	sub	sp, #20
 8015bc6:	296e      	cmp	r1, #110	; 0x6e
 8015bc8:	4617      	mov	r7, r2
 8015bca:	4606      	mov	r6, r0
 8015bcc:	4698      	mov	r8, r3
 8015bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015bd0:	f000 80b3 	beq.w	8015d3a <_printf_i+0x182>
 8015bd4:	d822      	bhi.n	8015c1c <_printf_i+0x64>
 8015bd6:	2963      	cmp	r1, #99	; 0x63
 8015bd8:	d036      	beq.n	8015c48 <_printf_i+0x90>
 8015bda:	d80a      	bhi.n	8015bf2 <_printf_i+0x3a>
 8015bdc:	2900      	cmp	r1, #0
 8015bde:	f000 80b9 	beq.w	8015d54 <_printf_i+0x19c>
 8015be2:	2958      	cmp	r1, #88	; 0x58
 8015be4:	f000 8083 	beq.w	8015cee <_printf_i+0x136>
 8015be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015bf0:	e032      	b.n	8015c58 <_printf_i+0xa0>
 8015bf2:	2964      	cmp	r1, #100	; 0x64
 8015bf4:	d001      	beq.n	8015bfa <_printf_i+0x42>
 8015bf6:	2969      	cmp	r1, #105	; 0x69
 8015bf8:	d1f6      	bne.n	8015be8 <_printf_i+0x30>
 8015bfa:	6820      	ldr	r0, [r4, #0]
 8015bfc:	6813      	ldr	r3, [r2, #0]
 8015bfe:	0605      	lsls	r5, r0, #24
 8015c00:	f103 0104 	add.w	r1, r3, #4
 8015c04:	d52a      	bpl.n	8015c5c <_printf_i+0xa4>
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	6011      	str	r1, [r2, #0]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	da03      	bge.n	8015c16 <_printf_i+0x5e>
 8015c0e:	222d      	movs	r2, #45	; 0x2d
 8015c10:	425b      	negs	r3, r3
 8015c12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015c16:	486f      	ldr	r0, [pc, #444]	; (8015dd4 <_printf_i+0x21c>)
 8015c18:	220a      	movs	r2, #10
 8015c1a:	e039      	b.n	8015c90 <_printf_i+0xd8>
 8015c1c:	2973      	cmp	r1, #115	; 0x73
 8015c1e:	f000 809d 	beq.w	8015d5c <_printf_i+0x1a4>
 8015c22:	d808      	bhi.n	8015c36 <_printf_i+0x7e>
 8015c24:	296f      	cmp	r1, #111	; 0x6f
 8015c26:	d020      	beq.n	8015c6a <_printf_i+0xb2>
 8015c28:	2970      	cmp	r1, #112	; 0x70
 8015c2a:	d1dd      	bne.n	8015be8 <_printf_i+0x30>
 8015c2c:	6823      	ldr	r3, [r4, #0]
 8015c2e:	f043 0320 	orr.w	r3, r3, #32
 8015c32:	6023      	str	r3, [r4, #0]
 8015c34:	e003      	b.n	8015c3e <_printf_i+0x86>
 8015c36:	2975      	cmp	r1, #117	; 0x75
 8015c38:	d017      	beq.n	8015c6a <_printf_i+0xb2>
 8015c3a:	2978      	cmp	r1, #120	; 0x78
 8015c3c:	d1d4      	bne.n	8015be8 <_printf_i+0x30>
 8015c3e:	2378      	movs	r3, #120	; 0x78
 8015c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015c44:	4864      	ldr	r0, [pc, #400]	; (8015dd8 <_printf_i+0x220>)
 8015c46:	e055      	b.n	8015cf4 <_printf_i+0x13c>
 8015c48:	6813      	ldr	r3, [r2, #0]
 8015c4a:	1d19      	adds	r1, r3, #4
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	6011      	str	r1, [r2, #0]
 8015c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c58:	2301      	movs	r3, #1
 8015c5a:	e08c      	b.n	8015d76 <_printf_i+0x1be>
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	6011      	str	r1, [r2, #0]
 8015c60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015c64:	bf18      	it	ne
 8015c66:	b21b      	sxthne	r3, r3
 8015c68:	e7cf      	b.n	8015c0a <_printf_i+0x52>
 8015c6a:	6813      	ldr	r3, [r2, #0]
 8015c6c:	6825      	ldr	r5, [r4, #0]
 8015c6e:	1d18      	adds	r0, r3, #4
 8015c70:	6010      	str	r0, [r2, #0]
 8015c72:	0628      	lsls	r0, r5, #24
 8015c74:	d501      	bpl.n	8015c7a <_printf_i+0xc2>
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	e002      	b.n	8015c80 <_printf_i+0xc8>
 8015c7a:	0668      	lsls	r0, r5, #25
 8015c7c:	d5fb      	bpl.n	8015c76 <_printf_i+0xbe>
 8015c7e:	881b      	ldrh	r3, [r3, #0]
 8015c80:	4854      	ldr	r0, [pc, #336]	; (8015dd4 <_printf_i+0x21c>)
 8015c82:	296f      	cmp	r1, #111	; 0x6f
 8015c84:	bf14      	ite	ne
 8015c86:	220a      	movne	r2, #10
 8015c88:	2208      	moveq	r2, #8
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c90:	6865      	ldr	r5, [r4, #4]
 8015c92:	60a5      	str	r5, [r4, #8]
 8015c94:	2d00      	cmp	r5, #0
 8015c96:	f2c0 8095 	blt.w	8015dc4 <_printf_i+0x20c>
 8015c9a:	6821      	ldr	r1, [r4, #0]
 8015c9c:	f021 0104 	bic.w	r1, r1, #4
 8015ca0:	6021      	str	r1, [r4, #0]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d13d      	bne.n	8015d22 <_printf_i+0x16a>
 8015ca6:	2d00      	cmp	r5, #0
 8015ca8:	f040 808e 	bne.w	8015dc8 <_printf_i+0x210>
 8015cac:	4665      	mov	r5, ip
 8015cae:	2a08      	cmp	r2, #8
 8015cb0:	d10b      	bne.n	8015cca <_printf_i+0x112>
 8015cb2:	6823      	ldr	r3, [r4, #0]
 8015cb4:	07db      	lsls	r3, r3, #31
 8015cb6:	d508      	bpl.n	8015cca <_printf_i+0x112>
 8015cb8:	6923      	ldr	r3, [r4, #16]
 8015cba:	6862      	ldr	r2, [r4, #4]
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	bfde      	ittt	le
 8015cc0:	2330      	movle	r3, #48	; 0x30
 8015cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015cca:	ebac 0305 	sub.w	r3, ip, r5
 8015cce:	6123      	str	r3, [r4, #16]
 8015cd0:	f8cd 8000 	str.w	r8, [sp]
 8015cd4:	463b      	mov	r3, r7
 8015cd6:	aa03      	add	r2, sp, #12
 8015cd8:	4621      	mov	r1, r4
 8015cda:	4630      	mov	r0, r6
 8015cdc:	f7ff fef6 	bl	8015acc <_printf_common>
 8015ce0:	3001      	adds	r0, #1
 8015ce2:	d14d      	bne.n	8015d80 <_printf_i+0x1c8>
 8015ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8015ce8:	b005      	add	sp, #20
 8015cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cee:	4839      	ldr	r0, [pc, #228]	; (8015dd4 <_printf_i+0x21c>)
 8015cf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015cf4:	6813      	ldr	r3, [r2, #0]
 8015cf6:	6821      	ldr	r1, [r4, #0]
 8015cf8:	1d1d      	adds	r5, r3, #4
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	6015      	str	r5, [r2, #0]
 8015cfe:	060a      	lsls	r2, r1, #24
 8015d00:	d50b      	bpl.n	8015d1a <_printf_i+0x162>
 8015d02:	07ca      	lsls	r2, r1, #31
 8015d04:	bf44      	itt	mi
 8015d06:	f041 0120 	orrmi.w	r1, r1, #32
 8015d0a:	6021      	strmi	r1, [r4, #0]
 8015d0c:	b91b      	cbnz	r3, 8015d16 <_printf_i+0x15e>
 8015d0e:	6822      	ldr	r2, [r4, #0]
 8015d10:	f022 0220 	bic.w	r2, r2, #32
 8015d14:	6022      	str	r2, [r4, #0]
 8015d16:	2210      	movs	r2, #16
 8015d18:	e7b7      	b.n	8015c8a <_printf_i+0xd2>
 8015d1a:	064d      	lsls	r5, r1, #25
 8015d1c:	bf48      	it	mi
 8015d1e:	b29b      	uxthmi	r3, r3
 8015d20:	e7ef      	b.n	8015d02 <_printf_i+0x14a>
 8015d22:	4665      	mov	r5, ip
 8015d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d28:	fb02 3311 	mls	r3, r2, r1, r3
 8015d2c:	5cc3      	ldrb	r3, [r0, r3]
 8015d2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015d32:	460b      	mov	r3, r1
 8015d34:	2900      	cmp	r1, #0
 8015d36:	d1f5      	bne.n	8015d24 <_printf_i+0x16c>
 8015d38:	e7b9      	b.n	8015cae <_printf_i+0xf6>
 8015d3a:	6813      	ldr	r3, [r2, #0]
 8015d3c:	6825      	ldr	r5, [r4, #0]
 8015d3e:	6961      	ldr	r1, [r4, #20]
 8015d40:	1d18      	adds	r0, r3, #4
 8015d42:	6010      	str	r0, [r2, #0]
 8015d44:	0628      	lsls	r0, r5, #24
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	d501      	bpl.n	8015d4e <_printf_i+0x196>
 8015d4a:	6019      	str	r1, [r3, #0]
 8015d4c:	e002      	b.n	8015d54 <_printf_i+0x19c>
 8015d4e:	066a      	lsls	r2, r5, #25
 8015d50:	d5fb      	bpl.n	8015d4a <_printf_i+0x192>
 8015d52:	8019      	strh	r1, [r3, #0]
 8015d54:	2300      	movs	r3, #0
 8015d56:	6123      	str	r3, [r4, #16]
 8015d58:	4665      	mov	r5, ip
 8015d5a:	e7b9      	b.n	8015cd0 <_printf_i+0x118>
 8015d5c:	6813      	ldr	r3, [r2, #0]
 8015d5e:	1d19      	adds	r1, r3, #4
 8015d60:	6011      	str	r1, [r2, #0]
 8015d62:	681d      	ldr	r5, [r3, #0]
 8015d64:	6862      	ldr	r2, [r4, #4]
 8015d66:	2100      	movs	r1, #0
 8015d68:	4628      	mov	r0, r5
 8015d6a:	f7ea fa49 	bl	8000200 <memchr>
 8015d6e:	b108      	cbz	r0, 8015d74 <_printf_i+0x1bc>
 8015d70:	1b40      	subs	r0, r0, r5
 8015d72:	6060      	str	r0, [r4, #4]
 8015d74:	6863      	ldr	r3, [r4, #4]
 8015d76:	6123      	str	r3, [r4, #16]
 8015d78:	2300      	movs	r3, #0
 8015d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d7e:	e7a7      	b.n	8015cd0 <_printf_i+0x118>
 8015d80:	6923      	ldr	r3, [r4, #16]
 8015d82:	462a      	mov	r2, r5
 8015d84:	4639      	mov	r1, r7
 8015d86:	4630      	mov	r0, r6
 8015d88:	47c0      	blx	r8
 8015d8a:	3001      	adds	r0, #1
 8015d8c:	d0aa      	beq.n	8015ce4 <_printf_i+0x12c>
 8015d8e:	6823      	ldr	r3, [r4, #0]
 8015d90:	079b      	lsls	r3, r3, #30
 8015d92:	d413      	bmi.n	8015dbc <_printf_i+0x204>
 8015d94:	68e0      	ldr	r0, [r4, #12]
 8015d96:	9b03      	ldr	r3, [sp, #12]
 8015d98:	4298      	cmp	r0, r3
 8015d9a:	bfb8      	it	lt
 8015d9c:	4618      	movlt	r0, r3
 8015d9e:	e7a3      	b.n	8015ce8 <_printf_i+0x130>
 8015da0:	2301      	movs	r3, #1
 8015da2:	464a      	mov	r2, r9
 8015da4:	4639      	mov	r1, r7
 8015da6:	4630      	mov	r0, r6
 8015da8:	47c0      	blx	r8
 8015daa:	3001      	adds	r0, #1
 8015dac:	d09a      	beq.n	8015ce4 <_printf_i+0x12c>
 8015dae:	3501      	adds	r5, #1
 8015db0:	68e3      	ldr	r3, [r4, #12]
 8015db2:	9a03      	ldr	r2, [sp, #12]
 8015db4:	1a9b      	subs	r3, r3, r2
 8015db6:	42ab      	cmp	r3, r5
 8015db8:	dcf2      	bgt.n	8015da0 <_printf_i+0x1e8>
 8015dba:	e7eb      	b.n	8015d94 <_printf_i+0x1dc>
 8015dbc:	2500      	movs	r5, #0
 8015dbe:	f104 0919 	add.w	r9, r4, #25
 8015dc2:	e7f5      	b.n	8015db0 <_printf_i+0x1f8>
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d1ac      	bne.n	8015d22 <_printf_i+0x16a>
 8015dc8:	7803      	ldrb	r3, [r0, #0]
 8015dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015dd2:	e76c      	b.n	8015cae <_printf_i+0xf6>
 8015dd4:	0801b87e 	.word	0x0801b87e
 8015dd8:	0801b88f 	.word	0x0801b88f

08015ddc <iprintf>:
 8015ddc:	b40f      	push	{r0, r1, r2, r3}
 8015dde:	4b0a      	ldr	r3, [pc, #40]	; (8015e08 <iprintf+0x2c>)
 8015de0:	b513      	push	{r0, r1, r4, lr}
 8015de2:	681c      	ldr	r4, [r3, #0]
 8015de4:	b124      	cbz	r4, 8015df0 <iprintf+0x14>
 8015de6:	69a3      	ldr	r3, [r4, #24]
 8015de8:	b913      	cbnz	r3, 8015df0 <iprintf+0x14>
 8015dea:	4620      	mov	r0, r4
 8015dec:	f000 ffc0 	bl	8016d70 <__sinit>
 8015df0:	ab05      	add	r3, sp, #20
 8015df2:	9a04      	ldr	r2, [sp, #16]
 8015df4:	68a1      	ldr	r1, [r4, #8]
 8015df6:	9301      	str	r3, [sp, #4]
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f001 fd7d 	bl	80178f8 <_vfiprintf_r>
 8015dfe:	b002      	add	sp, #8
 8015e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e04:	b004      	add	sp, #16
 8015e06:	4770      	bx	lr
 8015e08:	20000034 	.word	0x20000034

08015e0c <rand>:
 8015e0c:	b538      	push	{r3, r4, r5, lr}
 8015e0e:	4b13      	ldr	r3, [pc, #76]	; (8015e5c <rand+0x50>)
 8015e10:	681c      	ldr	r4, [r3, #0]
 8015e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015e14:	b97b      	cbnz	r3, 8015e36 <rand+0x2a>
 8015e16:	2018      	movs	r0, #24
 8015e18:	f001 f846 	bl	8016ea8 <malloc>
 8015e1c:	4a10      	ldr	r2, [pc, #64]	; (8015e60 <rand+0x54>)
 8015e1e:	4b11      	ldr	r3, [pc, #68]	; (8015e64 <rand+0x58>)
 8015e20:	63a0      	str	r0, [r4, #56]	; 0x38
 8015e22:	e9c0 2300 	strd	r2, r3, [r0]
 8015e26:	4b10      	ldr	r3, [pc, #64]	; (8015e68 <rand+0x5c>)
 8015e28:	6083      	str	r3, [r0, #8]
 8015e2a:	230b      	movs	r3, #11
 8015e2c:	8183      	strh	r3, [r0, #12]
 8015e2e:	2201      	movs	r2, #1
 8015e30:	2300      	movs	r3, #0
 8015e32:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015e38:	480c      	ldr	r0, [pc, #48]	; (8015e6c <rand+0x60>)
 8015e3a:	690a      	ldr	r2, [r1, #16]
 8015e3c:	694b      	ldr	r3, [r1, #20]
 8015e3e:	4c0c      	ldr	r4, [pc, #48]	; (8015e70 <rand+0x64>)
 8015e40:	4350      	muls	r0, r2
 8015e42:	fb04 0003 	mla	r0, r4, r3, r0
 8015e46:	fba2 2304 	umull	r2, r3, r2, r4
 8015e4a:	4403      	add	r3, r0
 8015e4c:	1c54      	adds	r4, r2, #1
 8015e4e:	f143 0500 	adc.w	r5, r3, #0
 8015e52:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8015e56:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8015e5a:	bd38      	pop	{r3, r4, r5, pc}
 8015e5c:	20000034 	.word	0x20000034
 8015e60:	abcd330e 	.word	0xabcd330e
 8015e64:	e66d1234 	.word	0xe66d1234
 8015e68:	0005deec 	.word	0x0005deec
 8015e6c:	5851f42d 	.word	0x5851f42d
 8015e70:	4c957f2d 	.word	0x4c957f2d

08015e74 <siprintf>:
 8015e74:	b40e      	push	{r1, r2, r3}
 8015e76:	b500      	push	{lr}
 8015e78:	b09c      	sub	sp, #112	; 0x70
 8015e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8015e7c:	9002      	str	r0, [sp, #8]
 8015e7e:	9006      	str	r0, [sp, #24]
 8015e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e84:	4809      	ldr	r0, [pc, #36]	; (8015eac <siprintf+0x38>)
 8015e86:	9107      	str	r1, [sp, #28]
 8015e88:	9104      	str	r1, [sp, #16]
 8015e8a:	4909      	ldr	r1, [pc, #36]	; (8015eb0 <siprintf+0x3c>)
 8015e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e90:	9105      	str	r1, [sp, #20]
 8015e92:	6800      	ldr	r0, [r0, #0]
 8015e94:	9301      	str	r3, [sp, #4]
 8015e96:	a902      	add	r1, sp, #8
 8015e98:	f001 fc0c 	bl	80176b4 <_svfiprintf_r>
 8015e9c:	9b02      	ldr	r3, [sp, #8]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	701a      	strb	r2, [r3, #0]
 8015ea2:	b01c      	add	sp, #112	; 0x70
 8015ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ea8:	b003      	add	sp, #12
 8015eaa:	4770      	bx	lr
 8015eac:	20000034 	.word	0x20000034
 8015eb0:	ffff0208 	.word	0xffff0208

08015eb4 <strchr>:
 8015eb4:	b2c9      	uxtb	r1, r1
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ebc:	b11a      	cbz	r2, 8015ec6 <strchr+0x12>
 8015ebe:	428a      	cmp	r2, r1
 8015ec0:	d1f9      	bne.n	8015eb6 <strchr+0x2>
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	4770      	bx	lr
 8015ec6:	2900      	cmp	r1, #0
 8015ec8:	bf18      	it	ne
 8015eca:	2300      	movne	r3, #0
 8015ecc:	e7f9      	b.n	8015ec2 <strchr+0xe>

08015ece <strcpy>:
 8015ece:	4603      	mov	r3, r0
 8015ed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ed4:	f803 2b01 	strb.w	r2, [r3], #1
 8015ed8:	2a00      	cmp	r2, #0
 8015eda:	d1f9      	bne.n	8015ed0 <strcpy+0x2>
 8015edc:	4770      	bx	lr

08015ede <strncmp>:
 8015ede:	b510      	push	{r4, lr}
 8015ee0:	b16a      	cbz	r2, 8015efe <strncmp+0x20>
 8015ee2:	3901      	subs	r1, #1
 8015ee4:	1884      	adds	r4, r0, r2
 8015ee6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015eea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	d103      	bne.n	8015efa <strncmp+0x1c>
 8015ef2:	42a0      	cmp	r0, r4
 8015ef4:	d001      	beq.n	8015efa <strncmp+0x1c>
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d1f5      	bne.n	8015ee6 <strncmp+0x8>
 8015efa:	1a98      	subs	r0, r3, r2
 8015efc:	bd10      	pop	{r4, pc}
 8015efe:	4610      	mov	r0, r2
 8015f00:	e7fc      	b.n	8015efc <strncmp+0x1e>

08015f02 <_strtol_l.isra.0>:
 8015f02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f06:	4680      	mov	r8, r0
 8015f08:	4689      	mov	r9, r1
 8015f0a:	4692      	mov	sl, r2
 8015f0c:	461e      	mov	r6, r3
 8015f0e:	460f      	mov	r7, r1
 8015f10:	463d      	mov	r5, r7
 8015f12:	9808      	ldr	r0, [sp, #32]
 8015f14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f18:	f000 ffb4 	bl	8016e84 <__locale_ctype_ptr_l>
 8015f1c:	4420      	add	r0, r4
 8015f1e:	7843      	ldrb	r3, [r0, #1]
 8015f20:	f013 0308 	ands.w	r3, r3, #8
 8015f24:	d132      	bne.n	8015f8c <_strtol_l.isra.0+0x8a>
 8015f26:	2c2d      	cmp	r4, #45	; 0x2d
 8015f28:	d132      	bne.n	8015f90 <_strtol_l.isra.0+0x8e>
 8015f2a:	787c      	ldrb	r4, [r7, #1]
 8015f2c:	1cbd      	adds	r5, r7, #2
 8015f2e:	2201      	movs	r2, #1
 8015f30:	2e00      	cmp	r6, #0
 8015f32:	d05d      	beq.n	8015ff0 <_strtol_l.isra.0+0xee>
 8015f34:	2e10      	cmp	r6, #16
 8015f36:	d109      	bne.n	8015f4c <_strtol_l.isra.0+0x4a>
 8015f38:	2c30      	cmp	r4, #48	; 0x30
 8015f3a:	d107      	bne.n	8015f4c <_strtol_l.isra.0+0x4a>
 8015f3c:	782b      	ldrb	r3, [r5, #0]
 8015f3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015f42:	2b58      	cmp	r3, #88	; 0x58
 8015f44:	d14f      	bne.n	8015fe6 <_strtol_l.isra.0+0xe4>
 8015f46:	786c      	ldrb	r4, [r5, #1]
 8015f48:	2610      	movs	r6, #16
 8015f4a:	3502      	adds	r5, #2
 8015f4c:	2a00      	cmp	r2, #0
 8015f4e:	bf14      	ite	ne
 8015f50:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015f54:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015f58:	2700      	movs	r7, #0
 8015f5a:	fbb1 fcf6 	udiv	ip, r1, r6
 8015f5e:	4638      	mov	r0, r7
 8015f60:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015f64:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015f68:	2b09      	cmp	r3, #9
 8015f6a:	d817      	bhi.n	8015f9c <_strtol_l.isra.0+0x9a>
 8015f6c:	461c      	mov	r4, r3
 8015f6e:	42a6      	cmp	r6, r4
 8015f70:	dd23      	ble.n	8015fba <_strtol_l.isra.0+0xb8>
 8015f72:	1c7b      	adds	r3, r7, #1
 8015f74:	d007      	beq.n	8015f86 <_strtol_l.isra.0+0x84>
 8015f76:	4584      	cmp	ip, r0
 8015f78:	d31c      	bcc.n	8015fb4 <_strtol_l.isra.0+0xb2>
 8015f7a:	d101      	bne.n	8015f80 <_strtol_l.isra.0+0x7e>
 8015f7c:	45a6      	cmp	lr, r4
 8015f7e:	db19      	blt.n	8015fb4 <_strtol_l.isra.0+0xb2>
 8015f80:	fb00 4006 	mla	r0, r0, r6, r4
 8015f84:	2701      	movs	r7, #1
 8015f86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f8a:	e7eb      	b.n	8015f64 <_strtol_l.isra.0+0x62>
 8015f8c:	462f      	mov	r7, r5
 8015f8e:	e7bf      	b.n	8015f10 <_strtol_l.isra.0+0xe>
 8015f90:	2c2b      	cmp	r4, #43	; 0x2b
 8015f92:	bf04      	itt	eq
 8015f94:	1cbd      	addeq	r5, r7, #2
 8015f96:	787c      	ldrbeq	r4, [r7, #1]
 8015f98:	461a      	mov	r2, r3
 8015f9a:	e7c9      	b.n	8015f30 <_strtol_l.isra.0+0x2e>
 8015f9c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015fa0:	2b19      	cmp	r3, #25
 8015fa2:	d801      	bhi.n	8015fa8 <_strtol_l.isra.0+0xa6>
 8015fa4:	3c37      	subs	r4, #55	; 0x37
 8015fa6:	e7e2      	b.n	8015f6e <_strtol_l.isra.0+0x6c>
 8015fa8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015fac:	2b19      	cmp	r3, #25
 8015fae:	d804      	bhi.n	8015fba <_strtol_l.isra.0+0xb8>
 8015fb0:	3c57      	subs	r4, #87	; 0x57
 8015fb2:	e7dc      	b.n	8015f6e <_strtol_l.isra.0+0x6c>
 8015fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8015fb8:	e7e5      	b.n	8015f86 <_strtol_l.isra.0+0x84>
 8015fba:	1c7b      	adds	r3, r7, #1
 8015fbc:	d108      	bne.n	8015fd0 <_strtol_l.isra.0+0xce>
 8015fbe:	2322      	movs	r3, #34	; 0x22
 8015fc0:	f8c8 3000 	str.w	r3, [r8]
 8015fc4:	4608      	mov	r0, r1
 8015fc6:	f1ba 0f00 	cmp.w	sl, #0
 8015fca:	d107      	bne.n	8015fdc <_strtol_l.isra.0+0xda>
 8015fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fd0:	b102      	cbz	r2, 8015fd4 <_strtol_l.isra.0+0xd2>
 8015fd2:	4240      	negs	r0, r0
 8015fd4:	f1ba 0f00 	cmp.w	sl, #0
 8015fd8:	d0f8      	beq.n	8015fcc <_strtol_l.isra.0+0xca>
 8015fda:	b10f      	cbz	r7, 8015fe0 <_strtol_l.isra.0+0xde>
 8015fdc:	f105 39ff 	add.w	r9, r5, #4294967295
 8015fe0:	f8ca 9000 	str.w	r9, [sl]
 8015fe4:	e7f2      	b.n	8015fcc <_strtol_l.isra.0+0xca>
 8015fe6:	2430      	movs	r4, #48	; 0x30
 8015fe8:	2e00      	cmp	r6, #0
 8015fea:	d1af      	bne.n	8015f4c <_strtol_l.isra.0+0x4a>
 8015fec:	2608      	movs	r6, #8
 8015fee:	e7ad      	b.n	8015f4c <_strtol_l.isra.0+0x4a>
 8015ff0:	2c30      	cmp	r4, #48	; 0x30
 8015ff2:	d0a3      	beq.n	8015f3c <_strtol_l.isra.0+0x3a>
 8015ff4:	260a      	movs	r6, #10
 8015ff6:	e7a9      	b.n	8015f4c <_strtol_l.isra.0+0x4a>

08015ff8 <strtol>:
 8015ff8:	4b08      	ldr	r3, [pc, #32]	; (801601c <strtol+0x24>)
 8015ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ffc:	681c      	ldr	r4, [r3, #0]
 8015ffe:	4d08      	ldr	r5, [pc, #32]	; (8016020 <strtol+0x28>)
 8016000:	6a23      	ldr	r3, [r4, #32]
 8016002:	2b00      	cmp	r3, #0
 8016004:	bf08      	it	eq
 8016006:	462b      	moveq	r3, r5
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	4613      	mov	r3, r2
 801600c:	460a      	mov	r2, r1
 801600e:	4601      	mov	r1, r0
 8016010:	4620      	mov	r0, r4
 8016012:	f7ff ff76 	bl	8015f02 <_strtol_l.isra.0>
 8016016:	b003      	add	sp, #12
 8016018:	bd30      	pop	{r4, r5, pc}
 801601a:	bf00      	nop
 801601c:	20000034 	.word	0x20000034
 8016020:	20000098 	.word	0x20000098

08016024 <_vsiprintf_r>:
 8016024:	b500      	push	{lr}
 8016026:	b09b      	sub	sp, #108	; 0x6c
 8016028:	9100      	str	r1, [sp, #0]
 801602a:	9104      	str	r1, [sp, #16]
 801602c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016030:	9105      	str	r1, [sp, #20]
 8016032:	9102      	str	r1, [sp, #8]
 8016034:	4905      	ldr	r1, [pc, #20]	; (801604c <_vsiprintf_r+0x28>)
 8016036:	9103      	str	r1, [sp, #12]
 8016038:	4669      	mov	r1, sp
 801603a:	f001 fb3b 	bl	80176b4 <_svfiprintf_r>
 801603e:	9b00      	ldr	r3, [sp, #0]
 8016040:	2200      	movs	r2, #0
 8016042:	701a      	strb	r2, [r3, #0]
 8016044:	b01b      	add	sp, #108	; 0x6c
 8016046:	f85d fb04 	ldr.w	pc, [sp], #4
 801604a:	bf00      	nop
 801604c:	ffff0208 	.word	0xffff0208

08016050 <vsiprintf>:
 8016050:	4613      	mov	r3, r2
 8016052:	460a      	mov	r2, r1
 8016054:	4601      	mov	r1, r0
 8016056:	4802      	ldr	r0, [pc, #8]	; (8016060 <vsiprintf+0x10>)
 8016058:	6800      	ldr	r0, [r0, #0]
 801605a:	f7ff bfe3 	b.w	8016024 <_vsiprintf_r>
 801605e:	bf00      	nop
 8016060:	20000034 	.word	0x20000034

08016064 <quorem>:
 8016064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016068:	6903      	ldr	r3, [r0, #16]
 801606a:	690c      	ldr	r4, [r1, #16]
 801606c:	42a3      	cmp	r3, r4
 801606e:	4680      	mov	r8, r0
 8016070:	f2c0 8082 	blt.w	8016178 <quorem+0x114>
 8016074:	3c01      	subs	r4, #1
 8016076:	f101 0714 	add.w	r7, r1, #20
 801607a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801607e:	f100 0614 	add.w	r6, r0, #20
 8016082:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016086:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801608a:	eb06 030c 	add.w	r3, r6, ip
 801608e:	3501      	adds	r5, #1
 8016090:	eb07 090c 	add.w	r9, r7, ip
 8016094:	9301      	str	r3, [sp, #4]
 8016096:	fbb0 f5f5 	udiv	r5, r0, r5
 801609a:	b395      	cbz	r5, 8016102 <quorem+0x9e>
 801609c:	f04f 0a00 	mov.w	sl, #0
 80160a0:	4638      	mov	r0, r7
 80160a2:	46b6      	mov	lr, r6
 80160a4:	46d3      	mov	fp, sl
 80160a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80160aa:	b293      	uxth	r3, r2
 80160ac:	fb05 a303 	mla	r3, r5, r3, sl
 80160b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	ebab 0303 	sub.w	r3, fp, r3
 80160ba:	0c12      	lsrs	r2, r2, #16
 80160bc:	f8de b000 	ldr.w	fp, [lr]
 80160c0:	fb05 a202 	mla	r2, r5, r2, sl
 80160c4:	fa13 f38b 	uxtah	r3, r3, fp
 80160c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80160cc:	fa1f fb82 	uxth.w	fp, r2
 80160d0:	f8de 2000 	ldr.w	r2, [lr]
 80160d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80160d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80160dc:	b29b      	uxth	r3, r3
 80160de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80160e2:	4581      	cmp	r9, r0
 80160e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80160e8:	f84e 3b04 	str.w	r3, [lr], #4
 80160ec:	d2db      	bcs.n	80160a6 <quorem+0x42>
 80160ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80160f2:	b933      	cbnz	r3, 8016102 <quorem+0x9e>
 80160f4:	9b01      	ldr	r3, [sp, #4]
 80160f6:	3b04      	subs	r3, #4
 80160f8:	429e      	cmp	r6, r3
 80160fa:	461a      	mov	r2, r3
 80160fc:	d330      	bcc.n	8016160 <quorem+0xfc>
 80160fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8016102:	4640      	mov	r0, r8
 8016104:	f001 f900 	bl	8017308 <__mcmp>
 8016108:	2800      	cmp	r0, #0
 801610a:	db25      	blt.n	8016158 <quorem+0xf4>
 801610c:	3501      	adds	r5, #1
 801610e:	4630      	mov	r0, r6
 8016110:	f04f 0c00 	mov.w	ip, #0
 8016114:	f857 2b04 	ldr.w	r2, [r7], #4
 8016118:	f8d0 e000 	ldr.w	lr, [r0]
 801611c:	b293      	uxth	r3, r2
 801611e:	ebac 0303 	sub.w	r3, ip, r3
 8016122:	0c12      	lsrs	r2, r2, #16
 8016124:	fa13 f38e 	uxtah	r3, r3, lr
 8016128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801612c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016130:	b29b      	uxth	r3, r3
 8016132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016136:	45b9      	cmp	r9, r7
 8016138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801613c:	f840 3b04 	str.w	r3, [r0], #4
 8016140:	d2e8      	bcs.n	8016114 <quorem+0xb0>
 8016142:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016146:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801614a:	b92a      	cbnz	r2, 8016158 <quorem+0xf4>
 801614c:	3b04      	subs	r3, #4
 801614e:	429e      	cmp	r6, r3
 8016150:	461a      	mov	r2, r3
 8016152:	d30b      	bcc.n	801616c <quorem+0x108>
 8016154:	f8c8 4010 	str.w	r4, [r8, #16]
 8016158:	4628      	mov	r0, r5
 801615a:	b003      	add	sp, #12
 801615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016160:	6812      	ldr	r2, [r2, #0]
 8016162:	3b04      	subs	r3, #4
 8016164:	2a00      	cmp	r2, #0
 8016166:	d1ca      	bne.n	80160fe <quorem+0x9a>
 8016168:	3c01      	subs	r4, #1
 801616a:	e7c5      	b.n	80160f8 <quorem+0x94>
 801616c:	6812      	ldr	r2, [r2, #0]
 801616e:	3b04      	subs	r3, #4
 8016170:	2a00      	cmp	r2, #0
 8016172:	d1ef      	bne.n	8016154 <quorem+0xf0>
 8016174:	3c01      	subs	r4, #1
 8016176:	e7ea      	b.n	801614e <quorem+0xea>
 8016178:	2000      	movs	r0, #0
 801617a:	e7ee      	b.n	801615a <quorem+0xf6>
 801617c:	0000      	movs	r0, r0
	...

08016180 <_dtoa_r>:
 8016180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016184:	ec57 6b10 	vmov	r6, r7, d0
 8016188:	b097      	sub	sp, #92	; 0x5c
 801618a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801618c:	9106      	str	r1, [sp, #24]
 801618e:	4604      	mov	r4, r0
 8016190:	920b      	str	r2, [sp, #44]	; 0x2c
 8016192:	9312      	str	r3, [sp, #72]	; 0x48
 8016194:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016198:	e9cd 6700 	strd	r6, r7, [sp]
 801619c:	b93d      	cbnz	r5, 80161ae <_dtoa_r+0x2e>
 801619e:	2010      	movs	r0, #16
 80161a0:	f000 fe82 	bl	8016ea8 <malloc>
 80161a4:	6260      	str	r0, [r4, #36]	; 0x24
 80161a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80161aa:	6005      	str	r5, [r0, #0]
 80161ac:	60c5      	str	r5, [r0, #12]
 80161ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161b0:	6819      	ldr	r1, [r3, #0]
 80161b2:	b151      	cbz	r1, 80161ca <_dtoa_r+0x4a>
 80161b4:	685a      	ldr	r2, [r3, #4]
 80161b6:	604a      	str	r2, [r1, #4]
 80161b8:	2301      	movs	r3, #1
 80161ba:	4093      	lsls	r3, r2
 80161bc:	608b      	str	r3, [r1, #8]
 80161be:	4620      	mov	r0, r4
 80161c0:	f000 fec0 	bl	8016f44 <_Bfree>
 80161c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161c6:	2200      	movs	r2, #0
 80161c8:	601a      	str	r2, [r3, #0]
 80161ca:	1e3b      	subs	r3, r7, #0
 80161cc:	bfbb      	ittet	lt
 80161ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80161d2:	9301      	strlt	r3, [sp, #4]
 80161d4:	2300      	movge	r3, #0
 80161d6:	2201      	movlt	r2, #1
 80161d8:	bfac      	ite	ge
 80161da:	f8c8 3000 	strge.w	r3, [r8]
 80161de:	f8c8 2000 	strlt.w	r2, [r8]
 80161e2:	4baf      	ldr	r3, [pc, #700]	; (80164a0 <_dtoa_r+0x320>)
 80161e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80161e8:	ea33 0308 	bics.w	r3, r3, r8
 80161ec:	d114      	bne.n	8016218 <_dtoa_r+0x98>
 80161ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80161f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80161f4:	6013      	str	r3, [r2, #0]
 80161f6:	9b00      	ldr	r3, [sp, #0]
 80161f8:	b923      	cbnz	r3, 8016204 <_dtoa_r+0x84>
 80161fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80161fe:	2800      	cmp	r0, #0
 8016200:	f000 8542 	beq.w	8016c88 <_dtoa_r+0xb08>
 8016204:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016206:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80164b4 <_dtoa_r+0x334>
 801620a:	2b00      	cmp	r3, #0
 801620c:	f000 8544 	beq.w	8016c98 <_dtoa_r+0xb18>
 8016210:	f10b 0303 	add.w	r3, fp, #3
 8016214:	f000 bd3e 	b.w	8016c94 <_dtoa_r+0xb14>
 8016218:	e9dd 6700 	ldrd	r6, r7, [sp]
 801621c:	2200      	movs	r2, #0
 801621e:	2300      	movs	r3, #0
 8016220:	4630      	mov	r0, r6
 8016222:	4639      	mov	r1, r7
 8016224:	f7ea fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 8016228:	4681      	mov	r9, r0
 801622a:	b168      	cbz	r0, 8016248 <_dtoa_r+0xc8>
 801622c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801622e:	2301      	movs	r3, #1
 8016230:	6013      	str	r3, [r2, #0]
 8016232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016234:	2b00      	cmp	r3, #0
 8016236:	f000 8524 	beq.w	8016c82 <_dtoa_r+0xb02>
 801623a:	4b9a      	ldr	r3, [pc, #616]	; (80164a4 <_dtoa_r+0x324>)
 801623c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801623e:	f103 3bff 	add.w	fp, r3, #4294967295
 8016242:	6013      	str	r3, [r2, #0]
 8016244:	f000 bd28 	b.w	8016c98 <_dtoa_r+0xb18>
 8016248:	aa14      	add	r2, sp, #80	; 0x50
 801624a:	a915      	add	r1, sp, #84	; 0x54
 801624c:	ec47 6b10 	vmov	d0, r6, r7
 8016250:	4620      	mov	r0, r4
 8016252:	f001 f8d0 	bl	80173f6 <__d2b>
 8016256:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801625a:	9004      	str	r0, [sp, #16]
 801625c:	2d00      	cmp	r5, #0
 801625e:	d07c      	beq.n	801635a <_dtoa_r+0x1da>
 8016260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016264:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016268:	46b2      	mov	sl, r6
 801626a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801626e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016272:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016276:	2200      	movs	r2, #0
 8016278:	4b8b      	ldr	r3, [pc, #556]	; (80164a8 <_dtoa_r+0x328>)
 801627a:	4650      	mov	r0, sl
 801627c:	4659      	mov	r1, fp
 801627e:	f7ea f813 	bl	80002a8 <__aeabi_dsub>
 8016282:	a381      	add	r3, pc, #516	; (adr r3, 8016488 <_dtoa_r+0x308>)
 8016284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016288:	f7ea f9c6 	bl	8000618 <__aeabi_dmul>
 801628c:	a380      	add	r3, pc, #512	; (adr r3, 8016490 <_dtoa_r+0x310>)
 801628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016292:	f7ea f80b 	bl	80002ac <__adddf3>
 8016296:	4606      	mov	r6, r0
 8016298:	4628      	mov	r0, r5
 801629a:	460f      	mov	r7, r1
 801629c:	f7ea f952 	bl	8000544 <__aeabi_i2d>
 80162a0:	a37d      	add	r3, pc, #500	; (adr r3, 8016498 <_dtoa_r+0x318>)
 80162a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a6:	f7ea f9b7 	bl	8000618 <__aeabi_dmul>
 80162aa:	4602      	mov	r2, r0
 80162ac:	460b      	mov	r3, r1
 80162ae:	4630      	mov	r0, r6
 80162b0:	4639      	mov	r1, r7
 80162b2:	f7e9 fffb 	bl	80002ac <__adddf3>
 80162b6:	4606      	mov	r6, r0
 80162b8:	460f      	mov	r7, r1
 80162ba:	f7ea fc5d 	bl	8000b78 <__aeabi_d2iz>
 80162be:	2200      	movs	r2, #0
 80162c0:	4682      	mov	sl, r0
 80162c2:	2300      	movs	r3, #0
 80162c4:	4630      	mov	r0, r6
 80162c6:	4639      	mov	r1, r7
 80162c8:	f7ea fc18 	bl	8000afc <__aeabi_dcmplt>
 80162cc:	b148      	cbz	r0, 80162e2 <_dtoa_r+0x162>
 80162ce:	4650      	mov	r0, sl
 80162d0:	f7ea f938 	bl	8000544 <__aeabi_i2d>
 80162d4:	4632      	mov	r2, r6
 80162d6:	463b      	mov	r3, r7
 80162d8:	f7ea fc06 	bl	8000ae8 <__aeabi_dcmpeq>
 80162dc:	b908      	cbnz	r0, 80162e2 <_dtoa_r+0x162>
 80162de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80162e2:	f1ba 0f16 	cmp.w	sl, #22
 80162e6:	d859      	bhi.n	801639c <_dtoa_r+0x21c>
 80162e8:	4970      	ldr	r1, [pc, #448]	; (80164ac <_dtoa_r+0x32c>)
 80162ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80162ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80162f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162f6:	f7ea fc1f 	bl	8000b38 <__aeabi_dcmpgt>
 80162fa:	2800      	cmp	r0, #0
 80162fc:	d050      	beq.n	80163a0 <_dtoa_r+0x220>
 80162fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016302:	2300      	movs	r3, #0
 8016304:	930f      	str	r3, [sp, #60]	; 0x3c
 8016306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016308:	1b5d      	subs	r5, r3, r5
 801630a:	f1b5 0801 	subs.w	r8, r5, #1
 801630e:	bf49      	itett	mi
 8016310:	f1c5 0301 	rsbmi	r3, r5, #1
 8016314:	2300      	movpl	r3, #0
 8016316:	9305      	strmi	r3, [sp, #20]
 8016318:	f04f 0800 	movmi.w	r8, #0
 801631c:	bf58      	it	pl
 801631e:	9305      	strpl	r3, [sp, #20]
 8016320:	f1ba 0f00 	cmp.w	sl, #0
 8016324:	db3e      	blt.n	80163a4 <_dtoa_r+0x224>
 8016326:	2300      	movs	r3, #0
 8016328:	44d0      	add	r8, sl
 801632a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801632e:	9307      	str	r3, [sp, #28]
 8016330:	9b06      	ldr	r3, [sp, #24]
 8016332:	2b09      	cmp	r3, #9
 8016334:	f200 8090 	bhi.w	8016458 <_dtoa_r+0x2d8>
 8016338:	2b05      	cmp	r3, #5
 801633a:	bfc4      	itt	gt
 801633c:	3b04      	subgt	r3, #4
 801633e:	9306      	strgt	r3, [sp, #24]
 8016340:	9b06      	ldr	r3, [sp, #24]
 8016342:	f1a3 0302 	sub.w	r3, r3, #2
 8016346:	bfcc      	ite	gt
 8016348:	2500      	movgt	r5, #0
 801634a:	2501      	movle	r5, #1
 801634c:	2b03      	cmp	r3, #3
 801634e:	f200 808f 	bhi.w	8016470 <_dtoa_r+0x2f0>
 8016352:	e8df f003 	tbb	[pc, r3]
 8016356:	7f7d      	.short	0x7f7d
 8016358:	7131      	.short	0x7131
 801635a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801635e:	441d      	add	r5, r3
 8016360:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016364:	2820      	cmp	r0, #32
 8016366:	dd13      	ble.n	8016390 <_dtoa_r+0x210>
 8016368:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801636c:	9b00      	ldr	r3, [sp, #0]
 801636e:	fa08 f800 	lsl.w	r8, r8, r0
 8016372:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016376:	fa23 f000 	lsr.w	r0, r3, r0
 801637a:	ea48 0000 	orr.w	r0, r8, r0
 801637e:	f7ea f8d1 	bl	8000524 <__aeabi_ui2d>
 8016382:	2301      	movs	r3, #1
 8016384:	4682      	mov	sl, r0
 8016386:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801638a:	3d01      	subs	r5, #1
 801638c:	9313      	str	r3, [sp, #76]	; 0x4c
 801638e:	e772      	b.n	8016276 <_dtoa_r+0xf6>
 8016390:	9b00      	ldr	r3, [sp, #0]
 8016392:	f1c0 0020 	rsb	r0, r0, #32
 8016396:	fa03 f000 	lsl.w	r0, r3, r0
 801639a:	e7f0      	b.n	801637e <_dtoa_r+0x1fe>
 801639c:	2301      	movs	r3, #1
 801639e:	e7b1      	b.n	8016304 <_dtoa_r+0x184>
 80163a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80163a2:	e7b0      	b.n	8016306 <_dtoa_r+0x186>
 80163a4:	9b05      	ldr	r3, [sp, #20]
 80163a6:	eba3 030a 	sub.w	r3, r3, sl
 80163aa:	9305      	str	r3, [sp, #20]
 80163ac:	f1ca 0300 	rsb	r3, sl, #0
 80163b0:	9307      	str	r3, [sp, #28]
 80163b2:	2300      	movs	r3, #0
 80163b4:	930e      	str	r3, [sp, #56]	; 0x38
 80163b6:	e7bb      	b.n	8016330 <_dtoa_r+0x1b0>
 80163b8:	2301      	movs	r3, #1
 80163ba:	930a      	str	r3, [sp, #40]	; 0x28
 80163bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163be:	2b00      	cmp	r3, #0
 80163c0:	dd59      	ble.n	8016476 <_dtoa_r+0x2f6>
 80163c2:	9302      	str	r3, [sp, #8]
 80163c4:	4699      	mov	r9, r3
 80163c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80163c8:	2200      	movs	r2, #0
 80163ca:	6072      	str	r2, [r6, #4]
 80163cc:	2204      	movs	r2, #4
 80163ce:	f102 0014 	add.w	r0, r2, #20
 80163d2:	4298      	cmp	r0, r3
 80163d4:	6871      	ldr	r1, [r6, #4]
 80163d6:	d953      	bls.n	8016480 <_dtoa_r+0x300>
 80163d8:	4620      	mov	r0, r4
 80163da:	f000 fd7f 	bl	8016edc <_Balloc>
 80163de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163e0:	6030      	str	r0, [r6, #0]
 80163e2:	f1b9 0f0e 	cmp.w	r9, #14
 80163e6:	f8d3 b000 	ldr.w	fp, [r3]
 80163ea:	f200 80e6 	bhi.w	80165ba <_dtoa_r+0x43a>
 80163ee:	2d00      	cmp	r5, #0
 80163f0:	f000 80e3 	beq.w	80165ba <_dtoa_r+0x43a>
 80163f4:	ed9d 7b00 	vldr	d7, [sp]
 80163f8:	f1ba 0f00 	cmp.w	sl, #0
 80163fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016400:	dd74      	ble.n	80164ec <_dtoa_r+0x36c>
 8016402:	4a2a      	ldr	r2, [pc, #168]	; (80164ac <_dtoa_r+0x32c>)
 8016404:	f00a 030f 	and.w	r3, sl, #15
 8016408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801640c:	ed93 7b00 	vldr	d7, [r3]
 8016410:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016414:	06f0      	lsls	r0, r6, #27
 8016416:	ed8d 7b08 	vstr	d7, [sp, #32]
 801641a:	d565      	bpl.n	80164e8 <_dtoa_r+0x368>
 801641c:	4b24      	ldr	r3, [pc, #144]	; (80164b0 <_dtoa_r+0x330>)
 801641e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016422:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016426:	f7ea fa21 	bl	800086c <__aeabi_ddiv>
 801642a:	e9cd 0100 	strd	r0, r1, [sp]
 801642e:	f006 060f 	and.w	r6, r6, #15
 8016432:	2503      	movs	r5, #3
 8016434:	4f1e      	ldr	r7, [pc, #120]	; (80164b0 <_dtoa_r+0x330>)
 8016436:	e04c      	b.n	80164d2 <_dtoa_r+0x352>
 8016438:	2301      	movs	r3, #1
 801643a:	930a      	str	r3, [sp, #40]	; 0x28
 801643c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801643e:	4453      	add	r3, sl
 8016440:	f103 0901 	add.w	r9, r3, #1
 8016444:	9302      	str	r3, [sp, #8]
 8016446:	464b      	mov	r3, r9
 8016448:	2b01      	cmp	r3, #1
 801644a:	bfb8      	it	lt
 801644c:	2301      	movlt	r3, #1
 801644e:	e7ba      	b.n	80163c6 <_dtoa_r+0x246>
 8016450:	2300      	movs	r3, #0
 8016452:	e7b2      	b.n	80163ba <_dtoa_r+0x23a>
 8016454:	2300      	movs	r3, #0
 8016456:	e7f0      	b.n	801643a <_dtoa_r+0x2ba>
 8016458:	2501      	movs	r5, #1
 801645a:	2300      	movs	r3, #0
 801645c:	9306      	str	r3, [sp, #24]
 801645e:	950a      	str	r5, [sp, #40]	; 0x28
 8016460:	f04f 33ff 	mov.w	r3, #4294967295
 8016464:	9302      	str	r3, [sp, #8]
 8016466:	4699      	mov	r9, r3
 8016468:	2200      	movs	r2, #0
 801646a:	2312      	movs	r3, #18
 801646c:	920b      	str	r2, [sp, #44]	; 0x2c
 801646e:	e7aa      	b.n	80163c6 <_dtoa_r+0x246>
 8016470:	2301      	movs	r3, #1
 8016472:	930a      	str	r3, [sp, #40]	; 0x28
 8016474:	e7f4      	b.n	8016460 <_dtoa_r+0x2e0>
 8016476:	2301      	movs	r3, #1
 8016478:	9302      	str	r3, [sp, #8]
 801647a:	4699      	mov	r9, r3
 801647c:	461a      	mov	r2, r3
 801647e:	e7f5      	b.n	801646c <_dtoa_r+0x2ec>
 8016480:	3101      	adds	r1, #1
 8016482:	6071      	str	r1, [r6, #4]
 8016484:	0052      	lsls	r2, r2, #1
 8016486:	e7a2      	b.n	80163ce <_dtoa_r+0x24e>
 8016488:	636f4361 	.word	0x636f4361
 801648c:	3fd287a7 	.word	0x3fd287a7
 8016490:	8b60c8b3 	.word	0x8b60c8b3
 8016494:	3fc68a28 	.word	0x3fc68a28
 8016498:	509f79fb 	.word	0x509f79fb
 801649c:	3fd34413 	.word	0x3fd34413
 80164a0:	7ff00000 	.word	0x7ff00000
 80164a4:	0801b87d 	.word	0x0801b87d
 80164a8:	3ff80000 	.word	0x3ff80000
 80164ac:	0801b948 	.word	0x0801b948
 80164b0:	0801b920 	.word	0x0801b920
 80164b4:	0801b8a9 	.word	0x0801b8a9
 80164b8:	07f1      	lsls	r1, r6, #31
 80164ba:	d508      	bpl.n	80164ce <_dtoa_r+0x34e>
 80164bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80164c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80164c4:	f7ea f8a8 	bl	8000618 <__aeabi_dmul>
 80164c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80164cc:	3501      	adds	r5, #1
 80164ce:	1076      	asrs	r6, r6, #1
 80164d0:	3708      	adds	r7, #8
 80164d2:	2e00      	cmp	r6, #0
 80164d4:	d1f0      	bne.n	80164b8 <_dtoa_r+0x338>
 80164d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80164da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164de:	f7ea f9c5 	bl	800086c <__aeabi_ddiv>
 80164e2:	e9cd 0100 	strd	r0, r1, [sp]
 80164e6:	e01a      	b.n	801651e <_dtoa_r+0x39e>
 80164e8:	2502      	movs	r5, #2
 80164ea:	e7a3      	b.n	8016434 <_dtoa_r+0x2b4>
 80164ec:	f000 80a0 	beq.w	8016630 <_dtoa_r+0x4b0>
 80164f0:	f1ca 0600 	rsb	r6, sl, #0
 80164f4:	4b9f      	ldr	r3, [pc, #636]	; (8016774 <_dtoa_r+0x5f4>)
 80164f6:	4fa0      	ldr	r7, [pc, #640]	; (8016778 <_dtoa_r+0x5f8>)
 80164f8:	f006 020f 	and.w	r2, r6, #15
 80164fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016508:	f7ea f886 	bl	8000618 <__aeabi_dmul>
 801650c:	e9cd 0100 	strd	r0, r1, [sp]
 8016510:	1136      	asrs	r6, r6, #4
 8016512:	2300      	movs	r3, #0
 8016514:	2502      	movs	r5, #2
 8016516:	2e00      	cmp	r6, #0
 8016518:	d17f      	bne.n	801661a <_dtoa_r+0x49a>
 801651a:	2b00      	cmp	r3, #0
 801651c:	d1e1      	bne.n	80164e2 <_dtoa_r+0x362>
 801651e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016520:	2b00      	cmp	r3, #0
 8016522:	f000 8087 	beq.w	8016634 <_dtoa_r+0x4b4>
 8016526:	e9dd 6700 	ldrd	r6, r7, [sp]
 801652a:	2200      	movs	r2, #0
 801652c:	4b93      	ldr	r3, [pc, #588]	; (801677c <_dtoa_r+0x5fc>)
 801652e:	4630      	mov	r0, r6
 8016530:	4639      	mov	r1, r7
 8016532:	f7ea fae3 	bl	8000afc <__aeabi_dcmplt>
 8016536:	2800      	cmp	r0, #0
 8016538:	d07c      	beq.n	8016634 <_dtoa_r+0x4b4>
 801653a:	f1b9 0f00 	cmp.w	r9, #0
 801653e:	d079      	beq.n	8016634 <_dtoa_r+0x4b4>
 8016540:	9b02      	ldr	r3, [sp, #8]
 8016542:	2b00      	cmp	r3, #0
 8016544:	dd35      	ble.n	80165b2 <_dtoa_r+0x432>
 8016546:	f10a 33ff 	add.w	r3, sl, #4294967295
 801654a:	9308      	str	r3, [sp, #32]
 801654c:	4639      	mov	r1, r7
 801654e:	2200      	movs	r2, #0
 8016550:	4b8b      	ldr	r3, [pc, #556]	; (8016780 <_dtoa_r+0x600>)
 8016552:	4630      	mov	r0, r6
 8016554:	f7ea f860 	bl	8000618 <__aeabi_dmul>
 8016558:	e9cd 0100 	strd	r0, r1, [sp]
 801655c:	9f02      	ldr	r7, [sp, #8]
 801655e:	3501      	adds	r5, #1
 8016560:	4628      	mov	r0, r5
 8016562:	f7e9 ffef 	bl	8000544 <__aeabi_i2d>
 8016566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801656a:	f7ea f855 	bl	8000618 <__aeabi_dmul>
 801656e:	2200      	movs	r2, #0
 8016570:	4b84      	ldr	r3, [pc, #528]	; (8016784 <_dtoa_r+0x604>)
 8016572:	f7e9 fe9b 	bl	80002ac <__adddf3>
 8016576:	4605      	mov	r5, r0
 8016578:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801657c:	2f00      	cmp	r7, #0
 801657e:	d15d      	bne.n	801663c <_dtoa_r+0x4bc>
 8016580:	2200      	movs	r2, #0
 8016582:	4b81      	ldr	r3, [pc, #516]	; (8016788 <_dtoa_r+0x608>)
 8016584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016588:	f7e9 fe8e 	bl	80002a8 <__aeabi_dsub>
 801658c:	462a      	mov	r2, r5
 801658e:	4633      	mov	r3, r6
 8016590:	e9cd 0100 	strd	r0, r1, [sp]
 8016594:	f7ea fad0 	bl	8000b38 <__aeabi_dcmpgt>
 8016598:	2800      	cmp	r0, #0
 801659a:	f040 8288 	bne.w	8016aae <_dtoa_r+0x92e>
 801659e:	462a      	mov	r2, r5
 80165a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80165a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165a8:	f7ea faa8 	bl	8000afc <__aeabi_dcmplt>
 80165ac:	2800      	cmp	r0, #0
 80165ae:	f040 827c 	bne.w	8016aaa <_dtoa_r+0x92a>
 80165b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80165b6:	e9cd 2300 	strd	r2, r3, [sp]
 80165ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f2c0 8150 	blt.w	8016862 <_dtoa_r+0x6e2>
 80165c2:	f1ba 0f0e 	cmp.w	sl, #14
 80165c6:	f300 814c 	bgt.w	8016862 <_dtoa_r+0x6e2>
 80165ca:	4b6a      	ldr	r3, [pc, #424]	; (8016774 <_dtoa_r+0x5f4>)
 80165cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80165d0:	ed93 7b00 	vldr	d7, [r3]
 80165d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80165dc:	f280 80d8 	bge.w	8016790 <_dtoa_r+0x610>
 80165e0:	f1b9 0f00 	cmp.w	r9, #0
 80165e4:	f300 80d4 	bgt.w	8016790 <_dtoa_r+0x610>
 80165e8:	f040 825e 	bne.w	8016aa8 <_dtoa_r+0x928>
 80165ec:	2200      	movs	r2, #0
 80165ee:	4b66      	ldr	r3, [pc, #408]	; (8016788 <_dtoa_r+0x608>)
 80165f0:	ec51 0b17 	vmov	r0, r1, d7
 80165f4:	f7ea f810 	bl	8000618 <__aeabi_dmul>
 80165f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165fc:	f7ea fa92 	bl	8000b24 <__aeabi_dcmpge>
 8016600:	464f      	mov	r7, r9
 8016602:	464e      	mov	r6, r9
 8016604:	2800      	cmp	r0, #0
 8016606:	f040 8234 	bne.w	8016a72 <_dtoa_r+0x8f2>
 801660a:	2331      	movs	r3, #49	; 0x31
 801660c:	f10b 0501 	add.w	r5, fp, #1
 8016610:	f88b 3000 	strb.w	r3, [fp]
 8016614:	f10a 0a01 	add.w	sl, sl, #1
 8016618:	e22f      	b.n	8016a7a <_dtoa_r+0x8fa>
 801661a:	07f2      	lsls	r2, r6, #31
 801661c:	d505      	bpl.n	801662a <_dtoa_r+0x4aa>
 801661e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016622:	f7e9 fff9 	bl	8000618 <__aeabi_dmul>
 8016626:	3501      	adds	r5, #1
 8016628:	2301      	movs	r3, #1
 801662a:	1076      	asrs	r6, r6, #1
 801662c:	3708      	adds	r7, #8
 801662e:	e772      	b.n	8016516 <_dtoa_r+0x396>
 8016630:	2502      	movs	r5, #2
 8016632:	e774      	b.n	801651e <_dtoa_r+0x39e>
 8016634:	f8cd a020 	str.w	sl, [sp, #32]
 8016638:	464f      	mov	r7, r9
 801663a:	e791      	b.n	8016560 <_dtoa_r+0x3e0>
 801663c:	4b4d      	ldr	r3, [pc, #308]	; (8016774 <_dtoa_r+0x5f4>)
 801663e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016642:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016648:	2b00      	cmp	r3, #0
 801664a:	d047      	beq.n	80166dc <_dtoa_r+0x55c>
 801664c:	4602      	mov	r2, r0
 801664e:	460b      	mov	r3, r1
 8016650:	2000      	movs	r0, #0
 8016652:	494e      	ldr	r1, [pc, #312]	; (801678c <_dtoa_r+0x60c>)
 8016654:	f7ea f90a 	bl	800086c <__aeabi_ddiv>
 8016658:	462a      	mov	r2, r5
 801665a:	4633      	mov	r3, r6
 801665c:	f7e9 fe24 	bl	80002a8 <__aeabi_dsub>
 8016660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016664:	465d      	mov	r5, fp
 8016666:	e9dd 0100 	ldrd	r0, r1, [sp]
 801666a:	f7ea fa85 	bl	8000b78 <__aeabi_d2iz>
 801666e:	4606      	mov	r6, r0
 8016670:	f7e9 ff68 	bl	8000544 <__aeabi_i2d>
 8016674:	4602      	mov	r2, r0
 8016676:	460b      	mov	r3, r1
 8016678:	e9dd 0100 	ldrd	r0, r1, [sp]
 801667c:	f7e9 fe14 	bl	80002a8 <__aeabi_dsub>
 8016680:	3630      	adds	r6, #48	; 0x30
 8016682:	f805 6b01 	strb.w	r6, [r5], #1
 8016686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801668a:	e9cd 0100 	strd	r0, r1, [sp]
 801668e:	f7ea fa35 	bl	8000afc <__aeabi_dcmplt>
 8016692:	2800      	cmp	r0, #0
 8016694:	d163      	bne.n	801675e <_dtoa_r+0x5de>
 8016696:	e9dd 2300 	ldrd	r2, r3, [sp]
 801669a:	2000      	movs	r0, #0
 801669c:	4937      	ldr	r1, [pc, #220]	; (801677c <_dtoa_r+0x5fc>)
 801669e:	f7e9 fe03 	bl	80002a8 <__aeabi_dsub>
 80166a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80166a6:	f7ea fa29 	bl	8000afc <__aeabi_dcmplt>
 80166aa:	2800      	cmp	r0, #0
 80166ac:	f040 80b7 	bne.w	801681e <_dtoa_r+0x69e>
 80166b0:	eba5 030b 	sub.w	r3, r5, fp
 80166b4:	429f      	cmp	r7, r3
 80166b6:	f77f af7c 	ble.w	80165b2 <_dtoa_r+0x432>
 80166ba:	2200      	movs	r2, #0
 80166bc:	4b30      	ldr	r3, [pc, #192]	; (8016780 <_dtoa_r+0x600>)
 80166be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80166c2:	f7e9 ffa9 	bl	8000618 <__aeabi_dmul>
 80166c6:	2200      	movs	r2, #0
 80166c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80166cc:	4b2c      	ldr	r3, [pc, #176]	; (8016780 <_dtoa_r+0x600>)
 80166ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166d2:	f7e9 ffa1 	bl	8000618 <__aeabi_dmul>
 80166d6:	e9cd 0100 	strd	r0, r1, [sp]
 80166da:	e7c4      	b.n	8016666 <_dtoa_r+0x4e6>
 80166dc:	462a      	mov	r2, r5
 80166de:	4633      	mov	r3, r6
 80166e0:	f7e9 ff9a 	bl	8000618 <__aeabi_dmul>
 80166e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80166e8:	eb0b 0507 	add.w	r5, fp, r7
 80166ec:	465e      	mov	r6, fp
 80166ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166f2:	f7ea fa41 	bl	8000b78 <__aeabi_d2iz>
 80166f6:	4607      	mov	r7, r0
 80166f8:	f7e9 ff24 	bl	8000544 <__aeabi_i2d>
 80166fc:	3730      	adds	r7, #48	; 0x30
 80166fe:	4602      	mov	r2, r0
 8016700:	460b      	mov	r3, r1
 8016702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016706:	f7e9 fdcf 	bl	80002a8 <__aeabi_dsub>
 801670a:	f806 7b01 	strb.w	r7, [r6], #1
 801670e:	42ae      	cmp	r6, r5
 8016710:	e9cd 0100 	strd	r0, r1, [sp]
 8016714:	f04f 0200 	mov.w	r2, #0
 8016718:	d126      	bne.n	8016768 <_dtoa_r+0x5e8>
 801671a:	4b1c      	ldr	r3, [pc, #112]	; (801678c <_dtoa_r+0x60c>)
 801671c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016720:	f7e9 fdc4 	bl	80002ac <__adddf3>
 8016724:	4602      	mov	r2, r0
 8016726:	460b      	mov	r3, r1
 8016728:	e9dd 0100 	ldrd	r0, r1, [sp]
 801672c:	f7ea fa04 	bl	8000b38 <__aeabi_dcmpgt>
 8016730:	2800      	cmp	r0, #0
 8016732:	d174      	bne.n	801681e <_dtoa_r+0x69e>
 8016734:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016738:	2000      	movs	r0, #0
 801673a:	4914      	ldr	r1, [pc, #80]	; (801678c <_dtoa_r+0x60c>)
 801673c:	f7e9 fdb4 	bl	80002a8 <__aeabi_dsub>
 8016740:	4602      	mov	r2, r0
 8016742:	460b      	mov	r3, r1
 8016744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016748:	f7ea f9d8 	bl	8000afc <__aeabi_dcmplt>
 801674c:	2800      	cmp	r0, #0
 801674e:	f43f af30 	beq.w	80165b2 <_dtoa_r+0x432>
 8016752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016756:	2b30      	cmp	r3, #48	; 0x30
 8016758:	f105 32ff 	add.w	r2, r5, #4294967295
 801675c:	d002      	beq.n	8016764 <_dtoa_r+0x5e4>
 801675e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016762:	e04a      	b.n	80167fa <_dtoa_r+0x67a>
 8016764:	4615      	mov	r5, r2
 8016766:	e7f4      	b.n	8016752 <_dtoa_r+0x5d2>
 8016768:	4b05      	ldr	r3, [pc, #20]	; (8016780 <_dtoa_r+0x600>)
 801676a:	f7e9 ff55 	bl	8000618 <__aeabi_dmul>
 801676e:	e9cd 0100 	strd	r0, r1, [sp]
 8016772:	e7bc      	b.n	80166ee <_dtoa_r+0x56e>
 8016774:	0801b948 	.word	0x0801b948
 8016778:	0801b920 	.word	0x0801b920
 801677c:	3ff00000 	.word	0x3ff00000
 8016780:	40240000 	.word	0x40240000
 8016784:	401c0000 	.word	0x401c0000
 8016788:	40140000 	.word	0x40140000
 801678c:	3fe00000 	.word	0x3fe00000
 8016790:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016794:	465d      	mov	r5, fp
 8016796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801679a:	4630      	mov	r0, r6
 801679c:	4639      	mov	r1, r7
 801679e:	f7ea f865 	bl	800086c <__aeabi_ddiv>
 80167a2:	f7ea f9e9 	bl	8000b78 <__aeabi_d2iz>
 80167a6:	4680      	mov	r8, r0
 80167a8:	f7e9 fecc 	bl	8000544 <__aeabi_i2d>
 80167ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80167b0:	f7e9 ff32 	bl	8000618 <__aeabi_dmul>
 80167b4:	4602      	mov	r2, r0
 80167b6:	460b      	mov	r3, r1
 80167b8:	4630      	mov	r0, r6
 80167ba:	4639      	mov	r1, r7
 80167bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80167c0:	f7e9 fd72 	bl	80002a8 <__aeabi_dsub>
 80167c4:	f805 6b01 	strb.w	r6, [r5], #1
 80167c8:	eba5 060b 	sub.w	r6, r5, fp
 80167cc:	45b1      	cmp	r9, r6
 80167ce:	4602      	mov	r2, r0
 80167d0:	460b      	mov	r3, r1
 80167d2:	d139      	bne.n	8016848 <_dtoa_r+0x6c8>
 80167d4:	f7e9 fd6a 	bl	80002ac <__adddf3>
 80167d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80167dc:	4606      	mov	r6, r0
 80167de:	460f      	mov	r7, r1
 80167e0:	f7ea f9aa 	bl	8000b38 <__aeabi_dcmpgt>
 80167e4:	b9c8      	cbnz	r0, 801681a <_dtoa_r+0x69a>
 80167e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80167ea:	4630      	mov	r0, r6
 80167ec:	4639      	mov	r1, r7
 80167ee:	f7ea f97b 	bl	8000ae8 <__aeabi_dcmpeq>
 80167f2:	b110      	cbz	r0, 80167fa <_dtoa_r+0x67a>
 80167f4:	f018 0f01 	tst.w	r8, #1
 80167f8:	d10f      	bne.n	801681a <_dtoa_r+0x69a>
 80167fa:	9904      	ldr	r1, [sp, #16]
 80167fc:	4620      	mov	r0, r4
 80167fe:	f000 fba1 	bl	8016f44 <_Bfree>
 8016802:	2300      	movs	r3, #0
 8016804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016806:	702b      	strb	r3, [r5, #0]
 8016808:	f10a 0301 	add.w	r3, sl, #1
 801680c:	6013      	str	r3, [r2, #0]
 801680e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016810:	2b00      	cmp	r3, #0
 8016812:	f000 8241 	beq.w	8016c98 <_dtoa_r+0xb18>
 8016816:	601d      	str	r5, [r3, #0]
 8016818:	e23e      	b.n	8016c98 <_dtoa_r+0xb18>
 801681a:	f8cd a020 	str.w	sl, [sp, #32]
 801681e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016822:	2a39      	cmp	r2, #57	; 0x39
 8016824:	f105 33ff 	add.w	r3, r5, #4294967295
 8016828:	d108      	bne.n	801683c <_dtoa_r+0x6bc>
 801682a:	459b      	cmp	fp, r3
 801682c:	d10a      	bne.n	8016844 <_dtoa_r+0x6c4>
 801682e:	9b08      	ldr	r3, [sp, #32]
 8016830:	3301      	adds	r3, #1
 8016832:	9308      	str	r3, [sp, #32]
 8016834:	2330      	movs	r3, #48	; 0x30
 8016836:	f88b 3000 	strb.w	r3, [fp]
 801683a:	465b      	mov	r3, fp
 801683c:	781a      	ldrb	r2, [r3, #0]
 801683e:	3201      	adds	r2, #1
 8016840:	701a      	strb	r2, [r3, #0]
 8016842:	e78c      	b.n	801675e <_dtoa_r+0x5de>
 8016844:	461d      	mov	r5, r3
 8016846:	e7ea      	b.n	801681e <_dtoa_r+0x69e>
 8016848:	2200      	movs	r2, #0
 801684a:	4b9b      	ldr	r3, [pc, #620]	; (8016ab8 <_dtoa_r+0x938>)
 801684c:	f7e9 fee4 	bl	8000618 <__aeabi_dmul>
 8016850:	2200      	movs	r2, #0
 8016852:	2300      	movs	r3, #0
 8016854:	4606      	mov	r6, r0
 8016856:	460f      	mov	r7, r1
 8016858:	f7ea f946 	bl	8000ae8 <__aeabi_dcmpeq>
 801685c:	2800      	cmp	r0, #0
 801685e:	d09a      	beq.n	8016796 <_dtoa_r+0x616>
 8016860:	e7cb      	b.n	80167fa <_dtoa_r+0x67a>
 8016862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016864:	2a00      	cmp	r2, #0
 8016866:	f000 808b 	beq.w	8016980 <_dtoa_r+0x800>
 801686a:	9a06      	ldr	r2, [sp, #24]
 801686c:	2a01      	cmp	r2, #1
 801686e:	dc6e      	bgt.n	801694e <_dtoa_r+0x7ce>
 8016870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016872:	2a00      	cmp	r2, #0
 8016874:	d067      	beq.n	8016946 <_dtoa_r+0x7c6>
 8016876:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801687a:	9f07      	ldr	r7, [sp, #28]
 801687c:	9d05      	ldr	r5, [sp, #20]
 801687e:	9a05      	ldr	r2, [sp, #20]
 8016880:	2101      	movs	r1, #1
 8016882:	441a      	add	r2, r3
 8016884:	4620      	mov	r0, r4
 8016886:	9205      	str	r2, [sp, #20]
 8016888:	4498      	add	r8, r3
 801688a:	f000 fbfb 	bl	8017084 <__i2b>
 801688e:	4606      	mov	r6, r0
 8016890:	2d00      	cmp	r5, #0
 8016892:	dd0c      	ble.n	80168ae <_dtoa_r+0x72e>
 8016894:	f1b8 0f00 	cmp.w	r8, #0
 8016898:	dd09      	ble.n	80168ae <_dtoa_r+0x72e>
 801689a:	4545      	cmp	r5, r8
 801689c:	9a05      	ldr	r2, [sp, #20]
 801689e:	462b      	mov	r3, r5
 80168a0:	bfa8      	it	ge
 80168a2:	4643      	movge	r3, r8
 80168a4:	1ad2      	subs	r2, r2, r3
 80168a6:	9205      	str	r2, [sp, #20]
 80168a8:	1aed      	subs	r5, r5, r3
 80168aa:	eba8 0803 	sub.w	r8, r8, r3
 80168ae:	9b07      	ldr	r3, [sp, #28]
 80168b0:	b1eb      	cbz	r3, 80168ee <_dtoa_r+0x76e>
 80168b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d067      	beq.n	8016988 <_dtoa_r+0x808>
 80168b8:	b18f      	cbz	r7, 80168de <_dtoa_r+0x75e>
 80168ba:	4631      	mov	r1, r6
 80168bc:	463a      	mov	r2, r7
 80168be:	4620      	mov	r0, r4
 80168c0:	f000 fc80 	bl	80171c4 <__pow5mult>
 80168c4:	9a04      	ldr	r2, [sp, #16]
 80168c6:	4601      	mov	r1, r0
 80168c8:	4606      	mov	r6, r0
 80168ca:	4620      	mov	r0, r4
 80168cc:	f000 fbe3 	bl	8017096 <__multiply>
 80168d0:	9904      	ldr	r1, [sp, #16]
 80168d2:	9008      	str	r0, [sp, #32]
 80168d4:	4620      	mov	r0, r4
 80168d6:	f000 fb35 	bl	8016f44 <_Bfree>
 80168da:	9b08      	ldr	r3, [sp, #32]
 80168dc:	9304      	str	r3, [sp, #16]
 80168de:	9b07      	ldr	r3, [sp, #28]
 80168e0:	1bda      	subs	r2, r3, r7
 80168e2:	d004      	beq.n	80168ee <_dtoa_r+0x76e>
 80168e4:	9904      	ldr	r1, [sp, #16]
 80168e6:	4620      	mov	r0, r4
 80168e8:	f000 fc6c 	bl	80171c4 <__pow5mult>
 80168ec:	9004      	str	r0, [sp, #16]
 80168ee:	2101      	movs	r1, #1
 80168f0:	4620      	mov	r0, r4
 80168f2:	f000 fbc7 	bl	8017084 <__i2b>
 80168f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168f8:	4607      	mov	r7, r0
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	f000 81d0 	beq.w	8016ca0 <_dtoa_r+0xb20>
 8016900:	461a      	mov	r2, r3
 8016902:	4601      	mov	r1, r0
 8016904:	4620      	mov	r0, r4
 8016906:	f000 fc5d 	bl	80171c4 <__pow5mult>
 801690a:	9b06      	ldr	r3, [sp, #24]
 801690c:	2b01      	cmp	r3, #1
 801690e:	4607      	mov	r7, r0
 8016910:	dc40      	bgt.n	8016994 <_dtoa_r+0x814>
 8016912:	9b00      	ldr	r3, [sp, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d139      	bne.n	801698c <_dtoa_r+0x80c>
 8016918:	9b01      	ldr	r3, [sp, #4]
 801691a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801691e:	2b00      	cmp	r3, #0
 8016920:	d136      	bne.n	8016990 <_dtoa_r+0x810>
 8016922:	9b01      	ldr	r3, [sp, #4]
 8016924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016928:	0d1b      	lsrs	r3, r3, #20
 801692a:	051b      	lsls	r3, r3, #20
 801692c:	b12b      	cbz	r3, 801693a <_dtoa_r+0x7ba>
 801692e:	9b05      	ldr	r3, [sp, #20]
 8016930:	3301      	adds	r3, #1
 8016932:	9305      	str	r3, [sp, #20]
 8016934:	f108 0801 	add.w	r8, r8, #1
 8016938:	2301      	movs	r3, #1
 801693a:	9307      	str	r3, [sp, #28]
 801693c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801693e:	2b00      	cmp	r3, #0
 8016940:	d12a      	bne.n	8016998 <_dtoa_r+0x818>
 8016942:	2001      	movs	r0, #1
 8016944:	e030      	b.n	80169a8 <_dtoa_r+0x828>
 8016946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016948:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801694c:	e795      	b.n	801687a <_dtoa_r+0x6fa>
 801694e:	9b07      	ldr	r3, [sp, #28]
 8016950:	f109 37ff 	add.w	r7, r9, #4294967295
 8016954:	42bb      	cmp	r3, r7
 8016956:	bfbf      	itttt	lt
 8016958:	9b07      	ldrlt	r3, [sp, #28]
 801695a:	9707      	strlt	r7, [sp, #28]
 801695c:	1afa      	sublt	r2, r7, r3
 801695e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016960:	bfbb      	ittet	lt
 8016962:	189b      	addlt	r3, r3, r2
 8016964:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016966:	1bdf      	subge	r7, r3, r7
 8016968:	2700      	movlt	r7, #0
 801696a:	f1b9 0f00 	cmp.w	r9, #0
 801696e:	bfb5      	itete	lt
 8016970:	9b05      	ldrlt	r3, [sp, #20]
 8016972:	9d05      	ldrge	r5, [sp, #20]
 8016974:	eba3 0509 	sublt.w	r5, r3, r9
 8016978:	464b      	movge	r3, r9
 801697a:	bfb8      	it	lt
 801697c:	2300      	movlt	r3, #0
 801697e:	e77e      	b.n	801687e <_dtoa_r+0x6fe>
 8016980:	9f07      	ldr	r7, [sp, #28]
 8016982:	9d05      	ldr	r5, [sp, #20]
 8016984:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016986:	e783      	b.n	8016890 <_dtoa_r+0x710>
 8016988:	9a07      	ldr	r2, [sp, #28]
 801698a:	e7ab      	b.n	80168e4 <_dtoa_r+0x764>
 801698c:	2300      	movs	r3, #0
 801698e:	e7d4      	b.n	801693a <_dtoa_r+0x7ba>
 8016990:	9b00      	ldr	r3, [sp, #0]
 8016992:	e7d2      	b.n	801693a <_dtoa_r+0x7ba>
 8016994:	2300      	movs	r3, #0
 8016996:	9307      	str	r3, [sp, #28]
 8016998:	693b      	ldr	r3, [r7, #16]
 801699a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801699e:	6918      	ldr	r0, [r3, #16]
 80169a0:	f000 fb22 	bl	8016fe8 <__hi0bits>
 80169a4:	f1c0 0020 	rsb	r0, r0, #32
 80169a8:	4440      	add	r0, r8
 80169aa:	f010 001f 	ands.w	r0, r0, #31
 80169ae:	d047      	beq.n	8016a40 <_dtoa_r+0x8c0>
 80169b0:	f1c0 0320 	rsb	r3, r0, #32
 80169b4:	2b04      	cmp	r3, #4
 80169b6:	dd3b      	ble.n	8016a30 <_dtoa_r+0x8b0>
 80169b8:	9b05      	ldr	r3, [sp, #20]
 80169ba:	f1c0 001c 	rsb	r0, r0, #28
 80169be:	4403      	add	r3, r0
 80169c0:	9305      	str	r3, [sp, #20]
 80169c2:	4405      	add	r5, r0
 80169c4:	4480      	add	r8, r0
 80169c6:	9b05      	ldr	r3, [sp, #20]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	dd05      	ble.n	80169d8 <_dtoa_r+0x858>
 80169cc:	461a      	mov	r2, r3
 80169ce:	9904      	ldr	r1, [sp, #16]
 80169d0:	4620      	mov	r0, r4
 80169d2:	f000 fc45 	bl	8017260 <__lshift>
 80169d6:	9004      	str	r0, [sp, #16]
 80169d8:	f1b8 0f00 	cmp.w	r8, #0
 80169dc:	dd05      	ble.n	80169ea <_dtoa_r+0x86a>
 80169de:	4639      	mov	r1, r7
 80169e0:	4642      	mov	r2, r8
 80169e2:	4620      	mov	r0, r4
 80169e4:	f000 fc3c 	bl	8017260 <__lshift>
 80169e8:	4607      	mov	r7, r0
 80169ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169ec:	b353      	cbz	r3, 8016a44 <_dtoa_r+0x8c4>
 80169ee:	4639      	mov	r1, r7
 80169f0:	9804      	ldr	r0, [sp, #16]
 80169f2:	f000 fc89 	bl	8017308 <__mcmp>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	da24      	bge.n	8016a44 <_dtoa_r+0x8c4>
 80169fa:	2300      	movs	r3, #0
 80169fc:	220a      	movs	r2, #10
 80169fe:	9904      	ldr	r1, [sp, #16]
 8016a00:	4620      	mov	r0, r4
 8016a02:	f000 fab6 	bl	8016f72 <__multadd>
 8016a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a08:	9004      	str	r0, [sp, #16]
 8016a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	f000 814d 	beq.w	8016cae <_dtoa_r+0xb2e>
 8016a14:	2300      	movs	r3, #0
 8016a16:	4631      	mov	r1, r6
 8016a18:	220a      	movs	r2, #10
 8016a1a:	4620      	mov	r0, r4
 8016a1c:	f000 faa9 	bl	8016f72 <__multadd>
 8016a20:	9b02      	ldr	r3, [sp, #8]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	4606      	mov	r6, r0
 8016a26:	dc4f      	bgt.n	8016ac8 <_dtoa_r+0x948>
 8016a28:	9b06      	ldr	r3, [sp, #24]
 8016a2a:	2b02      	cmp	r3, #2
 8016a2c:	dd4c      	ble.n	8016ac8 <_dtoa_r+0x948>
 8016a2e:	e011      	b.n	8016a54 <_dtoa_r+0x8d4>
 8016a30:	d0c9      	beq.n	80169c6 <_dtoa_r+0x846>
 8016a32:	9a05      	ldr	r2, [sp, #20]
 8016a34:	331c      	adds	r3, #28
 8016a36:	441a      	add	r2, r3
 8016a38:	9205      	str	r2, [sp, #20]
 8016a3a:	441d      	add	r5, r3
 8016a3c:	4498      	add	r8, r3
 8016a3e:	e7c2      	b.n	80169c6 <_dtoa_r+0x846>
 8016a40:	4603      	mov	r3, r0
 8016a42:	e7f6      	b.n	8016a32 <_dtoa_r+0x8b2>
 8016a44:	f1b9 0f00 	cmp.w	r9, #0
 8016a48:	dc38      	bgt.n	8016abc <_dtoa_r+0x93c>
 8016a4a:	9b06      	ldr	r3, [sp, #24]
 8016a4c:	2b02      	cmp	r3, #2
 8016a4e:	dd35      	ble.n	8016abc <_dtoa_r+0x93c>
 8016a50:	f8cd 9008 	str.w	r9, [sp, #8]
 8016a54:	9b02      	ldr	r3, [sp, #8]
 8016a56:	b963      	cbnz	r3, 8016a72 <_dtoa_r+0x8f2>
 8016a58:	4639      	mov	r1, r7
 8016a5a:	2205      	movs	r2, #5
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f000 fa88 	bl	8016f72 <__multadd>
 8016a62:	4601      	mov	r1, r0
 8016a64:	4607      	mov	r7, r0
 8016a66:	9804      	ldr	r0, [sp, #16]
 8016a68:	f000 fc4e 	bl	8017308 <__mcmp>
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	f73f adcc 	bgt.w	801660a <_dtoa_r+0x48a>
 8016a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a74:	465d      	mov	r5, fp
 8016a76:	ea6f 0a03 	mvn.w	sl, r3
 8016a7a:	f04f 0900 	mov.w	r9, #0
 8016a7e:	4639      	mov	r1, r7
 8016a80:	4620      	mov	r0, r4
 8016a82:	f000 fa5f 	bl	8016f44 <_Bfree>
 8016a86:	2e00      	cmp	r6, #0
 8016a88:	f43f aeb7 	beq.w	80167fa <_dtoa_r+0x67a>
 8016a8c:	f1b9 0f00 	cmp.w	r9, #0
 8016a90:	d005      	beq.n	8016a9e <_dtoa_r+0x91e>
 8016a92:	45b1      	cmp	r9, r6
 8016a94:	d003      	beq.n	8016a9e <_dtoa_r+0x91e>
 8016a96:	4649      	mov	r1, r9
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f000 fa53 	bl	8016f44 <_Bfree>
 8016a9e:	4631      	mov	r1, r6
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f000 fa4f 	bl	8016f44 <_Bfree>
 8016aa6:	e6a8      	b.n	80167fa <_dtoa_r+0x67a>
 8016aa8:	2700      	movs	r7, #0
 8016aaa:	463e      	mov	r6, r7
 8016aac:	e7e1      	b.n	8016a72 <_dtoa_r+0x8f2>
 8016aae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016ab2:	463e      	mov	r6, r7
 8016ab4:	e5a9      	b.n	801660a <_dtoa_r+0x48a>
 8016ab6:	bf00      	nop
 8016ab8:	40240000 	.word	0x40240000
 8016abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016abe:	f8cd 9008 	str.w	r9, [sp, #8]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	f000 80fa 	beq.w	8016cbc <_dtoa_r+0xb3c>
 8016ac8:	2d00      	cmp	r5, #0
 8016aca:	dd05      	ble.n	8016ad8 <_dtoa_r+0x958>
 8016acc:	4631      	mov	r1, r6
 8016ace:	462a      	mov	r2, r5
 8016ad0:	4620      	mov	r0, r4
 8016ad2:	f000 fbc5 	bl	8017260 <__lshift>
 8016ad6:	4606      	mov	r6, r0
 8016ad8:	9b07      	ldr	r3, [sp, #28]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d04c      	beq.n	8016b78 <_dtoa_r+0x9f8>
 8016ade:	6871      	ldr	r1, [r6, #4]
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f000 f9fb 	bl	8016edc <_Balloc>
 8016ae6:	6932      	ldr	r2, [r6, #16]
 8016ae8:	3202      	adds	r2, #2
 8016aea:	4605      	mov	r5, r0
 8016aec:	0092      	lsls	r2, r2, #2
 8016aee:	f106 010c 	add.w	r1, r6, #12
 8016af2:	300c      	adds	r0, #12
 8016af4:	f7fe fd03 	bl	80154fe <memcpy>
 8016af8:	2201      	movs	r2, #1
 8016afa:	4629      	mov	r1, r5
 8016afc:	4620      	mov	r0, r4
 8016afe:	f000 fbaf 	bl	8017260 <__lshift>
 8016b02:	9b00      	ldr	r3, [sp, #0]
 8016b04:	f8cd b014 	str.w	fp, [sp, #20]
 8016b08:	f003 0301 	and.w	r3, r3, #1
 8016b0c:	46b1      	mov	r9, r6
 8016b0e:	9307      	str	r3, [sp, #28]
 8016b10:	4606      	mov	r6, r0
 8016b12:	4639      	mov	r1, r7
 8016b14:	9804      	ldr	r0, [sp, #16]
 8016b16:	f7ff faa5 	bl	8016064 <quorem>
 8016b1a:	4649      	mov	r1, r9
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016b22:	9804      	ldr	r0, [sp, #16]
 8016b24:	f000 fbf0 	bl	8017308 <__mcmp>
 8016b28:	4632      	mov	r2, r6
 8016b2a:	9000      	str	r0, [sp, #0]
 8016b2c:	4639      	mov	r1, r7
 8016b2e:	4620      	mov	r0, r4
 8016b30:	f000 fc04 	bl	801733c <__mdiff>
 8016b34:	68c3      	ldr	r3, [r0, #12]
 8016b36:	4602      	mov	r2, r0
 8016b38:	bb03      	cbnz	r3, 8016b7c <_dtoa_r+0x9fc>
 8016b3a:	4601      	mov	r1, r0
 8016b3c:	9008      	str	r0, [sp, #32]
 8016b3e:	9804      	ldr	r0, [sp, #16]
 8016b40:	f000 fbe2 	bl	8017308 <__mcmp>
 8016b44:	9a08      	ldr	r2, [sp, #32]
 8016b46:	4603      	mov	r3, r0
 8016b48:	4611      	mov	r1, r2
 8016b4a:	4620      	mov	r0, r4
 8016b4c:	9308      	str	r3, [sp, #32]
 8016b4e:	f000 f9f9 	bl	8016f44 <_Bfree>
 8016b52:	9b08      	ldr	r3, [sp, #32]
 8016b54:	b9a3      	cbnz	r3, 8016b80 <_dtoa_r+0xa00>
 8016b56:	9a06      	ldr	r2, [sp, #24]
 8016b58:	b992      	cbnz	r2, 8016b80 <_dtoa_r+0xa00>
 8016b5a:	9a07      	ldr	r2, [sp, #28]
 8016b5c:	b982      	cbnz	r2, 8016b80 <_dtoa_r+0xa00>
 8016b5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016b62:	d029      	beq.n	8016bb8 <_dtoa_r+0xa38>
 8016b64:	9b00      	ldr	r3, [sp, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	dd01      	ble.n	8016b6e <_dtoa_r+0x9ee>
 8016b6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016b6e:	9b05      	ldr	r3, [sp, #20]
 8016b70:	1c5d      	adds	r5, r3, #1
 8016b72:	f883 8000 	strb.w	r8, [r3]
 8016b76:	e782      	b.n	8016a7e <_dtoa_r+0x8fe>
 8016b78:	4630      	mov	r0, r6
 8016b7a:	e7c2      	b.n	8016b02 <_dtoa_r+0x982>
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	e7e3      	b.n	8016b48 <_dtoa_r+0x9c8>
 8016b80:	9a00      	ldr	r2, [sp, #0]
 8016b82:	2a00      	cmp	r2, #0
 8016b84:	db04      	blt.n	8016b90 <_dtoa_r+0xa10>
 8016b86:	d125      	bne.n	8016bd4 <_dtoa_r+0xa54>
 8016b88:	9a06      	ldr	r2, [sp, #24]
 8016b8a:	bb1a      	cbnz	r2, 8016bd4 <_dtoa_r+0xa54>
 8016b8c:	9a07      	ldr	r2, [sp, #28]
 8016b8e:	bb0a      	cbnz	r2, 8016bd4 <_dtoa_r+0xa54>
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	ddec      	ble.n	8016b6e <_dtoa_r+0x9ee>
 8016b94:	2201      	movs	r2, #1
 8016b96:	9904      	ldr	r1, [sp, #16]
 8016b98:	4620      	mov	r0, r4
 8016b9a:	f000 fb61 	bl	8017260 <__lshift>
 8016b9e:	4639      	mov	r1, r7
 8016ba0:	9004      	str	r0, [sp, #16]
 8016ba2:	f000 fbb1 	bl	8017308 <__mcmp>
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	dc03      	bgt.n	8016bb2 <_dtoa_r+0xa32>
 8016baa:	d1e0      	bne.n	8016b6e <_dtoa_r+0x9ee>
 8016bac:	f018 0f01 	tst.w	r8, #1
 8016bb0:	d0dd      	beq.n	8016b6e <_dtoa_r+0x9ee>
 8016bb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016bb6:	d1d8      	bne.n	8016b6a <_dtoa_r+0x9ea>
 8016bb8:	9b05      	ldr	r3, [sp, #20]
 8016bba:	9a05      	ldr	r2, [sp, #20]
 8016bbc:	1c5d      	adds	r5, r3, #1
 8016bbe:	2339      	movs	r3, #57	; 0x39
 8016bc0:	7013      	strb	r3, [r2, #0]
 8016bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016bc6:	2b39      	cmp	r3, #57	; 0x39
 8016bc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8016bcc:	d04f      	beq.n	8016c6e <_dtoa_r+0xaee>
 8016bce:	3301      	adds	r3, #1
 8016bd0:	7013      	strb	r3, [r2, #0]
 8016bd2:	e754      	b.n	8016a7e <_dtoa_r+0x8fe>
 8016bd4:	9a05      	ldr	r2, [sp, #20]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	f102 0501 	add.w	r5, r2, #1
 8016bdc:	dd06      	ble.n	8016bec <_dtoa_r+0xa6c>
 8016bde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016be2:	d0e9      	beq.n	8016bb8 <_dtoa_r+0xa38>
 8016be4:	f108 0801 	add.w	r8, r8, #1
 8016be8:	9b05      	ldr	r3, [sp, #20]
 8016bea:	e7c2      	b.n	8016b72 <_dtoa_r+0x9f2>
 8016bec:	9a02      	ldr	r2, [sp, #8]
 8016bee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016bf2:	eba5 030b 	sub.w	r3, r5, fp
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	d021      	beq.n	8016c3e <_dtoa_r+0xabe>
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	220a      	movs	r2, #10
 8016bfe:	9904      	ldr	r1, [sp, #16]
 8016c00:	4620      	mov	r0, r4
 8016c02:	f000 f9b6 	bl	8016f72 <__multadd>
 8016c06:	45b1      	cmp	r9, r6
 8016c08:	9004      	str	r0, [sp, #16]
 8016c0a:	f04f 0300 	mov.w	r3, #0
 8016c0e:	f04f 020a 	mov.w	r2, #10
 8016c12:	4649      	mov	r1, r9
 8016c14:	4620      	mov	r0, r4
 8016c16:	d105      	bne.n	8016c24 <_dtoa_r+0xaa4>
 8016c18:	f000 f9ab 	bl	8016f72 <__multadd>
 8016c1c:	4681      	mov	r9, r0
 8016c1e:	4606      	mov	r6, r0
 8016c20:	9505      	str	r5, [sp, #20]
 8016c22:	e776      	b.n	8016b12 <_dtoa_r+0x992>
 8016c24:	f000 f9a5 	bl	8016f72 <__multadd>
 8016c28:	4631      	mov	r1, r6
 8016c2a:	4681      	mov	r9, r0
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	220a      	movs	r2, #10
 8016c30:	4620      	mov	r0, r4
 8016c32:	f000 f99e 	bl	8016f72 <__multadd>
 8016c36:	4606      	mov	r6, r0
 8016c38:	e7f2      	b.n	8016c20 <_dtoa_r+0xaa0>
 8016c3a:	f04f 0900 	mov.w	r9, #0
 8016c3e:	2201      	movs	r2, #1
 8016c40:	9904      	ldr	r1, [sp, #16]
 8016c42:	4620      	mov	r0, r4
 8016c44:	f000 fb0c 	bl	8017260 <__lshift>
 8016c48:	4639      	mov	r1, r7
 8016c4a:	9004      	str	r0, [sp, #16]
 8016c4c:	f000 fb5c 	bl	8017308 <__mcmp>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	dcb6      	bgt.n	8016bc2 <_dtoa_r+0xa42>
 8016c54:	d102      	bne.n	8016c5c <_dtoa_r+0xadc>
 8016c56:	f018 0f01 	tst.w	r8, #1
 8016c5a:	d1b2      	bne.n	8016bc2 <_dtoa_r+0xa42>
 8016c5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c60:	2b30      	cmp	r3, #48	; 0x30
 8016c62:	f105 32ff 	add.w	r2, r5, #4294967295
 8016c66:	f47f af0a 	bne.w	8016a7e <_dtoa_r+0x8fe>
 8016c6a:	4615      	mov	r5, r2
 8016c6c:	e7f6      	b.n	8016c5c <_dtoa_r+0xadc>
 8016c6e:	4593      	cmp	fp, r2
 8016c70:	d105      	bne.n	8016c7e <_dtoa_r+0xafe>
 8016c72:	2331      	movs	r3, #49	; 0x31
 8016c74:	f10a 0a01 	add.w	sl, sl, #1
 8016c78:	f88b 3000 	strb.w	r3, [fp]
 8016c7c:	e6ff      	b.n	8016a7e <_dtoa_r+0x8fe>
 8016c7e:	4615      	mov	r5, r2
 8016c80:	e79f      	b.n	8016bc2 <_dtoa_r+0xa42>
 8016c82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016ce8 <_dtoa_r+0xb68>
 8016c86:	e007      	b.n	8016c98 <_dtoa_r+0xb18>
 8016c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016cec <_dtoa_r+0xb6c>
 8016c8e:	b11b      	cbz	r3, 8016c98 <_dtoa_r+0xb18>
 8016c90:	f10b 0308 	add.w	r3, fp, #8
 8016c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016c96:	6013      	str	r3, [r2, #0]
 8016c98:	4658      	mov	r0, fp
 8016c9a:	b017      	add	sp, #92	; 0x5c
 8016c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ca0:	9b06      	ldr	r3, [sp, #24]
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	f77f ae35 	ble.w	8016912 <_dtoa_r+0x792>
 8016ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016caa:	9307      	str	r3, [sp, #28]
 8016cac:	e649      	b.n	8016942 <_dtoa_r+0x7c2>
 8016cae:	9b02      	ldr	r3, [sp, #8]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	dc03      	bgt.n	8016cbc <_dtoa_r+0xb3c>
 8016cb4:	9b06      	ldr	r3, [sp, #24]
 8016cb6:	2b02      	cmp	r3, #2
 8016cb8:	f73f aecc 	bgt.w	8016a54 <_dtoa_r+0x8d4>
 8016cbc:	465d      	mov	r5, fp
 8016cbe:	4639      	mov	r1, r7
 8016cc0:	9804      	ldr	r0, [sp, #16]
 8016cc2:	f7ff f9cf 	bl	8016064 <quorem>
 8016cc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016cca:	f805 8b01 	strb.w	r8, [r5], #1
 8016cce:	9a02      	ldr	r2, [sp, #8]
 8016cd0:	eba5 030b 	sub.w	r3, r5, fp
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	ddb0      	ble.n	8016c3a <_dtoa_r+0xaba>
 8016cd8:	2300      	movs	r3, #0
 8016cda:	220a      	movs	r2, #10
 8016cdc:	9904      	ldr	r1, [sp, #16]
 8016cde:	4620      	mov	r0, r4
 8016ce0:	f000 f947 	bl	8016f72 <__multadd>
 8016ce4:	9004      	str	r0, [sp, #16]
 8016ce6:	e7ea      	b.n	8016cbe <_dtoa_r+0xb3e>
 8016ce8:	0801b87c 	.word	0x0801b87c
 8016cec:	0801b8a0 	.word	0x0801b8a0

08016cf0 <std>:
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	b510      	push	{r4, lr}
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8016cfa:	6083      	str	r3, [r0, #8]
 8016cfc:	8181      	strh	r1, [r0, #12]
 8016cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8016d00:	81c2      	strh	r2, [r0, #14]
 8016d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d06:	6183      	str	r3, [r0, #24]
 8016d08:	4619      	mov	r1, r3
 8016d0a:	2208      	movs	r2, #8
 8016d0c:	305c      	adds	r0, #92	; 0x5c
 8016d0e:	f7fe fc01 	bl	8015514 <memset>
 8016d12:	4b05      	ldr	r3, [pc, #20]	; (8016d28 <std+0x38>)
 8016d14:	6263      	str	r3, [r4, #36]	; 0x24
 8016d16:	4b05      	ldr	r3, [pc, #20]	; (8016d2c <std+0x3c>)
 8016d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d1a:	4b05      	ldr	r3, [pc, #20]	; (8016d30 <std+0x40>)
 8016d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d1e:	4b05      	ldr	r3, [pc, #20]	; (8016d34 <std+0x44>)
 8016d20:	6224      	str	r4, [r4, #32]
 8016d22:	6323      	str	r3, [r4, #48]	; 0x30
 8016d24:	bd10      	pop	{r4, pc}
 8016d26:	bf00      	nop
 8016d28:	08017b45 	.word	0x08017b45
 8016d2c:	08017b67 	.word	0x08017b67
 8016d30:	08017b9f 	.word	0x08017b9f
 8016d34:	08017bc3 	.word	0x08017bc3

08016d38 <_cleanup_r>:
 8016d38:	4901      	ldr	r1, [pc, #4]	; (8016d40 <_cleanup_r+0x8>)
 8016d3a:	f000 b885 	b.w	8016e48 <_fwalk_reent>
 8016d3e:	bf00      	nop
 8016d40:	08017eb9 	.word	0x08017eb9

08016d44 <__sfmoreglue>:
 8016d44:	b570      	push	{r4, r5, r6, lr}
 8016d46:	1e4a      	subs	r2, r1, #1
 8016d48:	2568      	movs	r5, #104	; 0x68
 8016d4a:	4355      	muls	r5, r2
 8016d4c:	460e      	mov	r6, r1
 8016d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d52:	f000 fbfb 	bl	801754c <_malloc_r>
 8016d56:	4604      	mov	r4, r0
 8016d58:	b140      	cbz	r0, 8016d6c <__sfmoreglue+0x28>
 8016d5a:	2100      	movs	r1, #0
 8016d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8016d60:	300c      	adds	r0, #12
 8016d62:	60a0      	str	r0, [r4, #8]
 8016d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d68:	f7fe fbd4 	bl	8015514 <memset>
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	bd70      	pop	{r4, r5, r6, pc}

08016d70 <__sinit>:
 8016d70:	6983      	ldr	r3, [r0, #24]
 8016d72:	b510      	push	{r4, lr}
 8016d74:	4604      	mov	r4, r0
 8016d76:	bb33      	cbnz	r3, 8016dc6 <__sinit+0x56>
 8016d78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016d7c:	6503      	str	r3, [r0, #80]	; 0x50
 8016d7e:	4b12      	ldr	r3, [pc, #72]	; (8016dc8 <__sinit+0x58>)
 8016d80:	4a12      	ldr	r2, [pc, #72]	; (8016dcc <__sinit+0x5c>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	6282      	str	r2, [r0, #40]	; 0x28
 8016d86:	4298      	cmp	r0, r3
 8016d88:	bf04      	itt	eq
 8016d8a:	2301      	moveq	r3, #1
 8016d8c:	6183      	streq	r3, [r0, #24]
 8016d8e:	f000 f81f 	bl	8016dd0 <__sfp>
 8016d92:	6060      	str	r0, [r4, #4]
 8016d94:	4620      	mov	r0, r4
 8016d96:	f000 f81b 	bl	8016dd0 <__sfp>
 8016d9a:	60a0      	str	r0, [r4, #8]
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f000 f817 	bl	8016dd0 <__sfp>
 8016da2:	2200      	movs	r2, #0
 8016da4:	60e0      	str	r0, [r4, #12]
 8016da6:	2104      	movs	r1, #4
 8016da8:	6860      	ldr	r0, [r4, #4]
 8016daa:	f7ff ffa1 	bl	8016cf0 <std>
 8016dae:	2201      	movs	r2, #1
 8016db0:	2109      	movs	r1, #9
 8016db2:	68a0      	ldr	r0, [r4, #8]
 8016db4:	f7ff ff9c 	bl	8016cf0 <std>
 8016db8:	2202      	movs	r2, #2
 8016dba:	2112      	movs	r1, #18
 8016dbc:	68e0      	ldr	r0, [r4, #12]
 8016dbe:	f7ff ff97 	bl	8016cf0 <std>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	61a3      	str	r3, [r4, #24]
 8016dc6:	bd10      	pop	{r4, pc}
 8016dc8:	0801b868 	.word	0x0801b868
 8016dcc:	08016d39 	.word	0x08016d39

08016dd0 <__sfp>:
 8016dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dd2:	4b1b      	ldr	r3, [pc, #108]	; (8016e40 <__sfp+0x70>)
 8016dd4:	681e      	ldr	r6, [r3, #0]
 8016dd6:	69b3      	ldr	r3, [r6, #24]
 8016dd8:	4607      	mov	r7, r0
 8016dda:	b913      	cbnz	r3, 8016de2 <__sfp+0x12>
 8016ddc:	4630      	mov	r0, r6
 8016dde:	f7ff ffc7 	bl	8016d70 <__sinit>
 8016de2:	3648      	adds	r6, #72	; 0x48
 8016de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016de8:	3b01      	subs	r3, #1
 8016dea:	d503      	bpl.n	8016df4 <__sfp+0x24>
 8016dec:	6833      	ldr	r3, [r6, #0]
 8016dee:	b133      	cbz	r3, 8016dfe <__sfp+0x2e>
 8016df0:	6836      	ldr	r6, [r6, #0]
 8016df2:	e7f7      	b.n	8016de4 <__sfp+0x14>
 8016df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016df8:	b16d      	cbz	r5, 8016e16 <__sfp+0x46>
 8016dfa:	3468      	adds	r4, #104	; 0x68
 8016dfc:	e7f4      	b.n	8016de8 <__sfp+0x18>
 8016dfe:	2104      	movs	r1, #4
 8016e00:	4638      	mov	r0, r7
 8016e02:	f7ff ff9f 	bl	8016d44 <__sfmoreglue>
 8016e06:	6030      	str	r0, [r6, #0]
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	d1f1      	bne.n	8016df0 <__sfp+0x20>
 8016e0c:	230c      	movs	r3, #12
 8016e0e:	603b      	str	r3, [r7, #0]
 8016e10:	4604      	mov	r4, r0
 8016e12:	4620      	mov	r0, r4
 8016e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e16:	4b0b      	ldr	r3, [pc, #44]	; (8016e44 <__sfp+0x74>)
 8016e18:	6665      	str	r5, [r4, #100]	; 0x64
 8016e1a:	e9c4 5500 	strd	r5, r5, [r4]
 8016e1e:	60a5      	str	r5, [r4, #8]
 8016e20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016e24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016e28:	2208      	movs	r2, #8
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e30:	f7fe fb70 	bl	8015514 <memset>
 8016e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e3c:	e7e9      	b.n	8016e12 <__sfp+0x42>
 8016e3e:	bf00      	nop
 8016e40:	0801b868 	.word	0x0801b868
 8016e44:	ffff0001 	.word	0xffff0001

08016e48 <_fwalk_reent>:
 8016e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e4c:	4680      	mov	r8, r0
 8016e4e:	4689      	mov	r9, r1
 8016e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e54:	2600      	movs	r6, #0
 8016e56:	b914      	cbnz	r4, 8016e5e <_fwalk_reent+0x16>
 8016e58:	4630      	mov	r0, r6
 8016e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016e62:	3f01      	subs	r7, #1
 8016e64:	d501      	bpl.n	8016e6a <_fwalk_reent+0x22>
 8016e66:	6824      	ldr	r4, [r4, #0]
 8016e68:	e7f5      	b.n	8016e56 <_fwalk_reent+0xe>
 8016e6a:	89ab      	ldrh	r3, [r5, #12]
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d907      	bls.n	8016e80 <_fwalk_reent+0x38>
 8016e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e74:	3301      	adds	r3, #1
 8016e76:	d003      	beq.n	8016e80 <_fwalk_reent+0x38>
 8016e78:	4629      	mov	r1, r5
 8016e7a:	4640      	mov	r0, r8
 8016e7c:	47c8      	blx	r9
 8016e7e:	4306      	orrs	r6, r0
 8016e80:	3568      	adds	r5, #104	; 0x68
 8016e82:	e7ee      	b.n	8016e62 <_fwalk_reent+0x1a>

08016e84 <__locale_ctype_ptr_l>:
 8016e84:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016e88:	4770      	bx	lr
	...

08016e8c <_localeconv_r>:
 8016e8c:	4b04      	ldr	r3, [pc, #16]	; (8016ea0 <_localeconv_r+0x14>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	6a18      	ldr	r0, [r3, #32]
 8016e92:	4b04      	ldr	r3, [pc, #16]	; (8016ea4 <_localeconv_r+0x18>)
 8016e94:	2800      	cmp	r0, #0
 8016e96:	bf08      	it	eq
 8016e98:	4618      	moveq	r0, r3
 8016e9a:	30f0      	adds	r0, #240	; 0xf0
 8016e9c:	4770      	bx	lr
 8016e9e:	bf00      	nop
 8016ea0:	20000034 	.word	0x20000034
 8016ea4:	20000098 	.word	0x20000098

08016ea8 <malloc>:
 8016ea8:	4b02      	ldr	r3, [pc, #8]	; (8016eb4 <malloc+0xc>)
 8016eaa:	4601      	mov	r1, r0
 8016eac:	6818      	ldr	r0, [r3, #0]
 8016eae:	f000 bb4d 	b.w	801754c <_malloc_r>
 8016eb2:	bf00      	nop
 8016eb4:	20000034 	.word	0x20000034

08016eb8 <__ascii_mbtowc>:
 8016eb8:	b082      	sub	sp, #8
 8016eba:	b901      	cbnz	r1, 8016ebe <__ascii_mbtowc+0x6>
 8016ebc:	a901      	add	r1, sp, #4
 8016ebe:	b142      	cbz	r2, 8016ed2 <__ascii_mbtowc+0x1a>
 8016ec0:	b14b      	cbz	r3, 8016ed6 <__ascii_mbtowc+0x1e>
 8016ec2:	7813      	ldrb	r3, [r2, #0]
 8016ec4:	600b      	str	r3, [r1, #0]
 8016ec6:	7812      	ldrb	r2, [r2, #0]
 8016ec8:	1c10      	adds	r0, r2, #0
 8016eca:	bf18      	it	ne
 8016ecc:	2001      	movne	r0, #1
 8016ece:	b002      	add	sp, #8
 8016ed0:	4770      	bx	lr
 8016ed2:	4610      	mov	r0, r2
 8016ed4:	e7fb      	b.n	8016ece <__ascii_mbtowc+0x16>
 8016ed6:	f06f 0001 	mvn.w	r0, #1
 8016eda:	e7f8      	b.n	8016ece <__ascii_mbtowc+0x16>

08016edc <_Balloc>:
 8016edc:	b570      	push	{r4, r5, r6, lr}
 8016ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016ee0:	4604      	mov	r4, r0
 8016ee2:	460e      	mov	r6, r1
 8016ee4:	b93d      	cbnz	r5, 8016ef6 <_Balloc+0x1a>
 8016ee6:	2010      	movs	r0, #16
 8016ee8:	f7ff ffde 	bl	8016ea8 <malloc>
 8016eec:	6260      	str	r0, [r4, #36]	; 0x24
 8016eee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ef2:	6005      	str	r5, [r0, #0]
 8016ef4:	60c5      	str	r5, [r0, #12]
 8016ef6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016ef8:	68eb      	ldr	r3, [r5, #12]
 8016efa:	b183      	cbz	r3, 8016f1e <_Balloc+0x42>
 8016efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016f04:	b9b8      	cbnz	r0, 8016f36 <_Balloc+0x5a>
 8016f06:	2101      	movs	r1, #1
 8016f08:	fa01 f506 	lsl.w	r5, r1, r6
 8016f0c:	1d6a      	adds	r2, r5, #5
 8016f0e:	0092      	lsls	r2, r2, #2
 8016f10:	4620      	mov	r0, r4
 8016f12:	f000 fabf 	bl	8017494 <_calloc_r>
 8016f16:	b160      	cbz	r0, 8016f32 <_Balloc+0x56>
 8016f18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016f1c:	e00e      	b.n	8016f3c <_Balloc+0x60>
 8016f1e:	2221      	movs	r2, #33	; 0x21
 8016f20:	2104      	movs	r1, #4
 8016f22:	4620      	mov	r0, r4
 8016f24:	f000 fab6 	bl	8017494 <_calloc_r>
 8016f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f2a:	60e8      	str	r0, [r5, #12]
 8016f2c:	68db      	ldr	r3, [r3, #12]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d1e4      	bne.n	8016efc <_Balloc+0x20>
 8016f32:	2000      	movs	r0, #0
 8016f34:	bd70      	pop	{r4, r5, r6, pc}
 8016f36:	6802      	ldr	r2, [r0, #0]
 8016f38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016f42:	e7f7      	b.n	8016f34 <_Balloc+0x58>

08016f44 <_Bfree>:
 8016f44:	b570      	push	{r4, r5, r6, lr}
 8016f46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016f48:	4606      	mov	r6, r0
 8016f4a:	460d      	mov	r5, r1
 8016f4c:	b93c      	cbnz	r4, 8016f5e <_Bfree+0x1a>
 8016f4e:	2010      	movs	r0, #16
 8016f50:	f7ff ffaa 	bl	8016ea8 <malloc>
 8016f54:	6270      	str	r0, [r6, #36]	; 0x24
 8016f56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016f5a:	6004      	str	r4, [r0, #0]
 8016f5c:	60c4      	str	r4, [r0, #12]
 8016f5e:	b13d      	cbz	r5, 8016f70 <_Bfree+0x2c>
 8016f60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016f62:	686a      	ldr	r2, [r5, #4]
 8016f64:	68db      	ldr	r3, [r3, #12]
 8016f66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016f6a:	6029      	str	r1, [r5, #0]
 8016f6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016f70:	bd70      	pop	{r4, r5, r6, pc}

08016f72 <__multadd>:
 8016f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f76:	690d      	ldr	r5, [r1, #16]
 8016f78:	461f      	mov	r7, r3
 8016f7a:	4606      	mov	r6, r0
 8016f7c:	460c      	mov	r4, r1
 8016f7e:	f101 0c14 	add.w	ip, r1, #20
 8016f82:	2300      	movs	r3, #0
 8016f84:	f8dc 0000 	ldr.w	r0, [ip]
 8016f88:	b281      	uxth	r1, r0
 8016f8a:	fb02 7101 	mla	r1, r2, r1, r7
 8016f8e:	0c0f      	lsrs	r7, r1, #16
 8016f90:	0c00      	lsrs	r0, r0, #16
 8016f92:	fb02 7000 	mla	r0, r2, r0, r7
 8016f96:	b289      	uxth	r1, r1
 8016f98:	3301      	adds	r3, #1
 8016f9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016f9e:	429d      	cmp	r5, r3
 8016fa0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016fa4:	f84c 1b04 	str.w	r1, [ip], #4
 8016fa8:	dcec      	bgt.n	8016f84 <__multadd+0x12>
 8016faa:	b1d7      	cbz	r7, 8016fe2 <__multadd+0x70>
 8016fac:	68a3      	ldr	r3, [r4, #8]
 8016fae:	42ab      	cmp	r3, r5
 8016fb0:	dc12      	bgt.n	8016fd8 <__multadd+0x66>
 8016fb2:	6861      	ldr	r1, [r4, #4]
 8016fb4:	4630      	mov	r0, r6
 8016fb6:	3101      	adds	r1, #1
 8016fb8:	f7ff ff90 	bl	8016edc <_Balloc>
 8016fbc:	6922      	ldr	r2, [r4, #16]
 8016fbe:	3202      	adds	r2, #2
 8016fc0:	f104 010c 	add.w	r1, r4, #12
 8016fc4:	4680      	mov	r8, r0
 8016fc6:	0092      	lsls	r2, r2, #2
 8016fc8:	300c      	adds	r0, #12
 8016fca:	f7fe fa98 	bl	80154fe <memcpy>
 8016fce:	4621      	mov	r1, r4
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	f7ff ffb7 	bl	8016f44 <_Bfree>
 8016fd6:	4644      	mov	r4, r8
 8016fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016fdc:	3501      	adds	r5, #1
 8016fde:	615f      	str	r7, [r3, #20]
 8016fe0:	6125      	str	r5, [r4, #16]
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fe8 <__hi0bits>:
 8016fe8:	0c02      	lsrs	r2, r0, #16
 8016fea:	0412      	lsls	r2, r2, #16
 8016fec:	4603      	mov	r3, r0
 8016fee:	b9b2      	cbnz	r2, 801701e <__hi0bits+0x36>
 8016ff0:	0403      	lsls	r3, r0, #16
 8016ff2:	2010      	movs	r0, #16
 8016ff4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016ff8:	bf04      	itt	eq
 8016ffa:	021b      	lsleq	r3, r3, #8
 8016ffc:	3008      	addeq	r0, #8
 8016ffe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017002:	bf04      	itt	eq
 8017004:	011b      	lsleq	r3, r3, #4
 8017006:	3004      	addeq	r0, #4
 8017008:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801700c:	bf04      	itt	eq
 801700e:	009b      	lsleq	r3, r3, #2
 8017010:	3002      	addeq	r0, #2
 8017012:	2b00      	cmp	r3, #0
 8017014:	db06      	blt.n	8017024 <__hi0bits+0x3c>
 8017016:	005b      	lsls	r3, r3, #1
 8017018:	d503      	bpl.n	8017022 <__hi0bits+0x3a>
 801701a:	3001      	adds	r0, #1
 801701c:	4770      	bx	lr
 801701e:	2000      	movs	r0, #0
 8017020:	e7e8      	b.n	8016ff4 <__hi0bits+0xc>
 8017022:	2020      	movs	r0, #32
 8017024:	4770      	bx	lr

08017026 <__lo0bits>:
 8017026:	6803      	ldr	r3, [r0, #0]
 8017028:	f013 0207 	ands.w	r2, r3, #7
 801702c:	4601      	mov	r1, r0
 801702e:	d00b      	beq.n	8017048 <__lo0bits+0x22>
 8017030:	07da      	lsls	r2, r3, #31
 8017032:	d423      	bmi.n	801707c <__lo0bits+0x56>
 8017034:	0798      	lsls	r0, r3, #30
 8017036:	bf49      	itett	mi
 8017038:	085b      	lsrmi	r3, r3, #1
 801703a:	089b      	lsrpl	r3, r3, #2
 801703c:	2001      	movmi	r0, #1
 801703e:	600b      	strmi	r3, [r1, #0]
 8017040:	bf5c      	itt	pl
 8017042:	600b      	strpl	r3, [r1, #0]
 8017044:	2002      	movpl	r0, #2
 8017046:	4770      	bx	lr
 8017048:	b298      	uxth	r0, r3
 801704a:	b9a8      	cbnz	r0, 8017078 <__lo0bits+0x52>
 801704c:	0c1b      	lsrs	r3, r3, #16
 801704e:	2010      	movs	r0, #16
 8017050:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017054:	bf04      	itt	eq
 8017056:	0a1b      	lsreq	r3, r3, #8
 8017058:	3008      	addeq	r0, #8
 801705a:	071a      	lsls	r2, r3, #28
 801705c:	bf04      	itt	eq
 801705e:	091b      	lsreq	r3, r3, #4
 8017060:	3004      	addeq	r0, #4
 8017062:	079a      	lsls	r2, r3, #30
 8017064:	bf04      	itt	eq
 8017066:	089b      	lsreq	r3, r3, #2
 8017068:	3002      	addeq	r0, #2
 801706a:	07da      	lsls	r2, r3, #31
 801706c:	d402      	bmi.n	8017074 <__lo0bits+0x4e>
 801706e:	085b      	lsrs	r3, r3, #1
 8017070:	d006      	beq.n	8017080 <__lo0bits+0x5a>
 8017072:	3001      	adds	r0, #1
 8017074:	600b      	str	r3, [r1, #0]
 8017076:	4770      	bx	lr
 8017078:	4610      	mov	r0, r2
 801707a:	e7e9      	b.n	8017050 <__lo0bits+0x2a>
 801707c:	2000      	movs	r0, #0
 801707e:	4770      	bx	lr
 8017080:	2020      	movs	r0, #32
 8017082:	4770      	bx	lr

08017084 <__i2b>:
 8017084:	b510      	push	{r4, lr}
 8017086:	460c      	mov	r4, r1
 8017088:	2101      	movs	r1, #1
 801708a:	f7ff ff27 	bl	8016edc <_Balloc>
 801708e:	2201      	movs	r2, #1
 8017090:	6144      	str	r4, [r0, #20]
 8017092:	6102      	str	r2, [r0, #16]
 8017094:	bd10      	pop	{r4, pc}

08017096 <__multiply>:
 8017096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801709a:	4614      	mov	r4, r2
 801709c:	690a      	ldr	r2, [r1, #16]
 801709e:	6923      	ldr	r3, [r4, #16]
 80170a0:	429a      	cmp	r2, r3
 80170a2:	bfb8      	it	lt
 80170a4:	460b      	movlt	r3, r1
 80170a6:	4688      	mov	r8, r1
 80170a8:	bfbc      	itt	lt
 80170aa:	46a0      	movlt	r8, r4
 80170ac:	461c      	movlt	r4, r3
 80170ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80170b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80170b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80170ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80170be:	eb07 0609 	add.w	r6, r7, r9
 80170c2:	42b3      	cmp	r3, r6
 80170c4:	bfb8      	it	lt
 80170c6:	3101      	addlt	r1, #1
 80170c8:	f7ff ff08 	bl	8016edc <_Balloc>
 80170cc:	f100 0514 	add.w	r5, r0, #20
 80170d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80170d4:	462b      	mov	r3, r5
 80170d6:	2200      	movs	r2, #0
 80170d8:	4573      	cmp	r3, lr
 80170da:	d316      	bcc.n	801710a <__multiply+0x74>
 80170dc:	f104 0214 	add.w	r2, r4, #20
 80170e0:	f108 0114 	add.w	r1, r8, #20
 80170e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80170e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	9b00      	ldr	r3, [sp, #0]
 80170f0:	9201      	str	r2, [sp, #4]
 80170f2:	4293      	cmp	r3, r2
 80170f4:	d80c      	bhi.n	8017110 <__multiply+0x7a>
 80170f6:	2e00      	cmp	r6, #0
 80170f8:	dd03      	ble.n	8017102 <__multiply+0x6c>
 80170fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d05d      	beq.n	80171be <__multiply+0x128>
 8017102:	6106      	str	r6, [r0, #16]
 8017104:	b003      	add	sp, #12
 8017106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801710a:	f843 2b04 	str.w	r2, [r3], #4
 801710e:	e7e3      	b.n	80170d8 <__multiply+0x42>
 8017110:	f8b2 b000 	ldrh.w	fp, [r2]
 8017114:	f1bb 0f00 	cmp.w	fp, #0
 8017118:	d023      	beq.n	8017162 <__multiply+0xcc>
 801711a:	4689      	mov	r9, r1
 801711c:	46ac      	mov	ip, r5
 801711e:	f04f 0800 	mov.w	r8, #0
 8017122:	f859 4b04 	ldr.w	r4, [r9], #4
 8017126:	f8dc a000 	ldr.w	sl, [ip]
 801712a:	b2a3      	uxth	r3, r4
 801712c:	fa1f fa8a 	uxth.w	sl, sl
 8017130:	fb0b a303 	mla	r3, fp, r3, sl
 8017134:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017138:	f8dc 4000 	ldr.w	r4, [ip]
 801713c:	4443      	add	r3, r8
 801713e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017142:	fb0b 840a 	mla	r4, fp, sl, r8
 8017146:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801714a:	46e2      	mov	sl, ip
 801714c:	b29b      	uxth	r3, r3
 801714e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017152:	454f      	cmp	r7, r9
 8017154:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017158:	f84a 3b04 	str.w	r3, [sl], #4
 801715c:	d82b      	bhi.n	80171b6 <__multiply+0x120>
 801715e:	f8cc 8004 	str.w	r8, [ip, #4]
 8017162:	9b01      	ldr	r3, [sp, #4]
 8017164:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017168:	3204      	adds	r2, #4
 801716a:	f1ba 0f00 	cmp.w	sl, #0
 801716e:	d020      	beq.n	80171b2 <__multiply+0x11c>
 8017170:	682b      	ldr	r3, [r5, #0]
 8017172:	4689      	mov	r9, r1
 8017174:	46a8      	mov	r8, r5
 8017176:	f04f 0b00 	mov.w	fp, #0
 801717a:	f8b9 c000 	ldrh.w	ip, [r9]
 801717e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017182:	fb0a 440c 	mla	r4, sl, ip, r4
 8017186:	445c      	add	r4, fp
 8017188:	46c4      	mov	ip, r8
 801718a:	b29b      	uxth	r3, r3
 801718c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017190:	f84c 3b04 	str.w	r3, [ip], #4
 8017194:	f859 3b04 	ldr.w	r3, [r9], #4
 8017198:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801719c:	0c1b      	lsrs	r3, r3, #16
 801719e:	fb0a b303 	mla	r3, sl, r3, fp
 80171a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80171a6:	454f      	cmp	r7, r9
 80171a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80171ac:	d805      	bhi.n	80171ba <__multiply+0x124>
 80171ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80171b2:	3504      	adds	r5, #4
 80171b4:	e79b      	b.n	80170ee <__multiply+0x58>
 80171b6:	46d4      	mov	ip, sl
 80171b8:	e7b3      	b.n	8017122 <__multiply+0x8c>
 80171ba:	46e0      	mov	r8, ip
 80171bc:	e7dd      	b.n	801717a <__multiply+0xe4>
 80171be:	3e01      	subs	r6, #1
 80171c0:	e799      	b.n	80170f6 <__multiply+0x60>
	...

080171c4 <__pow5mult>:
 80171c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171c8:	4615      	mov	r5, r2
 80171ca:	f012 0203 	ands.w	r2, r2, #3
 80171ce:	4606      	mov	r6, r0
 80171d0:	460f      	mov	r7, r1
 80171d2:	d007      	beq.n	80171e4 <__pow5mult+0x20>
 80171d4:	3a01      	subs	r2, #1
 80171d6:	4c21      	ldr	r4, [pc, #132]	; (801725c <__pow5mult+0x98>)
 80171d8:	2300      	movs	r3, #0
 80171da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80171de:	f7ff fec8 	bl	8016f72 <__multadd>
 80171e2:	4607      	mov	r7, r0
 80171e4:	10ad      	asrs	r5, r5, #2
 80171e6:	d035      	beq.n	8017254 <__pow5mult+0x90>
 80171e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80171ea:	b93c      	cbnz	r4, 80171fc <__pow5mult+0x38>
 80171ec:	2010      	movs	r0, #16
 80171ee:	f7ff fe5b 	bl	8016ea8 <malloc>
 80171f2:	6270      	str	r0, [r6, #36]	; 0x24
 80171f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80171f8:	6004      	str	r4, [r0, #0]
 80171fa:	60c4      	str	r4, [r0, #12]
 80171fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017204:	b94c      	cbnz	r4, 801721a <__pow5mult+0x56>
 8017206:	f240 2171 	movw	r1, #625	; 0x271
 801720a:	4630      	mov	r0, r6
 801720c:	f7ff ff3a 	bl	8017084 <__i2b>
 8017210:	2300      	movs	r3, #0
 8017212:	f8c8 0008 	str.w	r0, [r8, #8]
 8017216:	4604      	mov	r4, r0
 8017218:	6003      	str	r3, [r0, #0]
 801721a:	f04f 0800 	mov.w	r8, #0
 801721e:	07eb      	lsls	r3, r5, #31
 8017220:	d50a      	bpl.n	8017238 <__pow5mult+0x74>
 8017222:	4639      	mov	r1, r7
 8017224:	4622      	mov	r2, r4
 8017226:	4630      	mov	r0, r6
 8017228:	f7ff ff35 	bl	8017096 <__multiply>
 801722c:	4639      	mov	r1, r7
 801722e:	4681      	mov	r9, r0
 8017230:	4630      	mov	r0, r6
 8017232:	f7ff fe87 	bl	8016f44 <_Bfree>
 8017236:	464f      	mov	r7, r9
 8017238:	106d      	asrs	r5, r5, #1
 801723a:	d00b      	beq.n	8017254 <__pow5mult+0x90>
 801723c:	6820      	ldr	r0, [r4, #0]
 801723e:	b938      	cbnz	r0, 8017250 <__pow5mult+0x8c>
 8017240:	4622      	mov	r2, r4
 8017242:	4621      	mov	r1, r4
 8017244:	4630      	mov	r0, r6
 8017246:	f7ff ff26 	bl	8017096 <__multiply>
 801724a:	6020      	str	r0, [r4, #0]
 801724c:	f8c0 8000 	str.w	r8, [r0]
 8017250:	4604      	mov	r4, r0
 8017252:	e7e4      	b.n	801721e <__pow5mult+0x5a>
 8017254:	4638      	mov	r0, r7
 8017256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801725a:	bf00      	nop
 801725c:	0801ba10 	.word	0x0801ba10

08017260 <__lshift>:
 8017260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017264:	460c      	mov	r4, r1
 8017266:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801726a:	6923      	ldr	r3, [r4, #16]
 801726c:	6849      	ldr	r1, [r1, #4]
 801726e:	eb0a 0903 	add.w	r9, sl, r3
 8017272:	68a3      	ldr	r3, [r4, #8]
 8017274:	4607      	mov	r7, r0
 8017276:	4616      	mov	r6, r2
 8017278:	f109 0501 	add.w	r5, r9, #1
 801727c:	42ab      	cmp	r3, r5
 801727e:	db32      	blt.n	80172e6 <__lshift+0x86>
 8017280:	4638      	mov	r0, r7
 8017282:	f7ff fe2b 	bl	8016edc <_Balloc>
 8017286:	2300      	movs	r3, #0
 8017288:	4680      	mov	r8, r0
 801728a:	f100 0114 	add.w	r1, r0, #20
 801728e:	461a      	mov	r2, r3
 8017290:	4553      	cmp	r3, sl
 8017292:	db2b      	blt.n	80172ec <__lshift+0x8c>
 8017294:	6920      	ldr	r0, [r4, #16]
 8017296:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801729a:	f104 0314 	add.w	r3, r4, #20
 801729e:	f016 021f 	ands.w	r2, r6, #31
 80172a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80172a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80172aa:	d025      	beq.n	80172f8 <__lshift+0x98>
 80172ac:	f1c2 0e20 	rsb	lr, r2, #32
 80172b0:	2000      	movs	r0, #0
 80172b2:	681e      	ldr	r6, [r3, #0]
 80172b4:	468a      	mov	sl, r1
 80172b6:	4096      	lsls	r6, r2
 80172b8:	4330      	orrs	r0, r6
 80172ba:	f84a 0b04 	str.w	r0, [sl], #4
 80172be:	f853 0b04 	ldr.w	r0, [r3], #4
 80172c2:	459c      	cmp	ip, r3
 80172c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80172c8:	d814      	bhi.n	80172f4 <__lshift+0x94>
 80172ca:	6048      	str	r0, [r1, #4]
 80172cc:	b108      	cbz	r0, 80172d2 <__lshift+0x72>
 80172ce:	f109 0502 	add.w	r5, r9, #2
 80172d2:	3d01      	subs	r5, #1
 80172d4:	4638      	mov	r0, r7
 80172d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80172da:	4621      	mov	r1, r4
 80172dc:	f7ff fe32 	bl	8016f44 <_Bfree>
 80172e0:	4640      	mov	r0, r8
 80172e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172e6:	3101      	adds	r1, #1
 80172e8:	005b      	lsls	r3, r3, #1
 80172ea:	e7c7      	b.n	801727c <__lshift+0x1c>
 80172ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80172f0:	3301      	adds	r3, #1
 80172f2:	e7cd      	b.n	8017290 <__lshift+0x30>
 80172f4:	4651      	mov	r1, sl
 80172f6:	e7dc      	b.n	80172b2 <__lshift+0x52>
 80172f8:	3904      	subs	r1, #4
 80172fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80172fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8017302:	459c      	cmp	ip, r3
 8017304:	d8f9      	bhi.n	80172fa <__lshift+0x9a>
 8017306:	e7e4      	b.n	80172d2 <__lshift+0x72>

08017308 <__mcmp>:
 8017308:	6903      	ldr	r3, [r0, #16]
 801730a:	690a      	ldr	r2, [r1, #16]
 801730c:	1a9b      	subs	r3, r3, r2
 801730e:	b530      	push	{r4, r5, lr}
 8017310:	d10c      	bne.n	801732c <__mcmp+0x24>
 8017312:	0092      	lsls	r2, r2, #2
 8017314:	3014      	adds	r0, #20
 8017316:	3114      	adds	r1, #20
 8017318:	1884      	adds	r4, r0, r2
 801731a:	4411      	add	r1, r2
 801731c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017320:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017324:	4295      	cmp	r5, r2
 8017326:	d003      	beq.n	8017330 <__mcmp+0x28>
 8017328:	d305      	bcc.n	8017336 <__mcmp+0x2e>
 801732a:	2301      	movs	r3, #1
 801732c:	4618      	mov	r0, r3
 801732e:	bd30      	pop	{r4, r5, pc}
 8017330:	42a0      	cmp	r0, r4
 8017332:	d3f3      	bcc.n	801731c <__mcmp+0x14>
 8017334:	e7fa      	b.n	801732c <__mcmp+0x24>
 8017336:	f04f 33ff 	mov.w	r3, #4294967295
 801733a:	e7f7      	b.n	801732c <__mcmp+0x24>

0801733c <__mdiff>:
 801733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017340:	460d      	mov	r5, r1
 8017342:	4607      	mov	r7, r0
 8017344:	4611      	mov	r1, r2
 8017346:	4628      	mov	r0, r5
 8017348:	4614      	mov	r4, r2
 801734a:	f7ff ffdd 	bl	8017308 <__mcmp>
 801734e:	1e06      	subs	r6, r0, #0
 8017350:	d108      	bne.n	8017364 <__mdiff+0x28>
 8017352:	4631      	mov	r1, r6
 8017354:	4638      	mov	r0, r7
 8017356:	f7ff fdc1 	bl	8016edc <_Balloc>
 801735a:	2301      	movs	r3, #1
 801735c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017364:	bfa4      	itt	ge
 8017366:	4623      	movge	r3, r4
 8017368:	462c      	movge	r4, r5
 801736a:	4638      	mov	r0, r7
 801736c:	6861      	ldr	r1, [r4, #4]
 801736e:	bfa6      	itte	ge
 8017370:	461d      	movge	r5, r3
 8017372:	2600      	movge	r6, #0
 8017374:	2601      	movlt	r6, #1
 8017376:	f7ff fdb1 	bl	8016edc <_Balloc>
 801737a:	692b      	ldr	r3, [r5, #16]
 801737c:	60c6      	str	r6, [r0, #12]
 801737e:	6926      	ldr	r6, [r4, #16]
 8017380:	f105 0914 	add.w	r9, r5, #20
 8017384:	f104 0214 	add.w	r2, r4, #20
 8017388:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801738c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017390:	f100 0514 	add.w	r5, r0, #20
 8017394:	f04f 0e00 	mov.w	lr, #0
 8017398:	f852 ab04 	ldr.w	sl, [r2], #4
 801739c:	f859 4b04 	ldr.w	r4, [r9], #4
 80173a0:	fa1e f18a 	uxtah	r1, lr, sl
 80173a4:	b2a3      	uxth	r3, r4
 80173a6:	1ac9      	subs	r1, r1, r3
 80173a8:	0c23      	lsrs	r3, r4, #16
 80173aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80173ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80173b2:	b289      	uxth	r1, r1
 80173b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80173b8:	45c8      	cmp	r8, r9
 80173ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80173be:	4694      	mov	ip, r2
 80173c0:	f845 3b04 	str.w	r3, [r5], #4
 80173c4:	d8e8      	bhi.n	8017398 <__mdiff+0x5c>
 80173c6:	45bc      	cmp	ip, r7
 80173c8:	d304      	bcc.n	80173d4 <__mdiff+0x98>
 80173ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80173ce:	b183      	cbz	r3, 80173f2 <__mdiff+0xb6>
 80173d0:	6106      	str	r6, [r0, #16]
 80173d2:	e7c5      	b.n	8017360 <__mdiff+0x24>
 80173d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80173d8:	fa1e f381 	uxtah	r3, lr, r1
 80173dc:	141a      	asrs	r2, r3, #16
 80173de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80173ec:	f845 3b04 	str.w	r3, [r5], #4
 80173f0:	e7e9      	b.n	80173c6 <__mdiff+0x8a>
 80173f2:	3e01      	subs	r6, #1
 80173f4:	e7e9      	b.n	80173ca <__mdiff+0x8e>

080173f6 <__d2b>:
 80173f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80173fa:	460e      	mov	r6, r1
 80173fc:	2101      	movs	r1, #1
 80173fe:	ec59 8b10 	vmov	r8, r9, d0
 8017402:	4615      	mov	r5, r2
 8017404:	f7ff fd6a 	bl	8016edc <_Balloc>
 8017408:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801740c:	4607      	mov	r7, r0
 801740e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017412:	bb34      	cbnz	r4, 8017462 <__d2b+0x6c>
 8017414:	9301      	str	r3, [sp, #4]
 8017416:	f1b8 0300 	subs.w	r3, r8, #0
 801741a:	d027      	beq.n	801746c <__d2b+0x76>
 801741c:	a802      	add	r0, sp, #8
 801741e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017422:	f7ff fe00 	bl	8017026 <__lo0bits>
 8017426:	9900      	ldr	r1, [sp, #0]
 8017428:	b1f0      	cbz	r0, 8017468 <__d2b+0x72>
 801742a:	9a01      	ldr	r2, [sp, #4]
 801742c:	f1c0 0320 	rsb	r3, r0, #32
 8017430:	fa02 f303 	lsl.w	r3, r2, r3
 8017434:	430b      	orrs	r3, r1
 8017436:	40c2      	lsrs	r2, r0
 8017438:	617b      	str	r3, [r7, #20]
 801743a:	9201      	str	r2, [sp, #4]
 801743c:	9b01      	ldr	r3, [sp, #4]
 801743e:	61bb      	str	r3, [r7, #24]
 8017440:	2b00      	cmp	r3, #0
 8017442:	bf14      	ite	ne
 8017444:	2102      	movne	r1, #2
 8017446:	2101      	moveq	r1, #1
 8017448:	6139      	str	r1, [r7, #16]
 801744a:	b1c4      	cbz	r4, 801747e <__d2b+0x88>
 801744c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017450:	4404      	add	r4, r0
 8017452:	6034      	str	r4, [r6, #0]
 8017454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017458:	6028      	str	r0, [r5, #0]
 801745a:	4638      	mov	r0, r7
 801745c:	b003      	add	sp, #12
 801745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017466:	e7d5      	b.n	8017414 <__d2b+0x1e>
 8017468:	6179      	str	r1, [r7, #20]
 801746a:	e7e7      	b.n	801743c <__d2b+0x46>
 801746c:	a801      	add	r0, sp, #4
 801746e:	f7ff fdda 	bl	8017026 <__lo0bits>
 8017472:	9b01      	ldr	r3, [sp, #4]
 8017474:	617b      	str	r3, [r7, #20]
 8017476:	2101      	movs	r1, #1
 8017478:	6139      	str	r1, [r7, #16]
 801747a:	3020      	adds	r0, #32
 801747c:	e7e5      	b.n	801744a <__d2b+0x54>
 801747e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017486:	6030      	str	r0, [r6, #0]
 8017488:	6918      	ldr	r0, [r3, #16]
 801748a:	f7ff fdad 	bl	8016fe8 <__hi0bits>
 801748e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017492:	e7e1      	b.n	8017458 <__d2b+0x62>

08017494 <_calloc_r>:
 8017494:	b538      	push	{r3, r4, r5, lr}
 8017496:	fb02 f401 	mul.w	r4, r2, r1
 801749a:	4621      	mov	r1, r4
 801749c:	f000 f856 	bl	801754c <_malloc_r>
 80174a0:	4605      	mov	r5, r0
 80174a2:	b118      	cbz	r0, 80174ac <_calloc_r+0x18>
 80174a4:	4622      	mov	r2, r4
 80174a6:	2100      	movs	r1, #0
 80174a8:	f7fe f834 	bl	8015514 <memset>
 80174ac:	4628      	mov	r0, r5
 80174ae:	bd38      	pop	{r3, r4, r5, pc}

080174b0 <_free_r>:
 80174b0:	b538      	push	{r3, r4, r5, lr}
 80174b2:	4605      	mov	r5, r0
 80174b4:	2900      	cmp	r1, #0
 80174b6:	d045      	beq.n	8017544 <_free_r+0x94>
 80174b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174bc:	1f0c      	subs	r4, r1, #4
 80174be:	2b00      	cmp	r3, #0
 80174c0:	bfb8      	it	lt
 80174c2:	18e4      	addlt	r4, r4, r3
 80174c4:	f000 fdb1 	bl	801802a <__malloc_lock>
 80174c8:	4a1f      	ldr	r2, [pc, #124]	; (8017548 <_free_r+0x98>)
 80174ca:	6813      	ldr	r3, [r2, #0]
 80174cc:	4610      	mov	r0, r2
 80174ce:	b933      	cbnz	r3, 80174de <_free_r+0x2e>
 80174d0:	6063      	str	r3, [r4, #4]
 80174d2:	6014      	str	r4, [r2, #0]
 80174d4:	4628      	mov	r0, r5
 80174d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80174da:	f000 bda7 	b.w	801802c <__malloc_unlock>
 80174de:	42a3      	cmp	r3, r4
 80174e0:	d90c      	bls.n	80174fc <_free_r+0x4c>
 80174e2:	6821      	ldr	r1, [r4, #0]
 80174e4:	1862      	adds	r2, r4, r1
 80174e6:	4293      	cmp	r3, r2
 80174e8:	bf04      	itt	eq
 80174ea:	681a      	ldreq	r2, [r3, #0]
 80174ec:	685b      	ldreq	r3, [r3, #4]
 80174ee:	6063      	str	r3, [r4, #4]
 80174f0:	bf04      	itt	eq
 80174f2:	1852      	addeq	r2, r2, r1
 80174f4:	6022      	streq	r2, [r4, #0]
 80174f6:	6004      	str	r4, [r0, #0]
 80174f8:	e7ec      	b.n	80174d4 <_free_r+0x24>
 80174fa:	4613      	mov	r3, r2
 80174fc:	685a      	ldr	r2, [r3, #4]
 80174fe:	b10a      	cbz	r2, 8017504 <_free_r+0x54>
 8017500:	42a2      	cmp	r2, r4
 8017502:	d9fa      	bls.n	80174fa <_free_r+0x4a>
 8017504:	6819      	ldr	r1, [r3, #0]
 8017506:	1858      	adds	r0, r3, r1
 8017508:	42a0      	cmp	r0, r4
 801750a:	d10b      	bne.n	8017524 <_free_r+0x74>
 801750c:	6820      	ldr	r0, [r4, #0]
 801750e:	4401      	add	r1, r0
 8017510:	1858      	adds	r0, r3, r1
 8017512:	4282      	cmp	r2, r0
 8017514:	6019      	str	r1, [r3, #0]
 8017516:	d1dd      	bne.n	80174d4 <_free_r+0x24>
 8017518:	6810      	ldr	r0, [r2, #0]
 801751a:	6852      	ldr	r2, [r2, #4]
 801751c:	605a      	str	r2, [r3, #4]
 801751e:	4401      	add	r1, r0
 8017520:	6019      	str	r1, [r3, #0]
 8017522:	e7d7      	b.n	80174d4 <_free_r+0x24>
 8017524:	d902      	bls.n	801752c <_free_r+0x7c>
 8017526:	230c      	movs	r3, #12
 8017528:	602b      	str	r3, [r5, #0]
 801752a:	e7d3      	b.n	80174d4 <_free_r+0x24>
 801752c:	6820      	ldr	r0, [r4, #0]
 801752e:	1821      	adds	r1, r4, r0
 8017530:	428a      	cmp	r2, r1
 8017532:	bf04      	itt	eq
 8017534:	6811      	ldreq	r1, [r2, #0]
 8017536:	6852      	ldreq	r2, [r2, #4]
 8017538:	6062      	str	r2, [r4, #4]
 801753a:	bf04      	itt	eq
 801753c:	1809      	addeq	r1, r1, r0
 801753e:	6021      	streq	r1, [r4, #0]
 8017540:	605c      	str	r4, [r3, #4]
 8017542:	e7c7      	b.n	80174d4 <_free_r+0x24>
 8017544:	bd38      	pop	{r3, r4, r5, pc}
 8017546:	bf00      	nop
 8017548:	200008f4 	.word	0x200008f4

0801754c <_malloc_r>:
 801754c:	b570      	push	{r4, r5, r6, lr}
 801754e:	1ccd      	adds	r5, r1, #3
 8017550:	f025 0503 	bic.w	r5, r5, #3
 8017554:	3508      	adds	r5, #8
 8017556:	2d0c      	cmp	r5, #12
 8017558:	bf38      	it	cc
 801755a:	250c      	movcc	r5, #12
 801755c:	2d00      	cmp	r5, #0
 801755e:	4606      	mov	r6, r0
 8017560:	db01      	blt.n	8017566 <_malloc_r+0x1a>
 8017562:	42a9      	cmp	r1, r5
 8017564:	d903      	bls.n	801756e <_malloc_r+0x22>
 8017566:	230c      	movs	r3, #12
 8017568:	6033      	str	r3, [r6, #0]
 801756a:	2000      	movs	r0, #0
 801756c:	bd70      	pop	{r4, r5, r6, pc}
 801756e:	f000 fd5c 	bl	801802a <__malloc_lock>
 8017572:	4a21      	ldr	r2, [pc, #132]	; (80175f8 <_malloc_r+0xac>)
 8017574:	6814      	ldr	r4, [r2, #0]
 8017576:	4621      	mov	r1, r4
 8017578:	b991      	cbnz	r1, 80175a0 <_malloc_r+0x54>
 801757a:	4c20      	ldr	r4, [pc, #128]	; (80175fc <_malloc_r+0xb0>)
 801757c:	6823      	ldr	r3, [r4, #0]
 801757e:	b91b      	cbnz	r3, 8017588 <_malloc_r+0x3c>
 8017580:	4630      	mov	r0, r6
 8017582:	f000 facf 	bl	8017b24 <_sbrk_r>
 8017586:	6020      	str	r0, [r4, #0]
 8017588:	4629      	mov	r1, r5
 801758a:	4630      	mov	r0, r6
 801758c:	f000 faca 	bl	8017b24 <_sbrk_r>
 8017590:	1c43      	adds	r3, r0, #1
 8017592:	d124      	bne.n	80175de <_malloc_r+0x92>
 8017594:	230c      	movs	r3, #12
 8017596:	6033      	str	r3, [r6, #0]
 8017598:	4630      	mov	r0, r6
 801759a:	f000 fd47 	bl	801802c <__malloc_unlock>
 801759e:	e7e4      	b.n	801756a <_malloc_r+0x1e>
 80175a0:	680b      	ldr	r3, [r1, #0]
 80175a2:	1b5b      	subs	r3, r3, r5
 80175a4:	d418      	bmi.n	80175d8 <_malloc_r+0x8c>
 80175a6:	2b0b      	cmp	r3, #11
 80175a8:	d90f      	bls.n	80175ca <_malloc_r+0x7e>
 80175aa:	600b      	str	r3, [r1, #0]
 80175ac:	50cd      	str	r5, [r1, r3]
 80175ae:	18cc      	adds	r4, r1, r3
 80175b0:	4630      	mov	r0, r6
 80175b2:	f000 fd3b 	bl	801802c <__malloc_unlock>
 80175b6:	f104 000b 	add.w	r0, r4, #11
 80175ba:	1d23      	adds	r3, r4, #4
 80175bc:	f020 0007 	bic.w	r0, r0, #7
 80175c0:	1ac3      	subs	r3, r0, r3
 80175c2:	d0d3      	beq.n	801756c <_malloc_r+0x20>
 80175c4:	425a      	negs	r2, r3
 80175c6:	50e2      	str	r2, [r4, r3]
 80175c8:	e7d0      	b.n	801756c <_malloc_r+0x20>
 80175ca:	428c      	cmp	r4, r1
 80175cc:	684b      	ldr	r3, [r1, #4]
 80175ce:	bf16      	itet	ne
 80175d0:	6063      	strne	r3, [r4, #4]
 80175d2:	6013      	streq	r3, [r2, #0]
 80175d4:	460c      	movne	r4, r1
 80175d6:	e7eb      	b.n	80175b0 <_malloc_r+0x64>
 80175d8:	460c      	mov	r4, r1
 80175da:	6849      	ldr	r1, [r1, #4]
 80175dc:	e7cc      	b.n	8017578 <_malloc_r+0x2c>
 80175de:	1cc4      	adds	r4, r0, #3
 80175e0:	f024 0403 	bic.w	r4, r4, #3
 80175e4:	42a0      	cmp	r0, r4
 80175e6:	d005      	beq.n	80175f4 <_malloc_r+0xa8>
 80175e8:	1a21      	subs	r1, r4, r0
 80175ea:	4630      	mov	r0, r6
 80175ec:	f000 fa9a 	bl	8017b24 <_sbrk_r>
 80175f0:	3001      	adds	r0, #1
 80175f2:	d0cf      	beq.n	8017594 <_malloc_r+0x48>
 80175f4:	6025      	str	r5, [r4, #0]
 80175f6:	e7db      	b.n	80175b0 <_malloc_r+0x64>
 80175f8:	200008f4 	.word	0x200008f4
 80175fc:	200008f8 	.word	0x200008f8

08017600 <__ssputs_r>:
 8017600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017604:	688e      	ldr	r6, [r1, #8]
 8017606:	429e      	cmp	r6, r3
 8017608:	4682      	mov	sl, r0
 801760a:	460c      	mov	r4, r1
 801760c:	4690      	mov	r8, r2
 801760e:	4699      	mov	r9, r3
 8017610:	d837      	bhi.n	8017682 <__ssputs_r+0x82>
 8017612:	898a      	ldrh	r2, [r1, #12]
 8017614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017618:	d031      	beq.n	801767e <__ssputs_r+0x7e>
 801761a:	6825      	ldr	r5, [r4, #0]
 801761c:	6909      	ldr	r1, [r1, #16]
 801761e:	1a6f      	subs	r7, r5, r1
 8017620:	6965      	ldr	r5, [r4, #20]
 8017622:	2302      	movs	r3, #2
 8017624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017628:	fb95 f5f3 	sdiv	r5, r5, r3
 801762c:	f109 0301 	add.w	r3, r9, #1
 8017630:	443b      	add	r3, r7
 8017632:	429d      	cmp	r5, r3
 8017634:	bf38      	it	cc
 8017636:	461d      	movcc	r5, r3
 8017638:	0553      	lsls	r3, r2, #21
 801763a:	d530      	bpl.n	801769e <__ssputs_r+0x9e>
 801763c:	4629      	mov	r1, r5
 801763e:	f7ff ff85 	bl	801754c <_malloc_r>
 8017642:	4606      	mov	r6, r0
 8017644:	b950      	cbnz	r0, 801765c <__ssputs_r+0x5c>
 8017646:	230c      	movs	r3, #12
 8017648:	f8ca 3000 	str.w	r3, [sl]
 801764c:	89a3      	ldrh	r3, [r4, #12]
 801764e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017652:	81a3      	strh	r3, [r4, #12]
 8017654:	f04f 30ff 	mov.w	r0, #4294967295
 8017658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801765c:	463a      	mov	r2, r7
 801765e:	6921      	ldr	r1, [r4, #16]
 8017660:	f7fd ff4d 	bl	80154fe <memcpy>
 8017664:	89a3      	ldrh	r3, [r4, #12]
 8017666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801766e:	81a3      	strh	r3, [r4, #12]
 8017670:	6126      	str	r6, [r4, #16]
 8017672:	6165      	str	r5, [r4, #20]
 8017674:	443e      	add	r6, r7
 8017676:	1bed      	subs	r5, r5, r7
 8017678:	6026      	str	r6, [r4, #0]
 801767a:	60a5      	str	r5, [r4, #8]
 801767c:	464e      	mov	r6, r9
 801767e:	454e      	cmp	r6, r9
 8017680:	d900      	bls.n	8017684 <__ssputs_r+0x84>
 8017682:	464e      	mov	r6, r9
 8017684:	4632      	mov	r2, r6
 8017686:	4641      	mov	r1, r8
 8017688:	6820      	ldr	r0, [r4, #0]
 801768a:	f000 fcb5 	bl	8017ff8 <memmove>
 801768e:	68a3      	ldr	r3, [r4, #8]
 8017690:	1b9b      	subs	r3, r3, r6
 8017692:	60a3      	str	r3, [r4, #8]
 8017694:	6823      	ldr	r3, [r4, #0]
 8017696:	441e      	add	r6, r3
 8017698:	6026      	str	r6, [r4, #0]
 801769a:	2000      	movs	r0, #0
 801769c:	e7dc      	b.n	8017658 <__ssputs_r+0x58>
 801769e:	462a      	mov	r2, r5
 80176a0:	f000 fcc5 	bl	801802e <_realloc_r>
 80176a4:	4606      	mov	r6, r0
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d1e2      	bne.n	8017670 <__ssputs_r+0x70>
 80176aa:	6921      	ldr	r1, [r4, #16]
 80176ac:	4650      	mov	r0, sl
 80176ae:	f7ff feff 	bl	80174b0 <_free_r>
 80176b2:	e7c8      	b.n	8017646 <__ssputs_r+0x46>

080176b4 <_svfiprintf_r>:
 80176b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b8:	461d      	mov	r5, r3
 80176ba:	898b      	ldrh	r3, [r1, #12]
 80176bc:	061f      	lsls	r7, r3, #24
 80176be:	b09d      	sub	sp, #116	; 0x74
 80176c0:	4680      	mov	r8, r0
 80176c2:	460c      	mov	r4, r1
 80176c4:	4616      	mov	r6, r2
 80176c6:	d50f      	bpl.n	80176e8 <_svfiprintf_r+0x34>
 80176c8:	690b      	ldr	r3, [r1, #16]
 80176ca:	b96b      	cbnz	r3, 80176e8 <_svfiprintf_r+0x34>
 80176cc:	2140      	movs	r1, #64	; 0x40
 80176ce:	f7ff ff3d 	bl	801754c <_malloc_r>
 80176d2:	6020      	str	r0, [r4, #0]
 80176d4:	6120      	str	r0, [r4, #16]
 80176d6:	b928      	cbnz	r0, 80176e4 <_svfiprintf_r+0x30>
 80176d8:	230c      	movs	r3, #12
 80176da:	f8c8 3000 	str.w	r3, [r8]
 80176de:	f04f 30ff 	mov.w	r0, #4294967295
 80176e2:	e0c8      	b.n	8017876 <_svfiprintf_r+0x1c2>
 80176e4:	2340      	movs	r3, #64	; 0x40
 80176e6:	6163      	str	r3, [r4, #20]
 80176e8:	2300      	movs	r3, #0
 80176ea:	9309      	str	r3, [sp, #36]	; 0x24
 80176ec:	2320      	movs	r3, #32
 80176ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176f2:	2330      	movs	r3, #48	; 0x30
 80176f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176f8:	9503      	str	r5, [sp, #12]
 80176fa:	f04f 0b01 	mov.w	fp, #1
 80176fe:	4637      	mov	r7, r6
 8017700:	463d      	mov	r5, r7
 8017702:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017706:	b10b      	cbz	r3, 801770c <_svfiprintf_r+0x58>
 8017708:	2b25      	cmp	r3, #37	; 0x25
 801770a:	d13e      	bne.n	801778a <_svfiprintf_r+0xd6>
 801770c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017710:	d00b      	beq.n	801772a <_svfiprintf_r+0x76>
 8017712:	4653      	mov	r3, sl
 8017714:	4632      	mov	r2, r6
 8017716:	4621      	mov	r1, r4
 8017718:	4640      	mov	r0, r8
 801771a:	f7ff ff71 	bl	8017600 <__ssputs_r>
 801771e:	3001      	adds	r0, #1
 8017720:	f000 80a4 	beq.w	801786c <_svfiprintf_r+0x1b8>
 8017724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017726:	4453      	add	r3, sl
 8017728:	9309      	str	r3, [sp, #36]	; 0x24
 801772a:	783b      	ldrb	r3, [r7, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 809d 	beq.w	801786c <_svfiprintf_r+0x1b8>
 8017732:	2300      	movs	r3, #0
 8017734:	f04f 32ff 	mov.w	r2, #4294967295
 8017738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801773c:	9304      	str	r3, [sp, #16]
 801773e:	9307      	str	r3, [sp, #28]
 8017740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017744:	931a      	str	r3, [sp, #104]	; 0x68
 8017746:	462f      	mov	r7, r5
 8017748:	2205      	movs	r2, #5
 801774a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801774e:	4850      	ldr	r0, [pc, #320]	; (8017890 <_svfiprintf_r+0x1dc>)
 8017750:	f7e8 fd56 	bl	8000200 <memchr>
 8017754:	9b04      	ldr	r3, [sp, #16]
 8017756:	b9d0      	cbnz	r0, 801778e <_svfiprintf_r+0xda>
 8017758:	06d9      	lsls	r1, r3, #27
 801775a:	bf44      	itt	mi
 801775c:	2220      	movmi	r2, #32
 801775e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017762:	071a      	lsls	r2, r3, #28
 8017764:	bf44      	itt	mi
 8017766:	222b      	movmi	r2, #43	; 0x2b
 8017768:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801776c:	782a      	ldrb	r2, [r5, #0]
 801776e:	2a2a      	cmp	r2, #42	; 0x2a
 8017770:	d015      	beq.n	801779e <_svfiprintf_r+0xea>
 8017772:	9a07      	ldr	r2, [sp, #28]
 8017774:	462f      	mov	r7, r5
 8017776:	2000      	movs	r0, #0
 8017778:	250a      	movs	r5, #10
 801777a:	4639      	mov	r1, r7
 801777c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017780:	3b30      	subs	r3, #48	; 0x30
 8017782:	2b09      	cmp	r3, #9
 8017784:	d94d      	bls.n	8017822 <_svfiprintf_r+0x16e>
 8017786:	b1b8      	cbz	r0, 80177b8 <_svfiprintf_r+0x104>
 8017788:	e00f      	b.n	80177aa <_svfiprintf_r+0xf6>
 801778a:	462f      	mov	r7, r5
 801778c:	e7b8      	b.n	8017700 <_svfiprintf_r+0x4c>
 801778e:	4a40      	ldr	r2, [pc, #256]	; (8017890 <_svfiprintf_r+0x1dc>)
 8017790:	1a80      	subs	r0, r0, r2
 8017792:	fa0b f000 	lsl.w	r0, fp, r0
 8017796:	4318      	orrs	r0, r3
 8017798:	9004      	str	r0, [sp, #16]
 801779a:	463d      	mov	r5, r7
 801779c:	e7d3      	b.n	8017746 <_svfiprintf_r+0x92>
 801779e:	9a03      	ldr	r2, [sp, #12]
 80177a0:	1d11      	adds	r1, r2, #4
 80177a2:	6812      	ldr	r2, [r2, #0]
 80177a4:	9103      	str	r1, [sp, #12]
 80177a6:	2a00      	cmp	r2, #0
 80177a8:	db01      	blt.n	80177ae <_svfiprintf_r+0xfa>
 80177aa:	9207      	str	r2, [sp, #28]
 80177ac:	e004      	b.n	80177b8 <_svfiprintf_r+0x104>
 80177ae:	4252      	negs	r2, r2
 80177b0:	f043 0302 	orr.w	r3, r3, #2
 80177b4:	9207      	str	r2, [sp, #28]
 80177b6:	9304      	str	r3, [sp, #16]
 80177b8:	783b      	ldrb	r3, [r7, #0]
 80177ba:	2b2e      	cmp	r3, #46	; 0x2e
 80177bc:	d10c      	bne.n	80177d8 <_svfiprintf_r+0x124>
 80177be:	787b      	ldrb	r3, [r7, #1]
 80177c0:	2b2a      	cmp	r3, #42	; 0x2a
 80177c2:	d133      	bne.n	801782c <_svfiprintf_r+0x178>
 80177c4:	9b03      	ldr	r3, [sp, #12]
 80177c6:	1d1a      	adds	r2, r3, #4
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	9203      	str	r2, [sp, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	bfb8      	it	lt
 80177d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80177d4:	3702      	adds	r7, #2
 80177d6:	9305      	str	r3, [sp, #20]
 80177d8:	4d2e      	ldr	r5, [pc, #184]	; (8017894 <_svfiprintf_r+0x1e0>)
 80177da:	7839      	ldrb	r1, [r7, #0]
 80177dc:	2203      	movs	r2, #3
 80177de:	4628      	mov	r0, r5
 80177e0:	f7e8 fd0e 	bl	8000200 <memchr>
 80177e4:	b138      	cbz	r0, 80177f6 <_svfiprintf_r+0x142>
 80177e6:	2340      	movs	r3, #64	; 0x40
 80177e8:	1b40      	subs	r0, r0, r5
 80177ea:	fa03 f000 	lsl.w	r0, r3, r0
 80177ee:	9b04      	ldr	r3, [sp, #16]
 80177f0:	4303      	orrs	r3, r0
 80177f2:	3701      	adds	r7, #1
 80177f4:	9304      	str	r3, [sp, #16]
 80177f6:	7839      	ldrb	r1, [r7, #0]
 80177f8:	4827      	ldr	r0, [pc, #156]	; (8017898 <_svfiprintf_r+0x1e4>)
 80177fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177fe:	2206      	movs	r2, #6
 8017800:	1c7e      	adds	r6, r7, #1
 8017802:	f7e8 fcfd 	bl	8000200 <memchr>
 8017806:	2800      	cmp	r0, #0
 8017808:	d038      	beq.n	801787c <_svfiprintf_r+0x1c8>
 801780a:	4b24      	ldr	r3, [pc, #144]	; (801789c <_svfiprintf_r+0x1e8>)
 801780c:	bb13      	cbnz	r3, 8017854 <_svfiprintf_r+0x1a0>
 801780e:	9b03      	ldr	r3, [sp, #12]
 8017810:	3307      	adds	r3, #7
 8017812:	f023 0307 	bic.w	r3, r3, #7
 8017816:	3308      	adds	r3, #8
 8017818:	9303      	str	r3, [sp, #12]
 801781a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801781c:	444b      	add	r3, r9
 801781e:	9309      	str	r3, [sp, #36]	; 0x24
 8017820:	e76d      	b.n	80176fe <_svfiprintf_r+0x4a>
 8017822:	fb05 3202 	mla	r2, r5, r2, r3
 8017826:	2001      	movs	r0, #1
 8017828:	460f      	mov	r7, r1
 801782a:	e7a6      	b.n	801777a <_svfiprintf_r+0xc6>
 801782c:	2300      	movs	r3, #0
 801782e:	3701      	adds	r7, #1
 8017830:	9305      	str	r3, [sp, #20]
 8017832:	4619      	mov	r1, r3
 8017834:	250a      	movs	r5, #10
 8017836:	4638      	mov	r0, r7
 8017838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801783c:	3a30      	subs	r2, #48	; 0x30
 801783e:	2a09      	cmp	r2, #9
 8017840:	d903      	bls.n	801784a <_svfiprintf_r+0x196>
 8017842:	2b00      	cmp	r3, #0
 8017844:	d0c8      	beq.n	80177d8 <_svfiprintf_r+0x124>
 8017846:	9105      	str	r1, [sp, #20]
 8017848:	e7c6      	b.n	80177d8 <_svfiprintf_r+0x124>
 801784a:	fb05 2101 	mla	r1, r5, r1, r2
 801784e:	2301      	movs	r3, #1
 8017850:	4607      	mov	r7, r0
 8017852:	e7f0      	b.n	8017836 <_svfiprintf_r+0x182>
 8017854:	ab03      	add	r3, sp, #12
 8017856:	9300      	str	r3, [sp, #0]
 8017858:	4622      	mov	r2, r4
 801785a:	4b11      	ldr	r3, [pc, #68]	; (80178a0 <_svfiprintf_r+0x1ec>)
 801785c:	a904      	add	r1, sp, #16
 801785e:	4640      	mov	r0, r8
 8017860:	f7fd fef4 	bl	801564c <_printf_float>
 8017864:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017868:	4681      	mov	r9, r0
 801786a:	d1d6      	bne.n	801781a <_svfiprintf_r+0x166>
 801786c:	89a3      	ldrh	r3, [r4, #12]
 801786e:	065b      	lsls	r3, r3, #25
 8017870:	f53f af35 	bmi.w	80176de <_svfiprintf_r+0x2a>
 8017874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017876:	b01d      	add	sp, #116	; 0x74
 8017878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801787c:	ab03      	add	r3, sp, #12
 801787e:	9300      	str	r3, [sp, #0]
 8017880:	4622      	mov	r2, r4
 8017882:	4b07      	ldr	r3, [pc, #28]	; (80178a0 <_svfiprintf_r+0x1ec>)
 8017884:	a904      	add	r1, sp, #16
 8017886:	4640      	mov	r0, r8
 8017888:	f7fe f996 	bl	8015bb8 <_printf_i>
 801788c:	e7ea      	b.n	8017864 <_svfiprintf_r+0x1b0>
 801788e:	bf00      	nop
 8017890:	0801ba1c 	.word	0x0801ba1c
 8017894:	0801ba22 	.word	0x0801ba22
 8017898:	0801ba26 	.word	0x0801ba26
 801789c:	0801564d 	.word	0x0801564d
 80178a0:	08017601 	.word	0x08017601

080178a4 <__sfputc_r>:
 80178a4:	6893      	ldr	r3, [r2, #8]
 80178a6:	3b01      	subs	r3, #1
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	b410      	push	{r4}
 80178ac:	6093      	str	r3, [r2, #8]
 80178ae:	da08      	bge.n	80178c2 <__sfputc_r+0x1e>
 80178b0:	6994      	ldr	r4, [r2, #24]
 80178b2:	42a3      	cmp	r3, r4
 80178b4:	db01      	blt.n	80178ba <__sfputc_r+0x16>
 80178b6:	290a      	cmp	r1, #10
 80178b8:	d103      	bne.n	80178c2 <__sfputc_r+0x1e>
 80178ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178be:	f000 b985 	b.w	8017bcc <__swbuf_r>
 80178c2:	6813      	ldr	r3, [r2, #0]
 80178c4:	1c58      	adds	r0, r3, #1
 80178c6:	6010      	str	r0, [r2, #0]
 80178c8:	7019      	strb	r1, [r3, #0]
 80178ca:	4608      	mov	r0, r1
 80178cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178d0:	4770      	bx	lr

080178d2 <__sfputs_r>:
 80178d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d4:	4606      	mov	r6, r0
 80178d6:	460f      	mov	r7, r1
 80178d8:	4614      	mov	r4, r2
 80178da:	18d5      	adds	r5, r2, r3
 80178dc:	42ac      	cmp	r4, r5
 80178de:	d101      	bne.n	80178e4 <__sfputs_r+0x12>
 80178e0:	2000      	movs	r0, #0
 80178e2:	e007      	b.n	80178f4 <__sfputs_r+0x22>
 80178e4:	463a      	mov	r2, r7
 80178e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178ea:	4630      	mov	r0, r6
 80178ec:	f7ff ffda 	bl	80178a4 <__sfputc_r>
 80178f0:	1c43      	adds	r3, r0, #1
 80178f2:	d1f3      	bne.n	80178dc <__sfputs_r+0xa>
 80178f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178f8 <_vfiprintf_r>:
 80178f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178fc:	460c      	mov	r4, r1
 80178fe:	b09d      	sub	sp, #116	; 0x74
 8017900:	4617      	mov	r7, r2
 8017902:	461d      	mov	r5, r3
 8017904:	4606      	mov	r6, r0
 8017906:	b118      	cbz	r0, 8017910 <_vfiprintf_r+0x18>
 8017908:	6983      	ldr	r3, [r0, #24]
 801790a:	b90b      	cbnz	r3, 8017910 <_vfiprintf_r+0x18>
 801790c:	f7ff fa30 	bl	8016d70 <__sinit>
 8017910:	4b7c      	ldr	r3, [pc, #496]	; (8017b04 <_vfiprintf_r+0x20c>)
 8017912:	429c      	cmp	r4, r3
 8017914:	d158      	bne.n	80179c8 <_vfiprintf_r+0xd0>
 8017916:	6874      	ldr	r4, [r6, #4]
 8017918:	89a3      	ldrh	r3, [r4, #12]
 801791a:	0718      	lsls	r0, r3, #28
 801791c:	d55e      	bpl.n	80179dc <_vfiprintf_r+0xe4>
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d05b      	beq.n	80179dc <_vfiprintf_r+0xe4>
 8017924:	2300      	movs	r3, #0
 8017926:	9309      	str	r3, [sp, #36]	; 0x24
 8017928:	2320      	movs	r3, #32
 801792a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801792e:	2330      	movs	r3, #48	; 0x30
 8017930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017934:	9503      	str	r5, [sp, #12]
 8017936:	f04f 0b01 	mov.w	fp, #1
 801793a:	46b8      	mov	r8, r7
 801793c:	4645      	mov	r5, r8
 801793e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017942:	b10b      	cbz	r3, 8017948 <_vfiprintf_r+0x50>
 8017944:	2b25      	cmp	r3, #37	; 0x25
 8017946:	d154      	bne.n	80179f2 <_vfiprintf_r+0xfa>
 8017948:	ebb8 0a07 	subs.w	sl, r8, r7
 801794c:	d00b      	beq.n	8017966 <_vfiprintf_r+0x6e>
 801794e:	4653      	mov	r3, sl
 8017950:	463a      	mov	r2, r7
 8017952:	4621      	mov	r1, r4
 8017954:	4630      	mov	r0, r6
 8017956:	f7ff ffbc 	bl	80178d2 <__sfputs_r>
 801795a:	3001      	adds	r0, #1
 801795c:	f000 80c2 	beq.w	8017ae4 <_vfiprintf_r+0x1ec>
 8017960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017962:	4453      	add	r3, sl
 8017964:	9309      	str	r3, [sp, #36]	; 0x24
 8017966:	f898 3000 	ldrb.w	r3, [r8]
 801796a:	2b00      	cmp	r3, #0
 801796c:	f000 80ba 	beq.w	8017ae4 <_vfiprintf_r+0x1ec>
 8017970:	2300      	movs	r3, #0
 8017972:	f04f 32ff 	mov.w	r2, #4294967295
 8017976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801797a:	9304      	str	r3, [sp, #16]
 801797c:	9307      	str	r3, [sp, #28]
 801797e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017982:	931a      	str	r3, [sp, #104]	; 0x68
 8017984:	46a8      	mov	r8, r5
 8017986:	2205      	movs	r2, #5
 8017988:	f818 1b01 	ldrb.w	r1, [r8], #1
 801798c:	485e      	ldr	r0, [pc, #376]	; (8017b08 <_vfiprintf_r+0x210>)
 801798e:	f7e8 fc37 	bl	8000200 <memchr>
 8017992:	9b04      	ldr	r3, [sp, #16]
 8017994:	bb78      	cbnz	r0, 80179f6 <_vfiprintf_r+0xfe>
 8017996:	06d9      	lsls	r1, r3, #27
 8017998:	bf44      	itt	mi
 801799a:	2220      	movmi	r2, #32
 801799c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80179a0:	071a      	lsls	r2, r3, #28
 80179a2:	bf44      	itt	mi
 80179a4:	222b      	movmi	r2, #43	; 0x2b
 80179a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80179aa:	782a      	ldrb	r2, [r5, #0]
 80179ac:	2a2a      	cmp	r2, #42	; 0x2a
 80179ae:	d02a      	beq.n	8017a06 <_vfiprintf_r+0x10e>
 80179b0:	9a07      	ldr	r2, [sp, #28]
 80179b2:	46a8      	mov	r8, r5
 80179b4:	2000      	movs	r0, #0
 80179b6:	250a      	movs	r5, #10
 80179b8:	4641      	mov	r1, r8
 80179ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179be:	3b30      	subs	r3, #48	; 0x30
 80179c0:	2b09      	cmp	r3, #9
 80179c2:	d969      	bls.n	8017a98 <_vfiprintf_r+0x1a0>
 80179c4:	b360      	cbz	r0, 8017a20 <_vfiprintf_r+0x128>
 80179c6:	e024      	b.n	8017a12 <_vfiprintf_r+0x11a>
 80179c8:	4b50      	ldr	r3, [pc, #320]	; (8017b0c <_vfiprintf_r+0x214>)
 80179ca:	429c      	cmp	r4, r3
 80179cc:	d101      	bne.n	80179d2 <_vfiprintf_r+0xda>
 80179ce:	68b4      	ldr	r4, [r6, #8]
 80179d0:	e7a2      	b.n	8017918 <_vfiprintf_r+0x20>
 80179d2:	4b4f      	ldr	r3, [pc, #316]	; (8017b10 <_vfiprintf_r+0x218>)
 80179d4:	429c      	cmp	r4, r3
 80179d6:	bf08      	it	eq
 80179d8:	68f4      	ldreq	r4, [r6, #12]
 80179da:	e79d      	b.n	8017918 <_vfiprintf_r+0x20>
 80179dc:	4621      	mov	r1, r4
 80179de:	4630      	mov	r0, r6
 80179e0:	f000 f966 	bl	8017cb0 <__swsetup_r>
 80179e4:	2800      	cmp	r0, #0
 80179e6:	d09d      	beq.n	8017924 <_vfiprintf_r+0x2c>
 80179e8:	f04f 30ff 	mov.w	r0, #4294967295
 80179ec:	b01d      	add	sp, #116	; 0x74
 80179ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179f2:	46a8      	mov	r8, r5
 80179f4:	e7a2      	b.n	801793c <_vfiprintf_r+0x44>
 80179f6:	4a44      	ldr	r2, [pc, #272]	; (8017b08 <_vfiprintf_r+0x210>)
 80179f8:	1a80      	subs	r0, r0, r2
 80179fa:	fa0b f000 	lsl.w	r0, fp, r0
 80179fe:	4318      	orrs	r0, r3
 8017a00:	9004      	str	r0, [sp, #16]
 8017a02:	4645      	mov	r5, r8
 8017a04:	e7be      	b.n	8017984 <_vfiprintf_r+0x8c>
 8017a06:	9a03      	ldr	r2, [sp, #12]
 8017a08:	1d11      	adds	r1, r2, #4
 8017a0a:	6812      	ldr	r2, [r2, #0]
 8017a0c:	9103      	str	r1, [sp, #12]
 8017a0e:	2a00      	cmp	r2, #0
 8017a10:	db01      	blt.n	8017a16 <_vfiprintf_r+0x11e>
 8017a12:	9207      	str	r2, [sp, #28]
 8017a14:	e004      	b.n	8017a20 <_vfiprintf_r+0x128>
 8017a16:	4252      	negs	r2, r2
 8017a18:	f043 0302 	orr.w	r3, r3, #2
 8017a1c:	9207      	str	r2, [sp, #28]
 8017a1e:	9304      	str	r3, [sp, #16]
 8017a20:	f898 3000 	ldrb.w	r3, [r8]
 8017a24:	2b2e      	cmp	r3, #46	; 0x2e
 8017a26:	d10e      	bne.n	8017a46 <_vfiprintf_r+0x14e>
 8017a28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8017a2e:	d138      	bne.n	8017aa2 <_vfiprintf_r+0x1aa>
 8017a30:	9b03      	ldr	r3, [sp, #12]
 8017a32:	1d1a      	adds	r2, r3, #4
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	9203      	str	r2, [sp, #12]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	bfb8      	it	lt
 8017a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a40:	f108 0802 	add.w	r8, r8, #2
 8017a44:	9305      	str	r3, [sp, #20]
 8017a46:	4d33      	ldr	r5, [pc, #204]	; (8017b14 <_vfiprintf_r+0x21c>)
 8017a48:	f898 1000 	ldrb.w	r1, [r8]
 8017a4c:	2203      	movs	r2, #3
 8017a4e:	4628      	mov	r0, r5
 8017a50:	f7e8 fbd6 	bl	8000200 <memchr>
 8017a54:	b140      	cbz	r0, 8017a68 <_vfiprintf_r+0x170>
 8017a56:	2340      	movs	r3, #64	; 0x40
 8017a58:	1b40      	subs	r0, r0, r5
 8017a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8017a5e:	9b04      	ldr	r3, [sp, #16]
 8017a60:	4303      	orrs	r3, r0
 8017a62:	f108 0801 	add.w	r8, r8, #1
 8017a66:	9304      	str	r3, [sp, #16]
 8017a68:	f898 1000 	ldrb.w	r1, [r8]
 8017a6c:	482a      	ldr	r0, [pc, #168]	; (8017b18 <_vfiprintf_r+0x220>)
 8017a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a72:	2206      	movs	r2, #6
 8017a74:	f108 0701 	add.w	r7, r8, #1
 8017a78:	f7e8 fbc2 	bl	8000200 <memchr>
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d037      	beq.n	8017af0 <_vfiprintf_r+0x1f8>
 8017a80:	4b26      	ldr	r3, [pc, #152]	; (8017b1c <_vfiprintf_r+0x224>)
 8017a82:	bb1b      	cbnz	r3, 8017acc <_vfiprintf_r+0x1d4>
 8017a84:	9b03      	ldr	r3, [sp, #12]
 8017a86:	3307      	adds	r3, #7
 8017a88:	f023 0307 	bic.w	r3, r3, #7
 8017a8c:	3308      	adds	r3, #8
 8017a8e:	9303      	str	r3, [sp, #12]
 8017a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a92:	444b      	add	r3, r9
 8017a94:	9309      	str	r3, [sp, #36]	; 0x24
 8017a96:	e750      	b.n	801793a <_vfiprintf_r+0x42>
 8017a98:	fb05 3202 	mla	r2, r5, r2, r3
 8017a9c:	2001      	movs	r0, #1
 8017a9e:	4688      	mov	r8, r1
 8017aa0:	e78a      	b.n	80179b8 <_vfiprintf_r+0xc0>
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	f108 0801 	add.w	r8, r8, #1
 8017aa8:	9305      	str	r3, [sp, #20]
 8017aaa:	4619      	mov	r1, r3
 8017aac:	250a      	movs	r5, #10
 8017aae:	4640      	mov	r0, r8
 8017ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ab4:	3a30      	subs	r2, #48	; 0x30
 8017ab6:	2a09      	cmp	r2, #9
 8017ab8:	d903      	bls.n	8017ac2 <_vfiprintf_r+0x1ca>
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d0c3      	beq.n	8017a46 <_vfiprintf_r+0x14e>
 8017abe:	9105      	str	r1, [sp, #20]
 8017ac0:	e7c1      	b.n	8017a46 <_vfiprintf_r+0x14e>
 8017ac2:	fb05 2101 	mla	r1, r5, r1, r2
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	4680      	mov	r8, r0
 8017aca:	e7f0      	b.n	8017aae <_vfiprintf_r+0x1b6>
 8017acc:	ab03      	add	r3, sp, #12
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	4622      	mov	r2, r4
 8017ad2:	4b13      	ldr	r3, [pc, #76]	; (8017b20 <_vfiprintf_r+0x228>)
 8017ad4:	a904      	add	r1, sp, #16
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	f7fd fdb8 	bl	801564c <_printf_float>
 8017adc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017ae0:	4681      	mov	r9, r0
 8017ae2:	d1d5      	bne.n	8017a90 <_vfiprintf_r+0x198>
 8017ae4:	89a3      	ldrh	r3, [r4, #12]
 8017ae6:	065b      	lsls	r3, r3, #25
 8017ae8:	f53f af7e 	bmi.w	80179e8 <_vfiprintf_r+0xf0>
 8017aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017aee:	e77d      	b.n	80179ec <_vfiprintf_r+0xf4>
 8017af0:	ab03      	add	r3, sp, #12
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	4622      	mov	r2, r4
 8017af6:	4b0a      	ldr	r3, [pc, #40]	; (8017b20 <_vfiprintf_r+0x228>)
 8017af8:	a904      	add	r1, sp, #16
 8017afa:	4630      	mov	r0, r6
 8017afc:	f7fe f85c 	bl	8015bb8 <_printf_i>
 8017b00:	e7ec      	b.n	8017adc <_vfiprintf_r+0x1e4>
 8017b02:	bf00      	nop
 8017b04:	0801b8d0 	.word	0x0801b8d0
 8017b08:	0801ba1c 	.word	0x0801ba1c
 8017b0c:	0801b8f0 	.word	0x0801b8f0
 8017b10:	0801b8b0 	.word	0x0801b8b0
 8017b14:	0801ba22 	.word	0x0801ba22
 8017b18:	0801ba26 	.word	0x0801ba26
 8017b1c:	0801564d 	.word	0x0801564d
 8017b20:	080178d3 	.word	0x080178d3

08017b24 <_sbrk_r>:
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	4c06      	ldr	r4, [pc, #24]	; (8017b40 <_sbrk_r+0x1c>)
 8017b28:	2300      	movs	r3, #0
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	4608      	mov	r0, r1
 8017b2e:	6023      	str	r3, [r4, #0]
 8017b30:	f7fd fc40 	bl	80153b4 <_sbrk>
 8017b34:	1c43      	adds	r3, r0, #1
 8017b36:	d102      	bne.n	8017b3e <_sbrk_r+0x1a>
 8017b38:	6823      	ldr	r3, [r4, #0]
 8017b3a:	b103      	cbz	r3, 8017b3e <_sbrk_r+0x1a>
 8017b3c:	602b      	str	r3, [r5, #0]
 8017b3e:	bd38      	pop	{r3, r4, r5, pc}
 8017b40:	2000a80c 	.word	0x2000a80c

08017b44 <__sread>:
 8017b44:	b510      	push	{r4, lr}
 8017b46:	460c      	mov	r4, r1
 8017b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b4c:	f000 fa96 	bl	801807c <_read_r>
 8017b50:	2800      	cmp	r0, #0
 8017b52:	bfab      	itete	ge
 8017b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017b56:	89a3      	ldrhlt	r3, [r4, #12]
 8017b58:	181b      	addge	r3, r3, r0
 8017b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017b5e:	bfac      	ite	ge
 8017b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8017b62:	81a3      	strhlt	r3, [r4, #12]
 8017b64:	bd10      	pop	{r4, pc}

08017b66 <__swrite>:
 8017b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b6a:	461f      	mov	r7, r3
 8017b6c:	898b      	ldrh	r3, [r1, #12]
 8017b6e:	05db      	lsls	r3, r3, #23
 8017b70:	4605      	mov	r5, r0
 8017b72:	460c      	mov	r4, r1
 8017b74:	4616      	mov	r6, r2
 8017b76:	d505      	bpl.n	8017b84 <__swrite+0x1e>
 8017b78:	2302      	movs	r3, #2
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b80:	f000 f9c4 	bl	8017f0c <_lseek_r>
 8017b84:	89a3      	ldrh	r3, [r4, #12]
 8017b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b8e:	81a3      	strh	r3, [r4, #12]
 8017b90:	4632      	mov	r2, r6
 8017b92:	463b      	mov	r3, r7
 8017b94:	4628      	mov	r0, r5
 8017b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b9a:	f000 b877 	b.w	8017c8c <_write_r>

08017b9e <__sseek>:
 8017b9e:	b510      	push	{r4, lr}
 8017ba0:	460c      	mov	r4, r1
 8017ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ba6:	f000 f9b1 	bl	8017f0c <_lseek_r>
 8017baa:	1c43      	adds	r3, r0, #1
 8017bac:	89a3      	ldrh	r3, [r4, #12]
 8017bae:	bf15      	itete	ne
 8017bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8017bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017bba:	81a3      	strheq	r3, [r4, #12]
 8017bbc:	bf18      	it	ne
 8017bbe:	81a3      	strhne	r3, [r4, #12]
 8017bc0:	bd10      	pop	{r4, pc}

08017bc2 <__sclose>:
 8017bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bc6:	f000 b8e1 	b.w	8017d8c <_close_r>
	...

08017bcc <__swbuf_r>:
 8017bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bce:	460e      	mov	r6, r1
 8017bd0:	4614      	mov	r4, r2
 8017bd2:	4605      	mov	r5, r0
 8017bd4:	b118      	cbz	r0, 8017bde <__swbuf_r+0x12>
 8017bd6:	6983      	ldr	r3, [r0, #24]
 8017bd8:	b90b      	cbnz	r3, 8017bde <__swbuf_r+0x12>
 8017bda:	f7ff f8c9 	bl	8016d70 <__sinit>
 8017bde:	4b21      	ldr	r3, [pc, #132]	; (8017c64 <__swbuf_r+0x98>)
 8017be0:	429c      	cmp	r4, r3
 8017be2:	d12a      	bne.n	8017c3a <__swbuf_r+0x6e>
 8017be4:	686c      	ldr	r4, [r5, #4]
 8017be6:	69a3      	ldr	r3, [r4, #24]
 8017be8:	60a3      	str	r3, [r4, #8]
 8017bea:	89a3      	ldrh	r3, [r4, #12]
 8017bec:	071a      	lsls	r2, r3, #28
 8017bee:	d52e      	bpl.n	8017c4e <__swbuf_r+0x82>
 8017bf0:	6923      	ldr	r3, [r4, #16]
 8017bf2:	b363      	cbz	r3, 8017c4e <__swbuf_r+0x82>
 8017bf4:	6923      	ldr	r3, [r4, #16]
 8017bf6:	6820      	ldr	r0, [r4, #0]
 8017bf8:	1ac0      	subs	r0, r0, r3
 8017bfa:	6963      	ldr	r3, [r4, #20]
 8017bfc:	b2f6      	uxtb	r6, r6
 8017bfe:	4283      	cmp	r3, r0
 8017c00:	4637      	mov	r7, r6
 8017c02:	dc04      	bgt.n	8017c0e <__swbuf_r+0x42>
 8017c04:	4621      	mov	r1, r4
 8017c06:	4628      	mov	r0, r5
 8017c08:	f000 f956 	bl	8017eb8 <_fflush_r>
 8017c0c:	bb28      	cbnz	r0, 8017c5a <__swbuf_r+0x8e>
 8017c0e:	68a3      	ldr	r3, [r4, #8]
 8017c10:	3b01      	subs	r3, #1
 8017c12:	60a3      	str	r3, [r4, #8]
 8017c14:	6823      	ldr	r3, [r4, #0]
 8017c16:	1c5a      	adds	r2, r3, #1
 8017c18:	6022      	str	r2, [r4, #0]
 8017c1a:	701e      	strb	r6, [r3, #0]
 8017c1c:	6963      	ldr	r3, [r4, #20]
 8017c1e:	3001      	adds	r0, #1
 8017c20:	4283      	cmp	r3, r0
 8017c22:	d004      	beq.n	8017c2e <__swbuf_r+0x62>
 8017c24:	89a3      	ldrh	r3, [r4, #12]
 8017c26:	07db      	lsls	r3, r3, #31
 8017c28:	d519      	bpl.n	8017c5e <__swbuf_r+0x92>
 8017c2a:	2e0a      	cmp	r6, #10
 8017c2c:	d117      	bne.n	8017c5e <__swbuf_r+0x92>
 8017c2e:	4621      	mov	r1, r4
 8017c30:	4628      	mov	r0, r5
 8017c32:	f000 f941 	bl	8017eb8 <_fflush_r>
 8017c36:	b190      	cbz	r0, 8017c5e <__swbuf_r+0x92>
 8017c38:	e00f      	b.n	8017c5a <__swbuf_r+0x8e>
 8017c3a:	4b0b      	ldr	r3, [pc, #44]	; (8017c68 <__swbuf_r+0x9c>)
 8017c3c:	429c      	cmp	r4, r3
 8017c3e:	d101      	bne.n	8017c44 <__swbuf_r+0x78>
 8017c40:	68ac      	ldr	r4, [r5, #8]
 8017c42:	e7d0      	b.n	8017be6 <__swbuf_r+0x1a>
 8017c44:	4b09      	ldr	r3, [pc, #36]	; (8017c6c <__swbuf_r+0xa0>)
 8017c46:	429c      	cmp	r4, r3
 8017c48:	bf08      	it	eq
 8017c4a:	68ec      	ldreq	r4, [r5, #12]
 8017c4c:	e7cb      	b.n	8017be6 <__swbuf_r+0x1a>
 8017c4e:	4621      	mov	r1, r4
 8017c50:	4628      	mov	r0, r5
 8017c52:	f000 f82d 	bl	8017cb0 <__swsetup_r>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	d0cc      	beq.n	8017bf4 <__swbuf_r+0x28>
 8017c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8017c5e:	4638      	mov	r0, r7
 8017c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c62:	bf00      	nop
 8017c64:	0801b8d0 	.word	0x0801b8d0
 8017c68:	0801b8f0 	.word	0x0801b8f0
 8017c6c:	0801b8b0 	.word	0x0801b8b0

08017c70 <__ascii_wctomb>:
 8017c70:	b149      	cbz	r1, 8017c86 <__ascii_wctomb+0x16>
 8017c72:	2aff      	cmp	r2, #255	; 0xff
 8017c74:	bf85      	ittet	hi
 8017c76:	238a      	movhi	r3, #138	; 0x8a
 8017c78:	6003      	strhi	r3, [r0, #0]
 8017c7a:	700a      	strbls	r2, [r1, #0]
 8017c7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017c80:	bf98      	it	ls
 8017c82:	2001      	movls	r0, #1
 8017c84:	4770      	bx	lr
 8017c86:	4608      	mov	r0, r1
 8017c88:	4770      	bx	lr
	...

08017c8c <_write_r>:
 8017c8c:	b538      	push	{r3, r4, r5, lr}
 8017c8e:	4c07      	ldr	r4, [pc, #28]	; (8017cac <_write_r+0x20>)
 8017c90:	4605      	mov	r5, r0
 8017c92:	4608      	mov	r0, r1
 8017c94:	4611      	mov	r1, r2
 8017c96:	2200      	movs	r2, #0
 8017c98:	6022      	str	r2, [r4, #0]
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	f7fd fb39 	bl	8015312 <_write>
 8017ca0:	1c43      	adds	r3, r0, #1
 8017ca2:	d102      	bne.n	8017caa <_write_r+0x1e>
 8017ca4:	6823      	ldr	r3, [r4, #0]
 8017ca6:	b103      	cbz	r3, 8017caa <_write_r+0x1e>
 8017ca8:	602b      	str	r3, [r5, #0]
 8017caa:	bd38      	pop	{r3, r4, r5, pc}
 8017cac:	2000a80c 	.word	0x2000a80c

08017cb0 <__swsetup_r>:
 8017cb0:	4b32      	ldr	r3, [pc, #200]	; (8017d7c <__swsetup_r+0xcc>)
 8017cb2:	b570      	push	{r4, r5, r6, lr}
 8017cb4:	681d      	ldr	r5, [r3, #0]
 8017cb6:	4606      	mov	r6, r0
 8017cb8:	460c      	mov	r4, r1
 8017cba:	b125      	cbz	r5, 8017cc6 <__swsetup_r+0x16>
 8017cbc:	69ab      	ldr	r3, [r5, #24]
 8017cbe:	b913      	cbnz	r3, 8017cc6 <__swsetup_r+0x16>
 8017cc0:	4628      	mov	r0, r5
 8017cc2:	f7ff f855 	bl	8016d70 <__sinit>
 8017cc6:	4b2e      	ldr	r3, [pc, #184]	; (8017d80 <__swsetup_r+0xd0>)
 8017cc8:	429c      	cmp	r4, r3
 8017cca:	d10f      	bne.n	8017cec <__swsetup_r+0x3c>
 8017ccc:	686c      	ldr	r4, [r5, #4]
 8017cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cd2:	b29a      	uxth	r2, r3
 8017cd4:	0715      	lsls	r5, r2, #28
 8017cd6:	d42c      	bmi.n	8017d32 <__swsetup_r+0x82>
 8017cd8:	06d0      	lsls	r0, r2, #27
 8017cda:	d411      	bmi.n	8017d00 <__swsetup_r+0x50>
 8017cdc:	2209      	movs	r2, #9
 8017cde:	6032      	str	r2, [r6, #0]
 8017ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ce4:	81a3      	strh	r3, [r4, #12]
 8017ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8017cea:	e03e      	b.n	8017d6a <__swsetup_r+0xba>
 8017cec:	4b25      	ldr	r3, [pc, #148]	; (8017d84 <__swsetup_r+0xd4>)
 8017cee:	429c      	cmp	r4, r3
 8017cf0:	d101      	bne.n	8017cf6 <__swsetup_r+0x46>
 8017cf2:	68ac      	ldr	r4, [r5, #8]
 8017cf4:	e7eb      	b.n	8017cce <__swsetup_r+0x1e>
 8017cf6:	4b24      	ldr	r3, [pc, #144]	; (8017d88 <__swsetup_r+0xd8>)
 8017cf8:	429c      	cmp	r4, r3
 8017cfa:	bf08      	it	eq
 8017cfc:	68ec      	ldreq	r4, [r5, #12]
 8017cfe:	e7e6      	b.n	8017cce <__swsetup_r+0x1e>
 8017d00:	0751      	lsls	r1, r2, #29
 8017d02:	d512      	bpl.n	8017d2a <__swsetup_r+0x7a>
 8017d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d06:	b141      	cbz	r1, 8017d1a <__swsetup_r+0x6a>
 8017d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d0c:	4299      	cmp	r1, r3
 8017d0e:	d002      	beq.n	8017d16 <__swsetup_r+0x66>
 8017d10:	4630      	mov	r0, r6
 8017d12:	f7ff fbcd 	bl	80174b0 <_free_r>
 8017d16:	2300      	movs	r3, #0
 8017d18:	6363      	str	r3, [r4, #52]	; 0x34
 8017d1a:	89a3      	ldrh	r3, [r4, #12]
 8017d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017d20:	81a3      	strh	r3, [r4, #12]
 8017d22:	2300      	movs	r3, #0
 8017d24:	6063      	str	r3, [r4, #4]
 8017d26:	6923      	ldr	r3, [r4, #16]
 8017d28:	6023      	str	r3, [r4, #0]
 8017d2a:	89a3      	ldrh	r3, [r4, #12]
 8017d2c:	f043 0308 	orr.w	r3, r3, #8
 8017d30:	81a3      	strh	r3, [r4, #12]
 8017d32:	6923      	ldr	r3, [r4, #16]
 8017d34:	b94b      	cbnz	r3, 8017d4a <__swsetup_r+0x9a>
 8017d36:	89a3      	ldrh	r3, [r4, #12]
 8017d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d40:	d003      	beq.n	8017d4a <__swsetup_r+0x9a>
 8017d42:	4621      	mov	r1, r4
 8017d44:	4630      	mov	r0, r6
 8017d46:	f000 f917 	bl	8017f78 <__smakebuf_r>
 8017d4a:	89a2      	ldrh	r2, [r4, #12]
 8017d4c:	f012 0301 	ands.w	r3, r2, #1
 8017d50:	d00c      	beq.n	8017d6c <__swsetup_r+0xbc>
 8017d52:	2300      	movs	r3, #0
 8017d54:	60a3      	str	r3, [r4, #8]
 8017d56:	6963      	ldr	r3, [r4, #20]
 8017d58:	425b      	negs	r3, r3
 8017d5a:	61a3      	str	r3, [r4, #24]
 8017d5c:	6923      	ldr	r3, [r4, #16]
 8017d5e:	b953      	cbnz	r3, 8017d76 <__swsetup_r+0xc6>
 8017d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017d68:	d1ba      	bne.n	8017ce0 <__swsetup_r+0x30>
 8017d6a:	bd70      	pop	{r4, r5, r6, pc}
 8017d6c:	0792      	lsls	r2, r2, #30
 8017d6e:	bf58      	it	pl
 8017d70:	6963      	ldrpl	r3, [r4, #20]
 8017d72:	60a3      	str	r3, [r4, #8]
 8017d74:	e7f2      	b.n	8017d5c <__swsetup_r+0xac>
 8017d76:	2000      	movs	r0, #0
 8017d78:	e7f7      	b.n	8017d6a <__swsetup_r+0xba>
 8017d7a:	bf00      	nop
 8017d7c:	20000034 	.word	0x20000034
 8017d80:	0801b8d0 	.word	0x0801b8d0
 8017d84:	0801b8f0 	.word	0x0801b8f0
 8017d88:	0801b8b0 	.word	0x0801b8b0

08017d8c <_close_r>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4c06      	ldr	r4, [pc, #24]	; (8017da8 <_close_r+0x1c>)
 8017d90:	2300      	movs	r3, #0
 8017d92:	4605      	mov	r5, r0
 8017d94:	4608      	mov	r0, r1
 8017d96:	6023      	str	r3, [r4, #0]
 8017d98:	f7fd fad7 	bl	801534a <_close>
 8017d9c:	1c43      	adds	r3, r0, #1
 8017d9e:	d102      	bne.n	8017da6 <_close_r+0x1a>
 8017da0:	6823      	ldr	r3, [r4, #0]
 8017da2:	b103      	cbz	r3, 8017da6 <_close_r+0x1a>
 8017da4:	602b      	str	r3, [r5, #0]
 8017da6:	bd38      	pop	{r3, r4, r5, pc}
 8017da8:	2000a80c 	.word	0x2000a80c

08017dac <__sflush_r>:
 8017dac:	898a      	ldrh	r2, [r1, #12]
 8017dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017db2:	4605      	mov	r5, r0
 8017db4:	0710      	lsls	r0, r2, #28
 8017db6:	460c      	mov	r4, r1
 8017db8:	d458      	bmi.n	8017e6c <__sflush_r+0xc0>
 8017dba:	684b      	ldr	r3, [r1, #4]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	dc05      	bgt.n	8017dcc <__sflush_r+0x20>
 8017dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	dc02      	bgt.n	8017dcc <__sflush_r+0x20>
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017dce:	2e00      	cmp	r6, #0
 8017dd0:	d0f9      	beq.n	8017dc6 <__sflush_r+0x1a>
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017dd8:	682f      	ldr	r7, [r5, #0]
 8017dda:	6a21      	ldr	r1, [r4, #32]
 8017ddc:	602b      	str	r3, [r5, #0]
 8017dde:	d032      	beq.n	8017e46 <__sflush_r+0x9a>
 8017de0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017de2:	89a3      	ldrh	r3, [r4, #12]
 8017de4:	075a      	lsls	r2, r3, #29
 8017de6:	d505      	bpl.n	8017df4 <__sflush_r+0x48>
 8017de8:	6863      	ldr	r3, [r4, #4]
 8017dea:	1ac0      	subs	r0, r0, r3
 8017dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017dee:	b10b      	cbz	r3, 8017df4 <__sflush_r+0x48>
 8017df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017df2:	1ac0      	subs	r0, r0, r3
 8017df4:	2300      	movs	r3, #0
 8017df6:	4602      	mov	r2, r0
 8017df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017dfa:	6a21      	ldr	r1, [r4, #32]
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	47b0      	blx	r6
 8017e00:	1c43      	adds	r3, r0, #1
 8017e02:	89a3      	ldrh	r3, [r4, #12]
 8017e04:	d106      	bne.n	8017e14 <__sflush_r+0x68>
 8017e06:	6829      	ldr	r1, [r5, #0]
 8017e08:	291d      	cmp	r1, #29
 8017e0a:	d848      	bhi.n	8017e9e <__sflush_r+0xf2>
 8017e0c:	4a29      	ldr	r2, [pc, #164]	; (8017eb4 <__sflush_r+0x108>)
 8017e0e:	40ca      	lsrs	r2, r1
 8017e10:	07d6      	lsls	r6, r2, #31
 8017e12:	d544      	bpl.n	8017e9e <__sflush_r+0xf2>
 8017e14:	2200      	movs	r2, #0
 8017e16:	6062      	str	r2, [r4, #4]
 8017e18:	04d9      	lsls	r1, r3, #19
 8017e1a:	6922      	ldr	r2, [r4, #16]
 8017e1c:	6022      	str	r2, [r4, #0]
 8017e1e:	d504      	bpl.n	8017e2a <__sflush_r+0x7e>
 8017e20:	1c42      	adds	r2, r0, #1
 8017e22:	d101      	bne.n	8017e28 <__sflush_r+0x7c>
 8017e24:	682b      	ldr	r3, [r5, #0]
 8017e26:	b903      	cbnz	r3, 8017e2a <__sflush_r+0x7e>
 8017e28:	6560      	str	r0, [r4, #84]	; 0x54
 8017e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e2c:	602f      	str	r7, [r5, #0]
 8017e2e:	2900      	cmp	r1, #0
 8017e30:	d0c9      	beq.n	8017dc6 <__sflush_r+0x1a>
 8017e32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e36:	4299      	cmp	r1, r3
 8017e38:	d002      	beq.n	8017e40 <__sflush_r+0x94>
 8017e3a:	4628      	mov	r0, r5
 8017e3c:	f7ff fb38 	bl	80174b0 <_free_r>
 8017e40:	2000      	movs	r0, #0
 8017e42:	6360      	str	r0, [r4, #52]	; 0x34
 8017e44:	e7c0      	b.n	8017dc8 <__sflush_r+0x1c>
 8017e46:	2301      	movs	r3, #1
 8017e48:	4628      	mov	r0, r5
 8017e4a:	47b0      	blx	r6
 8017e4c:	1c41      	adds	r1, r0, #1
 8017e4e:	d1c8      	bne.n	8017de2 <__sflush_r+0x36>
 8017e50:	682b      	ldr	r3, [r5, #0]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d0c5      	beq.n	8017de2 <__sflush_r+0x36>
 8017e56:	2b1d      	cmp	r3, #29
 8017e58:	d001      	beq.n	8017e5e <__sflush_r+0xb2>
 8017e5a:	2b16      	cmp	r3, #22
 8017e5c:	d101      	bne.n	8017e62 <__sflush_r+0xb6>
 8017e5e:	602f      	str	r7, [r5, #0]
 8017e60:	e7b1      	b.n	8017dc6 <__sflush_r+0x1a>
 8017e62:	89a3      	ldrh	r3, [r4, #12]
 8017e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e68:	81a3      	strh	r3, [r4, #12]
 8017e6a:	e7ad      	b.n	8017dc8 <__sflush_r+0x1c>
 8017e6c:	690f      	ldr	r7, [r1, #16]
 8017e6e:	2f00      	cmp	r7, #0
 8017e70:	d0a9      	beq.n	8017dc6 <__sflush_r+0x1a>
 8017e72:	0793      	lsls	r3, r2, #30
 8017e74:	680e      	ldr	r6, [r1, #0]
 8017e76:	bf08      	it	eq
 8017e78:	694b      	ldreq	r3, [r1, #20]
 8017e7a:	600f      	str	r7, [r1, #0]
 8017e7c:	bf18      	it	ne
 8017e7e:	2300      	movne	r3, #0
 8017e80:	eba6 0807 	sub.w	r8, r6, r7
 8017e84:	608b      	str	r3, [r1, #8]
 8017e86:	f1b8 0f00 	cmp.w	r8, #0
 8017e8a:	dd9c      	ble.n	8017dc6 <__sflush_r+0x1a>
 8017e8c:	4643      	mov	r3, r8
 8017e8e:	463a      	mov	r2, r7
 8017e90:	6a21      	ldr	r1, [r4, #32]
 8017e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e94:	4628      	mov	r0, r5
 8017e96:	47b0      	blx	r6
 8017e98:	2800      	cmp	r0, #0
 8017e9a:	dc06      	bgt.n	8017eaa <__sflush_r+0xfe>
 8017e9c:	89a3      	ldrh	r3, [r4, #12]
 8017e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ea2:	81a3      	strh	r3, [r4, #12]
 8017ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea8:	e78e      	b.n	8017dc8 <__sflush_r+0x1c>
 8017eaa:	4407      	add	r7, r0
 8017eac:	eba8 0800 	sub.w	r8, r8, r0
 8017eb0:	e7e9      	b.n	8017e86 <__sflush_r+0xda>
 8017eb2:	bf00      	nop
 8017eb4:	20400001 	.word	0x20400001

08017eb8 <_fflush_r>:
 8017eb8:	b538      	push	{r3, r4, r5, lr}
 8017eba:	690b      	ldr	r3, [r1, #16]
 8017ebc:	4605      	mov	r5, r0
 8017ebe:	460c      	mov	r4, r1
 8017ec0:	b1db      	cbz	r3, 8017efa <_fflush_r+0x42>
 8017ec2:	b118      	cbz	r0, 8017ecc <_fflush_r+0x14>
 8017ec4:	6983      	ldr	r3, [r0, #24]
 8017ec6:	b90b      	cbnz	r3, 8017ecc <_fflush_r+0x14>
 8017ec8:	f7fe ff52 	bl	8016d70 <__sinit>
 8017ecc:	4b0c      	ldr	r3, [pc, #48]	; (8017f00 <_fflush_r+0x48>)
 8017ece:	429c      	cmp	r4, r3
 8017ed0:	d109      	bne.n	8017ee6 <_fflush_r+0x2e>
 8017ed2:	686c      	ldr	r4, [r5, #4]
 8017ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ed8:	b17b      	cbz	r3, 8017efa <_fflush_r+0x42>
 8017eda:	4621      	mov	r1, r4
 8017edc:	4628      	mov	r0, r5
 8017ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ee2:	f7ff bf63 	b.w	8017dac <__sflush_r>
 8017ee6:	4b07      	ldr	r3, [pc, #28]	; (8017f04 <_fflush_r+0x4c>)
 8017ee8:	429c      	cmp	r4, r3
 8017eea:	d101      	bne.n	8017ef0 <_fflush_r+0x38>
 8017eec:	68ac      	ldr	r4, [r5, #8]
 8017eee:	e7f1      	b.n	8017ed4 <_fflush_r+0x1c>
 8017ef0:	4b05      	ldr	r3, [pc, #20]	; (8017f08 <_fflush_r+0x50>)
 8017ef2:	429c      	cmp	r4, r3
 8017ef4:	bf08      	it	eq
 8017ef6:	68ec      	ldreq	r4, [r5, #12]
 8017ef8:	e7ec      	b.n	8017ed4 <_fflush_r+0x1c>
 8017efa:	2000      	movs	r0, #0
 8017efc:	bd38      	pop	{r3, r4, r5, pc}
 8017efe:	bf00      	nop
 8017f00:	0801b8d0 	.word	0x0801b8d0
 8017f04:	0801b8f0 	.word	0x0801b8f0
 8017f08:	0801b8b0 	.word	0x0801b8b0

08017f0c <_lseek_r>:
 8017f0c:	b538      	push	{r3, r4, r5, lr}
 8017f0e:	4c07      	ldr	r4, [pc, #28]	; (8017f2c <_lseek_r+0x20>)
 8017f10:	4605      	mov	r5, r0
 8017f12:	4608      	mov	r0, r1
 8017f14:	4611      	mov	r1, r2
 8017f16:	2200      	movs	r2, #0
 8017f18:	6022      	str	r2, [r4, #0]
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	f7fd fa3c 	bl	8015398 <_lseek>
 8017f20:	1c43      	adds	r3, r0, #1
 8017f22:	d102      	bne.n	8017f2a <_lseek_r+0x1e>
 8017f24:	6823      	ldr	r3, [r4, #0]
 8017f26:	b103      	cbz	r3, 8017f2a <_lseek_r+0x1e>
 8017f28:	602b      	str	r3, [r5, #0]
 8017f2a:	bd38      	pop	{r3, r4, r5, pc}
 8017f2c:	2000a80c 	.word	0x2000a80c

08017f30 <__swhatbuf_r>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	460e      	mov	r6, r1
 8017f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f38:	2900      	cmp	r1, #0
 8017f3a:	b096      	sub	sp, #88	; 0x58
 8017f3c:	4614      	mov	r4, r2
 8017f3e:	461d      	mov	r5, r3
 8017f40:	da07      	bge.n	8017f52 <__swhatbuf_r+0x22>
 8017f42:	2300      	movs	r3, #0
 8017f44:	602b      	str	r3, [r5, #0]
 8017f46:	89b3      	ldrh	r3, [r6, #12]
 8017f48:	061a      	lsls	r2, r3, #24
 8017f4a:	d410      	bmi.n	8017f6e <__swhatbuf_r+0x3e>
 8017f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f50:	e00e      	b.n	8017f70 <__swhatbuf_r+0x40>
 8017f52:	466a      	mov	r2, sp
 8017f54:	f000 f8a4 	bl	80180a0 <_fstat_r>
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	dbf2      	blt.n	8017f42 <__swhatbuf_r+0x12>
 8017f5c:	9a01      	ldr	r2, [sp, #4]
 8017f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f66:	425a      	negs	r2, r3
 8017f68:	415a      	adcs	r2, r3
 8017f6a:	602a      	str	r2, [r5, #0]
 8017f6c:	e7ee      	b.n	8017f4c <__swhatbuf_r+0x1c>
 8017f6e:	2340      	movs	r3, #64	; 0x40
 8017f70:	2000      	movs	r0, #0
 8017f72:	6023      	str	r3, [r4, #0]
 8017f74:	b016      	add	sp, #88	; 0x58
 8017f76:	bd70      	pop	{r4, r5, r6, pc}

08017f78 <__smakebuf_r>:
 8017f78:	898b      	ldrh	r3, [r1, #12]
 8017f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f7c:	079d      	lsls	r5, r3, #30
 8017f7e:	4606      	mov	r6, r0
 8017f80:	460c      	mov	r4, r1
 8017f82:	d507      	bpl.n	8017f94 <__smakebuf_r+0x1c>
 8017f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f88:	6023      	str	r3, [r4, #0]
 8017f8a:	6123      	str	r3, [r4, #16]
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	6163      	str	r3, [r4, #20]
 8017f90:	b002      	add	sp, #8
 8017f92:	bd70      	pop	{r4, r5, r6, pc}
 8017f94:	ab01      	add	r3, sp, #4
 8017f96:	466a      	mov	r2, sp
 8017f98:	f7ff ffca 	bl	8017f30 <__swhatbuf_r>
 8017f9c:	9900      	ldr	r1, [sp, #0]
 8017f9e:	4605      	mov	r5, r0
 8017fa0:	4630      	mov	r0, r6
 8017fa2:	f7ff fad3 	bl	801754c <_malloc_r>
 8017fa6:	b948      	cbnz	r0, 8017fbc <__smakebuf_r+0x44>
 8017fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fac:	059a      	lsls	r2, r3, #22
 8017fae:	d4ef      	bmi.n	8017f90 <__smakebuf_r+0x18>
 8017fb0:	f023 0303 	bic.w	r3, r3, #3
 8017fb4:	f043 0302 	orr.w	r3, r3, #2
 8017fb8:	81a3      	strh	r3, [r4, #12]
 8017fba:	e7e3      	b.n	8017f84 <__smakebuf_r+0xc>
 8017fbc:	4b0d      	ldr	r3, [pc, #52]	; (8017ff4 <__smakebuf_r+0x7c>)
 8017fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8017fc0:	89a3      	ldrh	r3, [r4, #12]
 8017fc2:	6020      	str	r0, [r4, #0]
 8017fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fc8:	81a3      	strh	r3, [r4, #12]
 8017fca:	9b00      	ldr	r3, [sp, #0]
 8017fcc:	6163      	str	r3, [r4, #20]
 8017fce:	9b01      	ldr	r3, [sp, #4]
 8017fd0:	6120      	str	r0, [r4, #16]
 8017fd2:	b15b      	cbz	r3, 8017fec <__smakebuf_r+0x74>
 8017fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017fd8:	4630      	mov	r0, r6
 8017fda:	f000 f873 	bl	80180c4 <_isatty_r>
 8017fde:	b128      	cbz	r0, 8017fec <__smakebuf_r+0x74>
 8017fe0:	89a3      	ldrh	r3, [r4, #12]
 8017fe2:	f023 0303 	bic.w	r3, r3, #3
 8017fe6:	f043 0301 	orr.w	r3, r3, #1
 8017fea:	81a3      	strh	r3, [r4, #12]
 8017fec:	89a3      	ldrh	r3, [r4, #12]
 8017fee:	431d      	orrs	r5, r3
 8017ff0:	81a5      	strh	r5, [r4, #12]
 8017ff2:	e7cd      	b.n	8017f90 <__smakebuf_r+0x18>
 8017ff4:	08016d39 	.word	0x08016d39

08017ff8 <memmove>:
 8017ff8:	4288      	cmp	r0, r1
 8017ffa:	b510      	push	{r4, lr}
 8017ffc:	eb01 0302 	add.w	r3, r1, r2
 8018000:	d807      	bhi.n	8018012 <memmove+0x1a>
 8018002:	1e42      	subs	r2, r0, #1
 8018004:	4299      	cmp	r1, r3
 8018006:	d00a      	beq.n	801801e <memmove+0x26>
 8018008:	f811 4b01 	ldrb.w	r4, [r1], #1
 801800c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018010:	e7f8      	b.n	8018004 <memmove+0xc>
 8018012:	4283      	cmp	r3, r0
 8018014:	d9f5      	bls.n	8018002 <memmove+0xa>
 8018016:	1881      	adds	r1, r0, r2
 8018018:	1ad2      	subs	r2, r2, r3
 801801a:	42d3      	cmn	r3, r2
 801801c:	d100      	bne.n	8018020 <memmove+0x28>
 801801e:	bd10      	pop	{r4, pc}
 8018020:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018024:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018028:	e7f7      	b.n	801801a <memmove+0x22>

0801802a <__malloc_lock>:
 801802a:	4770      	bx	lr

0801802c <__malloc_unlock>:
 801802c:	4770      	bx	lr

0801802e <_realloc_r>:
 801802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018030:	4607      	mov	r7, r0
 8018032:	4614      	mov	r4, r2
 8018034:	460e      	mov	r6, r1
 8018036:	b921      	cbnz	r1, 8018042 <_realloc_r+0x14>
 8018038:	4611      	mov	r1, r2
 801803a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801803e:	f7ff ba85 	b.w	801754c <_malloc_r>
 8018042:	b922      	cbnz	r2, 801804e <_realloc_r+0x20>
 8018044:	f7ff fa34 	bl	80174b0 <_free_r>
 8018048:	4625      	mov	r5, r4
 801804a:	4628      	mov	r0, r5
 801804c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801804e:	f000 f849 	bl	80180e4 <_malloc_usable_size_r>
 8018052:	42a0      	cmp	r0, r4
 8018054:	d20f      	bcs.n	8018076 <_realloc_r+0x48>
 8018056:	4621      	mov	r1, r4
 8018058:	4638      	mov	r0, r7
 801805a:	f7ff fa77 	bl	801754c <_malloc_r>
 801805e:	4605      	mov	r5, r0
 8018060:	2800      	cmp	r0, #0
 8018062:	d0f2      	beq.n	801804a <_realloc_r+0x1c>
 8018064:	4631      	mov	r1, r6
 8018066:	4622      	mov	r2, r4
 8018068:	f7fd fa49 	bl	80154fe <memcpy>
 801806c:	4631      	mov	r1, r6
 801806e:	4638      	mov	r0, r7
 8018070:	f7ff fa1e 	bl	80174b0 <_free_r>
 8018074:	e7e9      	b.n	801804a <_realloc_r+0x1c>
 8018076:	4635      	mov	r5, r6
 8018078:	e7e7      	b.n	801804a <_realloc_r+0x1c>
	...

0801807c <_read_r>:
 801807c:	b538      	push	{r3, r4, r5, lr}
 801807e:	4c07      	ldr	r4, [pc, #28]	; (801809c <_read_r+0x20>)
 8018080:	4605      	mov	r5, r0
 8018082:	4608      	mov	r0, r1
 8018084:	4611      	mov	r1, r2
 8018086:	2200      	movs	r2, #0
 8018088:	6022      	str	r2, [r4, #0]
 801808a:	461a      	mov	r2, r3
 801808c:	f7fd f924 	bl	80152d8 <_read>
 8018090:	1c43      	adds	r3, r0, #1
 8018092:	d102      	bne.n	801809a <_read_r+0x1e>
 8018094:	6823      	ldr	r3, [r4, #0]
 8018096:	b103      	cbz	r3, 801809a <_read_r+0x1e>
 8018098:	602b      	str	r3, [r5, #0]
 801809a:	bd38      	pop	{r3, r4, r5, pc}
 801809c:	2000a80c 	.word	0x2000a80c

080180a0 <_fstat_r>:
 80180a0:	b538      	push	{r3, r4, r5, lr}
 80180a2:	4c07      	ldr	r4, [pc, #28]	; (80180c0 <_fstat_r+0x20>)
 80180a4:	2300      	movs	r3, #0
 80180a6:	4605      	mov	r5, r0
 80180a8:	4608      	mov	r0, r1
 80180aa:	4611      	mov	r1, r2
 80180ac:	6023      	str	r3, [r4, #0]
 80180ae:	f7fd f958 	bl	8015362 <_fstat>
 80180b2:	1c43      	adds	r3, r0, #1
 80180b4:	d102      	bne.n	80180bc <_fstat_r+0x1c>
 80180b6:	6823      	ldr	r3, [r4, #0]
 80180b8:	b103      	cbz	r3, 80180bc <_fstat_r+0x1c>
 80180ba:	602b      	str	r3, [r5, #0]
 80180bc:	bd38      	pop	{r3, r4, r5, pc}
 80180be:	bf00      	nop
 80180c0:	2000a80c 	.word	0x2000a80c

080180c4 <_isatty_r>:
 80180c4:	b538      	push	{r3, r4, r5, lr}
 80180c6:	4c06      	ldr	r4, [pc, #24]	; (80180e0 <_isatty_r+0x1c>)
 80180c8:	2300      	movs	r3, #0
 80180ca:	4605      	mov	r5, r0
 80180cc:	4608      	mov	r0, r1
 80180ce:	6023      	str	r3, [r4, #0]
 80180d0:	f7fd f957 	bl	8015382 <_isatty>
 80180d4:	1c43      	adds	r3, r0, #1
 80180d6:	d102      	bne.n	80180de <_isatty_r+0x1a>
 80180d8:	6823      	ldr	r3, [r4, #0]
 80180da:	b103      	cbz	r3, 80180de <_isatty_r+0x1a>
 80180dc:	602b      	str	r3, [r5, #0]
 80180de:	bd38      	pop	{r3, r4, r5, pc}
 80180e0:	2000a80c 	.word	0x2000a80c

080180e4 <_malloc_usable_size_r>:
 80180e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180e8:	1f18      	subs	r0, r3, #4
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	bfbc      	itt	lt
 80180ee:	580b      	ldrlt	r3, [r1, r0]
 80180f0:	18c0      	addlt	r0, r0, r3
 80180f2:	4770      	bx	lr

080180f4 <_init>:
 80180f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180f6:	bf00      	nop
 80180f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180fa:	bc08      	pop	{r3}
 80180fc:	469e      	mov	lr, r3
 80180fe:	4770      	bx	lr

08018100 <_fini>:
 8018100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018102:	bf00      	nop
 8018104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018106:	bc08      	pop	{r3}
 8018108:	469e      	mov	lr, r3
 801810a:	4770      	bx	lr
